[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hyperparameter Tuning Cookbook",
    "section": "",
    "text": "Preface\nThe goal of hyperparameter tuning (or hyperparameter optimization) is to optimize the hyperparameters to improve the performance of the machine or deep learning model.\nspotPython (“Sequential Parameter Optimization Toolbox in Python”) is the Python version of the well-known hyperparameter tuner SPOT, which has been developed in the R programming environment for statistical analysis for over a decade. The related open-access book is available here: Hyperparameter Tuning for Machine and Deep Learning with R—A Practical Guide.\nscikit-learn is a Python module for machine learning built on top of SciPy and is distributed under the 3-Clause BSD license. The project was started in 2007 by David Cournapeau as a Google Summer of Code project, and since then many volunteers have contributed.\nPyTorch is an optimized tensor library for deep learning using GPUs and CPUs.\nRiver is a Python library for online machine learning. It is designed to be used in real-world environments, where not all data is available at once, but streaming in."
  },
  {
    "objectID": "index.html#citation",
    "href": "index.html#citation",
    "title": "Hyperparameter Tuning Cookbook",
    "section": "Citation",
    "text": "Citation\nIf this document has been useful to you and you wish to cite it in a scientific publication, please refer to the following paper, which can be found on arXiv: https://arxiv.org/abs/2305.11930.\n@ARTICLE{bart23earxiv,\n       author = {{Bartz-Beielstein}, Thomas},\n        title = \"{PyTorch Hyperparameter Tuning -- A Tutorial for spotPython}\",\n      journal = {arXiv e-prints},\n     keywords = {Computer Science - Machine Learning, Computer Science - Artificial Intelligence, Mathematics - Numerical Analysis, 68T07, A.1, B.8.0, G.1.6, G.4, I.2.8},\n         year = 2023,\n        month = may,\n          eid = {arXiv:2305.11930},\n        pages = {arXiv:2305.11930},\n          doi = {10.48550/arXiv.2305.11930},\narchivePrefix = {arXiv},\n       eprint = {2305.11930},\n primaryClass = {cs.LG},\n       adsurl = {https://ui.adsabs.harvard.edu/abs/2023arXiv230511930B},\n      adsnote = {Provided by the SAO/NASA Astrophysics Data System}\n}"
  },
  {
    "objectID": "01_spot_intro.html#sec-spot",
    "href": "01_spot_intro.html#sec-spot",
    "title": "1  Introduction: Hyperparameter Tuning",
    "section": "1.1 The Hyperparameter Tuning Software SPOT",
    "text": "1.1 The Hyperparameter Tuning Software SPOT\nSurrogate model based optimization methods are common approaches in simulation and optimization. SPOT was developed because there is a great need for sound statistical analysis of simulation and optimization algorithms. SPOT includes methods for tuning based on classical regression and analysis of variance techniques. It presents tree-based models such as classification and regression trees and random forests as well as Bayesian optimization (Gaussian process models, also known as Kriging). Combinations of different meta-modeling approaches are possible. SPOT comes with a sophisticated surrogate model based optimization method, that can handle discrete and continuous inputs. Furthermore, any model implemented in scikit-learn can be used out-of-the-box as a surrogate in spotPython.\nSPOT implements key techniques such as exploratory fitness landscape analysis and sensitivity analysis. It can be used to understand the performance of various algorithms, while simultaneously giving insights into their algorithmic behavior. In addition, SPOT can be used as an optimizer and for automatic and interactive tuning. Details on SPOT and its use in practice are given by Bartz et al. (2022).\nA typical hyperparameter tuning process with spotPython consists of the following steps:\n\nLoading the data (training and test datasets), see Section 14.3.\nSpecification of the preprocessing model, see Section 14.4. This model is called prep_model (“preparation” or pre-processing). The information required for the hyperparameter tuning is stored in the dictionary fun_control. Thus, the information needed for the execution of the hyperparameter tuning is available in a readable form.\nSelection of the machine learning or deep learning model to be tuned, see Section 14.5. This is called the core_model. Once the core_model is defined, then the associated hyperparameters are stored in the fun_control dictionary. First, the hyperparameters of the core_model are initialized with the default values of the core_model. As default values we use the default values contained in the spotPython package for the algorithms of the torch package.\nModification of the default values for the hyperparameters used in core_model, see Section 14.6.0.1. This step is optional.\n\nnumeric parameters are modified by changing the bounds.\ncategorical parameters are modified by changing the categories (“levels”).\n\nSelection of target function (loss function) for the optimizer, see Section 14.7.5.\nCalling SPOT with the corresponding parameters, see Section 14.8.4. The results are stored in a dictionary and are available for further analysis.\nPresentation, visualization and interpretation of the results, see Section 14.10."
  },
  {
    "objectID": "01_spot_intro.html#spot-as-an-optimizer",
    "href": "01_spot_intro.html#spot-as-an-optimizer",
    "title": "1  Introduction: Hyperparameter Tuning",
    "section": "1.2 Spot as an Optimizer",
    "text": "1.2 Spot as an Optimizer\nThe spot loop consists of the following steps:\n\nInit: Build initial design \\(X\\)\nEvaluate initial design on real objective \\(f\\): \\(y = f(X)\\)\nBuild surrogate: \\(S = S(X,y)\\)\nOptimize on surrogate: \\(X_0 = \\text{optimize}(S)\\)\nEvaluate on real objective: \\(y_0 = f(X_0)\\)\nImpute (Infill) new points: \\(X = X \\cup X_0\\), \\(y = y \\cup y_0\\).\nGot 3.\n\nCentral Idea: Evaluation of the surrogate model S is much cheaper (or / and much faster) than running the real-world experiment \\(f\\). We start with a small example."
  },
  {
    "objectID": "01_spot_intro.html#example-spot-and-the-sphere-function",
    "href": "01_spot_intro.html#example-spot-and-the-sphere-function",
    "title": "1  Introduction: Hyperparameter Tuning",
    "section": "1.3 Example: Spot and the Sphere Function",
    "text": "1.3 Example: Spot and the Sphere Function\n\nimport numpy as np\nfrom math import inf\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom scipy.optimize import shgo\nfrom scipy.optimize import direct\nfrom scipy.optimize import differential_evolution\nimport matplotlib.pyplot as plt\n\n\n1.3.1 The Objective Function: Sphere\nThe spotPython package provides several classes of objective functions. We will use an analytical objective function, i.e., a function that can be described by a (closed) formula: \\[f(x) = x^2\\]\n\nfun = analytical().fun_sphere\n\nWe can apply the function fun to input values and plot the result:\n\nx = np.linspace(-1,1,100).reshape(-1,1)\ny = fun(x)\nplt.figure()\nplt.plot(x, y, \"k\")\nplt.show()\n\n\n\n\n\nspot_0 = spot.Spot(fun=fun,\n                   lower = np.array([-1]),\n                   upper = np.array([1]))\n\n\nspot_0.run()\n\n&lt;spotPython.spot.spot.Spot at 0x1612aba00&gt;\n\n\n\nspot_0.print_results()\n\nmin y: 5.69019918867849e-10\nx0: 2.3854138401288967e-05\n\n\n[['x0', 2.3854138401288967e-05]]\n\n\n\nspot_0.plot_progress(log_y=True)\n\n\n\n\n\nspot_0.plot_model()"
  },
  {
    "objectID": "01_spot_intro.html#spot-parameters-fun_evals-init_size-and-show_models",
    "href": "01_spot_intro.html#spot-parameters-fun_evals-init_size-and-show_models",
    "title": "1  Introduction: Hyperparameter Tuning",
    "section": "1.4 Spot Parameters: fun_evals, init_size and show_models",
    "text": "1.4 Spot Parameters: fun_evals, init_size and show_models\nWe will modify three parameters:\n\nThe number of function evaluations (fun_evals)\nThe size of the initial design (init_size)\nThe parameter show_models, which visualizes the search process for 1-dim functions.\n\nThe full list of the Spot parameters is shown in the Help System and in the notebook spot_doc.ipynb.\n\nspot_1 = spot.Spot(fun=fun,\n                   lower = np.array([-1]),\n                   upper = np.array([2]),\n                   fun_evals= 10,\n                   seed=123,\n                   show_models=True,\n                   design_control={\"init_size\": 9})\nspot_1.run()\n\n\n\n\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x1612a9930&gt;"
  },
  {
    "objectID": "01_spot_intro.html#print-the-results",
    "href": "01_spot_intro.html#print-the-results",
    "title": "1  Introduction: Hyperparameter Tuning",
    "section": "1.5 Print the Results",
    "text": "1.5 Print the Results\n\nspot_1.print_results()\n\nmin y: 3.6858846844978905e-07\nx0: -0.0006071148725321997\n\n\n[['x0', -0.0006071148725321997]]"
  },
  {
    "objectID": "01_spot_intro.html#show-the-progress",
    "href": "01_spot_intro.html#show-the-progress",
    "title": "1  Introduction: Hyperparameter Tuning",
    "section": "1.6 Show the Progress",
    "text": "1.6 Show the Progress\n\nspot_1.plot_progress()\n\n\n\n\n\n\n\n\nBartz, Eva, Thomas Bartz-Beielstein, Martin Zaefferer, and Olaf Mersmann, eds. 2022. Hyperparameter Tuning for Machine and Deep Learning with R - A Practical Guide. Springer.\n\n\nBartz-Beielstein, Thomas. 2023. “PyTorch Hyperparameter Tuning with SPOT: Comparison with Ray Tuner and Default Hyperparameters on CIFAR10.” https://github.com/sequential-parameter-optimization/spotPython/blob/main/notebooks/14_spot_ray_hpt_torch_cifar10.ipynb.\n\n\nBartz-Beielstein, Thomas, Jürgen Branke, Jörn Mehnen, and Olaf Mersmann. 2014. “Evolutionary Algorithms.” Wiley Interdisciplinary Reviews: Data Mining and Knowledge Discovery 4 (3): 178–95.\n\n\nBartz-Beielstein, Thomas, Christian Lasarczyk, and Mike Preuss. 2005. “Sequential Parameter Optimization.” In Proceedings 2005 Congress on Evolutionary Computation (CEC’05), Edinburgh, Scotland, edited by B McKay et al., 773–80. Piscataway NJ: IEEE Press.\n\n\nLewis, R M, V Torczon, and M W Trosset. 2000. “Direct search methods: Then and now.” Journal of Computational and Applied Mathematics 124 (1–2): 191–207.\n\n\nLi, Lisha, Kevin Jamieson, Giulia DeSalvo, Afshin Rostamizadeh, and Ameet Talwalkar. 2016. “Hyperband: A Novel Bandit-Based Approach to Hyperparameter Optimization.” arXiv e-Prints, March, arXiv:1603.06560.\n\n\nMeignan, David, Sigrid Knust, Jean-Marc Frayet, Gilles Pesant, and Nicolas Gaud. 2015. “A Review and Taxonomy of Interactive Optimization Methods in Operations Research.” ACM Transactions on Interactive Intelligent Systems, September.\n\n\nPyTorch. 2023. “Hyperparameter Tuning with Ray Tune.” https://pytorch.org/tutorials/beginner/hyperparameter_tuning_tutorial.html."
  },
  {
    "objectID": "01_spot_intro.html#footnotes",
    "href": "01_spot_intro.html#footnotes",
    "title": "1  Introduction: Hyperparameter Tuning",
    "section": "",
    "text": "https://github.com/sequential-parameter-optimization↩︎"
  },
  {
    "objectID": "02_spot_multidim.html#example-spot-and-the-3-dim-sphere-function",
    "href": "02_spot_multidim.html#example-spot-and-the-3-dim-sphere-function",
    "title": "2  Multi-dimensional Functions",
    "section": "2.1 Example: Spot and the 3-dim Sphere Function",
    "text": "2.1 Example: Spot and the 3-dim Sphere Function\n\nimport numpy as np\nfrom math import inf\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom scipy.optimize import shgo\nfrom scipy.optimize import direct\nfrom scipy.optimize import differential_evolution\nimport matplotlib.pyplot as plt\nimport pylab\nfrom numpy import append, ndarray, multiply, isinf, linspace, meshgrid, ravel\nfrom numpy import array\n\n\n2.1.1 The Objective Function: 3-dim Sphere\n\nThe spotPython package provides several classes of objective functions.\nWe will use an analytical objective function, i.e., a function that can be described by a (closed) formula: \\[f(x) = \\sum_i^n x_i^2 \\]\nHere we will use \\(n=3\\).\n\n\nfun = analytical().fun_sphere\n\n\nThe size of the lower bound vector determines the problem dimension.\nHere we will use np.array([-1, -1, -1]), i.e., a three-dim function.\nWe will use three different theta values (one for each dimension), i.e., we set\nsurrogate_control={\"n_theta\": 3}.\n\n\nspot_3 = spot.Spot(fun=fun,\n                   lower = -1.0*np.ones(3),\n                   upper = np.ones(3),\n                   var_name=[\"Pressure\", \"Temp\", \"Lambda\"],\n                   show_progress=True,\n                   surrogate_control={\"n_theta\": 3})\n\nspot_3.run()\n\nspotPython tuning: 0.03443399805488846 [#######---] 73.33% \n\n\nspotPython tuning: 0.03134895672225177 [########--] 80.00% \n\n\nspotPython tuning: 0.0009630555620661592 [#########-] 86.67% \n\n\nspotPython tuning: 8.567364874637509e-05 [#########-] 93.33% \n\n\nspotPython tuning: 6.0300780324366926e-05 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x107c87550&gt;\n\n\n\n\n2.1.2 Results\n\nspot_3.print_results()\n\nmin y: 6.0300780324366926e-05\nPressure: 0.00514742089151478\nTemp: 0.001954003740617489\nLambda: 0.005476012040857559\n\n\n[['Pressure', 0.00514742089151478],\n ['Temp', 0.001954003740617489],\n ['Lambda', 0.005476012040857559]]\n\n\n\nspot_3.plot_progress()\n\n\n\n\n\n\n2.1.3 A Contour Plot\n\nWe can select two dimensions, say \\(i=0\\) and \\(j=1\\), and generate a contour plot as follows.\n\nNote: We have specified identical min_z and max_z values to generate comparable plots!\n\n\n\nspot_3.plot_contour(i=0, j=1, min_z=0, max_z=2.25)\n\n\n\n\n\nIn a similar manner, we can plot dimension \\(i=0\\) and \\(j=2\\):\n\n\nspot_3.plot_contour(i=0, j=2, min_z=0, max_z=2.25)\n\n\n\n\n\nThe final combination is \\(i=1\\) and \\(j=2\\):\n\n\nspot_3.plot_contour(i=1, j=2, min_z=0, max_z=2.25)\n\n\n\n\n\nThe three plots look very similar, because the fun_sphere is symmetric.\nThis can also be seen from the variable importance:\n\n\nspot_3.print_importance()\n\nPressure:  100.0\nTemp:  99.69922253450551\nLambda:  93.68147774373058\n\n\n[['Pressure', 100.0],\n ['Temp', 99.69922253450551],\n ['Lambda', 93.68147774373058]]"
  },
  {
    "objectID": "02_spot_multidim.html#conclusion",
    "href": "02_spot_multidim.html#conclusion",
    "title": "2  Multi-dimensional Functions",
    "section": "2.2 Conclusion",
    "text": "2.2 Conclusion\nBased on this quick analysis, we can conclude that all three dimensions are equally important (as expected, because the analytical function is known)."
  },
  {
    "objectID": "02_spot_multidim.html#exercises",
    "href": "02_spot_multidim.html#exercises",
    "title": "2  Multi-dimensional Functions",
    "section": "2.3 Exercises",
    "text": "2.3 Exercises\n\nImportant:\n\nResults from these exercises should be added to this document, i.e., you should submit an updated version of this notebook.\nPlease combine your results using this notebook.\nOnly one notebook from each group!\nPresentation is based on this notebook. No addtional slides are required!\nspotPython version 0.16.11 (or greater) is required\n\n\n\n2.3.1 The Three Dimensional fun_cubed\n\nThe input dimension is 3. The search range is \\(-1 \\leq x \\leq 1\\) for all dimensions.\nGenerate contour plots\nCalculate the variable importance.\nDiscuss the variable importance:\n\nAre all variables equally important?\nIf not:\n\nWhich is the most important variable?\nWhich is the least important variable?\n\n\n\n\n\n2.3.2 The Ten Dimensional fun_wing_wt\n\nThe input dimension is 10. The search range is \\(0 \\leq x \\leq 1\\) for all dimensions.\nCalculate the variable importance.\nDiscuss the variable importance:\n\nAre all variables equally important?\nIf not:\n\nWhich is the most important variable?\nWhich is the least important variable?\n\nGenerate contour plots for the three most important variables. Do they confirm your selection?\n\n\n\n\n2.3.3 The Three Dimensional fun_runge\n\nThe input dimension is 3. The search range is \\(-5 \\leq x \\leq 5\\) for all dimensions.\nGenerate contour plots\nCalculate the variable importance.\nDiscuss the variable importance:\n\nAre all variables equally important?\nIf not:\n\nWhich is the most important variable?\nWhich is the least important variable?\n\n\n\n\n\n2.3.4 The Three Dimensional fun_linear\n\nThe input dimension is 3. The search range is \\(-5 \\leq x \\leq 5\\) for all dimensions.\nGenerate contour plots\nCalculate the variable importance.\nDiscuss the variable importance:\n\nAre all variables equally important?\nIf not:\n\nWhich is the most important variable?\nWhich is the least important variable?"
  },
  {
    "objectID": "03_spot_anisotropic.html#example-isotropic-spot-surrogate-and-the-2-dim-sphere-function",
    "href": "03_spot_anisotropic.html#example-isotropic-spot-surrogate-and-the-2-dim-sphere-function",
    "title": "3  Isotropic and Anisotropic Kriging",
    "section": "3.1 Example: Isotropic Spot Surrogate and the 2-dim Sphere Function",
    "text": "3.1 Example: Isotropic Spot Surrogate and the 2-dim Sphere Function\n\nimport numpy as np\nfrom math import inf\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom scipy.optimize import shgo\nfrom scipy.optimize import direct\nfrom scipy.optimize import differential_evolution\nimport matplotlib.pyplot as plt\n\n\n3.1.1 The Objective Function: 2-dim Sphere\n\nThe spotPython package provides several classes of objective functions.\nWe will use an analytical objective function, i.e., a function that can be described by a (closed) formula: \\[f(x, y) = x^2 + y^2\\]\n\n\nfun = analytical().fun_sphere\nfun_control = {\"sigma\": 0,\n               \"seed\": 123}\n\n\nThe size of the lower bound vector determines the problem dimension.\nHere we will use np.array([-1, -1]), i.e., a two-dim function.\n\n\nspot_2 = spot.Spot(fun=fun,\n                   lower = np.array([-1, -1]),\n                   upper = np.array([1, 1]))\n\nspot_2.run()\n\n&lt;spotPython.spot.spot.Spot at 0x15117e950&gt;\n\n\n\n\n3.1.2 Results\n\nspot_2.print_results()\n\nmin y: 2.020789135198605e-05\nx0: 0.0015751963468338146\nx1: 0.004210302580683181\n\n\n[['x0', 0.0015751963468338146], ['x1', 0.004210302580683181]]\n\n\n\nspot_2.plot_progress(log_y=True)"
  },
  {
    "objectID": "03_spot_anisotropic.html#example-with-anisotropic-kriging",
    "href": "03_spot_anisotropic.html#example-with-anisotropic-kriging",
    "title": "3  Isotropic and Anisotropic Kriging",
    "section": "3.2 Example With Anisotropic Kriging",
    "text": "3.2 Example With Anisotropic Kriging\n\nThe default parameter setting of spotPython’s Kriging surrogate uses the same theta value for every dimension.\nThis is referred to as “using an isotropic kernel”.\nIf different theta values are used for each dimension, then an anisotropic kernel is used\nTo enable anisotropic models in spotPython, the number of theta values should be larger than one.\nWe can use surrogate_control={\"n_theta\": 2} to enable this behavior (2 is the problem dimension).\n\n\nspot_2_anisotropic = spot.Spot(fun=fun,\n                   lower = np.array([-1, -1]),\n                   upper = np.array([1, 1]),\n                   surrogate_control={\"n_theta\": 2})\nspot_2_anisotropic.run()\n\n&lt;spotPython.spot.spot.Spot at 0x153677520&gt;\n\n\n\n3.2.1 Taking a Look at the theta Values\n\nWe can check, whether one or several theta values were used.\nThe theta values from the surrogate can be printed as follows:\n\n\nspot_2_anisotropic.surrogate.theta\n\narray([0.24805857, 0.35713614])\n\n\n\nSince the surrogate from the isotropic setting was stored as spot_2, we can also take a look at the theta value from this model:\n\n\nspot_2.surrogate.theta\n\narray([0.26287446])\n\n\n\nNext, the search progress of the optimization with the anisotropic model can be visualized:\n\n\nspot_2_anisotropic.plot_progress(log_y=True)\n\n\n\n\n\nspot_2_anisotropic.print_results()\n\nmin y: 3.898914658670152e-06\nx0: -0.0008031859004420657\nx1: -0.0018038312193775835\n\n\n[['x0', -0.0008031859004420657], ['x1', -0.0018038312193775835]]\n\n\n\nspot_2_anisotropic.surrogate.plot()"
  },
  {
    "objectID": "03_spot_anisotropic.html#exercises",
    "href": "03_spot_anisotropic.html#exercises",
    "title": "3  Isotropic and Anisotropic Kriging",
    "section": "3.3 Exercises",
    "text": "3.3 Exercises\n\n3.3.1 fun_branin\n\nDescribe the function.\n\nThe input dimension is 2. The search range is \\(-5 \\leq x_1 \\leq 10\\) and \\(0 \\leq x_2 \\leq 15\\).\n\nCompare the results from spotPython run a) with isotropic and b) anisotropic surrogate models.\nModify the termination criterion: instead of the number of evaluations (which is specified via fun_evals), the time should be used as the termination criterion. This can be done as follows (max_time=1 specifies a run time of one minute):\n\n\nfun_evals=inf,\nmax_time=1,\n\n\n\n3.3.2 fun_sin_cos\n\nDescribe the function.\n\nThe input dimension is 2. The search range is \\(-2\\pi \\leq x_1 \\leq 2\\pi\\) and \\(-2\\pi \\leq x_2 \\leq 2\\pi\\).\n\nCompare the results from spotPython run a) with isotropic and b) anisotropic surrogate models.\nModify the termination criterion (max_time instead of fun_evals) as described for fun_branin.\n\n\n\n3.3.3 fun_runge\n\nDescribe the function.\n\nThe input dimension is 2. The search range is \\(-5 \\leq x_1 \\leq 5\\) and \\(-5 \\leq x_2 \\leq 5\\).\n\nCompare the results from spotPython run a) with isotropic and b) anisotropic surrogate models.\nModify the termination criterion (max_time instead of fun_evals) as described for fun_branin.\n\n\n\n3.3.4 fun_wingwt\n\nDescribe the function.\n\nThe input dimension is 10. The search ranges are between 0 and 1 (values are mapped internally to their natural bounds).\n\nCompare the results from spotPython run a) with isotropic and b) anisotropic surrogate models.\nModify the termination criterion (max_time instead of fun_evals) as described for fun_branin."
  },
  {
    "objectID": "04_spot_sklearn_surrogate.html#example-branin-function-with-spotpythons-internal-kriging-surrogate",
    "href": "04_spot_sklearn_surrogate.html#example-branin-function-with-spotpythons-internal-kriging-surrogate",
    "title": "4  Using sklearn Surrogates in spotPython",
    "section": "4.1 Example: Branin Function with spotPython’s Internal Kriging Surrogate",
    "text": "4.1 Example: Branin Function with spotPython’s Internal Kriging Surrogate\n\n4.1.1 The Objective Function Branin\n\nThe spotPython package provides several classes of objective functions.\nWe will use an analytical objective function, i.e., a function that can be described by a (closed) formula.\nHere we will use the Branin function:\n  y = a * (x2 - b * x1**2 + c * x1 - r) ** 2 + s * (1 - t) * np.cos(x1) + s,\n  where values of a, b, c, r, s and t are: a = 1, b = 5.1 / (4*pi**2),\n  c = 5 / pi, r = 6, s = 10 and t = 1 / (8*pi).\nIt has three global minima:\n  f(x) = 0.397887 at (-pi, 12.275), (pi, 2.275), and (9.42478, 2.475).\n\n\nfrom spotPython.fun.objectivefunctions import analytical\nlower = np.array([-5,-0])\nupper = np.array([10,15])\n\n\nfun = analytical().fun_branin\n\n\n\n4.1.2 Running the surrogate model based optimizer Spot:\n\nspot_2 = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = 20,\n                   max_time = inf,\n                   seed=123,\n                   design_control={\"init_size\": 10})\n\n\nspot_2.run()\n\n&lt;spotPython.spot.spot.Spot at 0x15f24e620&gt;\n\n\n\n\n4.1.3 Print the Results\n\nspot_2.print_results()\n\nmin y: 0.3982296851228586\nx0: 3.135563584477711\nx1: 2.2926607128616965\n\n\n[['x0', 3.135563584477711], ['x1', 2.2926607128616965]]\n\n\n\n\n4.1.4 Show the Progress and the Surrogate\n\nspot_2.plot_progress(log_y=True)\n\n\n\n\n\nspot_2.surrogate.plot()"
  },
  {
    "objectID": "04_spot_sklearn_surrogate.html#example-using-surrogates-from-scikit-learn",
    "href": "04_spot_sklearn_surrogate.html#example-using-surrogates-from-scikit-learn",
    "title": "4  Using sklearn Surrogates in spotPython",
    "section": "4.2 Example: Using Surrogates From scikit-learn",
    "text": "4.2 Example: Using Surrogates From scikit-learn\n\nDefault is the spotPython (i.e., the internal) kriging surrogate.\nIt can be called explicitely and passed to Spot.\n\n\nfrom spotPython.build.kriging import Kriging\nS_0 = Kriging(name='kriging', seed=123)\n\n\nAlternatively, models from scikit-learn can be selected, e.g., Gaussian Process, RBFs, Regression Trees, etc.\n\n\n# Needed for the sklearn surrogates:\nfrom sklearn.gaussian_process import GaussianProcessRegressor\nfrom sklearn.gaussian_process.kernels import RBF\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import linear_model\nfrom sklearn import tree\nimport pandas as pd\n\n\nHere are some additional models that might be useful later:\n\n\nS_Tree = DecisionTreeRegressor(random_state=0)\nS_LM = linear_model.LinearRegression()\nS_Ridge = linear_model.Ridge()\nS_RF = RandomForestRegressor(max_depth=2, random_state=0)\n\n\n4.2.1 GaussianProcessRegressor as a Surrogate\n\nTo use a Gaussian Process model from sklearn, that is similar to spotPython’s Kriging, we can proceed as follows:\n\n\nkernel = 1 * RBF(length_scale=1.0, length_scale_bounds=(1e-2, 1e2))\nS_GP = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)\n\n\nThe scikit-learn GP model S_GP is selected for Spot as follows:\nsurrogate = S_GP\nWe can check the kind of surogate model with the command isinstance:\n\n\nisinstance(S_GP, GaussianProcessRegressor)\n\nTrue\n\n\n\nisinstance(S_0, Kriging)\n\nTrue\n\n\n\nSimilar to the Spot run with the internal Kriging model, we can call the run with the scikit-learn surrogate:\n\n\nfun = analytical(seed=123).fun_branin\nspot_2_GP = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = 20,\n                   seed=123,\n                   design_control={\"init_size\": 10},\n                   surrogate = S_GP)\nspot_2_GP.run()\n\n&lt;spotPython.spot.spot.Spot at 0x1616e0ac0&gt;\n\n\n\nspot_2_GP.plot_progress()\n\n\n\n\n\nspot_2_GP.print_results()\n\nmin y: 0.39811199453808754\nx0: 3.1483735990004593\nx1: 2.2716873318604973\n\n\n[['x0', 3.1483735990004593], ['x1', 2.2716873318604973]]"
  },
  {
    "objectID": "04_spot_sklearn_surrogate.html#example-one-dimensional-sphere-function-with-spotpythons-kriging",
    "href": "04_spot_sklearn_surrogate.html#example-one-dimensional-sphere-function-with-spotpythons-kriging",
    "title": "4  Using sklearn Surrogates in spotPython",
    "section": "4.3 Example: One-dimensional Sphere Function With spotPython’s Kriging",
    "text": "4.3 Example: One-dimensional Sphere Function With spotPython’s Kriging\n\nIn this example, we will use an one-dimensional function, which allows us to visualize the optimization process.\n\nshow_models= True is added to the argument list.\n\n\n\nfrom spotPython.fun.objectivefunctions import analytical\nlower = np.array([-1])\nupper = np.array([1])\nfun = analytical(seed=123).fun_sphere\n\n\nspot_1 = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = 10,\n                   max_time = inf,\n                   seed=123,\n                   show_models= True,\n                   tolerance_x = np.sqrt(np.spacing(1)),\n                   design_control={\"init_size\": 3},)\nspot_1.run()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x16323ce20&gt;\n\n\n\n4.3.1 Results\n\nspot_1.print_results()\n\nmin y: 2.7998468612116063e-08\nx0: -0.0001673274293477195\n\n\n[['x0', -0.0001673274293477195]]\n\n\n\nspot_1.plot_progress(log_y=True)\n\n\n\n\n\nThe method plot_model plots the final surrogate:\n\n\nspot_1.plot_model()"
  },
  {
    "objectID": "04_spot_sklearn_surrogate.html#example-sklearn-model-gaussianprocess",
    "href": "04_spot_sklearn_surrogate.html#example-sklearn-model-gaussianprocess",
    "title": "4  Using sklearn Surrogates in spotPython",
    "section": "4.4 Example: Sklearn Model GaussianProcess",
    "text": "4.4 Example: Sklearn Model GaussianProcess\n\nThis example visualizes the search process on the GaussianProcessRegression surrogate from sklearn.\nTherefore surrogate = S_GP is added to the argument list.\n\n\nfun = analytical(seed=123).fun_sphere\nspot_1_GP = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = 10,\n                   max_time = inf,\n                   seed=123,\n                   show_models= True,\n                   design_control={\"init_size\": 3},\n                   surrogate = S_GP)\nspot_1_GP.run()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x16192a380&gt;\n\n\n\nspot_1_GP.print_results()\n\nmin y: 1.739054248394747e-09\nx0: -4.170196935870951e-05\n\n\n[['x0', -4.170196935870951e-05]]\n\n\n\nspot_1_GP.plot_progress(log_y=True)\n\n\n\n\n\nspot_1_GP.plot_model()"
  },
  {
    "objectID": "04_spot_sklearn_surrogate.html#exercises",
    "href": "04_spot_sklearn_surrogate.html#exercises",
    "title": "4  Using sklearn Surrogates in spotPython",
    "section": "4.5 Exercises",
    "text": "4.5 Exercises\n\n4.5.1 DecisionTreeRegressor\n\nDescribe the surrogate model.\nUse the surrogate as the model for optimization.\n\n\n\n4.5.2 RandomForestRegressor\n\nDescribe the surrogate model.\nUse the surrogate as the model for optimization.\n\n\n\n4.5.3 linear_model.LinearRegression\n\nDescribe the surrogate model.\nUse the surrogate as the model for optimization.\n\n\n\n4.5.4 linear_model.Ridge\n\nDescribe the surrogate model.\nUse the surrogate as the model for optimization."
  },
  {
    "objectID": "04_spot_sklearn_surrogate.html#exercise-2",
    "href": "04_spot_sklearn_surrogate.html#exercise-2",
    "title": "4  Using sklearn Surrogates in spotPython",
    "section": "4.6 Exercise 2",
    "text": "4.6 Exercise 2\n\nCompare the performance of the five different surrogates on both objective functions:\n\nspotPython’s internal Kriging\nDecisionTreeRegressor\nRandomForestRegressor\nlinear_model.LinearRegression\nlinear_model.Ridge"
  },
  {
    "objectID": "05_spot_sklearn_optimization.html#the-objective-function-branin",
    "href": "05_spot_sklearn_optimization.html#the-objective-function-branin",
    "title": "5  Sequential Parameter Optimization: Using scipy Optimizers",
    "section": "5.1 The Objective Function Branin",
    "text": "5.1 The Objective Function Branin\n\nThe spotPython package provides several classes of objective functions.\nWe will use an analytical objective function, i.e., a function that can be described by a (closed) formula.\nHere we will use the Branin function. The 2-dim Branin function is\n\\[y = a * (x2 - b * x1**2 + c * x1 - r) ** 2 + s * (1 - t) * cos(x1) + s,\\] where values of a, b, c, r, s and t are: \\(a = 1, b = 5.1 / (4*pi**2), c = 5 / pi, r = 6, s = 10\\) and \\(t = 1 / (8*pi)\\).\nIt has three global minima:\n\\(f(x) = 0.397887\\) at \\((-\\pi, 12.275)\\), \\((\\pi, 2.275)\\), and \\((9.42478, 2.475)\\).\nInput Domain: This function is usually evaluated on the square x1 in [-5, 10] x x2 in [0, 15].\n\n\nfrom spotPython.fun.objectivefunctions import analytical\nlower = np.array([-5,-0])\nupper = np.array([10,15])\n\n\nfun = analytical(seed=123).fun_branin"
  },
  {
    "objectID": "05_spot_sklearn_optimization.html#the-optimizer",
    "href": "05_spot_sklearn_optimization.html#the-optimizer",
    "title": "5  Sequential Parameter Optimization: Using scipy Optimizers",
    "section": "5.2 The Optimizer",
    "text": "5.2 The Optimizer\n\nDifferential Evalution from the scikit.optimize package, see https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.differential_evolution.html#scipy.optimize.differential_evolution is the default optimizer for the search on the surrogate.\nOther optimiers that are available in spotPython:\n\ndual_annealing\ndirect\nshgo\nbasinhopping, see https://docs.scipy.org/doc/scipy/reference/optimize.html#global-optimization.\n\nThese can be selected as follows:\nsurrogate_control = \"model_optimizer\": differential_evolution\nWe will use differential_evolution.\nThe optimizer can use 1000 evaluations. This value will be passed to the differential_evolution method, which has the argument maxiter (int). It defines the maximum number of generations over which the entire differential evolution population is evolved, see https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.differential_evolution.html#scipy.optimize.differential_evolution\n\n\nspot_de = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = 20,\n                   max_time = inf,\n                   seed=125,\n                   noise=False,\n                   show_models= False,\n                   design_control={\"init_size\": 10},\n                   surrogate_control={\"n_theta\": 2,\n                                      \"model_optimizer\": differential_evolution,\n                                      \"model_fun_evals\": 1000,\n                                      })\nspot_de.run()\n\n&lt;spotPython.spot.spot.Spot at 0x103287610&gt;"
  },
  {
    "objectID": "05_spot_sklearn_optimization.html#print-the-results",
    "href": "05_spot_sklearn_optimization.html#print-the-results",
    "title": "5  Sequential Parameter Optimization: Using scipy Optimizers",
    "section": "5.3 Print the Results",
    "text": "5.3 Print the Results\n\nspot_de.print_results()\n\nmin y: 0.39955172035863207\nx0: -3.1571400084867083\nx1: 12.289948119375225\n\n\n[['x0', -3.1571400084867083], ['x1', 12.289948119375225]]"
  },
  {
    "objectID": "05_spot_sklearn_optimization.html#show-the-progress",
    "href": "05_spot_sklearn_optimization.html#show-the-progress",
    "title": "5  Sequential Parameter Optimization: Using scipy Optimizers",
    "section": "5.4 Show the Progress",
    "text": "5.4 Show the Progress\n\nspot_de.plot_progress(log_y=True)\n\n\n\n\n\nspot_de.surrogate.plot()"
  },
  {
    "objectID": "05_spot_sklearn_optimization.html#exercises",
    "href": "05_spot_sklearn_optimization.html#exercises",
    "title": "5  Sequential Parameter Optimization: Using scipy Optimizers",
    "section": "5.5 Exercises",
    "text": "5.5 Exercises\n\n5.5.1 dual_annealing\n\nDescribe the optimization algorithm\nUse the algorithm as an optimizer on the surrogate\n\n\n\n5.5.2 direct\n\nDescribe the optimization algorithm\nUse the algorithm as an optimizer on the surrogate\n\n\n\n5.5.3 shgo\n\nDescribe the optimization algorithm\nUse the algorithm as an optimizer on the surrogate\n\n\n\n5.5.4 basinhopping\n\nDescribe the optimization algorithm\nUse the algorithm as an optimizer on the surrogate\n\n\n\n5.5.5 Performance Comparison\nCompare the performance and run time of the 5 different optimizers:\n* `differential_evolution`\n* `dual_annealing`\n*  `direct`\n* `shgo`\n* `basinhopping`.\nThe Branin function has three global minima:\n\n\\(f(x) = 0.397887\\) at\n\n\\((-\\pi, 12.275)\\),\n\\((\\pi, 2.275)\\), and\n\\((9.42478, 2.475)\\).\n\n\nWhich optima are found by the optimizers? Does the seed change this behavior?"
  },
  {
    "objectID": "06_spot_gaussian.html#gaussian-processes-regression-basic-introductory-scikit-learn-example",
    "href": "06_spot_gaussian.html#gaussian-processes-regression-basic-introductory-scikit-learn-example",
    "title": "6  Sequential Parameter Optimization: Gaussian Process Models",
    "section": "6.1 Gaussian Processes Regression: Basic Introductory scikit-learn Example",
    "text": "6.1 Gaussian Processes Regression: Basic Introductory scikit-learn Example\n\nThis is the example from scikit-learn: https://scikit-learn.org/stable/auto_examples/gaussian_process/plot_gpr_noisy_targets.html\nAfter fitting our model, we see that the hyperparameters of the kernel have been optimized.\nNow, we will use our kernel to compute the mean prediction of the full dataset and plot the 95% confidence interval.\n\n\n6.1.1 Train and Test Data\n\nX = np.linspace(start=0, stop=10, num=1_000).reshape(-1, 1)\ny = np.squeeze(X * np.sin(X))\nrng = np.random.RandomState(1)\ntraining_indices = rng.choice(np.arange(y.size), size=6, replace=False)\nX_train, y_train = X[training_indices], y[training_indices]\n\n\n\n6.1.2 Building the Surrogate With Sklearn\n\nThe model building with sklearn consisits of three steps:\n\nInstantiating the model, then\nfitting the model (using fit), and\nmaking predictions (using predict)\n\n\n\nkernel = 1 * RBF(length_scale=1.0, length_scale_bounds=(1e-2, 1e2))\ngaussian_process = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)\ngaussian_process.fit(X_train, y_train)\nmean_prediction, std_prediction = gaussian_process.predict(X, return_std=True)\n\n\n\n6.1.3 Plotting the SklearnModel\n\nplt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, mean_prediction, label=\"Mean prediction\")\nplt.fill_between(\n    X.ravel(),\n    mean_prediction - 1.96 * std_prediction,\n    mean_prediction + 1.96 * std_prediction,\n    alpha=0.5,\n    label=r\"95% confidence interval\",\n)\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"sk-learn Version: Gaussian process regression on noise-free dataset\")\n\n\n\n\n\n\n6.1.4 The spotPython Version\n\nThe spotPython version is very similar:\n\nInstantiating the model, then\nfitting the model and\nmaking predictions (using predict).\n\n\n\nS = Kriging(name='kriging',  seed=123, log_level=50, cod_type=\"norm\")\nS.fit(X_train, y_train)\nS_mean_prediction, S_std_prediction, S_ei = S.predict(X, return_val=\"all\")\n\n\nplt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, S_mean_prediction, label=\"Mean prediction\")\nplt.fill_between(\n    X.ravel(),\n    S_mean_prediction - 1.96 * S_std_prediction,\n    S_mean_prediction + 1.96 * S_std_prediction,\n    alpha=0.5,\n    label=r\"95% confidence interval\",\n)\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"spotPython Version: Gaussian process regression on noise-free dataset\")\n\n\n\n\n\n\n6.1.5 Visualizing the Differences Between the spotPython and the sklearn Model Fits\n\nplt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, S_mean_prediction, label=\"spotPython Mean prediction\")\nplt.plot(X, mean_prediction, label=\"Sklearn Mean Prediction\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Comparing Mean Predictions\")"
  },
  {
    "objectID": "06_spot_gaussian.html#exercises",
    "href": "06_spot_gaussian.html#exercises",
    "title": "6  Sequential Parameter Optimization: Gaussian Process Models",
    "section": "6.2 Exercises",
    "text": "6.2 Exercises\n\n6.2.1 Schonlau Example Function\n\nThe Schonlau Example Function is based on sample points only (there is no analytical function description available):\n\n\nX = np.linspace(start=0, stop=13, num=1_000).reshape(-1, 1)\nX_train = np.array([1., 2., 3., 4., 12.]).reshape(-1,1)\ny_train = np.array([0., -1.75, -2, -0.5, 5.])\n\n\nDescribe the function.\nCompare the two models that were build using the spotPython and the sklearn surrogate.\nNote: Since there is no analytical function available, you might be interested in adding some points and describe the effects.\n\n\n\n6.2.2 Forrester Example Function\n\nThe Forrester Example Function is defined as follows:\nf(x) = (6x- 2)^2 sin(12x-4) for x in [0,1].\nData points are generated as follows:\n\n\nX = np.linspace(start=-0.5, stop=1.5, num=1_000).reshape(-1, 1)\nX_train = np.array([0.0, 0.175, 0.225, 0.3, 0.35, 0.375, 0.5,1]).reshape(-1,1)\nfun = analytical().fun_forrester\nfun_control = {\"sigma\": 0.1,\n               \"seed\": 123}\ny = fun(X, fun_control=fun_control)\ny_train = fun(X_train, fun_control=fun_control)\n\n\nDescribe the function.\nCompare the two models that were build using the spotPython and the sklearn surrogate.\nNote: Modify the noise level (\"sigma\"), e.g., use a value of 0.2, and compare the two models.\n\n\nfun_control = {\"sigma\": 0.2}\n\n\n\n6.2.3 fun_runge Function (1-dim)\n\nThe Runge function is defined as follows:\nf(x) = 1/ (1 + sum(x_i))^2\nData points are generated as follows:\n\n\ngen = spacefilling(1)\nrng = np.random.RandomState(1)\nlower = np.array([-10])\nupper = np.array([10])\nfun = analytical().fun_runge\nfun_control = {\"sigma\": 0.025,\n               \"seed\": 123}\nX_train = gen.scipy_lhd(10, lower=lower, upper = upper).reshape(-1,1)\ny_train = fun(X, fun_control=fun_control)\nX = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\ny = fun(X, fun_control=fun_control)\n\n\nDescribe the function.\nCompare the two models that were build using the spotPython and the sklearn surrogate.\nNote: Modify the noise level (\"sigma\"), e.g., use a value of 0.05, and compare the two models.\n\n\nfun_control = {\"sigma\": 0.5}\n\n\n\n6.2.4 fun_cubed (1-dim)\n\nThe Cubed function is defined as follows:\nnp.sum(X[i]** 3)\nData points are generated as follows:\n\n\ngen = spacefilling(1)\nrng = np.random.RandomState(1)\nlower = np.array([-10])\nupper = np.array([10])\nfun = analytical().fun_cubed\nfun_control = {\"sigma\": 0.025,\n               \"seed\": 123}\nX_train = gen.scipy_lhd(10, lower=lower, upper = upper).reshape(-1,1)\ny_train = fun(X, fun_control=fun_control)\nX = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\ny = fun(X, fun_control=fun_control)\n\n\nDescribe the function.\nCompare the two models that were build using the spotPython and the sklearn surrogate.\nNote: Modify the noise level (\"sigma\"), e.g., use a value of 0.05, and compare the two models.\n\n\nfun_control = {\"sigma\": 0.05}\n\n\n\n6.2.5 The Effect of Noise\nHow does the behavior of the spotPython fit changes when the argument noise is set to True, i.e.,\nS = Kriging(name='kriging',  seed=123, n_theta=1, noise=True)\nis used?"
  },
  {
    "objectID": "07_spot_ei.html#example-spot-and-the-1-dim-sphere-function",
    "href": "07_spot_ei.html#example-spot-and-the-1-dim-sphere-function",
    "title": "7  Expected Improvement",
    "section": "7.1 Example: Spot and the 1-dim Sphere Function",
    "text": "7.1 Example: Spot and the 1-dim Sphere Function\n\nimport numpy as np\nfrom math import inf\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom scipy.optimize import shgo\nfrom scipy.optimize import direct\nfrom scipy.optimize import differential_evolution\nimport matplotlib.pyplot as plt\n\n\n7.1.1 The Objective Function: 1-dim Sphere\n\nThe spotPython package provides several classes of objective functions.\nWe will use an analytical objective function, i.e., a function that can be described by a (closed) formula: \\[f(x) = x^2 \\]\n\n\nfun = analytical().fun_sphere\n\n\nfun = analytical().fun_sphere\nfun_control = {\"sigma\": 0,\n               \"seed\": 123}\n\n\nThe size of the lower bound vector determines the problem dimension.\nHere we will use np.array([-1]), i.e., a one-dim function.\n\n\nspot_1 = spot.Spot(fun=fun,\n                   lower = np.array([-1]),\n                   upper = np.array([1]))\n\nspot_1.run()\n\n&lt;spotPython.spot.spot.Spot at 0x15605a8f0&gt;\n\n\n\n\n7.1.2 Results\n\nspot_1.print_results()\n\nmin y: 5.69019918867849e-10\nx0: 2.3854138401288967e-05\n\n\n[['x0', 2.3854138401288967e-05]]\n\n\n\nspot_1.plot_progress(log_y=True)"
  },
  {
    "objectID": "07_spot_ei.html#same-but-with-ei-as-infill_criterion",
    "href": "07_spot_ei.html#same-but-with-ei-as-infill_criterion",
    "title": "7  Expected Improvement",
    "section": "7.2 Same, but with EI as infill_criterion",
    "text": "7.2 Same, but with EI as infill_criterion\n\nspot_1_ei = spot.Spot(fun=fun,\n                   lower = np.array([-1]),\n                   upper = np.array([1]),\n                   infill_criterion = \"ei\")\nspot_1_ei.run()\n\n&lt;spotPython.spot.spot.Spot at 0x1585f9930&gt;\n\n\n\nspot_1_ei.plot_progress(log_y=True)\n\n\n\n\n\nspot_1_ei.print_results()\n\nmin y: 1.0703048868228972e-11\nx0: -3.271551446673118e-06\n\n\n[['x0', -3.271551446673118e-06]]"
  },
  {
    "objectID": "07_spot_ei.html#non-isotropic-kriging",
    "href": "07_spot_ei.html#non-isotropic-kriging",
    "title": "7  Expected Improvement",
    "section": "7.3 Non-isotropic Kriging",
    "text": "7.3 Non-isotropic Kriging\n\nspot_2_ei_noniso = spot.Spot(fun=fun,\n                   lower = np.array([-1, -1]),\n                   upper = np.array([1, 1]),\n                   fun_evals = 20,\n                   fun_repeats = 1,\n                   max_time = inf,\n                   noise = False,\n                   tolerance_x = np.sqrt(np.spacing(1)),\n                   var_type=[\"num\"],\n                   infill_criterion = \"ei\",\n                   n_points = 1,\n                   seed=123,\n                   log_level = 50,\n                   show_models=True,\n                   fun_control = fun_control,\n                   design_control={\"init_size\": 10,\n                                   \"repeats\": 1},\n                   surrogate_control={\"noise\": False,\n                                      \"cod_type\": \"norm\",\n                                      \"min_theta\": -4,\n                                      \"max_theta\": 3,\n                                      \"n_theta\": 2,\n                                      \"model_optimizer\": differential_evolution,\n                                      \"model_fun_evals\": 1000,\n                                      })\nspot_2_ei_noniso.run()\n\n&lt;spotPython.spot.spot.Spot at 0x1564b4e20&gt;\n\n\n\nspot_2_ei_noniso.plot_progress(log_y=True)\n\n\n\n\n\nspot_2_ei_noniso.print_results()\n\nmin y: 3.546757229720085e-07\nx0: 0.0005304763214324646\nx1: 0.0002706854177296757\n\n\n[['x0', 0.0005304763214324646], ['x1', 0.0002706854177296757]]\n\n\n\nspot_2_ei_noniso.surrogate.plot()"
  },
  {
    "objectID": "07_spot_ei.html#using-sklearn-surrogates",
    "href": "07_spot_ei.html#using-sklearn-surrogates",
    "title": "7  Expected Improvement",
    "section": "7.4 Using sklearn Surrogates",
    "text": "7.4 Using sklearn Surrogates\n\n7.4.1 The spot Loop\nThe spot loop consists of the following steps:\n\nInit: Build initial design \\(X\\)\nEvaluate initial design on real objective \\(f\\): \\(y = f(X)\\)\nBuild surrogate: \\(S = S(X,y)\\)\nOptimize on surrogate: \\(X_0 = \\text{optimize}(S)\\)\nEvaluate on real objective: \\(y_0 = f(X_0)\\)\nImpute (Infill) new points: \\(X = X \\cup X_0\\), \\(y = y \\cup y_0\\).\nGot 3.\n\nThe spot loop is implemented in R as follows:\n\n\n\nVisual representation of the model based search with SPOT. Taken from: Bartz-Beielstein, T., and Zaefferer, M. Hyperparameter tuning approaches. In Hyperparameter Tuning for Machine and Deep Learning with R - A Practical Guide, E. Bartz, T. Bartz-Beielstein, M. Zaefferer, and O. Mersmann, Eds. Springer, 2022, ch. 4, pp. 67–114.\n\n\n\n\n7.4.2 spot: The Initial Model\n\n7.4.2.1 Example: Modifying the initial design size\nThis is the “Example: Modifying the initial design size” from Chapter 4.5.1 in [bart21i].\n\nspot_ei = spot.Spot(fun=fun,\n               lower = np.array([-1,-1]),\n               upper= np.array([1,1]),\n               design_control={\"init_size\": 5})\nspot_ei.run()\n\n&lt;spotPython.spot.spot.Spot at 0x158b63160&gt;\n\n\n\nspot_ei.plot_progress()\n\n\n\n\n\nnp.min(spot_1.y), np.min(spot_ei.y)\n\n(5.69019918867849e-10, 1.8166812027962756e-05)\n\n\n\n\n\n7.4.3 Init: Build Initial Design\n\nfrom spotPython.design.spacefilling import spacefilling\nfrom spotPython.build.kriging import Kriging\nfrom spotPython.fun.objectivefunctions import analytical\ngen = spacefilling(2)\nrng = np.random.RandomState(1)\nlower = np.array([-5,-0])\nupper = np.array([10,15])\nfun = analytical().fun_branin\nfun_control = {\"sigma\": 0,\n               \"seed\": 123}\n\nX = gen.scipy_lhd(10, lower=lower, upper = upper)\nprint(X)\ny = fun(X, fun_control=fun_control)\nprint(y)\n\n[[ 8.97647221 13.41926847]\n [ 0.66946019  1.22344228]\n [ 5.23614115 13.78185824]\n [ 5.6149825  11.5851384 ]\n [-1.72963184  1.66516096]\n [-4.26945568  7.1325531 ]\n [ 1.26363761 10.17935555]\n [ 2.88779942  8.05508969]\n [-3.39111089  4.15213772]\n [ 7.30131231  5.22275244]]\n[128.95676449  31.73474356 172.89678121 126.71295908  64.34349975\n  70.16178611  48.71407916  31.77322887  76.91788181  30.69410529]\n\n\n\nS = Kriging(name='kriging',  seed=123)\nS.fit(X, y)\nS.plot()\n\n\n\n\n\ngen = spacefilling(2, seed=123)\nX0 = gen.scipy_lhd(3)\ngen = spacefilling(2, seed=345)\nX1 = gen.scipy_lhd(3)\nX2 = gen.scipy_lhd(3)\ngen = spacefilling(2, seed=123)\nX3 = gen.scipy_lhd(3)\nX0, X1, X2, X3\n\n(array([[0.77254938, 0.31539299],\n        [0.59321338, 0.93854273],\n        [0.27469803, 0.3959685 ]]),\n array([[0.78373509, 0.86811887],\n        [0.06692621, 0.6058029 ],\n        [0.41374778, 0.00525456]]),\n array([[0.121357  , 0.69043832],\n        [0.41906219, 0.32838498],\n        [0.86742658, 0.52910374]]),\n array([[0.77254938, 0.31539299],\n        [0.59321338, 0.93854273],\n        [0.27469803, 0.3959685 ]]))\n\n\n\n\n7.4.4 Evaluate\n\n\n7.4.5 Build Surrogate\n\n\n7.4.6 A Simple Predictor\nThe code below shows how to use a simple model for prediction.\n\nAssume that only two (very costly) measurements are available:\n\nf(0) = 0.5\nf(2) = 2.5\n\nWe are interested in the value at \\(x_0 = 1\\), i.e., \\(f(x_0 = 1)\\), but cannot run an additional, third experiment.\n\n\nfrom sklearn import linear_model\nX = np.array([[0], [2]])\ny = np.array([0.5, 2.5])\nS_lm = linear_model.LinearRegression()\nS_lm = S_lm.fit(X, y)\nX0 = np.array([[1]])\ny0 = S_lm.predict(X0)\nprint(y0)\n\n[1.5]\n\n\n\nCentral Idea:\n\nEvaluation of the surrogate model S_lm is much cheaper (or / and much faster) than running the real-world experiment \\(f\\)."
  },
  {
    "objectID": "07_spot_ei.html#gaussian-processes-regression-basic-introductory-example",
    "href": "07_spot_ei.html#gaussian-processes-regression-basic-introductory-example",
    "title": "7  Expected Improvement",
    "section": "7.5 Gaussian Processes regression: basic introductory example",
    "text": "7.5 Gaussian Processes regression: basic introductory example\nThis example was taken from scikit-learn. After fitting our model, we see that the hyperparameters of the kernel have been optimized. Now, we will use our kernel to compute the mean prediction of the full dataset and plot the 95% confidence interval.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math as m\nfrom sklearn.gaussian_process import GaussianProcessRegressor\nfrom sklearn.gaussian_process.kernels import RBF\n\nX = np.linspace(start=0, stop=10, num=1_000).reshape(-1, 1)\ny = np.squeeze(X * np.sin(X))\nrng = np.random.RandomState(1)\ntraining_indices = rng.choice(np.arange(y.size), size=6, replace=False)\nX_train, y_train = X[training_indices], y[training_indices]\n\nkernel = 1 * RBF(length_scale=1.0, length_scale_bounds=(1e-2, 1e2))\ngaussian_process = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)\ngaussian_process.fit(X_train, y_train)\ngaussian_process.kernel_\n\nmean_prediction, std_prediction = gaussian_process.predict(X, return_std=True)\n\nplt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, mean_prediction, label=\"Mean prediction\")\nplt.fill_between(\n    X.ravel(),\n    mean_prediction - 1.96 * std_prediction,\n    mean_prediction + 1.96 * std_prediction,\n    alpha=0.5,\n    label=r\"95% confidence interval\",\n)\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"sk-learn Version: Gaussian process regression on noise-free dataset\")\n\n\n\n\n\nfrom spotPython.build.kriging import Kriging\nimport numpy as np\nimport matplotlib.pyplot as plt\nrng = np.random.RandomState(1)\nX = np.linspace(start=0, stop=10, num=1_000).reshape(-1, 1)\ny = np.squeeze(X * np.sin(X))\ntraining_indices = rng.choice(np.arange(y.size), size=6, replace=False)\nX_train, y_train = X[training_indices], y[training_indices]\n\n\nS = Kriging(name='kriging',  seed=123, log_level=50, cod_type=\"norm\")\nS.fit(X_train, y_train)\n\nmean_prediction, std_prediction, ei = S.predict(X, return_val=\"all\")\n\nstd_prediction\n\nplt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, mean_prediction, label=\"Mean prediction\")\nplt.fill_between(\n    X.ravel(),\n    mean_prediction - 1.96 * std_prediction,\n    mean_prediction + 1.96 * std_prediction,\n    alpha=0.5,\n    label=r\"95% confidence interval\",\n)\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"spotPython Version: Gaussian process regression on noise-free dataset\")"
  },
  {
    "objectID": "07_spot_ei.html#the-surrogate-using-scikit-learn-models",
    "href": "07_spot_ei.html#the-surrogate-using-scikit-learn-models",
    "title": "7  Expected Improvement",
    "section": "7.6 The Surrogate: Using scikit-learn models",
    "text": "7.6 The Surrogate: Using scikit-learn models\nDefault is the internal kriging surrogate.\n\nS_0 = Kriging(name='kriging', seed=123)\n\nModels from scikit-learn can be selected, e.g., Gaussian Process:\n\n# Needed for the sklearn surrogates:\nfrom sklearn.gaussian_process import GaussianProcessRegressor\nfrom sklearn.gaussian_process.kernels import RBF\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import linear_model\nfrom sklearn import tree\nimport pandas as pd\n\n\nkernel = 1 * RBF(length_scale=1.0, length_scale_bounds=(1e-2, 1e2))\nS_GP = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)\n\n\nand many more:\n\n\nS_Tree = DecisionTreeRegressor(random_state=0)\nS_LM = linear_model.LinearRegression()\nS_Ridge = linear_model.Ridge()\nS_RF = RandomForestRegressor(max_depth=2, random_state=0) \n\n\nThe scikit-learn GP model S_GP is selected.\n\n\nS = S_GP\n\n\nisinstance(S, GaussianProcessRegressor)\n\nTrue\n\n\n\nfrom spotPython.fun.objectivefunctions import analytical\nfun = analytical().fun_branin\nlower = np.array([-5,-0])\nupper = np.array([10,15])\ndesign_control={\"init_size\": 5}\nsurrogate_control={\n            \"infill_criterion\": None,\n            \"n_points\": 1,\n        }\nspot_GP = spot.Spot(fun=fun, lower = lower, upper= upper, surrogate=S, \n                    fun_evals = 15, noise = False, log_level = 50,\n                    design_control=design_control,\n                    surrogate_control=surrogate_control)\n\nspot_GP.run()\n\n&lt;spotPython.spot.spot.Spot at 0x158e00e80&gt;\n\n\n\nspot_GP.y\n\narray([ 69.32459936, 152.38491454, 107.92560483,  24.51465459,\n        76.73500031,  86.30426096,  11.00305322,  16.11739777,\n         7.28147777,  21.82310448,  10.96088904,   2.95213095,\n         3.02914712,   2.10500783,   1.94316212])\n\n\n\nspot_GP.plot_progress()\n\n\n\n\n\nspot_GP.print_results()\n\nmin y: 1.943162117317236\nx0: 10.0\nx1: 2.9983247123688623\n\n\n[['x0', 10.0], ['x1', 2.9983247123688623]]"
  },
  {
    "objectID": "07_spot_ei.html#additional-examples",
    "href": "07_spot_ei.html#additional-examples",
    "title": "7  Expected Improvement",
    "section": "7.7 Additional Examples",
    "text": "7.7 Additional Examples\n\n# Needed for the sklearn surrogates:\nfrom sklearn.gaussian_process import GaussianProcessRegressor\nfrom sklearn.gaussian_process.kernels import RBF\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import linear_model\nfrom sklearn import tree\nimport pandas as pd\n\n\nkernel = 1 * RBF(length_scale=1.0, length_scale_bounds=(1e-2, 1e2))\nS_GP = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)\n\n\nfrom spotPython.build.kriging import Kriging\nimport numpy as np\nimport spotPython\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\n\nS_K = Kriging(name='kriging',\n              seed=123,\n              log_level=50,\n              infill_criterion = \"y\",\n              n_theta=1,\n              noise=False,\n              cod_type=\"norm\")\nfun = analytical().fun_sphere\nlower = np.array([-1,-1])\nupper = np.array([1,1])\n\ndesign_control={\"init_size\": 10}\nsurrogate_control={\n            \"n_points\": 1,\n        }\nspot_S_K = spot.Spot(fun=fun,\n                     lower = lower,\n                     upper= upper,\n                     surrogate=S_K,\n                     fun_evals = 25,\n                     noise = False,\n                     log_level = 50,\n                     design_control=design_control,\n                     surrogate_control=surrogate_control)\n\nspot_S_K.run()\n\n&lt;spotPython.spot.spot.Spot at 0x15a0dc6d0&gt;\n\n\n\nspot_S_K.plot_progress(log_y=True)\n\n\n\n\n\nspot_S_K.surrogate.plot()\n\n\n\n\n\nspot_S_K.print_results()\n\nmin y: 1.724871809162595e-06\nx0: -0.001300204548042376\nx1: 0.00018531039477729297\n\n\n[['x0', -0.001300204548042376], ['x1', 0.00018531039477729297]]\n\n\n\n7.7.1 Optimize on Surrogate\n\n\n7.7.2 Evaluate on Real Objective\n\n\n7.7.3 Impute / Infill new Points"
  },
  {
    "objectID": "07_spot_ei.html#tests",
    "href": "07_spot_ei.html#tests",
    "title": "7  Expected Improvement",
    "section": "7.8 Tests",
    "text": "7.8 Tests\n\nimport numpy as np\nfrom spotPython.spot import spot\nfrom spotPython.fun.objectivefunctions import analytical\n\nfun_sphere = analytical().fun_sphere\nspot_1 = spot.Spot(\n    fun=fun_sphere,\n    lower=np.array([-1, -1]),\n    upper=np.array([1, 1]),\n    n_points = 2\n)\n\n# (S-2) Initial Design:\nspot_1.X = spot_1.design.scipy_lhd(\n    spot_1.design_control[\"init_size\"], lower=spot_1.lower, upper=spot_1.upper\n)\nprint(spot_1.X)\n\n# (S-3): Eval initial design:\nspot_1.y = spot_1.fun(spot_1.X)\nprint(spot_1.y)\n\nspot_1.surrogate.fit(spot_1.X, spot_1.y)\nX0 = spot_1.suggest_new_X()\nprint(X0)\nassert X0.size == spot_1.n_points * spot_1.k\n\n[[ 0.86352963  0.7892358 ]\n [-0.24407197 -0.83687436]\n [ 0.36481882  0.8375811 ]\n [ 0.415331    0.54468512]\n [-0.56395091 -0.77797854]\n [-0.90259409 -0.04899292]\n [-0.16484832  0.35724741]\n [ 0.05170659  0.07401196]\n [-0.78548145 -0.44638164]\n [ 0.64017497 -0.30363301]]\n[1.36857656 0.75992983 0.83463487 0.46918172 0.92329124 0.8170764\n 0.15480068 0.00815134 0.81623768 0.502017  ]\n[[0.00153684 0.00421284]\n [0.00153684 0.00421284]]"
  },
  {
    "objectID": "07_spot_ei.html#ei-the-famous-schonlau-example",
    "href": "07_spot_ei.html#ei-the-famous-schonlau-example",
    "title": "7  Expected Improvement",
    "section": "7.9 EI: The Famous Schonlau Example",
    "text": "7.9 EI: The Famous Schonlau Example\n\nX_train0 = np.array([1, 2, 3, 4, 12]).reshape(-1,1)\nX_train = np.linspace(start=0, stop=10, num=5).reshape(-1, 1)\n\n\nfrom spotPython.build.kriging import Kriging\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nX_train = np.array([1., 2., 3., 4., 12.]).reshape(-1,1)\ny_train = np.array([0., -1.75, -2, -0.5, 5.])\n\nS = Kriging(name='kriging',  seed=123, log_level=50, n_theta=1, noise=False, cod_type=\"norm\")\nS.fit(X_train, y_train)\n\nX = np.linspace(start=0, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X, return_val=\"all\")\n\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, mean_prediction, label=\"Mean prediction\")\nif True:\n    plt.fill_between(\n        X.ravel(),\n        mean_prediction - 2 * std_prediction,\n        mean_prediction + 2 * std_prediction,\n        alpha=0.5,\n        label=r\"95% confidence interval\",\n    )\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Gaussian process regression on noise-free dataset\")\n\n\n\n\n\n#plt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\n# plt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, -ei, label=\"Expected Improvement\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Gaussian process regression on noise-free dataset\")\n\n\n\n\n\nS.log\n\n{'negLnLike': array([1.20788205]),\n 'theta': array([1.09276015]),\n 'p': array([2.]),\n 'Lambda': array([None], dtype=object)}"
  },
  {
    "objectID": "07_spot_ei.html#ei-the-forrester-example",
    "href": "07_spot_ei.html#ei-the-forrester-example",
    "title": "7  Expected Improvement",
    "section": "7.10 EI: The Forrester Example",
    "text": "7.10 EI: The Forrester Example\n\nfrom spotPython.build.kriging import Kriging\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport spotPython\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\n\n# exact x locations are unknown:\nX_train = np.array([0.0, 0.175, 0.225, 0.3, 0.35, 0.375, 0.5,1]).reshape(-1,1)\n\nfun = analytical().fun_forrester\nfun_control = {\"sigma\": 1.0,\n               \"seed\": 123}\ny_train = fun(X_train, fun_control=fun_control)\n\nS = Kriging(name='kriging',  seed=123, log_level=50, n_theta=1, noise=False, cod_type=\"norm\")\nS.fit(X_train, y_train)\n\nX = np.linspace(start=0, stop=1, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X, return_val=\"all\")\n\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, mean_prediction, label=\"Mean prediction\")\nif True:\n    plt.fill_between(\n        X.ravel(),\n        mean_prediction - 2 * std_prediction,\n        mean_prediction + 2 * std_prediction,\n        alpha=0.5,\n        label=r\"95% confidence interval\",\n    )\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Gaussian process regression on noise-free dataset\")\n\n\n\n\n\n#plt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\n# plt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, -ei, label=\"Expected Improvement\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Gaussian process regression on noise-free dataset\")"
  },
  {
    "objectID": "07_spot_ei.html#noise",
    "href": "07_spot_ei.html#noise",
    "title": "7  Expected Improvement",
    "section": "7.11 Noise",
    "text": "7.11 Noise\n\nimport numpy as np\nimport spotPython\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom spotPython.design.spacefilling import spacefilling\nfrom spotPython.build.kriging import Kriging\nimport matplotlib.pyplot as plt\n\ngen = spacefilling(1)\nrng = np.random.RandomState(1)\nlower = np.array([-10])\nupper = np.array([10])\nfun = analytical().fun_sphere\nfun_control = {\"sigma\": 2,\n               \"seed\": 125}\nX = gen.scipy_lhd(10, lower=lower, upper = upper)\nprint(X)\ny = fun(X, fun_control=fun_control)\nprint(y)\ny.shape\nX_train = X.reshape(-1,1)\ny_train = y\n\nS = Kriging(name='kriging',\n            seed=123,\n            log_level=50,\n            n_theta=1,\n            noise=False)\nS.fit(X_train, y_train)\n\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X_axis, return_val=\"all\")\n\n#plt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\nplt.scatter(X_train, y_train, label=\"Observations\")\n#plt.plot(X, ei, label=\"Expected Improvement\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Sphere: Gaussian process regression on noisy dataset\")\n\n[[ 0.63529627]\n [-4.10764204]\n [-0.44071975]\n [ 9.63125638]\n [-8.3518118 ]\n [-3.62418901]\n [ 4.15331   ]\n [ 3.4468512 ]\n [ 6.36049088]\n [-7.77978539]]\n[-4.61635371 11.44873209 -0.19988024 91.92791676 68.05926244 12.02926818\n 16.2470957   9.12729929 38.4987029  58.38469104]\n\n\n\n\n\n\nS.log\n\n{'negLnLike': array([24.69806131]),\n 'theta': array([1.31023969]),\n 'p': array([2.]),\n 'Lambda': array([None], dtype=object)}\n\n\n\nS = Kriging(name='kriging',\n            seed=123,\n            log_level=50,\n            n_theta=1,\n            noise=True)\nS.fit(X_train, y_train)\n\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X_axis, return_val=\"all\")\n\n#plt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\nplt.scatter(X_train, y_train, label=\"Observations\")\n#plt.plot(X, ei, label=\"Expected Improvement\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Sphere: Gaussian process regression with nugget on noisy dataset\")\n\n\n\n\n\nS.log\n\n{'negLnLike': array([22.14095646]),\n 'theta': array([-0.32527397]),\n 'p': array([2.]),\n 'Lambda': array([9.08815016e-05])}"
  },
  {
    "objectID": "07_spot_ei.html#cubic-function",
    "href": "07_spot_ei.html#cubic-function",
    "title": "7  Expected Improvement",
    "section": "7.12 Cubic Function",
    "text": "7.12 Cubic Function\n\nimport numpy as np\nimport spotPython\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom spotPython.design.spacefilling import spacefilling\nfrom spotPython.build.kriging import Kriging\nimport matplotlib.pyplot as plt\n\ngen = spacefilling(1)\nrng = np.random.RandomState(1)\nlower = np.array([-10])\nupper = np.array([10])\nfun = analytical().fun_cubed\nfun_control = {\"sigma\": 10,\n               \"seed\": 123}\n\nX = gen.scipy_lhd(10, lower=lower, upper = upper)\nprint(X)\ny = fun(X, fun_control=fun_control)\nprint(y)\ny.shape\nX_train = X.reshape(-1,1)\ny_train = y\n\nS = Kriging(name='kriging',  seed=123, log_level=50, n_theta=1, noise=False)\nS.fit(X_train, y_train)\n\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X_axis, return_val=\"all\")\n\nplt.scatter(X_train, y_train, label=\"Observations\")\n#plt.plot(X, ei, label=\"Expected Improvement\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Cubed: Gaussian process regression on noisy dataset\")\n\n[[ 0.63529627]\n [-4.10764204]\n [-0.44071975]\n [ 9.63125638]\n [-8.3518118 ]\n [-3.62418901]\n [ 4.15331   ]\n [ 3.4468512 ]\n [ 6.36049088]\n [-7.77978539]]\n[  -9.63480707  -72.98497325   12.7936499   895.34567477 -573.35961837\n  -41.83176425   65.27989461   46.37081417  254.1530734  -474.09587355]\n\n\n\n\n\n\nS = Kriging(name='kriging',  seed=123, log_level=0, n_theta=1, noise=True)\nS.fit(X_train, y_train)\n\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X_axis, return_val=\"all\")\n\nplt.scatter(X_train, y_train, label=\"Observations\")\n#plt.plot(X, ei, label=\"Expected Improvement\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Cubed: Gaussian process with nugget regression on noisy dataset\")\n\n\n\n\n\nimport numpy as np\nimport spotPython\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom spotPython.design.spacefilling import spacefilling\nfrom spotPython.build.kriging import Kriging\nimport matplotlib.pyplot as plt\n\ngen = spacefilling(1)\nrng = np.random.RandomState(1)\nlower = np.array([-10])\nupper = np.array([10])\nfun = analytical().fun_runge\nfun_control = {\"sigma\": 0.25,\n               \"seed\": 123}\n\nX = gen.scipy_lhd(10, lower=lower, upper = upper)\nprint(X)\ny = fun(X, fun_control=fun_control)\nprint(y)\ny.shape\nX_train = X.reshape(-1,1)\ny_train = y\n\nS = Kriging(name='kriging',  seed=123, log_level=50, n_theta=1, noise=False)\nS.fit(X_train, y_train)\n\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X_axis, return_val=\"all\")\n\nplt.scatter(X_train, y_train, label=\"Observations\")\n#plt.plot(X, ei, label=\"Expected Improvement\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Gaussian process regression on noisy dataset\")\n\n[[ 0.63529627]\n [-4.10764204]\n [-0.44071975]\n [ 9.63125638]\n [-8.3518118 ]\n [-3.62418901]\n [ 4.15331   ]\n [ 3.4468512 ]\n [ 6.36049088]\n [-7.77978539]]\n[ 0.46517267 -0.03599548  1.15933822  0.05915901  0.24419145  0.21502359\n -0.10432134  0.21312309 -0.05502681 -0.06434374]\n\n\n\n\n\n\nS = Kriging(name='kriging',\n            seed=123,\n            log_level=50,\n            n_theta=1,\n            noise=True)\nS.fit(X_train, y_train)\n\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X_axis, return_val=\"all\")\n\nplt.scatter(X_train, y_train, label=\"Observations\")\n#plt.plot(X, ei, label=\"Expected Improvement\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Gaussian process regression with nugget on noisy dataset\")"
  },
  {
    "objectID": "07_spot_ei.html#factors",
    "href": "07_spot_ei.html#factors",
    "title": "7  Expected Improvement",
    "section": "7.13 Factors",
    "text": "7.13 Factors\n\n[\"num\"] * 3\n\n['num', 'num', 'num']\n\n\n\nfrom spotPython.design.spacefilling import spacefilling\nfrom spotPython.build.kriging import Kriging\nfrom spotPython.fun.objectivefunctions import analytical\nimport numpy as np\n\n\ngen = spacefilling(2)\nn = 30\nrng = np.random.RandomState(1)\nlower = np.array([-5,-0])\nupper = np.array([10,15])\nfun = analytical().fun_branin_factor\n#fun = analytical(sigma=0).fun_sphere\n\nX0 = gen.scipy_lhd(n, lower=lower, upper = upper)\nX1 = np.random.randint(low=1, high=3, size=(n,))\nX = np.c_[X0, X1]\ny = fun(X)\nS = Kriging(name='kriging',  seed=123, log_level=50, n_theta=3, noise=False, var_type=[\"num\", \"num\", \"num\"])\nS.fit(X, y)\nSf = Kriging(name='kriging',  seed=123, log_level=50, n_theta=3, noise=False, var_type=[\"num\", \"num\", \"factor\"])\nSf.fit(X, y)\nn = 50\nX0 = gen.scipy_lhd(n, lower=lower, upper = upper)\nX1 = np.random.randint(low=1, high=3, size=(n,))\nX = np.c_[X0, X1]\ny = fun(X)\ns=np.sum(np.abs(S.predict(X)[0] - y))\nsf=np.sum(np.abs(Sf.predict(X)[0] - y))\nsf - s\n\n-36.996504540362366\n\n\n\n# vars(S)\n\n\n# vars(Sf)"
  },
  {
    "objectID": "08_spot_noisy.html#example-spot-and-the-noisy-sphere-function",
    "href": "08_spot_noisy.html#example-spot-and-the-noisy-sphere-function",
    "title": "8  Hyperparameter Tuning and Noise",
    "section": "8.1 Example: Spot and the Noisy Sphere Function",
    "text": "8.1 Example: Spot and the Noisy Sphere Function\n\nimport numpy as np\nfrom math import inf\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom scipy.optimize import shgo\nfrom scipy.optimize import direct\nfrom scipy.optimize import differential_evolution\nimport matplotlib.pyplot as plt\nimport os\nimport copy\nimport socket\nfrom datetime import datetime\nfrom dateutil.tz import tzlocal\n\n\nstart_time = datetime.now(tzlocal())\nHOSTNAME = socket.gethostname().split(\".\")[0]\nexperiment_name = '10-sklearn' + \"_\" + HOSTNAME + \"_\" + str(start_time).split(\".\", 1)[0].replace(' ', '_')\nexperiment_name = experiment_name.replace(':', '-')\nprint(experiment_name)\nif not os.path.exists('./figures'):\n    os.makedirs('./figures')\n\n10-sklearn_maans03_2023-07-03_10-13-22\n\n\n\n8.1.1 The Objective Function: Noisy Sphere\n\nThe spotPython package provides several classes of objective functions.\nWe will use an analytical objective function with noise, i.e., a function that can be described by a (closed) formula: \\[f(x) = x^2 + \\epsilon\\]\nSince sigma is set to 0.1, noise is added to the function:\n\n\nfun = analytical().fun_sphere\nfun_control = {\"sigma\": 0.1,\n               \"seed\": 123}\n\n\nA plot illustrates the noise:\n\n\nx = np.linspace(-1,1,100).reshape(-1,1)\ny = fun(x, fun_control=fun_control)\nplt.figure()\nplt.plot(x,y, \"k\")\nplt.show()\n\n\n\n\nSpot is adopted as follows to cope with noisy functions:\n\nfun_repeats is set to a value larger than 1 (here: 2)\nnoise is set to true. Therefore, a nugget (Lambda) term is added to the correlation matrix\ninit size (of the design_control dictionary) is set to a value larger than 1 (here: 2)\n\n\nspot_1_noisy = spot.Spot(fun=fun,\n                   lower = np.array([-1]),\n                   upper = np.array([1]),\n                   fun_evals = 10,\n                   fun_repeats = 2,\n                   noise = True,\n                   seed=123,\n                   show_models=True,\n                   fun_control = fun_control,\n                   design_control={\"init_size\": 3,\n                                   \"repeats\": 2},\n                   surrogate_control={\"noise\": True})\n\n\nspot_1_noisy.run()\n\n\n\n\n\n\n\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x1587d5330&gt;"
  },
  {
    "objectID": "08_spot_noisy.html#print-the-results",
    "href": "08_spot_noisy.html#print-the-results",
    "title": "8  Hyperparameter Tuning and Noise",
    "section": "8.2 Print the Results",
    "text": "8.2 Print the Results\n\nspot_1_noisy.print_results()\n\nmin y: -0.06415721563564872\nx0: 0.18642671321228718\nmin mean y: -0.03309048069165033\nx0: 0.18642671321228718\n\n\n[['x0', 0.18642671321228718], ['x0', 0.18642671321228718]]\n\n\n\nspot_1_noisy.plot_progress(log_y=False,\n    filename=\"./figures/\" + experiment_name+\"_progress.png\")\n\n\n\n\nProgress plot. Black dots denote results from the initial design. Red dots illustrate the improvement found by the surrogate model based optimization."
  },
  {
    "objectID": "08_spot_noisy.html#noise-and-surrogates-the-nugget-effect",
    "href": "08_spot_noisy.html#noise-and-surrogates-the-nugget-effect",
    "title": "8  Hyperparameter Tuning and Noise",
    "section": "8.3 Noise and Surrogates: The Nugget Effect",
    "text": "8.3 Noise and Surrogates: The Nugget Effect\n\n8.3.1 The Noisy Sphere\n\n8.3.1.1 The Data\n\nWe prepare some data first:\n\n\nimport numpy as np\nimport spotPython\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom spotPython.design.spacefilling import spacefilling\nfrom spotPython.build.kriging import Kriging\nimport matplotlib.pyplot as plt\n\ngen = spacefilling(1)\nrng = np.random.RandomState(1)\nlower = np.array([-10])\nupper = np.array([10])\nfun = analytical().fun_sphere\nfun_control = {\"sigma\": 2,\n               \"seed\": 125}\nX = gen.scipy_lhd(10, lower=lower, upper = upper)\ny = fun(X, fun_control=fun_control)\nX_train = X.reshape(-1,1)\ny_train = y\n\n\nA surrogate without nugget is fitted to these data:\n\n\nS = Kriging(name='kriging',\n            seed=123,\n            log_level=50,\n            n_theta=1,\n            noise=False)\nS.fit(X_train, y_train)\n\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X_axis, return_val=\"all\")\n\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Sphere: Gaussian process regression on noisy dataset\")\n\n\n\n\n\nIn comparison to the surrogate without nugget, we fit a surrogate with nugget to the data:\n\n\nS_nug = Kriging(name='kriging',\n            seed=123,\n            log_level=50,\n            n_theta=1,\n            noise=True)\nS_nug.fit(X_train, y_train)\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S_nug.predict(X_axis, return_val=\"all\")\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Sphere: Gaussian process regression with nugget on noisy dataset\")\n\n\n\n\n\nThe value of the nugget term can be extracted from the model as follows:\n\n\nS.Lambda\n\n\nS_nug.Lambda\n\n9.088150162472375e-05\n\n\n\nWe see:\n\nthe first model S has no nugget,\nwhereas the second model has a nugget value (Lambda) larger than zero."
  },
  {
    "objectID": "08_spot_noisy.html#exercises",
    "href": "08_spot_noisy.html#exercises",
    "title": "8  Hyperparameter Tuning and Noise",
    "section": "8.4 Exercises",
    "text": "8.4 Exercises\n\n8.4.1 Noisy fun_cubed\n\nAnalyse the effect of noise on the fun_cubed function with the following settings:\n\n\nfun = analytical().fun_cubed\nfun_control = {\"sigma\": 10,\n               \"seed\": 123}\nlower = np.array([-10])\nupper = np.array([10])\n\n\n\n8.4.2 fun_runge\n\nAnalyse the effect of noise on the fun_runge function with the following settings:\n\n\nlower = np.array([-10])\nupper = np.array([10])\nfun = analytical().fun_runge\nfun_control = {\"sigma\": 0.25,\n               \"seed\": 123}\n\n\n\n8.4.3 fun_forrester\n\nAnalyse the effect of noise on the fun_forrester function with the following settings:\n\n\nlower = np.array([0])\nupper = np.array([1])\nfun = analytical().fun_forrester\nfun_control = {\"sigma\": 5,\n               \"seed\": 123}\n\n\n\n8.4.4 fun_xsin\n\nAnalyse the effect of noise on the fun_xsin function with the following settings:\n\n\nlower = np.array([-1.])\nupper = np.array([1.])\nfun = analytical().fun_xsin\nfun_control = {\"sigma\": 0.5,\n               \"seed\": 123}"
  },
  {
    "objectID": "09_spot_ocba.html#example-spot-ocba-and-the-noisy-sphere-function",
    "href": "09_spot_ocba.html#example-spot-ocba-and-the-noisy-sphere-function",
    "title": "9  Handling Noise: Optimal Computational Budget Allocation in Spot",
    "section": "9.1 Example: Spot, OCBA, and the Noisy Sphere Function",
    "text": "9.1 Example: Spot, OCBA, and the Noisy Sphere Function\n\nimport numpy as np\nfrom math import inf\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom scipy.optimize import shgo\nfrom scipy.optimize import direct\nfrom scipy.optimize import differential_evolution\nimport matplotlib.pyplot as plt\n\n\n9.1.1 The Objective Function: Noisy Sphere\nThe spotPython package provides several classes of objective functions. We will use an analytical objective function with noise, i.e., a function that can be described by a (closed) formula: \\[f(x) = x^2 + \\epsilon\\]\nSince sigma is set to 0.1, noise is added to the function:\n\nfun = analytical().fun_sphere\nfun_control = {\"sigma\": 0.1,\n               \"seed\": 123}\n\nA plot illustrates the noise:\n\nx = np.linspace(-1,1,100).reshape(-1,1)\ny = fun(x, fun_control=fun_control)\nplt.figure()\nplt.plot(x,y, \"k\")\nplt.show()\n\n\n\n\nSpot is adopted as follows to cope with noisy functions:\n\nfun_repeats is set to a value larger than 1 (here: 2)\nnoise is set to true. Therefore, a nugget (Lambda) term is added to the correlation matrix\ninit size (of the design_control dictionary) is set to a value larger than 1 (here: 2)\n\n\nspot_1_noisy = spot.Spot(fun=fun,\n                   lower = np.array([-1]),\n                   upper = np.array([1]),\n                   fun_evals = 50,\n                   fun_repeats = 2,\n                   infill_criterion=\"ei\",\n                   noise = True,\n                   tolerance_x=0.0,\n                   ocba_delta = 1,\n                   seed=123,\n                   show_models=True,\n                   fun_control = fun_control,\n                   design_control={\"init_size\": 3,\n                                   \"repeats\": 2},\n                   surrogate_control={\"noise\": True})\n\n\nspot_1_noisy.run()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x15ca19900&gt;"
  },
  {
    "objectID": "09_spot_ocba.html#print-the-results",
    "href": "09_spot_ocba.html#print-the-results",
    "title": "9  Handling Noise: Optimal Computational Budget Allocation in Spot",
    "section": "9.2 Print the Results",
    "text": "9.2 Print the Results\n\nspot_1_noisy.print_results()\n\nmin y: -0.08106318976988831\nx0: 0.13359994485364424\nmin mean y: -0.06294830657915665\nx0: 0.13359994485364424\n\n\n[['x0', 0.13359994485364424], ['x0', 0.13359994485364424]]\n\n\n\nspot_1_noisy.plot_progress(log_y=False)"
  },
  {
    "objectID": "09_spot_ocba.html#noise-and-surrogates-the-nugget-effect",
    "href": "09_spot_ocba.html#noise-and-surrogates-the-nugget-effect",
    "title": "9  Handling Noise: Optimal Computational Budget Allocation in Spot",
    "section": "9.3 Noise and Surrogates: The Nugget Effect",
    "text": "9.3 Noise and Surrogates: The Nugget Effect\n\n9.3.1 The Noisy Sphere\n\n9.3.1.1 The Data\nWe prepare some data first:\n\nimport numpy as np\nimport spotPython\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom spotPython.design.spacefilling import spacefilling\nfrom spotPython.build.kriging import Kriging\nimport matplotlib.pyplot as plt\n\ngen = spacefilling(1)\nrng = np.random.RandomState(1)\nlower = np.array([-10])\nupper = np.array([10])\nfun = analytical().fun_sphere\nfun_control = {\"sigma\": 2,\n               \"seed\": 125}\nX = gen.scipy_lhd(10, lower=lower, upper = upper)\ny = fun(X, fun_control=fun_control)\nX_train = X.reshape(-1,1)\ny_train = y\n\nA surrogate without nugget is fitted to these data:\n\nS = Kriging(name='kriging',\n            seed=123,\n            log_level=50,\n            n_theta=1,\n            noise=False)\nS.fit(X_train, y_train)\n\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X_axis, return_val=\"all\")\n\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Sphere: Gaussian process regression on noisy dataset\")\n\n\n\n\nIn comparison to the surrogate without nugget, we fit a surrogate with nugget to the data:\n\nS_nug = Kriging(name='kriging',\n            seed=123,\n            log_level=50,\n            n_theta=1,\n            noise=True)\nS_nug.fit(X_train, y_train)\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S_nug.predict(X_axis, return_val=\"all\")\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Sphere: Gaussian process regression with nugget on noisy dataset\")\n\n\n\n\nThe value of the nugget term can be extracted from the model as follows:\n\nS.Lambda\n\n\nS_nug.Lambda\n\n9.088150104540512e-05\n\n\nWe see:\n\nthe first model S has no nugget,\nwhereas the second model has a nugget value (Lambda) larger than zero."
  },
  {
    "objectID": "09_spot_ocba.html#exercises",
    "href": "09_spot_ocba.html#exercises",
    "title": "9  Handling Noise: Optimal Computational Budget Allocation in Spot",
    "section": "9.4 Exercises",
    "text": "9.4 Exercises\n\n9.4.1 Noisy fun_cubed\nAnalyse the effect of noise on the fun_cubed function with the following settings:\n\nfun = analytical().fun_cubed\nfun_control = {\"sigma\": 10,\n               \"seed\": 123}\nlower = np.array([-10])\nupper = np.array([10])\n\n\n\n9.4.2 fun_runge\nAnalyse the effect of noise on the fun_runge function with the following settings:\n\nlower = np.array([-10])\nupper = np.array([10])\nfun = analytical().fun_runge\nfun_control = {\"sigma\": 0.25,\n               \"seed\": 123}\n\n\n\n9.4.3 fun_forrester\nAnalyse the effect of noise on the fun_forrester function with the following settings:\n\nlower = np.array([0])\nupper = np.array([1])\nfun = analytical().fun_forrester\nfun_control = {\"sigma\": 5,\n               \"seed\": 123}\n\n\n\n9.4.4 fun_xsin\nAnalyse the effect of noise on the fun_xsin function with the following settings:\n\nlower = np.array([-1.])\nupper = np.array([1.])\nfun = analytical().fun_xsin\nfun_control = {\"sigma\": 0.5,\n               \"seed\": 123}\n\n\nspot_1_noisy.mean_y.shape[0]\n\n18"
  },
  {
    "objectID": "10_spot_hpt_sklearn_classification.html#sec-setup-10",
    "href": "10_spot_hpt_sklearn_classification.html#sec-setup-10",
    "title": "10  HPT: sklearn SVC on Moons Data",
    "section": "10.1 Step 1: Setup",
    "text": "10.1 Step 1: Setup\nBefore we consider the detailed experimental setup, we select the parameters that affect run time and the initial design size.\n\nMAX_TIME = 1\nINIT_SIZE = 5\n\n\nimport os\nimport copy\nimport socket\nfrom datetime import datetime\nfrom dateutil.tz import tzlocal\nstart_time = datetime.now(tzlocal())\nHOSTNAME = socket.gethostname().split(\".\")[0]\nexperiment_name = '10-sklearn' + \"_\" + HOSTNAME + \"_\" + str(MAX_TIME) + \"min_\" + str(INIT_SIZE) + \"init_\" + str(start_time).split(\".\", 1)[0].replace(' ', '_')\nexperiment_name = experiment_name.replace(':', '-')\nprint(experiment_name)\nif not os.path.exists('./figures'):\n    os.makedirs('./figures')\n\n10-sklearn_maans03_1min_5init_2023-07-03_10-14-03"
  },
  {
    "objectID": "10_spot_hpt_sklearn_classification.html#step-2-initialization-of-the-empty-fun_control-dictionary",
    "href": "10_spot_hpt_sklearn_classification.html#step-2-initialization-of-the-empty-fun_control-dictionary",
    "title": "10  HPT: sklearn SVC on Moons Data",
    "section": "10.2 Step 2: Initialization of the Empty fun_control Dictionary",
    "text": "10.2 Step 2: Initialization of the Empty fun_control Dictionary\n\n\n\n\n\n\nCaution: Tensorboard does not work under Windows\n\n\n\n\nSince tensorboard does not work under Windows, we recommend setting the parameter tensorboard_path to None if you are working under Windows.\n\n\n\n\nfrom spotPython.utils.init import fun_control_init\nfun_control = fun_control_init(task=\"classification\",\n    tensorboard_path=\"runs/10_spot_hpt_sklearn_classification\")"
  },
  {
    "objectID": "10_spot_hpt_sklearn_classification.html#sec-data-loading-10",
    "href": "10_spot_hpt_sklearn_classification.html#sec-data-loading-10",
    "title": "10  HPT: sklearn SVC on Moons Data",
    "section": "10.3 Step 3: SKlearn Load Data (Classification)",
    "text": "10.3 Step 3: SKlearn Load Data (Classification)\nRandomly generate classification data.\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import make_moons, make_circles, make_classification\nn_features = 2\nn_samples = 250\ntarget_column = \"y\"\nds =  make_moons(n_samples, noise=0.5, random_state=0)\nX, y = ds\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.4, random_state=42\n)\ntrain = pd.DataFrame(np.hstack((X_train, y_train.reshape(-1, 1))))\ntest = pd.DataFrame(np.hstack((X_test, y_test.reshape(-1, 1))))\ntrain.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\ntest.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\ntrain.head()\n\n\n\n\n\n\n\n\nx1\nx2\ny\n\n\n\n\n0\n1.083978\n-1.246111\n1.0\n\n\n1\n0.074916\n0.868104\n0.0\n\n\n2\n-1.668535\n0.751752\n0.0\n\n\n3\n1.286597\n1.454165\n0.0\n\n\n4\n1.387021\n0.448355\n1.0\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\n\nx_min, x_max = X[:, 0].min() - 0.5, X[:, 0].max() + 0.5\ny_min, y_max = X[:, 1].min() - 0.5, X[:, 1].max() + 0.5\ncm = plt.cm.RdBu\ncm_bright = ListedColormap([\"#FF0000\", \"#0000FF\"])\nax = plt.subplot(1, 1, 1)\nax.set_title(\"Input data\")\n# Plot the training points\nax.scatter(X_train[:, 0], X_train[:, 1], c=y_train, cmap=cm_bright, edgecolors=\"k\")\n# Plot the testing points\nax.scatter(\n    X_test[:, 0], X_test[:, 1], c=y_test, cmap=cm_bright, alpha=0.6, edgecolors=\"k\"\n)\nax.set_xlim(x_min, x_max)\nax.set_ylim(y_min, y_max)\nax.set_xticks(())\nax.set_yticks(())\nplt.tight_layout()\nplt.show()\n\n\n\n\n\nn_samples = len(train)\n# add the dataset to the fun_control\nfun_control.update({\"data\": None, # dataset,\n               \"train\": train,\n               \"test\": test,\n               \"n_samples\": n_samples,\n               \"target_column\": target_column})"
  },
  {
    "objectID": "10_spot_hpt_sklearn_classification.html#sec-specification-of-preprocessing-model-10",
    "href": "10_spot_hpt_sklearn_classification.html#sec-specification-of-preprocessing-model-10",
    "title": "10  HPT: sklearn SVC on Moons Data",
    "section": "10.4 Step 4: Specification of the Preprocessing Model",
    "text": "10.4 Step 4: Specification of the Preprocessing Model\nData preprocesssing can be very simple, e.g., you can ignore it. Then you would choose the prep_model “None”:\n\nprep_model = None\nfun_control.update({\"prep_model\": prep_model})\n\nA default approach for numerical data is the StandardScaler (mean 0, variance 1). This can be selected as follows:\n\nfrom sklearn.preprocessing import StandardScaler\nprep_model = StandardScaler()\nfun_control.update({\"prep_model\": prep_model})\n\nEven more complicated pre-processing steps are possible, e.g., the follwing pipeline:\n\n# categorical_columns = []\n# one_hot_encoder = OneHotEncoder(handle_unknown=\"ignore\", sparse_output=False)\n# prep_model = ColumnTransformer(\n#         transformers=[\n#             (\"categorical\", one_hot_encoder, categorical_columns),\n#         ],\n#         remainder=StandardScaler(),\n#     )"
  },
  {
    "objectID": "10_spot_hpt_sklearn_classification.html#step-5-select-model-algorithm-and-core_model_hyper_dict",
    "href": "10_spot_hpt_sklearn_classification.html#step-5-select-model-algorithm-and-core_model_hyper_dict",
    "title": "10  HPT: sklearn SVC on Moons Data",
    "section": "10.5 Step 5: Select Model (algorithm) and core_model_hyper_dict",
    "text": "10.5 Step 5: Select Model (algorithm) and core_model_hyper_dict\nThe selection of the algorithm (ML model) that should be tuned is done by specifying the its name from the sklearn implementation. For example, the SVC support vector machine classifier is selected as follows:\n\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.linear_model import ElasticNet\nfrom spotPython.hyperparameters.values import add_core_model_to_fun_control\nfrom spotPython.data.sklearn_hyper_dict import SklearnHyperDict\nfrom spotPython.fun.hypersklearn import HyperSklearn\n\n\n# core_model  = RidgeCV\n# core_model = GradientBoostingRegressor\n# core_model = ElasticNet\n# core_model = RandomForestClassifier\ncore_model = SVC\n# core_model = LogisticRegression\n# core_model = KNeighborsClassifier\n# core_model = GradientBoostingClassifier\nfun_control = add_core_model_to_fun_control(core_model=core_model,\n                              fun_control=fun_control,\n                              hyper_dict=SklearnHyperDict,\n                              filename=None)\n\nNow fun_control has the information from the JSON file. The corresponding entries for the core_model class are shown below.\n\nfun_control['core_model_hyper_dict']\n\n{'C': {'type': 'float',\n  'default': 1.0,\n  'transform': 'None',\n  'lower': 0.1,\n  'upper': 10.0},\n 'kernel': {'levels': ['linear', 'poly', 'rbf', 'sigmoid'],\n  'type': 'factor',\n  'default': 'rbf',\n  'transform': 'None',\n  'core_model_parameter_type': 'str',\n  'lower': 0,\n  'upper': 3},\n 'degree': {'type': 'int',\n  'default': 3,\n  'transform': 'None',\n  'lower': 3,\n  'upper': 3},\n 'gamma': {'levels': ['scale', 'auto'],\n  'type': 'factor',\n  'default': 'scale',\n  'transform': 'None',\n  'core_model_parameter_type': 'str',\n  'lower': 0,\n  'upper': 1},\n 'coef0': {'type': 'float',\n  'default': 0.0,\n  'transform': 'None',\n  'lower': 0.0,\n  'upper': 0.0},\n 'shrinking': {'levels': [0, 1],\n  'type': 'factor',\n  'default': 0,\n  'transform': 'None',\n  'core_model_parameter_type': 'bool',\n  'lower': 0,\n  'upper': 1},\n 'probability': {'levels': [0, 1],\n  'type': 'factor',\n  'default': 0,\n  'transform': 'None',\n  'core_model_parameter_type': 'bool',\n  'lower': 0,\n  'upper': 1},\n 'tol': {'type': 'float',\n  'default': 0.001,\n  'transform': 'None',\n  'lower': 0.0001,\n  'upper': 0.01},\n 'cache_size': {'type': 'float',\n  'default': 200,\n  'transform': 'None',\n  'lower': 100,\n  'upper': 400},\n 'break_ties': {'levels': [0, 1],\n  'type': 'factor',\n  'default': 0,\n  'transform': 'None',\n  'core_model_parameter_type': 'bool',\n  'lower': 0,\n  'upper': 1}}"
  },
  {
    "objectID": "10_spot_hpt_sklearn_classification.html#step-6-modify-hyper_dict-hyperparameters-for-the-selected-algorithm-aka-core_model",
    "href": "10_spot_hpt_sklearn_classification.html#step-6-modify-hyper_dict-hyperparameters-for-the-selected-algorithm-aka-core_model",
    "title": "10  HPT: sklearn SVC on Moons Data",
    "section": "10.6 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model",
    "text": "10.6 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model\nspotPython provides functions for modifying the hyperparameters, their bounds and factors as well as for activating and de-activating hyperparameters without re-compilation of the Python source code. These functions were described in Section 14.6.\n\n10.6.1 Modify hyperparameter of type numeric and integer (boolean)\nNumeric and boolean values can be modified using the modify_hyper_parameter_bounds method. For example, to change the tol hyperparameter of the SVC model to the interval [1e-3, 1e-2], the following code can be used:\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_bounds\nfun_control = modify_hyper_parameter_bounds(fun_control, \"tol\", bounds=[1e-3, 1e-2])\n# fun_control = modify_hyper_parameter_bounds(fun_control, \"min_samples_split\", bounds=[3, 20])\n#fun_control = modify_hyper_parameter_bounds(fun_control, \"merit_preprune\", bounds=[0, 0])\nfun_control[\"core_model_hyper_dict\"][\"tol\"]\n\n{'type': 'float',\n 'default': 0.001,\n 'transform': 'None',\n 'lower': 0.001,\n 'upper': 0.01}\n\n\n\n\n10.6.2 Modify hyperparameter of type factor\nFactors can be modified with the modify_hyper_parameter_levels function. For example, to exclude the sigmoid kernel from the tuning, the kernel hyperparameter of the SVC model can be modified as follows:\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_levels\nfun_control = modify_hyper_parameter_levels(fun_control, \"kernel\", [\"linear\", \"poly\", \"rbf\"])\nfun_control[\"core_model_hyper_dict\"][\"kernel\"]\n\n{'levels': ['linear', 'poly', 'rbf'],\n 'type': 'factor',\n 'default': 'rbf',\n 'transform': 'None',\n 'core_model_parameter_type': 'str',\n 'lower': 0,\n 'upper': 2}\n\n\n\n\n10.6.3 Optimizers\nOptimizers are described in Section 14.6.1."
  },
  {
    "objectID": "10_spot_hpt_sklearn_classification.html#step-7-selection-of-the-objective-loss-function",
    "href": "10_spot_hpt_sklearn_classification.html#step-7-selection-of-the-objective-loss-function",
    "title": "10  HPT: sklearn SVC on Moons Data",
    "section": "10.7 Step 7: Selection of the Objective (Loss) Function",
    "text": "10.7 Step 7: Selection of the Objective (Loss) Function\nThere are two metrics:\n\nmetric_river is used for the river based evaluation via eval_oml_iter_progressive.\nmetric_sklearn is used for the sklearn based evaluation.\n\n\nfrom sklearn.metrics import mean_absolute_error, accuracy_score, roc_curve, roc_auc_score, log_loss, mean_squared_error\nfun_control.update({\n               \"metric_sklearn\": log_loss,\n               })\n\n\n10.7.1 Predict Classes or Class Probabilities\nIf the key \"predict_proba\" is set to True, the class probabilities are predicted. False is the default, i.e., the classes are predicted.\n\nfun_control.update({\n               \"predict_proba\": False,\n               })"
  },
  {
    "objectID": "10_spot_hpt_sklearn_classification.html#step-8-calling-the-spot-function",
    "href": "10_spot_hpt_sklearn_classification.html#step-8-calling-the-spot-function",
    "title": "10  HPT: sklearn SVC on Moons Data",
    "section": "10.8 Step 8: Calling the SPOT Function",
    "text": "10.8 Step 8: Calling the SPOT Function\n\n10.8.1 Preparing the SPOT Call\nThe following code passes the information about the parameter ranges and bounds to spot.\n\n# extract the variable types, names, and bounds\nfrom spotPython.hyperparameters.values import (get_bound_values,\n    get_var_name,\n    get_var_type,)\nvar_type = get_var_type(fun_control)\nvar_name = get_var_name(fun_control)\nfun_control.update({\"var_type\": var_type,\n                    \"var_name\": var_name})\nlower = get_bound_values(fun_control, \"lower\")\nupper = get_bound_values(fun_control, \"upper\")\n\n\nfrom spotPython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control))\n\n| name        | type   | default   |   lower |   upper | transform   |\n|-------------|--------|-----------|---------|---------|-------------|\n| C           | float  | 1.0       |   0.1   |   10    | None        |\n| kernel      | factor | rbf       |   0     |    2    | None        |\n| degree      | int    | 3         |   3     |    3    | None        |\n| gamma       | factor | scale     |   0     |    1    | None        |\n| coef0       | float  | 0.0       |   0     |    0    | None        |\n| shrinking   | factor | 0         |   0     |    1    | None        |\n| probability | factor | 0         |   0     |    1    | None        |\n| tol         | float  | 0.001     |   0.001 |    0.01 | None        |\n| cache_size  | float  | 200.0     | 100     |  400    | None        |\n| break_ties  | factor | 0         |   0     |    1    | None        |\n\n\n\n\n10.8.2 The Objective Function\nThe objective function is selected next. It implements an interface from sklearn’s training, validation, and testing methods to spotPython.\n\nfrom spotPython.fun.hypersklearn import HyperSklearn\nfun = HyperSklearn().fun_sklearn\n\n\n\n10.8.3 Run the Spot Optimizer\n\nRun SPOT for approx. x mins (max_time).\nNote: the run takes longer, because the evaluation time of initial design (here: initi_size, 20 points) is not considered.\n\n\nfrom spotPython.hyperparameters.values import get_default_hyperparameters_as_array\nhyper_dict=SklearnHyperDict().load()\nX_start = get_default_hyperparameters_as_array(fun_control, hyper_dict)\nX_start\n\narray([[1.e+00, 2.e+00, 3.e+00, 0.e+00, 0.e+00, 0.e+00, 0.e+00, 1.e-03,\n        2.e+02, 0.e+00]])\n\n\n\n\n10.8.4 Starting the Hyperparameter Tuning\n\nimport numpy as np\nfrom spotPython.spot import spot\nfrom math import inf\nspot_tuner = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = inf,\n                   fun_repeats = 1,\n                   max_time = MAX_TIME,\n                   noise = False,\n                   tolerance_x = np.sqrt(np.spacing(1)),\n                   var_type = var_type,\n                   var_name = var_name,\n                   infill_criterion = \"y\",\n                   n_points = 1,\n                   seed=123,\n                   log_level = 50,\n                   show_models= False,\n                   show_progress= True,\n                   fun_control = fun_control,\n                   design_control={\"init_size\": INIT_SIZE,\n                                   \"repeats\": 1},\n                   surrogate_control={\"noise\": True,\n                                      \"cod_type\": \"norm\",\n                                      \"min_theta\": -4,\n                                      \"max_theta\": 3,\n                                      \"n_theta\": len(var_name),\n                                      \"model_fun_evals\": 10_000,\n                                      \"log_level\": 50\n                                      })\nspot_tuner.run(X_start=X_start)\n\nspotPython tuning: 5.691103166702708 [#---------] 7.45% \n\n\nspotPython tuning: 4.7425859722522565 [#---------] 11.13% \n\n\nspotPython tuning: 4.7425859722522565 [#---------] 14.73% \n\n\nspotPython tuning: 4.7425859722522565 [##--------] 18.16% \n\n\nspotPython tuning: 4.7425859722522565 [##--------] 21.27% \n\n\nspotPython tuning: 4.7425859722522565 [##--------] 23.89% \n\n\nspotPython tuning: 4.7425859722522565 [###-------] 34.24% \n\n\nspotPython tuning: 4.7425859722522565 [####------] 37.99% \n\n\nspotPython tuning: 4.7425859722522565 [#####-----] 50.14% \n\n\nspotPython tuning: 4.7425859722522565 [#####-----] 54.13% \n\n\nspotPython tuning: 4.7425859722522565 [######----] 57.23% \n\n\nspotPython tuning: 4.7425859722522565 [######----] 59.78% \n\n\nspotPython tuning: 4.7425859722522565 [#########-] 86.36% \n\n\nspotPython tuning: 4.7425859722522565 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x188e3c880&gt;"
  },
  {
    "objectID": "10_spot_hpt_sklearn_classification.html#sec-results-tuning-10",
    "href": "10_spot_hpt_sklearn_classification.html#sec-results-tuning-10",
    "title": "10  HPT: sklearn SVC on Moons Data",
    "section": "10.9 Step 9: Results",
    "text": "10.9 Step 9: Results\n\nSAVE = False\nLOAD = False\n\nif SAVE:\n    result_file_name = \"res_\" + experiment_name + \".pkl\"\n    with open(result_file_name, 'wb') as f:\n        pickle.dump(spot_tuner, f)\n\nif LOAD:\n    result_file_name = \"res_ch10-friedman-hpt-0_maans03_60min_20init_1K_2023-04-14_10-11-19.pkl\"\n    with open(result_file_name, 'rb') as f:\n        spot_tuner =  pickle.load(f)\n\nAfter the hyperparameter tuning run is finished, the progress of the hyperparameter tuning can be visualized. The following code generates the progress plot from ?fig-progress.\n\nspot_tuner.plot_progress(log_y=False,\n    filename=\"./figures/\" + experiment_name+\"_progress.png\")\n\n\n\n\nProgress plot. Black dots denote results from the initial design. Red dots illustrate the improvement found by the surrogate model based optimization.\n\n\n\n\n\nPrint the results\n\n\nprint(gen_design_table(fun_control=fun_control,\n    spot=spot_tuner))\n\n| name        | type   | default   |   lower |   upper |                tuned | transform   |   importance | stars   |\n|-------------|--------|-----------|---------|---------|----------------------|-------------|--------------|---------|\n| C           | float  | 1.0       |     0.1 |    10.0 |  0.23258412447782734 | None        |        94.62 | **      |\n| kernel      | factor | rbf       |     0.0 |     2.0 |                  1.0 | None        |        79.95 | **      |\n| degree      | int    | 3         |     3.0 |     3.0 |                  3.0 | None        |         0.00 |         |\n| gamma       | factor | scale     |     0.0 |     1.0 |                  0.0 | None        |       100.00 | ***     |\n| coef0       | float  | 0.0       |     0.0 |     0.0 |                  0.0 | None        |         0.00 |         |\n| shrinking   | factor | 0         |     0.0 |     1.0 |                  1.0 | None        |         0.00 |         |\n| probability | factor | 0         |     0.0 |     1.0 |                  1.0 | None        |         0.00 |         |\n| tol         | float  | 0.001     |   0.001 |    0.01 | 0.003757085413122674 | None        |         0.00 |         |\n| cache_size  | float  | 200.0     |   100.0 |   400.0 |   214.29269330654913 | None        |         0.00 |         |\n| break_ties  | factor | 0         |     0.0 |     1.0 |                  1.0 | None        |         0.00 |         |\n\n\n\n10.9.1 Show variable importance\n\nspot_tuner.plot_importance(threshold=0.025, filename=\"./figures/\" + experiment_name+\"_importance.png\")\n\n\n\n\nVariable importance plot, threshold 0.025.\n\n\n\n\n\n\n10.9.2 Get Default Hyperparameters\n\nfrom spotPython.hyperparameters.values import get_default_values, transform_hyper_parameter_values\nvalues_default = get_default_values(fun_control)\nvalues_default = transform_hyper_parameter_values(fun_control=fun_control, hyper_parameter_values=values_default)\nvalues_default\n\n{'C': 1.0,\n 'kernel': 'rbf',\n 'degree': 3,\n 'gamma': 'scale',\n 'coef0': 0.0,\n 'shrinking': 0,\n 'probability': 0,\n 'tol': 0.001,\n 'cache_size': 200.0,\n 'break_ties': 0}\n\n\n\nfrom sklearn.pipeline import make_pipeline\nmodel_default = make_pipeline(fun_control[\"prep_model\"], fun_control[\"core_model\"](**values_default))\nmodel_default\n\nPipeline(steps=[('standardscaler', StandardScaler()),\n                ('svc',\n                 SVC(break_ties=0, cache_size=200.0, probability=0,\n                     shrinking=0))])In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.PipelinePipeline(steps=[('standardscaler', StandardScaler()),\n                ('svc',\n                 SVC(break_ties=0, cache_size=200.0, probability=0,\n                     shrinking=0))])StandardScalerStandardScaler()SVCSVC(break_ties=0, cache_size=200.0, probability=0, shrinking=0)\n\n\n\n\n10.9.3 Get SPOT Results\n\nX = spot_tuner.to_all_dim(spot_tuner.min_X.reshape(1,-1))\nprint(X)\n\n[[2.32584124e-01 1.00000000e+00 3.00000000e+00 0.00000000e+00\n  0.00000000e+00 1.00000000e+00 1.00000000e+00 3.75708541e-03\n  2.14292693e+02 1.00000000e+00]]\n\n\n\nfrom spotPython.hyperparameters.values import assign_values, return_conf_list_from_var_dict\nv_dict = assign_values(X, fun_control[\"var_name\"])\nreturn_conf_list_from_var_dict(var_dict=v_dict, fun_control=fun_control)\n\n[{'C': 0.23258412447782734,\n  'kernel': 'poly',\n  'degree': 3,\n  'gamma': 'scale',\n  'coef0': 0.0,\n  'shrinking': 1,\n  'probability': 1,\n  'tol': 0.003757085413122674,\n  'cache_size': 214.29269330654913,\n  'break_ties': 1}]\n\n\n\nfrom spotPython.hyperparameters.values import get_one_sklearn_model_from_X\nmodel_spot = get_one_sklearn_model_from_X(X, fun_control)\nmodel_spot\n\nPipeline(steps=[('standardscaler', StandardScaler()),\n                ('svc',\n                 SVC(C=0.23258412447782734, break_ties=1,\n                     cache_size=214.29269330654913, kernel='poly',\n                     probability=1, shrinking=1, tol=0.003757085413122674))])In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.PipelinePipeline(steps=[('standardscaler', StandardScaler()),\n                ('svc',\n                 SVC(C=0.23258412447782734, break_ties=1,\n                     cache_size=214.29269330654913, kernel='poly',\n                     probability=1, shrinking=1, tol=0.003757085413122674))])StandardScalerStandardScaler()SVCSVC(C=0.23258412447782734, break_ties=1, cache_size=214.29269330654913,\n    kernel='poly', probability=1, shrinking=1, tol=0.003757085413122674)\n\n\n\n\n10.9.4 Plot: Compare Predictions\n\nfrom spotPython.plot.validation import plot_roc\nplot_roc([model_default, model_spot], fun_control, model_names=[\"Default\", \"Spot\"])\n\n\n\n\n\nfrom spotPython.plot.validation import plot_confusion_matrix\nplot_confusion_matrix(model_default, fun_control, title = \"Default\")\n\n\n\n\n\nplot_confusion_matrix(model_spot, fun_control, title=\"SPOT\")\n\n\n\n\n\nmin(spot_tuner.y), max(spot_tuner.y)\n\n(4.7425859722522565, 9.485171944504513)\n\n\n\n\n10.9.5 Detailed Hyperparameter Plots\n\nfilename = \"./figures/\" + experiment_name\nspot_tuner.plot_important_hyperparameter_contour(filename=filename)\n\nC:  94.61675997782429\nkernel:  79.94549507791352\ngamma:  100.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n10.9.6 Parallel Coordinates Plot\n\nspot_tuner.parallel_plot()\n\n\n                                                \n\n\n\n\n10.9.7 Plot all Combinations of Hyperparameters\n\nWarning: this may take a while.\n\n\nPLOT_ALL = False\nif PLOT_ALL:\n    n = spot_tuner.k\n    for i in range(n-1):\n        for j in range(i+1, n):\n            spot_tuner.plot_contour(i=i, j=j, min_z=min_z, max_z = max_z)"
  },
  {
    "objectID": "11_spot_hpt_torch_fashion_mnist.html#sec-setup-11",
    "href": "11_spot_hpt_torch_fashion_mnist.html#sec-setup-11",
    "title": "11  HPT: PyTorch With fashionMNIST",
    "section": "11.1 Step 1: Setup",
    "text": "11.1 Step 1: Setup\nBefore we consider the detailed experimental setup, we select the parameters that affect run time, initial design size and the device that is used.\n\n\n\n\n\n\nCaution: Run time and initial design size should be increased for real experiments\n\n\n\n\nMAX_TIME is set to one minute for demonstration purposes. For real experiments, this should be increased to at least 1 hour.\nINIT_SIZE is set to 5 for demonstration purposes. For real experiments, this should be increased to at least 10.\n\n\n\n\n\n\n\n\n\nNote: Device selection\n\n\n\n\nThe device can be selected by setting the variable DEVICE.\nSince we are using a simple neural net, the setting \"cpu\" is preferred (on Mac).\nIf you have a GPU, you can use \"cuda:0\" instead.\nIf DEVICE is set to None, spotPython will automatically select the device.\n\nThis might result in \"mps\" on Macs, which is not the best choice for simple neural nets.\n\n\n\n\n\nMAX_TIME = 1\nINIT_SIZE = 5\nDEVICE = \"cpu\" # \"cuda:0\"\n\n\nfrom spotPython.utils.device import getDevice\nDEVICE = getDevice(DEVICE)\nprint(DEVICE)\n\ncpu\n\n\n\nimport os\nimport copy\nimport socket\nfrom datetime import datetime\nfrom dateutil.tz import tzlocal\nstart_time = datetime.now(tzlocal())\nHOSTNAME = socket.gethostname().split(\".\")[0]\nexperiment_name = '11-torch' + \"_\" + HOSTNAME + \"_\" + str(MAX_TIME) + \"min_\" + str(INIT_SIZE) + \"init_\" + str(start_time).split(\".\", 1)[0].replace(' ', '_')\nexperiment_name = experiment_name.replace(':', '-')\nprint(experiment_name)\nif not os.path.exists('./figures'):\n    os.makedirs('./figures')\n\n11-torch_maans03_1min_5init_2023-07-03_10-17-02"
  },
  {
    "objectID": "11_spot_hpt_torch_fashion_mnist.html#step-2-initialization-of-the-empty-fun_control-dictionary",
    "href": "11_spot_hpt_torch_fashion_mnist.html#step-2-initialization-of-the-empty-fun_control-dictionary",
    "title": "11  HPT: PyTorch With fashionMNIST",
    "section": "11.2 Step 2: Initialization of the Empty fun_control Dictionary",
    "text": "11.2 Step 2: Initialization of the Empty fun_control Dictionary\nspotPython uses a Python dictionary for storing the information required for the hyperparameter tuning process, which was described in Section 14.2.\n\n\n\n\n\n\nCaution: Tensorboard does not work under Windows\n\n\n\n\nSince tensorboard does not work under Windows, we recommend setting the parameter tensorboard_path to None if you are working under Windows.\n\n\n\n\nfrom spotPython.utils.init import fun_control_init\nfun_control = fun_control_init(task=\"classification\",\n    tensorboard_path=\"runs/11_spot_hpt_torch_fashion_mnist\",\n    device=DEVICE)"
  },
  {
    "objectID": "11_spot_hpt_torch_fashion_mnist.html#sec-data-loading-11",
    "href": "11_spot_hpt_torch_fashion_mnist.html#sec-data-loading-11",
    "title": "11  HPT: PyTorch With fashionMNIST",
    "section": "11.3 Step 3: PyTorch Data Loading",
    "text": "11.3 Step 3: PyTorch Data Loading\n\n11.3.1 Load fashionMNIST Data\n\nfrom torchvision import datasets, transforms\nfrom torchvision.transforms import ToTensor\ndef load_data(data_dir=\"./data\"):\n    # Download training data from open datasets.\n    training_data = datasets.FashionMNIST(\n        root=data_dir,\n        train=True,\n        download=True,\n        transform=ToTensor(),\n    )\n    # Download test data from open datasets.\n    test_data = datasets.FashionMNIST(\n        root=data_dir,\n        train=False,\n        download=True,\n        transform=ToTensor(),\n    )\n    return training_data, test_data\n\n\ntrain, test = load_data()\ntrain.data.shape, test.data.shape\n\n(torch.Size([60000, 28, 28]), torch.Size([10000, 28, 28]))\n\n\n\nn_samples = len(train)\n# add the dataset to the fun_control\nfun_control.update({\"data\": None,\n               \"train\": train,\n               \"test\": test,\n               \"n_samples\": n_samples,\n               \"target_column\": None})"
  },
  {
    "objectID": "11_spot_hpt_torch_fashion_mnist.html#sec-specification-of-preprocessing-model-11",
    "href": "11_spot_hpt_torch_fashion_mnist.html#sec-specification-of-preprocessing-model-11",
    "title": "11  HPT: PyTorch With fashionMNIST",
    "section": "11.4 Step 4: Specification of the Preprocessing Model",
    "text": "11.4 Step 4: Specification of the Preprocessing Model\nAfter the training and test data are specified and added to the fun_control dictionary, spotPython allows the specification of a data preprocessing pipeline, e.g., for the scaling of the data or for the one-hot encoding of categorical variables, see Section 14.4. This feature is not used here, so we do not change the default value (which is None)."
  },
  {
    "objectID": "11_spot_hpt_torch_fashion_mnist.html#sec-selection-of-the-algorithm-11",
    "href": "11_spot_hpt_torch_fashion_mnist.html#sec-selection-of-the-algorithm-11",
    "title": "11  HPT: PyTorch With fashionMNIST",
    "section": "11.5 Step 5: Select Model (algorithm) and core_model_hyper_dict",
    "text": "11.5 Step 5: Select Model (algorithm) and core_model_hyper_dict\nspotPython implements a class which is similar to the class described in the PyTorch tutorial. The class is called Net_fashionMNIST and is implemented in the file netfashionMNIST.py. The class is imported here.\n\nfrom torch import nn\nimport spotPython.torch.netcore as netcore\n\n\nclass Net_fashionMNIST(netcore.Net_Core):\n    def __init__(self, l1, l2, lr_mult, batch_size, epochs, k_folds, patience, optimizer, sgd_momentum):\n        super(Net_fashionMNIST, self).__init__(\n            lr_mult=lr_mult,\n            batch_size=batch_size,\n            epochs=epochs,\n            k_folds=k_folds,\n            patience=patience,\n            optimizer=optimizer,\n            sgd_momentum=sgd_momentum,\n        )\n        self.flatten = nn.Flatten()\n        self.linear_relu_stack = nn.Sequential(\n            nn.Linear(28 * 28, l1),\n            nn.ReLU(),\n            nn.Linear(l1, l2),\n            nn.ReLU(),\n            nn.Linear(l2, 10)\n        )\n\n    def forward(self, x):\n        x = self.flatten(x)\n        logits = self.linear_relu_stack(x)\n        return logits\n\nThis class inherits from the class Net_Core which is implemented in the file netcore.py, see Section 14.5.1.\n\nfrom spotPython.data.torch_hyper_dict import TorchHyperDict\nfrom spotPython.torch.netfashionMNIST import Net_fashionMNIST\nfrom spotPython.hyperparameters.values import add_core_model_to_fun_control\nfun_control = add_core_model_to_fun_control(core_model=Net_fashionMNIST,\n                              fun_control=fun_control,\n                              hyper_dict=TorchHyperDict,\n                              filename=None)\n\n\n11.5.1 The Search Space\n\n\n11.5.2 Configuring the Search Space With spotPython\n\n11.5.2.1 The hyper_dict Hyperparameters for the Selected Algorithm\nspotPython uses JSON files for the specification of the hyperparameters, which were described in Section 14.5.5.\nThe corresponding entries for the core_model class are shown below.\n\nfun_control['core_model_hyper_dict']\n\n{'l1': {'type': 'int',\n  'default': 5,\n  'transform': 'transform_power_2_int',\n  'lower': 2,\n  'upper': 9},\n 'l2': {'type': 'int',\n  'default': 5,\n  'transform': 'transform_power_2_int',\n  'lower': 2,\n  'upper': 9},\n 'lr_mult': {'type': 'float',\n  'default': 1.0,\n  'transform': 'None',\n  'lower': 0.1,\n  'upper': 10.0},\n 'batch_size': {'type': 'int',\n  'default': 4,\n  'transform': 'transform_power_2_int',\n  'lower': 1,\n  'upper': 4},\n 'epochs': {'type': 'int',\n  'default': 3,\n  'transform': 'transform_power_2_int',\n  'lower': 3,\n  'upper': 4},\n 'k_folds': {'type': 'int',\n  'default': 1,\n  'transform': 'None',\n  'lower': 1,\n  'upper': 1},\n 'patience': {'type': 'int',\n  'default': 5,\n  'transform': 'None',\n  'lower': 2,\n  'upper': 10},\n 'optimizer': {'levels': ['Adadelta',\n   'Adagrad',\n   'Adam',\n   'AdamW',\n   'SparseAdam',\n   'Adamax',\n   'ASGD',\n   'NAdam',\n   'RAdam',\n   'RMSprop',\n   'Rprop',\n   'SGD'],\n  'type': 'factor',\n  'default': 'SGD',\n  'transform': 'None',\n  'core_model_parameter_type': 'str',\n  'lower': 0,\n  'upper': 12},\n 'sgd_momentum': {'type': 'float',\n  'default': 0.0,\n  'transform': 'None',\n  'lower': 0.0,\n  'upper': 1.0}}"
  },
  {
    "objectID": "11_spot_hpt_torch_fashion_mnist.html#step-6-modify-hyper_dict-hyperparameters-for-the-selected-algorithm-aka-core_model",
    "href": "11_spot_hpt_torch_fashion_mnist.html#step-6-modify-hyper_dict-hyperparameters-for-the-selected-algorithm-aka-core_model",
    "title": "11  HPT: PyTorch With fashionMNIST",
    "section": "11.6 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model",
    "text": "11.6 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model\nspotPython provides functions for modifying the hyperparameters, their bounds and factors as well as for activating and de-activating hyperparameters without re-compilation of the Python source code. These functions were described in Section 14.6.\n\n11.6.1 Modify hyperparameter of type numeric and integer (boolean)\nThe hyperparameter k_folds is not used, it is de-activated here by setting the lower and upper bound to the same value.\n\n\n\n\n\n\nCaution: Small net size, number of epochs, and patience for demonstration purposes\n\n\n\n\nNet sizes l1 and l2 as well as epochs and patience are set to small values for demonstration purposes. These values are too small for a real application.\nMore resonable values are, e.g.:\n\nfun_control = modify_hyper_parameter_bounds(fun_control, \"l1\", bounds=[2, 7])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"epochs\", bounds=[7, 9]) and\nfun_control = modify_hyper_parameter_bounds(fun_control, \"patience\", bounds=[2, 7])\n\n\n\n\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_bounds\nfun_control = modify_hyper_parameter_bounds(fun_control, \"k_folds\", bounds=[0, 0])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"patience\", bounds=[2, 2])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"epochs\", bounds=[2, 3])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"l1\", bounds=[2, 5])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"l2\", bounds=[2, 5])\n\n\n\n11.6.2 Modify hyperparameter of type factor\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_levels\nfun_control = modify_hyper_parameter_levels(fun_control, \"optimizer\",[\"Adam\", \"AdamW\", \"Adamax\", \"NAdam\"])\n\n\n\n11.6.3 Optimizers\nOptimizers are described in Section 14.6.1.\n\nfun_control = modify_hyper_parameter_bounds(fun_control,\n    \"lr_mult\", bounds=[1e-3, 1e-3])\nfun_control = modify_hyper_parameter_bounds(fun_control,\n    \"sgd_momentum\", bounds=[0.9, 0.9])"
  },
  {
    "objectID": "11_spot_hpt_torch_fashion_mnist.html#step-7-selection-of-the-objective-loss-function",
    "href": "11_spot_hpt_torch_fashion_mnist.html#step-7-selection-of-the-objective-loss-function",
    "title": "11  HPT: PyTorch With fashionMNIST",
    "section": "11.7 Step 7: Selection of the Objective (Loss) Function",
    "text": "11.7 Step 7: Selection of the Objective (Loss) Function\n\n11.7.1 Evaluation\nThe evaluation procedure requires the specification of two elements:\n\nthe way how the data is split into a train and a test set and\nthe loss function (and a metric).\n\nThese are described in Section 19.7.1.\nThe key \"loss_function\" specifies the loss function which is used during the optimization, see Section 14.7.5.\nWe will use CrossEntropy loss for the multiclass-classification task.\n\nfrom torch.nn import CrossEntropyLoss\nloss_function = CrossEntropyLoss()\nfun_control.update({\n        \"loss_function\": loss_function,\n        \"shuffle\": True,\n        \"eval\":  \"train_hold_out\"\n        })\n\n\n\n11.7.2 Metric\n\nfrom torchmetrics import Accuracy\nmetric_torch = Accuracy(task=\"multiclass\", num_classes=10).to(fun_control[\"device\"])\nfun_control.update({\"metric_torch\": metric_torch})"
  },
  {
    "objectID": "11_spot_hpt_torch_fashion_mnist.html#step-8-calling-the-spot-function",
    "href": "11_spot_hpt_torch_fashion_mnist.html#step-8-calling-the-spot-function",
    "title": "11  HPT: PyTorch With fashionMNIST",
    "section": "11.8 Step 8: Calling the SPOT Function",
    "text": "11.8 Step 8: Calling the SPOT Function\n\n11.8.1 Preparing the SPOT Call\nThe following code passes the information about the parameter ranges and bounds to spot.\n\n# extract the variable types, names, and bounds\nfrom spotPython.hyperparameters.values import (get_bound_values,\n    get_var_name,\n    get_var_type,)\nvar_type = get_var_type(fun_control)\nvar_name = get_var_name(fun_control)\nfun_control.update({\"var_type\": var_type,\n                    \"var_name\": var_name})\nlower = get_bound_values(fun_control, \"lower\")\nupper = get_bound_values(fun_control, \"upper\")\n\n\nfrom spotPython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control))\n\n| name         | type   | default   |   lower |   upper | transform             |\n|--------------|--------|-----------|---------|---------|-----------------------|\n| l1           | int    | 5         |   2     |   5     | transform_power_2_int |\n| l2           | int    | 5         |   2     |   5     | transform_power_2_int |\n| lr_mult      | float  | 1.0       |   0.001 |   0.001 | None                  |\n| batch_size   | int    | 4         |   1     |   4     | transform_power_2_int |\n| epochs       | int    | 3         |   2     |   3     | transform_power_2_int |\n| k_folds      | int    | 1         |   0     |   0     | None                  |\n| patience     | int    | 5         |   2     |   2     | None                  |\n| optimizer    | factor | SGD       |   0     |   3     | None                  |\n| sgd_momentum | float  | 0.0       |   0.9   |   0.9   | None                  |\n\n\n\n\n11.8.2 The Objective Function fun_torch\nThe objective function fun_torch is selected next. It implements an interface from PyTorch’s training, validation, and testing methods to spotPython.\n\nfrom spotPython.fun.hypertorch import HyperTorch\nfun = HyperTorch().fun_torch\n\n\n\n11.8.3 Starting the Hyperparameter Tuning\n\nimport numpy as np\nfrom spotPython.spot import spot\nfrom math import inf\nspot_tuner = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = inf,\n                   fun_repeats = 1,\n                   max_time = MAX_TIME,\n                   noise = False,\n                   tolerance_x = np.sqrt(np.spacing(1)),\n                   var_type = var_type,\n                   var_name = var_name,\n                   infill_criterion = \"y\",\n                   n_points = 1,\n                   seed=123,\n                   log_level = 50,\n                   show_models= False,\n                   show_progress= True,\n                   fun_control = fun_control,\n                   design_control={\"init_size\": INIT_SIZE,\n                                   \"repeats\": 1},\n                   surrogate_control={\"noise\": True,\n                                      \"cod_type\": \"norm\",\n                                      \"min_theta\": -4,\n                                      \"max_theta\": 3,\n                                      \"n_theta\": len(var_name),\n                                      \"model_fun_evals\": 10_000,\n                                      \"log_level\": 50\n                                      })\nspot_tuner.run(X_start=X_start)\n\n\nconfig: {'l1': 16, 'l2': 8, 'lr_mult': 0.001, 'batch_size': 16, 'epochs': 8, 'k_folds': 0, 'patience': 2, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMulticlassAccuracy: 0.1008749976754189 | Loss: 2.2977782964706419 | Acc: 0.1008750000000000.\nEpoch: 2 | \n\n\nMulticlassAccuracy: 0.1008749976754189 | Loss: 2.2848516825040179 | Acc: 0.1008750000000000.\nEpoch: 3 | \n\n\nMulticlassAccuracy: 0.1042916700243950 | Loss: 2.2723414971033731 | Acc: 0.1042916666666667.\nEpoch: 4 | \n\n\nMulticlassAccuracy: 0.1177916675806046 | Loss: 2.2598017977078757 | Acc: 0.1177916666666667.\nEpoch: 5 | \n\n\nMulticlassAccuracy: 0.1354583352804184 | Loss: 2.2468707537651063 | Acc: 0.1354583333333333.\nEpoch: 6 | \n\n\nMulticlassAccuracy: 0.1479583382606506 | Loss: 2.2336346349716187 | Acc: 0.1479583333333333.\nEpoch: 7 | \n\n\nMulticlassAccuracy: 0.1597083359956741 | Loss: 2.2200212612152099 | Acc: 0.1597083333333333.\nEpoch: 8 | \n\n\nMulticlassAccuracy: 0.1765416711568832 | Loss: 2.2061852587064106 | Acc: 0.1765416666666667.\nReturned to Spot: Validation loss: 2.2061852587064106\n\nconfig: {'l1': 8, 'l2': 8, 'lr_mult': 0.001, 'batch_size': 8, 'epochs': 4, 'k_folds': 0, 'patience': 2, 'optimizer': 'Adamax', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMulticlassAccuracy: 0.1274999976158142 | Loss: 2.3507174194653828 | Acc: 0.1275000000000000.\nEpoch: 2 | \n\n\nMulticlassAccuracy: 0.1398749947547913 | Loss: 2.3380448350111642 | Acc: 0.1398750000000000.\nEpoch: 3 | \n\n\nMulticlassAccuracy: 0.1424166709184647 | Loss: 2.3204975862503052 | Acc: 0.1424166666666667.\nEpoch: 4 | \n\n\nMulticlassAccuracy: 0.1434166729450226 | Loss: 2.3063520757357279 | Acc: 0.1434166666666667.\nReturned to Spot: Validation loss: 2.306352075735728\n\nconfig: {'l1': 32, 'l2': 16, 'lr_mult': 0.001, 'batch_size': 2, 'epochs': 8, 'k_folds': 0, 'patience': 2, 'optimizer': 'NAdam', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMulticlassAccuracy: 0.1800833344459534 | Loss: 2.1352689491907757 | Acc: 0.1800833333333333.\nEpoch: 2 | \n\n\nMulticlassAccuracy: 0.3207083344459534 | Loss: 1.9540089417397977 | Acc: 0.3207083333333333.\nEpoch: 3 | \n\n\nMulticlassAccuracy: 0.4493333399295807 | Loss: 1.7582998426010212 | Acc: 0.4493333333333333.\nEpoch: 4 | \n\n\nMulticlassAccuracy: 0.5227500200271606 | Loss: 1.5738397979810834 | Acc: 0.5227500000000000.\nEpoch: 5 | \n\n\nMulticlassAccuracy: 0.5304583311080933 | Loss: 1.4117284052881103 | Acc: 0.5304583333333334.\nEpoch: 6 | \n\n\nMulticlassAccuracy: 0.6135416626930237 | Loss: 1.2744226018749178 | Acc: 0.6135416666666667.\nEpoch: 7 | \n\n\nMulticlassAccuracy: 0.6387083530426025 | Loss: 1.1665975301762421 | Acc: 0.6387083333333333.\nEpoch: 8 | \n\n\nMulticlassAccuracy: 0.6391249895095825 | Loss: 1.0911609180184703 | Acc: 0.6391250000000001.\nReturned to Spot: Validation loss: 1.0911609180184703\n\nconfig: {'l1': 4, 'l2': 8, 'lr_mult': 0.001, 'batch_size': 4, 'epochs': 4, 'k_folds': 0, 'patience': 2, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMulticlassAccuracy: 0.1493333280086517 | Loss: 2.3130540801286696 | Acc: 0.1493333333333333.\nEpoch: 2 | \n\n\nMulticlassAccuracy: 0.1315416693687439 | Loss: 2.3043103766043980 | Acc: 0.1315416666666667.\nEpoch: 3 | \n\n\nMulticlassAccuracy: 0.1222083345055580 | Loss: 2.2871728708744050 | Acc: 0.1222083333333333.\nEpoch: 4 | \n\n\nMulticlassAccuracy: 0.1189583316445351 | Loss: 2.2711666022340458 | Acc: 0.1189583333333333.\nReturned to Spot: Validation loss: 2.2711666022340458\n\nconfig: {'l1': 16, 'l2': 32, 'lr_mult': 0.001, 'batch_size': 8, 'epochs': 8, 'k_folds': 0, 'patience': 2, 'optimizer': 'Adam', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMulticlassAccuracy: 0.1960833370685577 | Loss: 2.2842108801205954 | Acc: 0.1960833333333333.\nEpoch: 2 | \n\n\nMulticlassAccuracy: 0.2126249969005585 | Loss: 2.2636893765131632 | Acc: 0.2126250000000000.\nEpoch: 3 | \n\n\nMulticlassAccuracy: 0.2503750026226044 | Loss: 2.2404759271939594 | Acc: 0.2503750000000000.\nEpoch: 4 | \n\n\nMulticlassAccuracy: 0.3181666731834412 | Loss: 2.2149134116967519 | Acc: 0.3181666666666667.\nEpoch: 5 | \n\n\nMulticlassAccuracy: 0.3484166562557220 | Loss: 2.1846798245906829 | Acc: 0.3484166666666667.\nEpoch: 6 | \n\n\nMulticlassAccuracy: 0.3682083189487457 | Loss: 2.1514494522015255 | Acc: 0.3682083333333334.\nEpoch: 7 | \n\n\nMulticlassAccuracy: 0.3990833461284637 | Loss: 2.1156194982131322 | Acc: 0.3990833333333333.\nEpoch: 8 | \n\n\nMulticlassAccuracy: 0.4272083342075348 | Loss: 2.0771733982563019 | Acc: 0.4272083333333334.\nReturned to Spot: Validation loss: 2.077173398256302\n\n\n\nconfig: {'l1': 8, 'l2': 16, 'lr_mult': 0.001, 'batch_size': 8, 'epochs': 8, 'k_folds': 0, 'patience': 2, 'optimizer': 'NAdam', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMulticlassAccuracy: 0.1019999980926514 | Loss: 2.2929790640672048 | Acc: 0.1020000000000000.\nEpoch: 2 | \n\n\nMulticlassAccuracy: 0.1019999980926514 | Loss: 2.2677730861504872 | Acc: 0.1020000000000000.\nEpoch: 3 | \n\n\nMulticlassAccuracy: 0.1020416691899300 | Loss: 2.2388499063650769 | Acc: 0.1020416666666667.\nEpoch: 4 | \n\n\nMulticlassAccuracy: 0.1022083312273026 | Loss: 2.2041082998514177 | Acc: 0.1022083333333333.\nEpoch: 5 | \n\n\nMulticlassAccuracy: 0.1037499979138374 | Loss: 2.1723692315419516 | Acc: 0.1037500000000000.\nEpoch: 6 | \n\n\nMulticlassAccuracy: 0.1137916669249535 | Loss: 2.1327384761174519 | Acc: 0.1137916666666667.\nEpoch: 7 | \n\n\nMulticlassAccuracy: 0.1447083353996277 | Loss: 2.0856389589309692 | Acc: 0.1447083333333333.\nEpoch: 8 | \n\n\nMulticlassAccuracy: 0.1749999970197678 | Loss: 2.0325956790447237 | Acc: 0.1750000000000000.\nReturned to Spot: Validation loss: 2.0325956790447237\n\n\nspotPython tuning: 1.0911609180184703 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x18cd16cb0&gt;"
  },
  {
    "objectID": "11_spot_hpt_torch_fashion_mnist.html#sec-tensorboard-11",
    "href": "11_spot_hpt_torch_fashion_mnist.html#sec-tensorboard-11",
    "title": "11  HPT: PyTorch With fashionMNIST",
    "section": "11.9 Step 9: Tensorboard",
    "text": "11.9 Step 9: Tensorboard\nThe textual output shown in the console (or code cell) can be visualized with Tensorboard as described in Section 14.9, see also the description in the documentation: Tensorboard."
  },
  {
    "objectID": "11_spot_hpt_torch_fashion_mnist.html#sec-results-tuning-11",
    "href": "11_spot_hpt_torch_fashion_mnist.html#sec-results-tuning-11",
    "title": "11  HPT: PyTorch With fashionMNIST",
    "section": "11.10 Step 10: Results",
    "text": "11.10 Step 10: Results\nAfter the hyperparameter tuning run is finished, the results can be analyzed as described in Section 14.10.\n\nSAVE = False\nLOAD = False\n\nif SAVE:\n    result_file_name = \"res_\" + experiment_name + \".pkl\"\n    with open(result_file_name, 'wb') as f:\n        pickle.dump(spot_tuner, f)\n\nif LOAD:\n    result_file_name = \"ADD THE NAME here, e.g.: res_ch10-friedman-hpt-0_maans03_60min_20init_1K_2023-04-14_10-11-19.pkl\"\n    with open(result_file_name, 'rb') as f:\n        spot_tuner =  pickle.load(f)\n\nAfter the hyperparameter tuning run is finished, the progress of the hyperparameter tuning can be visualized. The following code generates the progress plot from ?fig-progress.\n\nspot_tuner.plot_progress(log_y=False,\n    filename=\"./figures/\" + experiment_name+\"_progress.png\")\n\n\n\n\nProgress plot. Black dots denote results from the initial design. Red dots illustrate the improvement found by the surrogate model based optimization.\n\n\n\n\n\nPrint the results\n\n\nprint(gen_design_table(fun_control=fun_control,\n    spot=spot_tuner))\n\n| name         | type   | default   |   lower |   upper |   tuned | transform             |   importance | stars   |\n|--------------|--------|-----------|---------|---------|---------|-----------------------|--------------|---------|\n| l1           | int    | 5         |     2.0 |     5.0 |     5.0 | transform_power_2_int |        85.25 | **      |\n| l2           | int    | 5         |     2.0 |     5.0 |     4.0 | transform_power_2_int |         0.00 |         |\n| lr_mult      | float  | 1.0       |   0.001 |   0.001 |   0.001 | None                  |         0.00 |         |\n| batch_size   | int    | 4         |     1.0 |     4.0 |     1.0 | transform_power_2_int |       100.00 | ***     |\n| epochs       | int    | 3         |     2.0 |     3.0 |     3.0 | transform_power_2_int |         0.00 |         |\n| k_folds      | int    | 1         |     0.0 |     0.0 |     0.0 | None                  |         0.00 |         |\n| patience     | int    | 5         |     2.0 |     2.0 |     2.0 | None                  |         0.00 |         |\n| optimizer    | factor | SGD       |     0.0 |     3.0 |     3.0 | None                  |        97.44 | ***     |\n| sgd_momentum | float  | 0.0       |     0.9 |     0.9 |     0.9 | None                  |         0.00 |         |\n\n\n\n11.10.1 Show variable importance\n\nspot_tuner.plot_importance(threshold=0.025, filename=\"./figures/\" + experiment_name+\"_importance.png\")\n\n\n\n\nVariable importance plot, threshold 0.025.\n\n\n\n\n\n\n11.10.2 Get the Tuned Architecture (SPOT Results)\nThe architecture of the spotPython model can be obtained by the following code:\n\nfrom spotPython.hyperparameters.values import get_one_core_model_from_X\nX = spot_tuner.to_all_dim(spot_tuner.min_X.reshape(1,-1))\nmodel_spot = get_one_core_model_from_X(X, fun_control)\nmodel_spot\n\nNet_fashionMNIST(\n  (flatten): Flatten(start_dim=1, end_dim=-1)\n  (linear_relu_stack): Sequential(\n    (0): Linear(in_features=784, out_features=32, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=32, out_features=16, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=16, out_features=10, bias=True)\n  )\n)\n\n\n\n\n11.10.3 Get Default Hyperparameters\n\nfc = fun_control\nfc.update({\"core_model_hyper_dict\":\n    hyper_dict[fun_control[\"core_model\"].__name__]})\nmodel_default = get_one_core_model_from_X(X_start, fun_control=fc)\nmodel_default\n\nNet_fashionMNIST(\n  (flatten): Flatten(start_dim=1, end_dim=-1)\n  (linear_relu_stack): Sequential(\n    (0): Linear(in_features=784, out_features=32, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=32, out_features=32, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=32, out_features=10, bias=True)\n  )\n)\n\n\n\n\n11.10.4 Evaluation of the Default and the Tuned Architectures\nThe method train_tuned takes a model architecture without trained weights and trains this model with the train data. The train data is split into train and validation data. The validation data is used for early stopping. The trained model weights are saved as a dictionary.\n\nfrom spotPython.torch.traintest import train_tuned\ntrain_tuned(net=model_default, train_dataset=train, shuffle=True,\n        loss_function=fun_control[\"loss_function\"],\n        metric=fun_control[\"metric_torch\"],\n        device = fun_control[\"device\"],\n        show_batch_interval=1_000_000,\n        path=None,\n        task=fun_control[\"task\"])\n\nEpoch: 1 | \n\n\nMulticlassAccuracy: 0.3722916543483734 | Loss: 2.0754299880663556 | Acc: 0.3722916666666667.\nEpoch: 2 | \n\n\nMulticlassAccuracy: 0.5687916874885559 | Loss: 1.5182934633096059 | Acc: 0.5687916666666667.\nEpoch: 3 | \n\n\nMulticlassAccuracy: 0.6010416746139526 | Loss: 1.2225897694428762 | Acc: 0.6010416666666667.\nEpoch: 4 | \n\n\nMulticlassAccuracy: 0.6252083182334900 | Loss: 1.0736844333807627 | Acc: 0.6252083333333334.\nEpoch: 5 | \n\n\nMulticlassAccuracy: 0.6464166641235352 | Loss: 0.9859142975608508 | Acc: 0.6464166666666666.\nEpoch: 6 | \n\n\nMulticlassAccuracy: 0.6554999947547913 | Loss: 0.9291729355653127 | Acc: 0.6555000000000000.\nEpoch: 7 | \n\n\nMulticlassAccuracy: 0.6671666502952576 | Loss: 0.8874406706293424 | Acc: 0.6671666666666667.\nEpoch: 8 | \n\n\nMulticlassAccuracy: 0.6760833263397217 | Loss: 0.8565445574323336 | Acc: 0.6760833333333334.\nReturned to Spot: Validation loss: 0.8565445574323336\n\n\n\nfrom spotPython.torch.traintest import test_tuned\ntest_tuned(net=model_default, test_dataset=test, \n        loss_function=fun_control[\"loss_function\"],\n        metric=fun_control[\"metric_torch\"],\n        shuffle=False, \n        device = fun_control[\"device\"],\n        task=fun_control[\"task\"])\n\nMulticlassAccuracy: 0.6665999889373779 | Loss: 0.8699883942604065 | Acc: 0.6666000000000000.\nFinal evaluation: Validation loss: 0.8699883942604065\nFinal evaluation: Validation metric: 0.6665999889373779\n----------------------------------------------\n\n\n(0.8699883942604065, nan, tensor(0.6666))\n\n\nThe following code trains the model model_spot. If path is set to a filename, e.g., path = \"model_spot_trained.pt\", the weights of the trained model will be saved to this file.\n\ntrain_tuned(net=model_spot, train_dataset=train,\n        loss_function=fun_control[\"loss_function\"],\n        metric=fun_control[\"metric_torch\"],\n        shuffle=True,\n        device = fun_control[\"device\"],\n        path=None,\n        task=fun_control[\"task\"])\n\nEpoch: 1 | \n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 2.257\n\n\nMulticlassAccuracy: 0.2839166522026062 | Loss: 2.1027970579663910 | Acc: 0.2839166666666667.\nEpoch: 2 | \n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 2.030\n\n\nMulticlassAccuracy: 0.4356666803359985 | Loss: 1.8297560552557310 | Acc: 0.4356666666666666.\nEpoch: 3 | \n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 1.748\n\n\nMulticlassAccuracy: 0.5072083473205566 | Loss: 1.5589698385695616 | Acc: 0.5072083333333334.\nEpoch: 4 | \n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 1.491\n\n\nMulticlassAccuracy: 0.5603333115577698 | Loss: 1.3440139626041054 | Acc: 0.5603333333333333.\nEpoch: 5 | \n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 1.299\n\n\nMulticlassAccuracy: 0.5910000205039978 | Loss: 1.1893416738472880 | Acc: 0.5910000000000000.\nEpoch: 6 | \n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 1.156\n\n\nMulticlassAccuracy: 0.6155416369438171 | Loss: 1.0787782829242447 | Acc: 0.6155416666666667.\nEpoch: 7 | \n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 1.055\n\n\nMulticlassAccuracy: 0.6355833411216736 | Loss: 1.0008049506886552 | Acc: 0.6355833333333333.\nEpoch: 8 | \n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 0.985\n\n\nMulticlassAccuracy: 0.6532916426658630 | Loss: 0.9433055154327303 | Acc: 0.6532916666666667.\nReturned to Spot: Validation loss: 0.9433055154327303\n\n\n\ntest_tuned(net=model_spot, test_dataset=test,\n            shuffle=False,\n            loss_function=fun_control[\"loss_function\"],\n            metric=fun_control[\"metric_torch\"],\n            device = fun_control[\"device\"],\n            task=fun_control[\"task\"])\n\nMulticlassAccuracy: 0.6470000147819519 | Loss: 0.9550195944413543 | Acc: 0.6470000000000000.\nFinal evaluation: Validation loss: 0.9550195944413543\nFinal evaluation: Validation metric: 0.6470000147819519\n----------------------------------------------\n\n\n(0.9550195944413543, nan, tensor(0.6470))\n\n\n\n\n11.10.5 Detailed Hyperparameter Plots\n\nfilename = \"./figures/\" + experiment_name\nspot_tuner.plot_important_hyperparameter_contour(filename=filename)\n\nl1:  85.24670570169687\nbatch_size:  100.0\noptimizer:  97.43970323096576\n\n\n\n\n\nContour plots.\n\n\n\n\n\n\n\n\n\n\n\n\n11.10.6 Parallel Coordinates Plot\n\nspot_tuner.parallel_plot()\n\n\n                                                \nParallel coordinates plots\n\n\n\n\n11.10.7 Plot all Combinations of Hyperparameters\n\nWarning: this may take a while.\n\n\nPLOT_ALL = False\nif PLOT_ALL:\n    n = spot_tuner.k\n    for i in range(n-1):\n        for j in range(i+1, n):\n            spot_tuner.plot_contour(i=i, j=j, min_z=min_z, max_z = max_z)"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#sec-setup-12",
    "href": "12_spot_hpt_torch_cifar10.html#sec-setup-12",
    "title": "12  HPT: PyTorch With cifar10 Data",
    "section": "12.1 Step 1: Setup",
    "text": "12.1 Step 1: Setup\nBefore we consider the detailed experimental setup, we select the parameters that affect run time, initial design size and the device that is used.\n\n\n\n\n\n\nCaution: Run time and initial design size should be increased for real experiments\n\n\n\n\nMAX_TIME is set to one minute for demonstration purposes. For real experiments, this should be increased to at least 1 hour.\nINIT_SIZE is set to 5 for demonstration purposes. For real experiments, this should be increased to at least 10.\n\n\n\n\n\n\n\n\n\nNote: Device selection\n\n\n\n\nThe device can be selected by setting the variable DEVICE.\nSince we are using a simple neural net, the setting \"cpu\" is preferred (on Mac).\nIf you have a GPU, you can use \"cuda:0\" instead.\nIf DEVICE is set to None, spotPython will automatically select the device.\n\nThis might result in \"mps\" on Macs, which is not the best choice for simple neural nets.\n\n\n\n\n\nMAX_TIME = 1\nINIT_SIZE = 5\nDEVICE = \"cpu\" # \"cuda:0\" None\n\n\nfrom spotPython.utils.device import getDevice\nDEVICE = getDevice(DEVICE)\nprint(DEVICE)\n\ncpu\n\n\n\nimport os\nimport copy\nimport socket\nfrom datetime import datetime\nfrom dateutil.tz import tzlocal\nstart_time = datetime.now(tzlocal())\nHOSTNAME = socket.gethostname().split(\".\")[0]\nexperiment_name = '12-torch' + \"_\" + HOSTNAME + \"_\" + str(MAX_TIME) + \"min_\" + str(INIT_SIZE) + \"init_\" + str(start_time).split(\".\", 1)[0].replace(' ', '_')\nexperiment_name = experiment_name.replace(':', '-')\nprint(experiment_name)\nif not os.path.exists('./figures'):\n    os.makedirs('./figures')\n\n12-torch_maans03_1min_5init_2023-07-03_10-48-33"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#step-2-initialization-of-the-empty-fun_control-dictionary",
    "href": "12_spot_hpt_torch_cifar10.html#step-2-initialization-of-the-empty-fun_control-dictionary",
    "title": "12  HPT: PyTorch With cifar10 Data",
    "section": "12.2 Step 2: Initialization of the Empty fun_control Dictionary",
    "text": "12.2 Step 2: Initialization of the Empty fun_control Dictionary\nspotPython uses a Python dictionary for storing the information required for the hyperparameter tuning process, which was described in Section 14.2.\n\n\n\n\n\n\nCaution: Tensorboard does not work under Windows\n\n\n\n\nSince tensorboard does not work under Windows, we recommend setting the parameter tensorboard_path to None if you are working under Windows.\n\n\n\n\nfrom spotPython.utils.init import fun_control_init\nfun_control = fun_control_init(task=\"classification\",\n    tensorboard_path=\"runs/12_spot_hpt_torch_cifar10\",\n    device=DEVICE)"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#sec-data-loading-12",
    "href": "12_spot_hpt_torch_cifar10.html#sec-data-loading-12",
    "title": "12  HPT: PyTorch With cifar10 Data",
    "section": "12.3 Step 3: PyTorch Data Loading",
    "text": "12.3 Step 3: PyTorch Data Loading\n\n12.3.1 Load Data Cifar10 Data\n\nfrom torchvision import datasets, transforms\nimport torchvision\ndef load_data(data_dir=\"./data\"):\n    transform = transforms.Compose([\n        transforms.ToTensor(),\n        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n    ])\n\n    trainset = torchvision.datasets.CIFAR10(\n        root=data_dir, train=True, download=True, transform=transform)\n\n    testset = torchvision.datasets.CIFAR10(\n        root=data_dir, train=False, download=True, transform=transform)\n\n    return trainset, testset\ntrain, test = load_data()\n\nFiles already downloaded and verified\n\n\nFiles already downloaded and verified\n\n\n\nSince this works fine, we can add the data loading to the fun_control dictionary:\n\n\nn_samples = len(train)\n# add the dataset to the fun_control\nfun_control.update({\"data\": None, # dataset,\n               \"train\": train,\n               \"test\": test,\n               \"n_samples\": n_samples,\n               \"target_column\": None})"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#sec-specification-of-preprocessing-model-12",
    "href": "12_spot_hpt_torch_cifar10.html#sec-specification-of-preprocessing-model-12",
    "title": "12  HPT: PyTorch With cifar10 Data",
    "section": "12.4 Step 4: Specification of the Preprocessing Model",
    "text": "12.4 Step 4: Specification of the Preprocessing Model\nAfter the training and test data are specified and added to the fun_control dictionary, spotPython allows the specification of a data preprocessing pipeline, e.g., for the scaling of the data or for the one-hot encoding of categorical variables, see Section 14.4. This feature is not used here, so we do not change the default value (which is None)."
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#sec-selection-of-the-algorithm-12",
    "href": "12_spot_hpt_torch_cifar10.html#sec-selection-of-the-algorithm-12",
    "title": "12  HPT: PyTorch With cifar10 Data",
    "section": "12.5 Step 5: Select Model (algorithm) and core_model_hyper_dict",
    "text": "12.5 Step 5: Select Model (algorithm) and core_model_hyper_dict\n\n12.5.1 Implementing a Configurable Neural Network With spotPython\nspotPython includes the Net_CIFAR10 class which is implemented in the file netcifar10.py. The class is imported here.\nThis class inherits from the class Net_Core which is implemented in the file netcore.py, see Section 14.5.1.\n\nfrom spotPython.torch.netcifar10 import Net_CIFAR10\nfrom spotPython.data.torch_hyper_dict import TorchHyperDict\nfrom spotPython.hyperparameters.values import add_core_model_to_fun_control\nfun_control = add_core_model_to_fun_control(core_model=Net_CIFAR10,\n                              fun_control=fun_control,\n                              hyper_dict=TorchHyperDict,\n                              filename=None)\n\n\n\n12.5.2 The Search Space\n\n\n12.5.3 Configuring the Search Space With spotPython\n\n12.5.3.1 The hyper_dict Hyperparameters for the Selected Algorithm\nspotPython uses JSON files for the specification of the hyperparameters, which were described in Section 14.5.5.\nThe corresponding entries for the core_model class are shown below.\n\nfun_control['core_model_hyper_dict']\n\n{'l1': {'type': 'int',\n  'default': 5,\n  'transform': 'transform_power_2_int',\n  'lower': 2,\n  'upper': 9},\n 'l2': {'type': 'int',\n  'default': 5,\n  'transform': 'transform_power_2_int',\n  'lower': 2,\n  'upper': 9},\n 'lr_mult': {'type': 'float',\n  'default': 1.0,\n  'transform': 'None',\n  'lower': 0.1,\n  'upper': 10.0},\n 'batch_size': {'type': 'int',\n  'default': 4,\n  'transform': 'transform_power_2_int',\n  'lower': 1,\n  'upper': 4},\n 'epochs': {'type': 'int',\n  'default': 3,\n  'transform': 'transform_power_2_int',\n  'lower': 3,\n  'upper': 4},\n 'k_folds': {'type': 'int',\n  'default': 1,\n  'transform': 'None',\n  'lower': 1,\n  'upper': 1},\n 'patience': {'type': 'int',\n  'default': 5,\n  'transform': 'None',\n  'lower': 2,\n  'upper': 10},\n 'optimizer': {'levels': ['Adadelta',\n   'Adagrad',\n   'Adam',\n   'AdamW',\n   'SparseAdam',\n   'Adamax',\n   'ASGD',\n   'NAdam',\n   'RAdam',\n   'RMSprop',\n   'Rprop',\n   'SGD'],\n  'type': 'factor',\n  'default': 'SGD',\n  'transform': 'None',\n  'class_name': 'torch.optim',\n  'core_model_parameter_type': 'str',\n  'lower': 0,\n  'upper': 12},\n 'sgd_momentum': {'type': 'float',\n  'default': 0.0,\n  'transform': 'None',\n  'lower': 0.0,\n  'upper': 1.0}}"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#sec-modification-of-hyperparameters-12",
    "href": "12_spot_hpt_torch_cifar10.html#sec-modification-of-hyperparameters-12",
    "title": "12  HPT: PyTorch With cifar10 Data",
    "section": "12.6 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model",
    "text": "12.6 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model\nspotPython provides functions for modifying the hyperparameters, their bounds and factors as well as for activating and de-activating hyperparameters without re-compilation of the Python source code. These functions were described in Section 14.6.\n\n12.6.1 Step 5: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model\n\n12.6.1.1 Modify Hyperparameters of Type numeric and integer (boolean)\nThe hyperparameter k_folds is not used, it is de-activated here by setting the lower and upper bound to the same value.\n\n\n\n\n\n\nCaution: Small net size, number of epochs, and patience for demonstration purposes\n\n\n\n\nNet sizes l1 and l2 as well as epochs and patience are set to small values for demonstration purposes. These values are too small for a real application.\nMore resonable values are, e.g.:\n\nfun_control = modify_hyper_parameter_bounds(fun_control, \"l1\", bounds=[2, 7])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"epochs\", bounds=[7, 9]) and\nfun_control = modify_hyper_parameter_bounds(fun_control, \"patience\", bounds=[2, 7])\n\n\n\n\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_bounds\nfun_control = modify_hyper_parameter_bounds(fun_control, \"k_folds\", bounds=[0, 0])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"patience\", bounds=[2, 2])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"epochs\", bounds=[2, 3])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"l1\", bounds=[2, 5])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"l2\", bounds=[2, 5])\n\n\n\n\n12.6.2 Modify hyperparameter of type factor\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_levels\nfun_control = modify_hyper_parameter_levels(fun_control, \"optimizer\",[\"Adam\", \"AdamW\", \"Adamax\", \"NAdam\"])\n\n\n\n12.6.3 Optimizers\nOptimizers can be selected as described in Section 19.6.2.\nOptimizers are described in Section 14.6.1.\n\nfun_control = modify_hyper_parameter_bounds(fun_control,\n    \"lr_mult\", bounds=[1e-3, 1e-3])\nfun_control = modify_hyper_parameter_bounds(fun_control,\n    \"sgd_momentum\", bounds=[0.9, 0.9])"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#step-7-selection-of-the-objective-loss-function",
    "href": "12_spot_hpt_torch_cifar10.html#step-7-selection-of-the-objective-loss-function",
    "title": "12  HPT: PyTorch With cifar10 Data",
    "section": "12.7 Step 7: Selection of the Objective (Loss) Function",
    "text": "12.7 Step 7: Selection of the Objective (Loss) Function\n\n12.7.1 Evaluation\nThe evaluation procedure requires the specification of two elements:\n\nthe way how the data is split into a train and a test set and\nthe loss function (and a metric).\n\nThese are described in Section 19.7.1.\nThe key \"loss_function\" specifies the loss function which is used during the optimization, see Section 14.7.5.\nWe will use CrossEntropy loss for the multiclass-classification task.\n\nfrom torch.nn import CrossEntropyLoss\nloss_function = CrossEntropyLoss()\nfun_control.update({\n        \"loss_function\": loss_function,\n        \"shuffle\": True,\n        \"eval\":  \"train_hold_out\"\n        })\n\n\n\n12.7.2 Metric\n\nimport torchmetrics\nmetric_torch = torchmetrics.Accuracy(task=\"multiclass\",\n     num_classes=10).to(fun_control[\"device\"])\nfun_control.update({\"metric_torch\": metric_torch})"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#step-8-calling-the-spot-function",
    "href": "12_spot_hpt_torch_cifar10.html#step-8-calling-the-spot-function",
    "title": "12  HPT: PyTorch With cifar10 Data",
    "section": "12.8 Step 8: Calling the SPOT Function",
    "text": "12.8 Step 8: Calling the SPOT Function\n\n12.8.1 Preparing the SPOT Call\nThe following code passes the information about the parameter ranges and bounds to spot.\n\n# extract the variable types, names, and bounds\nfrom spotPython.hyperparameters.values import (get_bound_values,\n    get_var_name,\n    get_var_type,)\nvar_type = get_var_type(fun_control)\nvar_name = get_var_name(fun_control)\nfun_control.update({\"var_type\": var_type,\n                    \"var_name\": var_name})\nlower = get_bound_values(fun_control, \"lower\")\nupper = get_bound_values(fun_control, \"upper\")\n\n\nfrom spotPython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control))\n\n| name         | type   | default   |   lower |   upper | transform             |\n|--------------|--------|-----------|---------|---------|-----------------------|\n| l1           | int    | 5         |   2     |   5     | transform_power_2_int |\n| l2           | int    | 5         |   2     |   5     | transform_power_2_int |\n| lr_mult      | float  | 1.0       |   0.001 |   0.001 | None                  |\n| batch_size   | int    | 4         |   1     |   4     | transform_power_2_int |\n| epochs       | int    | 3         |   2     |   3     | transform_power_2_int |\n| k_folds      | int    | 1         |   0     |   0     | None                  |\n| patience     | int    | 5         |   2     |   2     | None                  |\n| optimizer    | factor | SGD       |   0     |   3     | None                  |\n| sgd_momentum | float  | 0.0       |   0.9   |   0.9   | None                  |\n\n\n\n\n12.8.2 The Objective Function fun_torch\nThe objective function fun_torch is selected next. It implements an interface from PyTorch’s training, validation, and testing methods to spotPython.\n\nfrom spotPython.fun.hypertorch import HyperTorch\nfun = HyperTorch().fun_torch\n\n\n\n12.8.3 Starting the Hyperparameter Tuning\n\nimport numpy as np\nfrom spotPython.spot import spot\nfrom math import inf\nspot_tuner = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = inf,\n                   fun_repeats = 1,\n                   max_time = MAX_TIME,\n                   noise = False,\n                   tolerance_x = np.sqrt(np.spacing(1)),\n                   var_type = var_type,\n                   var_name = var_name,\n                   infill_criterion = \"y\",\n                   n_points = 1,\n                   seed=123,\n                   log_level = 50,\n                   show_models= False,\n                   show_progress= True,\n                   fun_control = fun_control,\n                   design_control={\"init_size\": INIT_SIZE,\n                                   \"repeats\": 1},\n                   surrogate_control={\"noise\": True,\n                                      \"cod_type\": \"norm\",\n                                      \"min_theta\": -4,\n                                      \"max_theta\": 3,\n                                      \"n_theta\": len(var_name),\n                                      \"model_fun_evals\": 10_000,\n                                      \"log_level\": 50\n                                      })\nspot_tuner.run(X_start=X_start)\n\n\nconfig: {'l1': 16, 'l2': 8, 'lr_mult': 0.001, 'batch_size': 16, 'epochs': 8, 'k_folds': 0, 'patience': 2, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMulticlassAccuracy: 0.1004000008106232 | Loss: 2.3229682102203371 | Acc: 0.1004000000000000.\nEpoch: 2 | \n\n\nMulticlassAccuracy: 0.1004000008106232 | Loss: 2.3213387151718141 | Acc: 0.1004000000000000.\nEpoch: 3 | \n\n\nMulticlassAccuracy: 0.1004000008106232 | Loss: 2.3194895351409914 | Acc: 0.1004000000000000.\nEpoch: 4 | \n\n\nMulticlassAccuracy: 0.1004000008106232 | Loss: 2.3174200672149659 | Acc: 0.1004000000000000.\nEpoch: 5 | \n\n\nMulticlassAccuracy: 0.1004000008106232 | Loss: 2.3150155567169191 | Acc: 0.1004000000000000.\nEpoch: 6 | \n\n\nMulticlassAccuracy: 0.1004000008106232 | Loss: 2.3125426223754881 | Acc: 0.1004000000000000.\nEpoch: 7 | \n\n\nMulticlassAccuracy: 0.1004000008106232 | Loss: 2.3103920515060423 | Acc: 0.1004000000000000.\nEpoch: 8 | \n\n\nMulticlassAccuracy: 0.1004500016570091 | Loss: 2.3083329513549806 | Acc: 0.1004500000000000.\nReturned to Spot: Validation loss: 2.3083329513549806\n\nconfig: {'l1': 8, 'l2': 8, 'lr_mult': 0.001, 'batch_size': 8, 'epochs': 4, 'k_folds': 0, 'patience': 2, 'optimizer': 'Adamax', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMulticlassAccuracy: 0.0987500026822090 | Loss: 2.3179213603019715 | Acc: 0.0987500000000000.\nEpoch: 2 | \n\n\nMulticlassAccuracy: 0.1002999991178513 | Loss: 2.3168445756912233 | Acc: 0.1003000000000000.\nEpoch: 3 | \n\n\nMulticlassAccuracy: 0.1064499989151955 | Loss: 2.3159697061538695 | Acc: 0.1064500000000000.\nEpoch: 4 | \n\n\nMulticlassAccuracy: 0.1145000010728836 | Loss: 2.3151374659538271 | Acc: 0.1145000000000000.\nReturned to Spot: Validation loss: 2.315137465953827\n\nconfig: {'l1': 32, 'l2': 16, 'lr_mult': 0.001, 'batch_size': 2, 'epochs': 8, 'k_folds': 0, 'patience': 2, 'optimizer': 'NAdam', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMulticlassAccuracy: 0.1028499975800514 | Loss: 2.3065456705808640 | Acc: 0.1028500000000000.\nEpoch: 2 | \n\n\nMulticlassAccuracy: 0.1173999980092049 | Loss: 2.2966628431320188 | Acc: 0.1174000000000000.\nEpoch: 3 | \n\n\nMulticlassAccuracy: 0.1528999954462051 | Loss: 2.2584952401041987 | Acc: 0.1529000000000000.\nEpoch: 4 | \n\n\nMulticlassAccuracy: 0.1580500006675720 | Loss: 2.2108294310688974 | Acc: 0.1580500000000000.\nEpoch: 5 | \n\n\nMulticlassAccuracy: 0.1589999943971634 | Loss: 2.1711846857666970 | Acc: 0.1590000000000000.\nEpoch: 6 | \n\n\nMulticlassAccuracy: 0.1640499979257584 | Loss: 2.1371860899329187 | Acc: 0.1640500000000000.\nEpoch: 7 | \n\n\nMulticlassAccuracy: 0.1751500070095062 | Loss: 2.1060472553730012 | Acc: 0.1751500000000000.\nEpoch: 8 | \n\n\nMulticlassAccuracy: 0.1858499944210052 | Loss: 2.0774075149416924 | Acc: 0.1858500000000000.\nReturned to Spot: Validation loss: 2.0774075149416924\n\nconfig: {'l1': 4, 'l2': 8, 'lr_mult': 0.001, 'batch_size': 4, 'epochs': 4, 'k_folds': 0, 'patience': 2, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMulticlassAccuracy: 0.1001499965786934 | Loss: 2.3315476094722749 | Acc: 0.1001500000000000.\nEpoch: 2 | \n\n\nMulticlassAccuracy: 0.1001499965786934 | Loss: 2.3303059405803679 | Acc: 0.1001500000000000.\nEpoch: 3 | \n\n\nMulticlassAccuracy: 0.1001499965786934 | Loss: 2.3289187388181687 | Acc: 0.1001500000000000.\nEpoch: 4 | \n\n\nMulticlassAccuracy: 0.1001000031828880 | Loss: 2.3274010416507722 | Acc: 0.1001000000000000.\nReturned to Spot: Validation loss: 2.327401041650772\n\nconfig: {'l1': 16, 'l2': 32, 'lr_mult': 0.001, 'batch_size': 8, 'epochs': 8, 'k_folds': 0, 'patience': 2, 'optimizer': 'Adam', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMulticlassAccuracy: 0.0927999988198280 | Loss: 2.3063064372062683 | Acc: 0.0928000000000000.\nEpoch: 2 | \n\n\nMulticlassAccuracy: 0.0933500006794930 | Loss: 2.3060600970268248 | Acc: 0.0933500000000000.\nEpoch: 3 | \n\n\nMulticlassAccuracy: 0.0934500023722649 | Loss: 2.3057814753532409 | Acc: 0.0934500000000000.\nEpoch: 4 | \n\n\nMulticlassAccuracy: 0.0935499966144562 | Loss: 2.3054392121315002 | Acc: 0.0935500000000000.\nEpoch: 5 | \n\n\nMulticlassAccuracy: 0.0942000001668930 | Loss: 2.3050192249298096 | Acc: 0.0942000000000000.\nEpoch: 6 | \n\n\nMulticlassAccuracy: 0.0950499996542931 | Loss: 2.3045036982536318 | Acc: 0.0950500000000000.\nEpoch: 7 | \n\n\nMulticlassAccuracy: 0.0962499976158142 | Loss: 2.3038450118064882 | Acc: 0.0962500000000000.\nEpoch: 8 | \n\n\nMulticlassAccuracy: 0.1012500002980232 | Loss: 2.3029967868804930 | Acc: 0.1012500000000000.\nReturned to Spot: Validation loss: 2.302996786880493\n\n\n\nconfig: {'l1': 8, 'l2': 16, 'lr_mult': 0.001, 'batch_size': 8, 'epochs': 8, 'k_folds': 0, 'patience': 2, 'optimizer': 'NAdam', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMulticlassAccuracy: 0.1009000018239021 | Loss: 2.3312099172592164 | Acc: 0.1009000000000000.\nEpoch: 2 | \n\n\nMulticlassAccuracy: 0.1009000018239021 | Loss: 2.3279800788879395 | Acc: 0.1009000000000000.\nEpoch: 3 | \n\n\nMulticlassAccuracy: 0.1109500005841255 | Loss: 2.3245738817214967 | Acc: 0.1109500000000000.\nEpoch: 4 | \n\n\nMulticlassAccuracy: 0.1382499933242798 | Loss: 2.3212142275810241 | Acc: 0.1382500000000000.\nEpoch: 5 | \n\n\nMulticlassAccuracy: 0.1424999982118607 | Loss: 2.3181941164970397 | Acc: 0.1425000000000000.\nEpoch: 6 | \n\n\nMulticlassAccuracy: 0.1428000032901764 | Loss: 2.3150831417083739 | Acc: 0.1428000000000000.\nEpoch: 7 | \n\n\nMulticlassAccuracy: 0.1416500061750412 | Loss: 2.3113945014953612 | Acc: 0.1416500000000000.\nEpoch: 8 | \n\n\nMulticlassAccuracy: 0.1405500024557114 | Loss: 2.3069930368423464 | Acc: 0.1405500000000000.\nReturned to Spot: Validation loss: 2.3069930368423464\nspotPython tuning: 2.0774075149416924 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x1071c3b50&gt;"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#sec-tensorboard-10",
    "href": "12_spot_hpt_torch_cifar10.html#sec-tensorboard-10",
    "title": "12  HPT: PyTorch With cifar10 Data",
    "section": "12.9 Step 9: Tensorboard",
    "text": "12.9 Step 9: Tensorboard\nThe textual output shown in the console (or code cell) can be visualized with Tensorboard as described in Section 14.9, see also the description in the documentation: Tensorboard."
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#sec-results-tuning-12",
    "href": "12_spot_hpt_torch_cifar10.html#sec-results-tuning-12",
    "title": "12  HPT: PyTorch With cifar10 Data",
    "section": "12.10 Step 10: Results",
    "text": "12.10 Step 10: Results\nAfter the hyperparameter tuning run is finished, the results can be analyzed as described in Section 14.10.\n\nSAVE = False\nLOAD = False\n\nif SAVE:\n    result_file_name = \"res_\" + experiment_name + \".pkl\"\n    with open(result_file_name, 'wb') as f:\n        pickle.dump(spot_tuner, f)\n\nif LOAD:\n    result_file_name = \"ADD THE NAME here, e.g.: res_ch10-friedman-hpt-0_maans03_60min_20init_1K_2023-04-14_10-11-19.pkl\"\n    with open(result_file_name, 'rb') as f:\n        spot_tuner =  pickle.load(f)\n\nAfter the hyperparameter tuning run is finished, the progress of the hyperparameter tuning can be visualized. The following code generates the progress plot from ?fig-progress.\n\nspot_tuner.plot_progress(log_y=False,\n    filename=\"./figures/\" + experiment_name+\"_progress.png\")\n\n\n\n\nProgress plot. Black dots denote results from the initial design. Red dots illustrate the improvement found by the surrogate model based optimization.\n\n\n\n\n\nPrint the results\n\n\nprint(gen_design_table(fun_control=fun_control,\n    spot=spot_tuner))\n\n| name         | type   | default   |   lower |   upper |   tuned | transform             |   importance | stars   |\n|--------------|--------|-----------|---------|---------|---------|-----------------------|--------------|---------|\n| l1           | int    | 5         |     2.0 |     5.0 |     5.0 | transform_power_2_int |         0.00 |         |\n| l2           | int    | 5         |     2.0 |     5.0 |     4.0 | transform_power_2_int |         0.00 |         |\n| lr_mult      | float  | 1.0       |   0.001 |   0.001 |   0.001 | None                  |         0.00 |         |\n| batch_size   | int    | 4         |     1.0 |     4.0 |     1.0 | transform_power_2_int |       100.00 | ***     |\n| epochs       | int    | 3         |     2.0 |     3.0 |     3.0 | transform_power_2_int |         0.00 |         |\n| k_folds      | int    | 1         |     0.0 |     0.0 |     0.0 | None                  |         0.00 |         |\n| patience     | int    | 5         |     2.0 |     2.0 |     2.0 | None                  |         0.00 |         |\n| optimizer    | factor | SGD       |     0.0 |     3.0 |     3.0 | None                  |         0.00 |         |\n| sgd_momentum | float  | 0.0       |     0.9 |     0.9 |     0.9 | None                  |         0.00 |         |\n\n\n\n12.10.1 Show variable importance\n\nspot_tuner.plot_importance(threshold=0.025, filename=\"./figures/\" + experiment_name+\"_importance.png\")\n\n\n\n\nVariable importance plot, threshold 0.025.\n\n\n\n\n\n\n12.10.2 Get the Tuned Architecture (SPOT Results)\nThe architecture of the spotPython model can be obtained by the following code:\n\nfrom spotPython.hyperparameters.values import get_one_core_model_from_X\nX = spot_tuner.to_all_dim(spot_tuner.min_X.reshape(1,-1))\nmodel_spot = get_one_core_model_from_X(X, fun_control)\nmodel_spot\n\nNet_CIFAR10(\n  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))\n  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n  (fc1): Linear(in_features=400, out_features=32, bias=True)\n  (fc2): Linear(in_features=32, out_features=16, bias=True)\n  (fc3): Linear(in_features=16, out_features=10, bias=True)\n)\n\n\n\n\n12.10.3 Evaluation of the Tuned Architecture\n\nfrom spotPython.torch.traintest import (\n    train_tuned,\n    test_tuned,\n    )\n\n\ntrain_tuned(net=model_spot, train_dataset=train,\n        loss_function=fun_control[\"loss_function\"],\n        metric=fun_control[\"metric_torch\"],\n        shuffle=True,\n        device = fun_control[\"device\"],\n        path=None,\n        task=fun_control[\"task\"],)\n\nEpoch: 1 | \n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 2.310\n\n\nMulticlassAccuracy: 0.1036000028252602 | Loss: 2.3006046615839004 | Acc: 0.1036000000000000.\nEpoch: 2 | \n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 2.292\n\n\nMulticlassAccuracy: 0.1433500051498413 | Loss: 2.2680888182759285 | Acc: 0.1433500000000000.\nEpoch: 3 | \n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 2.257\n\n\nMulticlassAccuracy: 0.1770499944686890 | Loss: 2.2302701745629312 | Acc: 0.1770500000000000.\nEpoch: 4 | \n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 2.224\n\n\nMulticlassAccuracy: 0.1736499965190887 | Loss: 2.1976760300278664 | Acc: 0.1736500000000000.\nEpoch: 5 | \n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 2.195\n\n\nMulticlassAccuracy: 0.1816000044345856 | Loss: 2.1689404532074930 | Acc: 0.1816000000000000.\nEpoch: 6 | \n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 2.164\n\n\nMulticlassAccuracy: 0.1942500025033951 | Loss: 2.1427407929718494 | Acc: 0.1942500000000000.\nEpoch: 7 | \n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 2.145\n\n\nMulticlassAccuracy: 0.2108999937772751 | Loss: 2.1194734202206136 | Acc: 0.2109000000000000.\nEpoch: 8 | \n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 2.117\n\n\nMulticlassAccuracy: 0.2226999998092651 | Loss: 2.0977164102852344 | Acc: 0.2227000000000000.\nReturned to Spot: Validation loss: 2.0977164102852344\n\n\nIf path is set to a filename, e.g., path = \"model_spot_trained.pt\", the weights of the trained model will be loaded from this file.\n\ntest_tuned(net=model_spot, test_dataset=test,\n            shuffle=False,\n            loss_function=fun_control[\"loss_function\"],\n            metric=fun_control[\"metric_torch\"],\n            device = fun_control[\"device\"],\n            task=fun_control[\"task\"],)\n\nMulticlassAccuracy: 0.2190999984741211 | Loss: 2.0944503646016122 | Acc: 0.2191000000000000.\nFinal evaluation: Validation loss: 2.094450364601612\nFinal evaluation: Validation metric: 0.2190999984741211\n----------------------------------------------\n\n\n(2.094450364601612, nan, tensor(0.2191))\n\n\n\n\n12.10.4 Cross-validated Evaluations\n\n\n\n\n\n\nCaution: Cross-validated Evaluations\n\n\n\n\nThe number of folds is set to 1 by default.\nHere it was changed to 3 for demonstration purposes.\nSet the number of folds to a reasonable value, e.g., 10.\nThis can be done by setting the k_folds attribute of the model as follows:\nsetattr(model_spot, \"k_folds\",  10)\n\n\n\n\nfrom spotPython.torch.traintest import evaluate_cv\n# modify k-kolds:\nsetattr(model_spot, \"k_folds\",  3)\ndf_eval, df_preds, df_metrics = evaluate_cv(net=model_spot,\n            dataset=fun_control[\"data\"],\n            loss_function=fun_control[\"loss_function\"],\n            metric=fun_control[\"metric_torch\"],\n            task=fun_control[\"task\"],\n            writer=fun_control[\"writer\"],\n            writerId=\"model_spot_cv\",\n            device = fun_control[\"device\"])\n\nError in Net_Core. Call to evaluate_cv() failed. err=TypeError(\"Expected sequence or array-like, got &lt;class 'NoneType'&gt;\"), type(err)=&lt;class 'TypeError'&gt;\n\n\n\nmetric_name = type(fun_control[\"metric_torch\"]).__name__\nprint(f\"loss: {df_eval}, Cross-validated {metric_name}: {df_metrics}\")\n\nloss: nan, Cross-validated MulticlassAccuracy: nan\n\n\n\n\n12.10.5 Detailed Hyperparameter Plots\n\nfilename = \"./figures/\" + experiment_name\nspot_tuner.plot_important_hyperparameter_contour(filename=filename)\n\nbatch_size:  99.99999999999999\n\n\n\n\n12.10.6 Parallel Coordinates Plot\n\nspot_tuner.parallel_plot()\n\n\n                                                \nParallel coordinates plots\n\n\n\n\n12.10.7 Plot all Combinations of Hyperparameters\n\nWarning: this may take a while.\n\n\nPLOT_ALL = False\nif PLOT_ALL:\n    n = spot_tuner.k\n    for i in range(n-1):\n        for j in range(i+1, n):\n            spot_tuner.plot_contour(i=i, j=j, min_z=min_z, max_z = max_z)"
  },
  {
    "objectID": "13_spot_hpt_river.html#sec-setup-24",
    "href": "13_spot_hpt_river.html#sec-setup-24",
    "title": "13  HPT: River",
    "section": "13.1 Step 1: Setup",
    "text": "13.1 Step 1: Setup\nBefore we consider the detailed experimental setup, we select the parameters that affect run time, initial design size and the device that is used.\n\n\n\n\n\n\nCaution: Run time and initial design size should be increased for real experiments\n\n\n\n\nMAX_TIME is set to one minute for demonstration purposes. For real experiments, this should be increased to at least 1 hour.\nINIT_SIZE is set to 5 for demonstration purposes. For real experiments, this should be increased to at least 10.\nK is set to 0.1 for demonstration purposes. For real experiments, this should be increased to at least 1.\n\n\n\n\nMAX_TIME = 1\nINIT_SIZE = 5\nK = .1\n\n\n\n10-river_maans03_1min_5init_2023-07-03_11-35-34\n\n\n\n13.1.1 river Hyperparameter Tuning: HATR with Friedman Drift Data\n\nThis notebook exemplifies hyperparameter tuning with SPOT (spotPython and spotRiver).\nThe hyperparameter software SPOT was developed in R (statistical programming language), see Open Access book “Hyperparameter Tuning for Machine and Deep Learning with R - A Practical Guide”, available here: https://link.springer.com/book/10.1007/978-981-19-5170-1.\nThis notebook demonstrates hyperparameter tuning for river. It is based on the notebook “Incremental decision trees in river: the Hoeffding Tree case”, see: https://riverml.xyz/0.15.0/recipes/on-hoeffding-trees/#42-regression-tree-splitters.\nHere we will use the river HTR and HATR functions as in “Incremental decision trees in river: the Hoeffding Tree case”, see: https://riverml.xyz/0.15.0/recipes/on-hoeffding-trees/#42-regression-tree-splitters.\n\n\npip list | grep  \"spot[RiverPython]\"\n\nspotPython                        0.2.52\nspotRiver                         0.0.94\n\n\nNote: you may need to restart the kernel to use updated packages.\n\n\n\n# import sys\n# !{sys.executable} -m pip install --upgrade build\n# !{sys.executable} -m pip install --upgrade --force-reinstall spotPython"
  },
  {
    "objectID": "13_spot_hpt_river.html#step-2-initialization-of-the-fun_control-dictionary",
    "href": "13_spot_hpt_river.html#step-2-initialization-of-the-fun_control-dictionary",
    "title": "13  HPT: River",
    "section": "13.2 Step 2: Initialization of the fun_control Dictionary",
    "text": "13.2 Step 2: Initialization of the fun_control Dictionary\n\nfrom spotPython.utils.init import fun_control_init\nfun_control = fun_control_init(task=\"regression\",\n tensorboard_path=None)"
  },
  {
    "objectID": "13_spot_hpt_river.html#step-3-load-the-friedman-drift-data",
    "href": "13_spot_hpt_river.html#step-3-load-the-friedman-drift-data",
    "title": "13  HPT: River",
    "section": "13.3 Step 3: Load the Friedman Drift Data",
    "text": "13.3 Step 3: Load the Friedman Drift Data\n\nhorizon = 7*24\nk = K\nn_total = int(k*100_000)\nn_samples = n_total\np_1 = int(k*25_000)\np_2 = int(k*50_000)\nposition=(p_1, p_2)\nn_train = 1_000\na = n_train + p_1 - 12\nb = a + 12\n\n\nSince we also need a river version of the data below for plotting the model, the corresponding data set is generated here. Note: spotRiver uses the train and test data sets, while river uses the X and y data sets\n\n\nfrom river.datasets import synth\nimport pandas as pd\ndataset = synth.FriedmanDrift(\n   drift_type='gra',\n   position=position,\n     seed=123\n)\ndata_dict = {key: [] for key in list(dataset.take(1))[0][0].keys()}\ndata_dict[\"y\"] = []\nfor x, y in dataset.take(n_total):\n    for key, value in x.items():\n        data_dict[key].append(value)\n    data_dict[\"y\"].append(y)\ndf = pd.DataFrame(data_dict)\n# Add column names x1 until x10 to the first 10 columns of the dataframe and the column name y to the last column\ndf.columns = [f\"x{i}\" for i in range(1, 11)] + [\"y\"]\n\ntrain = df[:n_train]\ntest = df[n_train:]\ntarget_column = \"y\"\n#\nfun_control.update({\"data\": None, # dataset,\n               \"train\": train,\n               \"test\": test,\n               \"n_samples\": n_samples,\n               \"target_column\": target_column})"
  },
  {
    "objectID": "13_spot_hpt_river.html#step-4-specification-of-the-preprocessing-model",
    "href": "13_spot_hpt_river.html#step-4-specification-of-the-preprocessing-model",
    "title": "13  HPT: River",
    "section": "13.4 Step 4: Specification of the Preprocessing Model",
    "text": "13.4 Step 4: Specification of the Preprocessing Model\n\nfrom river import preprocessing\nprep_model = preprocessing.StandardScaler()\nfun_control.update({\"prep_model\": prep_model})"
  },
  {
    "objectID": "13_spot_hpt_river.html#step-5-select-algorithm-and-core_model_hyper_dict",
    "href": "13_spot_hpt_river.html#step-5-select-algorithm-and-core_model_hyper_dict",
    "title": "13  HPT: River",
    "section": "13.5 Step 5: Select algorithm and core_model_hyper_dict",
    "text": "13.5 Step 5: Select algorithm and core_model_hyper_dict\n\nThe river model (HATR) is selected.\nFurthermore, the corresponding hyperparameters, see: https://riverml.xyz/0.15.0/api/tree/HoeffdingTreeRegressor/ are selected (incl. type information, names, and bounds).\nThe corresponding hyperparameter dictionary is added to the fun_control dictionary.\nAlternatively, you can load a local hyper_dict. Simply set river_hyper_dict.json as the filename. If filenameis set to None, the hyper_dict is loaded from the spotRiver package.\n\n\nfrom river.tree import HoeffdingAdaptiveTreeRegressor\nfrom spotRiver.data.river_hyper_dict import RiverHyperDict\nfrom spotPython.hyperparameters.values import add_core_model_to_fun_control\ncore_model  = HoeffdingAdaptiveTreeRegressor\nfun_control = add_core_model_to_fun_control(core_model=core_model,\n                              fun_control=fun_control,\n                              hyper_dict=RiverHyperDict,\n                              filename=None)\n\nThe corresponding entries for the core_model class are shown below.\n\nfun_control['core_model_hyper_dict']\n\n{'grace_period': {'type': 'int',\n  'default': 200,\n  'transform': 'None',\n  'lower': 10,\n  'upper': 1000},\n 'max_depth': {'type': 'int',\n  'default': 20,\n  'transform': 'transform_power_2_int',\n  'lower': 2,\n  'upper': 20},\n 'delta': {'type': 'float',\n  'default': 1e-07,\n  'transform': 'None',\n  'lower': 1e-08,\n  'upper': 1e-06},\n 'tau': {'type': 'float',\n  'default': 0.05,\n  'transform': 'None',\n  'lower': 0.01,\n  'upper': 0.1},\n 'leaf_prediction': {'levels': ['mean', 'model', 'adaptive'],\n  'type': 'factor',\n  'default': 'mean',\n  'transform': 'None',\n  'core_model_parameter_type': 'str',\n  'lower': 0,\n  'upper': 2},\n 'leaf_model': {'levels': ['LinearRegression', 'PARegressor', 'Perceptron'],\n  'type': 'factor',\n  'default': 'LinearRegression',\n  'transform': 'None',\n  'class_name': 'river.linear_model',\n  'core_model_parameter_type': 'instance()',\n  'lower': 0,\n  'upper': 2},\n 'model_selector_decay': {'type': 'float',\n  'default': 0.95,\n  'transform': 'None',\n  'lower': 0.9,\n  'upper': 0.99},\n 'splitter': {'levels': ['EBSTSplitter', 'TEBSTSplitter', 'QOSplitter'],\n  'type': 'factor',\n  'default': 'EBSTSplitter',\n  'transform': 'None',\n  'class_name': 'river.tree.splitter',\n  'core_model_parameter_type': 'instance()',\n  'lower': 0,\n  'upper': 2},\n 'min_samples_split': {'type': 'int',\n  'default': 5,\n  'transform': 'None',\n  'lower': 2,\n  'upper': 10},\n 'bootstrap_sampling': {'levels': [0, 1],\n  'type': 'factor',\n  'default': 0,\n  'transform': 'None',\n  'core_model_parameter_type': 'bool',\n  'lower': 0,\n  'upper': 1},\n 'drift_window_threshold': {'type': 'int',\n  'default': 300,\n  'transform': 'None',\n  'lower': 100,\n  'upper': 500},\n 'switch_significance': {'type': 'float',\n  'default': 0.05,\n  'transform': 'None',\n  'lower': 0.01,\n  'upper': 0.1},\n 'binary_split': {'levels': [0, 1],\n  'type': 'factor',\n  'default': 0,\n  'transform': 'None',\n  'core_model_parameter_type': 'bool',\n  'lower': 0,\n  'upper': 1},\n 'max_size': {'type': 'float',\n  'default': 500.0,\n  'transform': 'None',\n  'lower': 100.0,\n  'upper': 1000.0},\n 'memory_estimate_period': {'type': 'int',\n  'default': 1000000,\n  'transform': 'None',\n  'lower': 100000,\n  'upper': 1000000},\n 'stop_mem_management': {'levels': [0, 1],\n  'type': 'factor',\n  'default': 0,\n  'transform': 'None',\n  'core_model_parameter_type': 'bool',\n  'lower': 0,\n  'upper': 1},\n 'remove_poor_attrs': {'levels': [0, 1],\n  'type': 'factor',\n  'default': 0,\n  'transform': 'None',\n  'core_model_parameter_type': 'bool',\n  'lower': 0,\n  'upper': 1},\n 'merit_preprune': {'levels': [0, 1],\n  'type': 'factor',\n  'default': 0,\n  'transform': 'None',\n  'core_model_parameter_type': 'bool',\n  'lower': 0,\n  'upper': 1}}"
  },
  {
    "objectID": "13_spot_hpt_river.html#step-6-modify-hyper_dict-hyperparameters-for-the-selected-algorithm-aka-core_model",
    "href": "13_spot_hpt_river.html#step-6-modify-hyper_dict-hyperparameters-for-the-selected-algorithm-aka-core_model",
    "title": "13  HPT: River",
    "section": "13.6 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model",
    "text": "13.6 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model\n\n13.6.1 Modify hyperparameter of type factor\n\n# fun_control = modify_hyper_parameter_levels(fun_control, \"leaf_model\", [\"LinearRegression\"])\n# fun_control[\"core_model_hyper_dict\"]\n\n\n\n13.6.2 Modify hyperparameter of type numeric and integer (boolean)\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_bounds\nfun_control = modify_hyper_parameter_bounds(fun_control, \"delta\", bounds=[1e-10, 1e-6])\n# fun_control = modify_hyper_parameter_bounds(fun_control, \"min_samples_split\", bounds=[3, 20])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"merit_preprune\", [0, 0])"
  },
  {
    "objectID": "13_spot_hpt_river.html#step-7-selection-of-the-objective-loss-function",
    "href": "13_spot_hpt_river.html#step-7-selection-of-the-objective-loss-function",
    "title": "13  HPT: River",
    "section": "13.7 Step 7: Selection of the Objective (Loss) Function",
    "text": "13.7 Step 7: Selection of the Objective (Loss) Function\nThere are three metrics:\n1. `metric_river` is used for the river based evaluation via `eval_oml_iter_progressive`.\n2. `metric_sklearn` is used for the sklearn based evaluation via `eval_oml_horizon`.\n3. `metric_torch` is used for the pytorch based evaluation.\n\nimport numpy as np\nfrom river import metrics\nfrom sklearn.metrics import mean_absolute_error\n\n\nfrom spotRiver.fun.hyperriver import HyperRiver\nfun = HyperRiver(seed=123, log_level=50).fun_oml_horizon\nweights = np.array([1, 1/1000, 1/1000])*10_000.0\nhorizon = 7*24\noml_grace_period = 2\nstep = 100\nweight_coeff = 1.0\n\nfun_control.update({\n               \"horizon\": horizon,\n               \"oml_grace_period\": oml_grace_period,\n               \"weights\": weights,\n               \"step\": step,\n               \"log_level\": 50,\n               \"weight_coeff\": weight_coeff,\n               \"metric_river\": metrics.MAE(),\n               \"metric_sklearn\": mean_absolute_error\n               })"
  },
  {
    "objectID": "13_spot_hpt_river.html#step-8-calling-the-spot-function",
    "href": "13_spot_hpt_river.html#step-8-calling-the-spot-function",
    "title": "13  HPT: River",
    "section": "13.8 Step 8: Calling the SPOT Function",
    "text": "13.8 Step 8: Calling the SPOT Function\n\n13.8.1 Prepare the SPOT Parameters\n\nGet types and variable names as well as lower and upper bounds for the hyperparameters.\n\n\nfrom spotPython.hyperparameters.values import (\n    get_var_type,\n    get_var_name,\n    get_bound_values\n    )\nvar_type = get_var_type(fun_control)\nvar_name = get_var_name(fun_control)\nfun_control.update({\"var_type\": var_type,\n                    \"var_name\": var_name})\n\nlower = get_bound_values(fun_control, \"lower\")\nupper = get_bound_values(fun_control, \"upper\")\n\n\nfrom spotPython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control))\n\n| name                   | type   | default          |      lower |    upper | transform             |\n|------------------------|--------|------------------|------------|----------|-----------------------|\n| grace_period           | int    | 200              |     10     | 1000     | None                  |\n| max_depth              | int    | 20               |      2     |   20     | transform_power_2_int |\n| delta                  | float  | 1e-07            |      1e-10 |    1e-06 | None                  |\n| tau                    | float  | 0.05             |      0.01  |    0.1   | None                  |\n| leaf_prediction        | factor | mean             |      0     |    2     | None                  |\n| leaf_model             | factor | LinearRegression |      0     |    2     | None                  |\n| model_selector_decay   | float  | 0.95             |      0.9   |    0.99  | None                  |\n| splitter               | factor | EBSTSplitter     |      0     |    2     | None                  |\n| min_samples_split      | int    | 5                |      2     |   10     | None                  |\n| bootstrap_sampling     | factor | 0                |      0     |    1     | None                  |\n| drift_window_threshold | int    | 300              |    100     |  500     | None                  |\n| switch_significance    | float  | 0.05             |      0.01  |    0.1   | None                  |\n| binary_split           | factor | 0                |      0     |    1     | None                  |\n| max_size               | float  | 500.0            |    100     | 1000     | None                  |\n| memory_estimate_period | int    | 1000000          | 100000     |    1e+06 | None                  |\n| stop_mem_management    | factor | 0                |      0     |    1     | None                  |\n| remove_poor_attrs      | factor | 0                |      0     |    1     | None                  |\n| merit_preprune         | factor | 0                |      0     |    0     | None                  |\n\n\n\n\n13.8.2 Run the Spot Optimizer\n\nRun SPOT for approx. x mins (max_time).\nNote: the run takes longer, because the evaluation time of initial design (here: initi_size, 20 points) is not considered.\n\n\nfrom spotPython.hyperparameters.values import get_default_hyperparameters_as_array\nhyper_dict=RiverHyperDict().load()\nX_start = get_default_hyperparameters_as_array(fun_control, hyper_dict)\n\n\nfrom spotPython.spot import spot\nfrom math import inf\nimport numpy as np\nspot_tuner = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = inf,\n                   fun_repeats = 1,\n                   max_time = MAX_TIME,\n                   noise = False,\n                   tolerance_x = np.sqrt(np.spacing(1)),\n                   var_type = var_type,\n                   var_name = var_name,\n                   infill_criterion = \"y\",\n                   n_points = 1,\n                   seed=123,\n                   log_level = 50,\n                   show_models= False,\n                   show_progress= True,\n                   fun_control = fun_control,\n                   design_control={\"init_size\": INIT_SIZE,\n                                   \"repeats\": 1},\n                   surrogate_control={\"noise\": True,\n                                      \"cod_type\": \"norm\",\n                                      \"min_theta\": -4,\n                                      \"max_theta\": 3,\n                                      \"n_theta\": len(var_name),\n                                      \"model_fun_evals\": 10_000,\n                                      \"log_level\": 50\n                                      })\nspot_tuner.run(X_start=X_start)\n\nspotPython tuning: 2.2044186801474304 [####------] 38.02% \n\n\nspotPython tuning: 2.2044186801474304 [#######---] 68.69% \n\n\nspotPython tuning: 2.091512650383557 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x18c42acb0&gt;"
  },
  {
    "objectID": "13_spot_hpt_river.html#step-9-results",
    "href": "13_spot_hpt_river.html#step-9-results",
    "title": "13  HPT: River",
    "section": "13.9 Step 9: Results",
    "text": "13.9 Step 9: Results\n\nimport pickle\nSAVE = False\nLOAD = False\n\nif SAVE:\n    result_file_name = \"res_\" + experiment_name + \".pkl\"\n    with open(result_file_name, 'wb') as f:\n        pickle.dump(spot_tuner, f)\n\nif LOAD:\n    result_file_name = \"res_ch10-friedman-hpt-0_maans03_60min_20init_1K_2023-04-14_10-11-19.pkl\"\n    with open(result_file_name, 'rb') as f:\n        spot_tuner =  pickle.load(f)\n\n\nShow the Progress of the hyperparameter tuning:\n\n\nspot_tuner.plot_progress(log_y=True, filename=\"./figures/\" + experiment_name+\"_progress.pdf\")\n\n\n\n\n\nPrint the Results\n\n\nprint(gen_design_table(fun_control=fun_control, spot=spot_tuner))\n\n| name                   | type   | default          |    lower |     upper |               tuned | transform             |   importance | stars   |\n|------------------------|--------|------------------|----------|-----------|---------------------|-----------------------|--------------|---------|\n| grace_period           | int    | 200              |     10.0 |    1000.0 |               334.0 | None                  |         0.00 |         |\n| max_depth              | int    | 20               |      2.0 |      20.0 |                 9.0 | transform_power_2_int |         0.00 |         |\n| delta                  | float  | 1e-07            |    1e-10 |     1e-06 |               1e-10 | None                  |         0.00 |         |\n| tau                    | float  | 0.05             |     0.01 |       0.1 | 0.04863556438476733 | None                  |         0.00 |         |\n| leaf_prediction        | factor | mean             |      0.0 |       2.0 |                 2.0 | None                  |         0.00 |         |\n| leaf_model             | factor | LinearRegression |      0.0 |       2.0 |                 0.0 | None                  |         4.46 | *       |\n| model_selector_decay   | float  | 0.95             |      0.9 |      0.99 |                0.99 | None                  |         0.00 |         |\n| splitter               | factor | EBSTSplitter     |      0.0 |       2.0 |                 1.0 | None                  |         0.00 |         |\n| min_samples_split      | int    | 5                |      2.0 |      10.0 |                 5.0 | None                  |         0.63 | .       |\n| bootstrap_sampling     | factor | 0                |      0.0 |       1.0 |                 0.0 | None                  |         0.00 |         |\n| drift_window_threshold | int    | 300              |    100.0 |     500.0 |               117.0 | None                  |         0.00 |         |\n| switch_significance    | float  | 0.05             |     0.01 |       0.1 |                0.01 | None                  |         0.00 |         |\n| binary_split           | factor | 0                |      0.0 |       1.0 |                 1.0 | None                  |         0.00 |         |\n| max_size               | float  | 500.0            |    100.0 |    1000.0 |  320.75476277942965 | None                  |         0.00 |         |\n| memory_estimate_period | int    | 1000000          | 100000.0 | 1000000.0 |            973231.0 | None                  |         0.00 |         |\n| stop_mem_management    | factor | 0                |      0.0 |       1.0 |                 1.0 | None                  |       100.00 | ***     |\n| remove_poor_attrs      | factor | 0                |      0.0 |       1.0 |                 0.0 | None                  |         0.00 |         |\n| merit_preprune         | factor | 0                |      0.0 |       0.0 |                 0.0 | None                  |         0.00 |         |\n\n\n\n13.9.1 Show variable importance\n\nspot_tuner.plot_importance(threshold=0.0025, filename=\"./figures/\" + experiment_name+\"_importance.pdf\")\n\n\n\n\n\n\n13.9.2 Build and Evaluate HTR Model with Tuned Hyperparameters\n\nm = test.shape[0]\na = int(m/2)-50\nb = int(m/2)\n\n\n\n13.9.3 The Large Data Set (k=0.2)\n\n\n\n\n\n\nCaution: Increased Friedman-Drift Data Set\n\n\n\n\nThe Friedman-Drift Data Set is increased by a factor of two to show the transferability of the hyperparameter tuning results.\nLarger values of k lead to a longer run time.\n\n\n\n\nhorizon = 7*24\nk = .2\nn_total = int(k*100_000)\nn_samples = n_total\np_1 = int(k*25_000)\np_2 = int(k*50_000)\nposition=(p_1, p_2)\nn_train = 1_000\na = n_train + p_1 - 12\nb = a + 12\ndataset = synth.FriedmanDrift(\n   drift_type='gra',\n   position=position,\n     seed=123\n)\ndata_dict = {key: [] for key in list(dataset.take(1))[0][0].keys()}\ndata_dict[\"y\"] = []\nfor x, y in dataset.take(n_total):\n    for key, value in x.items():\n        data_dict[key].append(value)\n    data_dict[\"y\"].append(y)\ndf = pd.DataFrame(data_dict)\n# Add column names x1 until x10 to the first 10 columns of the dataframe and the column name y to the last column\ndf.columns = [f\"x{i}\" for i in range(1, 11)] + [\"y\"]\n\ntrain = df[:n_train]\ntest = df[n_train:]\ntarget_column = \"y\"\n#\nfun_control.update({\"data\": None, # dataset,\n               \"train\": train,\n               \"test\": test,\n               \"n_samples\": n_samples,\n               \"target_column\": target_column})\n\n\n\n13.9.4 Get Default Hyperparameters\n\n# fun_control was modified, we generate a new one with the original \n# default hyperparameters\nfrom spotPython.hyperparameters.values import get_one_core_model_from_X\nfc = fun_control\nfc.update({\"core_model_hyper_dict\":\n    hyper_dict[fun_control[\"core_model\"].__name__]})\nmodel_default = get_one_core_model_from_X(X_start, fun_control=fc)\nmodel_default\n\nHoeffdingAdaptiveTreeRegressor (\n  grace_period=200\n  max_depth=1048576\n  delta=1e-07\n  tau=0.05\n  leaf_prediction=\"mean\"\n  leaf_model=LinearRegression (\n    optimizer=SGD (\n      lr=Constant (\n        learning_rate=0.01\n      )\n    )\n    loss=Squared ()\n    l2=0.\n    l1=0.\n    intercept_init=0.\n    intercept_lr=Constant (\n      learning_rate=0.01\n    )\n    clip_gradient=1e+12\n    initializer=Zeros ()\n  )\n  model_selector_decay=0.95\n  nominal_attributes=None\n  splitter=EBSTSplitter ()\n  min_samples_split=5\n  bootstrap_sampling=0\n  drift_window_threshold=300\n  drift_detector=ADWIN (\n    delta=0.002\n    clock=32\n    max_buckets=5\n    min_window_length=5\n    grace_period=10\n  )\n  switch_significance=0.05\n  binary_split=0\n  max_size=500.\n  memory_estimate_period=1000000\n  stop_mem_management=0\n  remove_poor_attrs=0\n  merit_preprune=0\n  seed=None\n)\n\n\n\nfrom spotRiver.evaluation.eval_bml import eval_oml_horizon\n\ndf_eval_default, df_true_default = eval_oml_horizon(\n                    model=model_default,\n                    train=fun_control[\"train\"],\n                    test=fun_control[\"test\"],\n                    target_column=fun_control[\"target_column\"],\n                    horizon=fun_control[\"horizon\"],\n                    oml_grace_period=fun_control[\"oml_grace_period\"],\n                    metric=fun_control[\"metric_sklearn\"],\n                )\n\n\nfrom spotRiver.evaluation.eval_bml import plot_bml_oml_horizon_metrics, plot_bml_oml_horizon_predictions\ndf_labels=[\"default\"]\nplot_bml_oml_horizon_metrics(df_eval = [df_eval_default], log_y=False, df_labels=df_labels, metric=fun_control[\"metric_sklearn\"])\nplot_bml_oml_horizon_predictions(df_true = [df_true_default[a:b]], target_column=target_column,  df_labels=df_labels)\n\n\n\n\n\n\n\n\n\n13.9.5 Get SPOT Results\n\nfrom spotPython.hyperparameters.values import get_one_core_model_from_X\nX = spot_tuner.to_all_dim(spot_tuner.min_X.reshape(1,-1))\nmodel_spot = get_one_core_model_from_X(X, fun_control)\nmodel_spot\n\nHoeffdingAdaptiveTreeRegressor (\n  grace_period=334\n  max_depth=512\n  delta=1e-10\n  tau=0.048636\n  leaf_prediction=\"adaptive\"\n  leaf_model=LinearRegression (\n    optimizer=SGD (\n      lr=Constant (\n        learning_rate=0.01\n      )\n    )\n    loss=Squared ()\n    l2=0.\n    l1=0.\n    intercept_init=0.\n    intercept_lr=Constant (\n      learning_rate=0.01\n    )\n    clip_gradient=1e+12\n    initializer=Zeros ()\n  )\n  model_selector_decay=0.99\n  nominal_attributes=None\n  splitter=TEBSTSplitter (\n    digits=1\n  )\n  min_samples_split=5\n  bootstrap_sampling=0\n  drift_window_threshold=117\n  drift_detector=ADWIN (\n    delta=0.002\n    clock=32\n    max_buckets=5\n    min_window_length=5\n    grace_period=10\n  )\n  switch_significance=0.01\n  binary_split=1\n  max_size=320.754763\n  memory_estimate_period=973231\n  stop_mem_management=1\n  remove_poor_attrs=0\n  merit_preprune=0\n  seed=None\n)\n\n\n\ndf_eval_spot, df_true_spot = eval_oml_horizon(\n                    model=model_spot,\n                    train=fun_control[\"train\"],\n                    test=fun_control[\"test\"],\n                    target_column=fun_control[\"target_column\"],\n                    horizon=fun_control[\"horizon\"],\n                    oml_grace_period=fun_control[\"oml_grace_period\"],\n                    metric=fun_control[\"metric_sklearn\"],\n                )\n\n\ndf_labels=[\"default\", \"spot\"]\nplot_bml_oml_horizon_metrics(df_eval = [df_eval_default, df_eval_spot], log_y=False, df_labels=df_labels, metric=fun_control[\"metric_sklearn\"], filename=\"./figures/\" + experiment_name+\"_metrics.pdf\")\n\n\n\n\n\na = int(m/2)+20\nb = int(m/2)+50\nplot_bml_oml_horizon_predictions(df_true = [df_true_default[a:b], df_true_spot[a:b]], target_column=target_column,  df_labels=df_labels, filename=\"./figures/\" + experiment_name+\"_predictions.pdf\")\n\n\n\n\n\nfrom spotPython.plot.validation import plot_actual_vs_predicted\nplot_actual_vs_predicted(y_test=df_true_default[\"y\"], y_pred=df_true_default[\"Prediction\"], title=\"Default\")\nplot_actual_vs_predicted(y_test=df_true_spot[\"y\"], y_pred=df_true_spot[\"Prediction\"], title=\"SPOT\")\n\n\n\n\n\n\n\n\n\n13.9.6 Visualize Regression Trees\n\ndataset_f = dataset.take(n_total)\nfor x, y in dataset_f:\n    model_default.learn_one(x, y)\n\n\n\n\n\n\n\nCaution: Large Trees\n\n\n\n\nSince the trees are large, the visualization is suppressed by default.\nTo visualize the trees, uncomment the following line.\n\n\n\n\n# model_default.draw()\n\n\nmodel_default.summary\n\n{'n_nodes': 35,\n 'n_branches': 17,\n 'n_leaves': 18,\n 'n_active_leaves': 96,\n 'n_inactive_leaves': 0,\n 'height': 6,\n 'total_observed_weight': 39002.0,\n 'n_alternate_trees': 21,\n 'n_pruned_alternate_trees': 6,\n 'n_switch_alternate_trees': 2}\n\n\n\n\n13.9.7 Spot Model\n\ndataset_f = dataset.take(n_total)\nfor x, y in dataset_f:\n    model_spot.learn_one(x, y)\n\n\n\n\n\n\n\nCaution: Large Trees\n\n\n\n\nSince the trees are large, the visualization is suppressed by default.\nTo visualize the trees, uncomment the following line.\n\n\n\n\n# model_spot.draw()\n\n\nmodel_spot.summary\n\n{'n_nodes': 83,\n 'n_branches': 41,\n 'n_leaves': 42,\n 'n_active_leaves': 57,\n 'n_inactive_leaves': 0,\n 'height': 15,\n 'total_observed_weight': 39002.0,\n 'n_alternate_trees': 39,\n 'n_pruned_alternate_trees': 32,\n 'n_switch_alternate_trees': 1}\n\n\n\nfrom spotPython.utils.eda import compare_two_tree_models\nprint(compare_two_tree_models(model_default, model_spot))\n\n| Parameter                |   Default |   Spot |\n|--------------------------|-----------|--------|\n| n_nodes                  |        35 |     83 |\n| n_branches               |        17 |     41 |\n| n_leaves                 |        18 |     42 |\n| n_active_leaves          |        96 |     57 |\n| n_inactive_leaves        |         0 |      0 |\n| height                   |         6 |     15 |\n| total_observed_weight    |     39002 |  39002 |\n| n_alternate_trees        |        21 |     39 |\n| n_pruned_alternate_trees |         6 |     32 |\n| n_switch_alternate_trees |         2 |      1 |\n\n\n\nmin(spot_tuner.y), max(spot_tuner.y)\n\n(2.091512650383557, 13.36322756494031)\n\n\n\n\n13.9.8 Detailed Hyperparameter Plots\n\nfilename = \"./figures/\" + experiment_name\nspot_tuner.plot_important_hyperparameter_contour(filename=filename)\n\nleaf_model:  4.458481260023939\nmin_samples_split:  0.6297557793575547\nstop_mem_management:  100.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n13.9.9 Parallel Coordinates Plots\n\nspot_tuner.parallel_plot()\n\n\n                                                \n\n\n\n\n13.9.10 Plot all Combinations of Hyperparameters\n\nWarning: this may take a while.\n\n\nPLOT_ALL = False\nif PLOT_ALL:\n    n = spot_tuner.k\n    for i in range(n-1):\n        for j in range(i+1, n):\n            spot_tuner.plot_contour(i=i, j=j, min_z=min_z, max_z = max_z)\n\n\n\n\n\nMontiel, Jacob, Max Halford, Saulo Martiello Mastelini, Geoffrey Bolmier, Raphael Sourty, Robin Vaysse, Adil Zouitine, et al. 2021. “River: Machine Learning for Streaming Data in Python.”"
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#sec-setup-14",
    "href": "14_spot_ray_hpt_torch_cifar10.html#sec-setup-14",
    "title": "14  HPT: PyTorch With spotPython and Ray Tune on CIFAR10",
    "section": "14.1 Step 1: Setup",
    "text": "14.1 Step 1: Setup\nBefore we consider the detailed experimental setup, we select the parameters that affect run time, initial design size and the device that is used.\n\n\n\n\n\n\nCaution: Run time and initial design size should be increased for real experiments\n\n\n\n\nMAX_TIME is set to one minute for demonstration purposes. For real experiments, this should be increased to at least 1 hour.\nINIT_SIZE is set to 5 for demonstration purposes. For real experiments, this should be increased to at least 10.\n\n\n\n\n\n\n\n\n\nNote: Device selection\n\n\n\n\nThe device can be selected by setting the variable DEVICE.\nSince we are using a simple neural net, the setting \"cpu\" is preferred (on Mac).\nIf you have a GPU, you can use \"cuda:0\" instead.\nIf DEVICE is set to None, spotPython will automatically select the device.\n\nThis might result in \"mps\" on Macs, which is not the best choice for simple neural nets.\n\n\n\n\n\nMAX_TIME = 10\nINIT_SIZE = 5\nDEVICE = \"cpu\" # \"cuda:0\"\n\n\nfrom spotPython.utils.device import getDevice\nDEVICE = getDevice(DEVICE)\nprint(DEVICE)\n\ncpu\n\n\n\nimport os\nimport copy\nimport socket\nimport warnings\nfrom datetime import datetime\nfrom dateutil.tz import tzlocal\nstart_time = datetime.now(tzlocal())\nHOSTNAME = socket.gethostname().split(\".\")[0]\nexperiment_name = '14-torch' + \"_\" + HOSTNAME + \"_\" + str(MAX_TIME) + \"min_\" + str(INIT_SIZE) + \"init_\" + str(start_time).split(\".\", 1)[0].replace(' ', '_')\nexperiment_name = experiment_name.replace(':', '-')\nprint(experiment_name)\nif not os.path.exists('./figures'):\n    os.makedirs('./figures')\nwarnings.filterwarnings(\"ignore\")\n\n14-torch_maans03_10min_5init_2023-07-03_11-44-37"
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#sec-initialization-fun-control-14",
    "href": "14_spot_ray_hpt_torch_cifar10.html#sec-initialization-fun-control-14",
    "title": "14  HPT: PyTorch With spotPython and Ray Tune on CIFAR10",
    "section": "14.2 Step 2: Initialization of the fun_control Dictionary",
    "text": "14.2 Step 2: Initialization of the fun_control Dictionary\nspotPython uses a Python dictionary for storing the information required for the hyperparameter tuning process. This dictionary is called fun_control and is initialized with the function fun_control_init. The function fun_control_init returns a skeleton dictionary. The dictionary is filled with the required information for the hyperparameter tuning process. It stores the hyperparameter tuning settings, e.g., the deep learning network architecture that should be tuned, the classification (or regression) problem, and the data that is used for the tuning. The dictionary is used as an input for the SPOT function.\n\n\n\n\n\n\nCaution: Tensorboard does not work under Windows\n\n\n\n\nSince tensorboard does not work under Windows, we recommend setting the parameter tensorboard_path to None if you are working under Windows.\n\n\n\n\nfrom spotPython.utils.init import fun_control_init\nfun_control = fun_control_init(task=\"classification\",\n    tensorboard_path=\"runs/14_spot_ray_hpt_torch_cifar10\",\n    device=DEVICE,)"
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#sec-data-loading-14",
    "href": "14_spot_ray_hpt_torch_cifar10.html#sec-data-loading-14",
    "title": "14  HPT: PyTorch With spotPython and Ray Tune on CIFAR10",
    "section": "14.3 Step 3: PyTorch Data Loading",
    "text": "14.3 Step 3: PyTorch Data Loading\nThe data loading process is implemented in the same manner as described in the Section “Data loaders” in PyTorch (2023a). The data loaders are wrapped into the function load_data_cifar10 which is identical to the function load_data in PyTorch (2023a). A global data directory is used, which allows sharing the data directory between different trials. The method load_data_cifar10 is part of the spotPython package and can be imported from spotPython.data.torchdata.\nIn the following step, the test and train data are added to the dictionary fun_control.\n\nfrom spotPython.data.torchdata import load_data_cifar10\ntrain, test = load_data_cifar10()\nn_samples = len(train)\n# add the dataset to the fun_control\nfun_control.update({\n    \"train\": train,\n    \"test\": test,\n    \"n_samples\": n_samples})\n\nFiles already downloaded and verified\n\n\nFiles already downloaded and verified"
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#sec-specification-of-preprocessing-model-14",
    "href": "14_spot_ray_hpt_torch_cifar10.html#sec-specification-of-preprocessing-model-14",
    "title": "14  HPT: PyTorch With spotPython and Ray Tune on CIFAR10",
    "section": "14.4 Step 4: Specification of the Preprocessing Model",
    "text": "14.4 Step 4: Specification of the Preprocessing Model\nAfter the training and test data are specified and added to the fun_control dictionary, spotPython allows the specification of a data preprocessing pipeline, e.g., for the scaling of the data or for the one-hot encoding of categorical variables. The preprocessing model is called prep_model (“preparation” or pre-processing) and includes steps that are not subject to the hyperparameter tuning process. The preprocessing model is specified in the fun_control dictionary. The preprocessing model can be implemented as a sklearn pipeline. The following code shows a typical preprocessing pipeline:\ncategorical_columns = [\"cities\", \"colors\"]\none_hot_encoder = OneHotEncoder(handle_unknown=\"ignore\",\n                                    sparse_output=False)\nprep_model = ColumnTransformer(\n        transformers=[\n             (\"categorical\", one_hot_encoder, categorical_columns),\n         ],\n         remainder=StandardScaler(),\n     )\nBecause the Ray Tune (ray[tune]) hyperparameter tuning as described in PyTorch (2023a) does not use a preprocessing model, the preprocessing model is set to None here.\n\nprep_model = None\nfun_control.update({\"prep_model\": prep_model})"
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#sec-selection-of-the-algorithm-14",
    "href": "14_spot_ray_hpt_torch_cifar10.html#sec-selection-of-the-algorithm-14",
    "title": "14  HPT: PyTorch With spotPython and Ray Tune on CIFAR10",
    "section": "14.5 Step 5: Select Model (algorithm) and core_model_hyper_dict",
    "text": "14.5 Step 5: Select Model (algorithm) and core_model_hyper_dict\nThe same neural network model as implemented in the section “Configurable neural network” of the PyTorch tutorial (PyTorch 2023a) is used here. We will show the implementation from PyTorch (2023a) in Section 14.5.0.1 first, before the extended implementation with spotPython is shown in Section 14.5.0.2.\n\n14.5.0.1 Implementing a Configurable Neural Network With Ray Tune\nWe used the same hyperparameters that are implemented as configurable in the PyTorch tutorial. We specify the layer sizes, namely l1 and l2, of the fully connected layers:\nclass Net(nn.Module):\n    def __init__(self, l1=120, l2=84):\n        super(Net, self).__init__()\n        self.conv1 = nn.Conv2d(3, 6, 5)\n        self.pool = nn.MaxPool2d(2, 2)\n        self.conv2 = nn.Conv2d(6, 16, 5)\n        self.fc1 = nn.Linear(16 * 5 * 5, l1)\n        self.fc2 = nn.Linear(l1, l2)\n        self.fc3 = nn.Linear(l2, 10)\n\n    def forward(self, x):\n        x = self.pool(F.relu(self.conv1(x)))\n        x = self.pool(F.relu(self.conv2(x)))\n        x = x.view(-1, 16 * 5 * 5)\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\n\nThe learning rate, i.e., lr, of the optimizer is made configurable, too:\noptimizer = optim.SGD(net.parameters(), lr=config[\"lr\"], momentum=0.9)\n\n\n14.5.0.2 Implementing a Configurable Neural Network With spotPython\nspotPython implements a class which is similar to the class described in the PyTorch tutorial. The class is called Net_CIFAR10 and is implemented in the file netcifar10.py.\nfrom torch import nn\nimport torch.nn.functional as F\nimport spotPython.torch.netcore as netcore\n\n\nclass Net_CIFAR10(netcore.Net_Core):\n    def __init__(self, l1, l2, lr_mult, batch_size, epochs, k_folds, patience,\n    optimizer, sgd_momentum):\n        super(Net_CIFAR10, self).__init__(\n            lr_mult=lr_mult,\n            batch_size=batch_size,\n            epochs=epochs,\n            k_folds=k_folds,\n            patience=patience,\n            optimizer=optimizer,\n            sgd_momentum=sgd_momentum,\n        )\n        self.conv1 = nn.Conv2d(3, 6, 5)\n        self.pool = nn.MaxPool2d(2, 2)\n        self.conv2 = nn.Conv2d(6, 16, 5)\n        self.fc1 = nn.Linear(16 * 5 * 5, l1)\n        self.fc2 = nn.Linear(l1, l2)\n        self.fc3 = nn.Linear(l2, 10)\n\n    def forward(self, x):\n        x = self.pool(F.relu(self.conv1(x)))\n        x = self.pool(F.relu(self.conv2(x)))\n        x = x.view(-1, 16 * 5 * 5)\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\n\n\n14.5.1 The Net_Core class\nNet_CIFAR10 inherits from the class Net_Core which is implemented in the file netcore.py. It implements the additional attributes that are common to all neural network models. The Net_Core class is implemented in the file netcore.py. It implements hyperparameters as attributes, that are not used by the core_model, e.g.:\n\noptimizer (optimizer),\nlearning rate (lr),\nbatch size (batch_size),\nepochs (epochs),\nk_folds (k_folds), and\nearly stopping criterion “patience” (patience).\n\nUsers can add further attributes to the class. The class Net_Core is shown below.\nfrom torch import nn\n\n\nclass Net_Core(nn.Module):\n    def __init__(self, lr_mult, batch_size, epochs, k_folds, patience,\n        optimizer, sgd_momentum):\n        super(Net_Core, self).__init__()\n        self.lr_mult = lr_mult\n        self.batch_size = batch_size\n        self.epochs = epochs\n        self.k_folds = k_folds\n        self.patience = patience\n        self.optimizer = optimizer\n        self.sgd_momentum = sgd_momentum\n\n\n14.5.2 Comparison of the Approach Described in the PyTorch Tutorial With spotPython\nComparing the class Net from the PyTorch tutorial and the class Net_CIFAR10 from spotPython, we see that the class Net_CIFAR10 has additional attributes and does not inherit from nn directly. It adds an additional class, Net_core, that takes care of additional attributes that are common to all neural network models, e.g., the learning rate multiplier lr_mult or the batch size batch_size.\nspotPython’s core_model implements an instance of the Net_CIFAR10 class. In addition to the basic neural network model, the core_model can use these additional attributes. spotPython provides methods for handling these additional attributes to guarantee 100% compatibility with the PyTorch classes. The method add_core_model_to_fun_control adds the hyperparameters and additional attributes to the fun_control dictionary. The method is shown below.\n\nfrom spotPython.torch.netcifar10 import Net_CIFAR10\nfrom spotPython.data.torch_hyper_dict import TorchHyperDict\nfrom spotPython.hyperparameters.values import add_core_model_to_fun_control\ncore_model = Net_CIFAR10\nfun_control = add_core_model_to_fun_control(core_model=core_model,\n                              fun_control=fun_control,\n                              hyper_dict=TorchHyperDict,\n                              filename=None)\n\n\n\n14.5.3 The Search Space: Hyperparameters\nIn Section 14.5.4, we first describe how to configure the search space with ray[tune] (as shown in PyTorch (2023a)) and then how to configure the search space with spotPython in -14.\n\n\n14.5.4 Configuring the Search Space With Ray Tune\nRay Tune’s search space can be configured as follows (PyTorch 2023a):\nconfig = {\n    \"l1\": tune.sample_from(lambda _: 2**np.random.randint(2, 9)),\n    \"l2\": tune.sample_from(lambda _: 2**np.random.randint(2, 9)),\n    \"lr\": tune.loguniform(1e-4, 1e-1),\n    \"batch_size\": tune.choice([2, 4, 8, 16])\n}\nThe tune.sample_from() function enables the user to define sample methods to obtain hyperparameters. In this example, the l1 and l2 parameters should be powers of 2 between 4 and 256, so either 4, 8, 16, 32, 64, 128, or 256. The lr (learning rate) should be uniformly sampled between 0.0001 and 0.1. Lastly, the batch size is a choice between 2, 4, 8, and 16.\nAt each trial, ray[tune] will randomly sample a combination of parameters from these search spaces. It will then train a number of models in parallel and find the best performing one among these. ray[tune] uses the ASHAScheduler which will terminate bad performing trials early.\n\n\n14.5.5 Configuring the Search Space With spotPython\n\n14.5.5.1 The hyper_dict Hyperparameters for the Selected Algorithm\nspotPython uses JSON files for the specification of the hyperparameters. Users can specify their individual JSON files, or they can use the JSON files provided by spotPython. The JSON file for the core_model is called torch_hyper_dict.json.\nIn contrast to ray[tune], spotPython can handle numerical, boolean, and categorical hyperparameters. They can be specified in the JSON file in a similar way as the numerical hyperparameters as shown below. Each entry in the JSON file represents one hyperparameter with the following structure: type, default, transform, lower, and upper.\n\"factor_hyperparameter\": {\n    \"levels\": [\"A\", \"B\", \"C\"],\n    \"type\": \"factor\",\n    \"default\": \"B\",\n    \"transform\": \"None\",\n    \"core_model_parameter_type\": \"str\",\n    \"lower\": 0,\n    \"upper\": 2},\nThe corresponding entries for the core_model` class are shown below.\n\nfun_control['core_model_hyper_dict']\n\n{'l1': {'type': 'int',\n  'default': 5,\n  'transform': 'transform_power_2_int',\n  'lower': 2,\n  'upper': 9},\n 'l2': {'type': 'int',\n  'default': 5,\n  'transform': 'transform_power_2_int',\n  'lower': 2,\n  'upper': 9},\n 'lr_mult': {'type': 'float',\n  'default': 1.0,\n  'transform': 'None',\n  'lower': 0.1,\n  'upper': 10.0},\n 'batch_size': {'type': 'int',\n  'default': 4,\n  'transform': 'transform_power_2_int',\n  'lower': 1,\n  'upper': 4},\n 'epochs': {'type': 'int',\n  'default': 3,\n  'transform': 'transform_power_2_int',\n  'lower': 3,\n  'upper': 4},\n 'k_folds': {'type': 'int',\n  'default': 1,\n  'transform': 'None',\n  'lower': 1,\n  'upper': 1},\n 'patience': {'type': 'int',\n  'default': 5,\n  'transform': 'None',\n  'lower': 2,\n  'upper': 10},\n 'optimizer': {'levels': ['Adadelta',\n   'Adagrad',\n   'Adam',\n   'AdamW',\n   'SparseAdam',\n   'Adamax',\n   'ASGD',\n   'NAdam',\n   'RAdam',\n   'RMSprop',\n   'Rprop',\n   'SGD'],\n  'type': 'factor',\n  'default': 'SGD',\n  'transform': 'None',\n  'class_name': 'torch.optim',\n  'core_model_parameter_type': 'str',\n  'lower': 0,\n  'upper': 12},\n 'sgd_momentum': {'type': 'float',\n  'default': 0.0,\n  'transform': 'None',\n  'lower': 0.0,\n  'upper': 1.0}}"
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#sec-modification-of-hyperparameters-14",
    "href": "14_spot_ray_hpt_torch_cifar10.html#sec-modification-of-hyperparameters-14",
    "title": "14  HPT: PyTorch With spotPython and Ray Tune on CIFAR10",
    "section": "14.6 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model",
    "text": "14.6 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model\nRay tune (PyTorch 2023a) does not provide a way to change the specified hyperparameters without re-compilation. However, spotPython provides functions for modifying the hyperparameters, their bounds and factors as well as for activating and de-activating hyperparameters without re-compilation of the Python source code. These functions are described in the following.\n\n14.6.0.1 Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model\nAfter specifying the model, the corresponding hyperparameters, their types and bounds are loaded from the JSON file torch_hyper_dict.json. After loading, the user can modify the hyperparameters, e.g., the bounds. spotPython provides a simple rule for de-activating hyperparameters: If the lower and the upper bound are set to identical values, the hyperparameter is de-activated. This is useful for the hyperparameter tuning, because it allows to specify a hyperparameter in the JSON file, but to de-activate it in the fun_control dictionary. This is done in the next step.\n\n\n14.6.0.2 Modify Hyperparameters of Type numeric and integer (boolean)\nSince the hyperparameter k_folds is not used in the PyTorch tutorial, it is de-activated here by setting the lower and upper bound to the same value. Note, k_folds is of type “integer”.\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_bounds\nfun_control = modify_hyper_parameter_bounds(fun_control, \n    \"batch_size\", bounds=[1, 5])\nfun_control = modify_hyper_parameter_bounds(fun_control, \n    \"k_folds\", bounds=[0, 0])\nfun_control = modify_hyper_parameter_bounds(fun_control, \n    \"patience\", bounds=[3, 3])\n\n\n\n14.6.0.3 Modify Hyperparameter of Type factor\nIn a similar manner as for the numerical hyperparameters, the categorical hyperparameters can be modified. New configurations can be chosen by adding or deleting levels. For example, the hyperparameter optimizer can be re-configured as follows:\nIn the following setting, two optimizers (\"SGD\" and \"Adam\") will be compared during the spotPython hyperparameter tuning. The hyperparameter optimizer is active.\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_levels\nfun_control = modify_hyper_parameter_levels(fun_control,\n     \"optimizer\", [\"SGD\", \"Adam\"])\n\nThe hyperparameter optimizer can be de-activated by choosing only one value (level), here: \"SGD\".\n\nfun_control = modify_hyper_parameter_levels(fun_control, \"optimizer\", [\"SGD\"])\n\nAs discussed in Section 14.6.1, there are some issues with the LBFGS optimizer. Therefore, the usage of the LBFGS optimizer is not deactivated in spotPython by default. However, the LBFGS optimizer can be activated by adding it to the list of optimizers. Rprop was removed, because it does perform very poorly (as some pre-tests have shown). However, it can also be activated by adding it to the list of optimizers. Since SparseAdam does not support dense gradients, Adam was used instead. Therefore, there are 10 default optimizers:\n\nfun_control = modify_hyper_parameter_levels(fun_control, \"optimizer\",\n    [\"Adadelta\", \"Adagrad\", \"Adam\", \"AdamW\", \"Adamax\", \"ASGD\", \n    \"NAdam\", \"RAdam\", \"RMSprop\", \"SGD\"])\n\n\n\n14.6.1 Optimizers\nTable 14.1 shows some of the optimizers available in PyTorch:\n\\(a\\) denotes (0.9,0.999), \\(b\\) (0.5,1.2), and \\(c\\) (1e-6, 50), respectively. \\(R\\) denotes required, but unspecified. “m” denotes momentum, “w_d” weight_decay, “d” dampening, “n” nesterov, “r” rho, “l_s” learning rate for scaling delta, “l_d” lr_decay, “b” betas, “l” lambd, “a” alpha, “m_d” for momentum_decay, “e” etas, and “s_s” for step_sizes.\n\n\nTable 14.1: Optimizers available in PyTorch (selection). The default values are shown in the table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOptimizer\nlr\nm\nw_d\nd\nn\nr\nl_s\nl_d\nb\nl\na\nm_d\ne\ns_s\n\n\n\n\nAdadelta\n-\n-\n0.\n-\n-\n0.9\n1.\n-\n-\n-\n-\n-\n-\n-\n\n\nAdagrad\n1e-2\n-\n0.\n-\n-\n-\n-\n0.\n-\n-\n-\n-\n-\n-\n\n\nAdam\n1e-3\n-\n0.\n-\n-\n-\n-\n-\n\\(a\\)\n-\n-\n-\n-\n-\n\n\nAdamW\n1e-3\n-\n1e-2\n-\n-\n-\n-\n-\n\\(a\\)\n-\n-\n-\n-\n-\n\n\nSparseAdam\n1e-3\n-\n-\n-\n-\n-\n-\n-\n\\(a\\)\n-\n-\n-\n-\n-\n\n\nAdamax\n2e-3\n-\n0.\n-\n-\n-\n-\n-\n\\(a\\)\n-\n-\n-\n-\n-\n\n\nASGD\n1e-2\n.9\n0.\n-\nF\n-\n-\n-\n-\n1e-4\n.75\n-\n-\n-\n\n\nLBFGS\n1.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n\n\nNAdam\n2e-3\n-\n0.\n-\n-\n-\n-\n-\n\\(a\\)\n-\n-\n0\n-\n-\n\n\nRAdam\n1e-3\n-\n0.\n-\n-\n-\n-\n-\n\\(a\\)\n-\n-\n-\n-\n-\n\n\nRMSprop\n1e-2\n0.\n0.\n-\n-\n-\n-\n-\n\\(a\\)\n-\n-\n-\n-\n-\n\n\nRprop\n1e-2\n-\n-\n-\n-\n-\n-\n-\n-\n-\n\\(b\\)\n\\(c\\)\n-\n-\n\n\nSGD\n\\(R\\)\n0.\n0.\n0.\nF\n-\n-\n-\n-\n-\n-\n-\n-\n-\n\n\n\n\nspotPython implements an optimization handler that maps the optimizer names to the corresponding PyTorch optimizers.\n\n\n\n\n\n\nA note on LBFGS\n\n\n\nWe recommend deactivating PyTorch’s LBFGS optimizer, because it does not perform very well. The PyTorch documentation, see https://pytorch.org/docs/stable/generated/torch.optim.LBFGS.html#torch.optim.LBFGS, states:\n\nThis is a very memory intensive optimizer (it requires additional param_bytes * (history_size + 1) bytes). If it doesn’t fit in memory try reducing the history size, or use a different algorithm.\n\nFurthermore, the LBFGS optimizer is not compatible with the PyTorch tutorial. The reason is that the LBFGS optimizer requires the closure function, which is not implemented in the PyTorch tutorial. Therefore, the LBFGS optimizer is recommended here. Since there are ten optimizers in the portfolio, it is not recommended tuning the hyperparameters that effect one single optimizer only.\n\n\n\n\n\n\n\n\nA note on the learning rate\n\n\n\nspotPython provides a multiplier for the default learning rates, lr_mult, because optimizers use different learning rates. Using a multiplier for the learning rates might enable a simultaneous tuning of the learning rates for all optimizers. However, this is not recommended, because the learning rates are not comparable across optimizers. Therefore, we recommend fixing the learning rate for all optimizers if multiple optimizers are used. This can be done by setting the lower and upper bounds of the learning rate multiplier to the same value as shown below.\nThus, the learning rate, which affects the SGD optimizer, will be set to a fixed value. We choose the default value of 1e-3 for the learning rate, because it is used in other PyTorch examples (it is also the default value used by spotPython as defined in the optimizer_handler() method). We recommend tuning the learning rate later, when a reduced set of optimizers is fixed. Here, we will demonstrate how to select in a screening phase the optimizers that should be used for the hyperparameter tuning.\n\n\nFor the same reason, we will fix the sgd_momentum to 0.9.\n\nfun_control = modify_hyper_parameter_bounds(fun_control,\n    \"lr_mult\", bounds=[1.0, 1.0])\nfun_control = modify_hyper_parameter_bounds(fun_control,\n    \"sgd_momentum\", bounds=[0.9, 0.9])"
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#step-7-selection-of-the-objective-loss-function",
    "href": "14_spot_ray_hpt_torch_cifar10.html#step-7-selection-of-the-objective-loss-function",
    "title": "14  HPT: PyTorch With spotPython and Ray Tune on CIFAR10",
    "section": "14.7 Step 7: Selection of the Objective (Loss) Function",
    "text": "14.7 Step 7: Selection of the Objective (Loss) Function\n\n14.7.1 Evaluation: Data Splitting\nThe evaluation procedure requires the specification of the way how the data is split into a train and a test set and the loss function (and a metric). As a default, spotPython provides a standard hold-out data split and cross validation.\n\n\n14.7.2 Hold-out Data Split\nIf a hold-out data split is used, the data will be partitioned into a training, a validation, and a test data set. The split depends on the setting of the eval parameter. If eval is set to train_hold_out, one data set, usually the original training data set, is split into a new training and a validation data set. The training data set is used for training the model. The validation data set is used for the evaluation of the hyperparameter configuration and early stopping to prevent overfitting. In this case, the original test data set is not used.\n\n\n\n\n\n\nNote\n\n\n\nspotPython returns the hyperparameters of the machine learning and deep learning models, e.g., number of layers, learning rate, or optimizer, but not the model weights. Therefore, after the SPOT run is finished, the corresponding model with the optimized architecture has to be trained again with the best hyperparameter configuration. The training is performed on the training data set. The test data set is used for the final evaluation of the model.\nSummarizing, the following splits are performed in the hold-out setting:\n\nRun spotPython with eval set to train_hold_out to determine the best hyperparameter configuration.\nTrain the model with the best hyperparameter configuration (“architecture”) on the training data set: train_tuned(model_spot, train, \"model_spot.pt\").\nTest the model on the test data: test_tuned(model_spot, test, \"model_spot.pt\")\n\nThese steps will be exemplified in the following sections.\n\n\nIn addition to this hold-out setting, spotPython provides another hold-out setting, where an explicit test data is specified by the user that will be used as the validation set. To choose this option, the eval parameter is set to test_hold_out. In this case, the training data set is used for the model training. Then, the explicitly defined test data set is used for the evaluation of the hyperparameter configuration (the validation).\n\n\n14.7.3 Cross-Validation\nThe cross validation setting is used by setting the eval parameter to train_cv or test_cv. In both cases, the data set is split into \\(k\\) folds. The model is trained on \\(k-1\\) folds and evaluated on the remaining fold. This is repeated \\(k\\) times, so that each fold is used exactly once for evaluation. The final evaluation is performed on the test data set. The cross validation setting is useful for small data sets, because it allows to use all data for training and evaluation. However, it is computationally expensive, because the model has to be trained \\(k\\) times.\n\n\n\n\n\n\nNote\n\n\n\nCombinations of the above settings are possible, e.g., cross validation can be used for training and hold-out for evaluation or vice versa. Also, cross validation can be used for training and testing. Because cross validation is not used in the PyTorch tutorial (PyTorch 2023a), it is not considered further here.\n\n\n\n\n14.7.4 Overview of the Evaluation Settings\n\n14.7.4.1 Settings for the Hyperparameter Tuning\nAn overview of the training evaluations is shown in Table 14.2. \"train_cv\" and \"test_cv\" use sklearn.model_selection.KFold() internally. More details on the data splitting are provided in Section 22.14 (in the Appendix).\n\n\nTable 14.2: Overview of the evaluation settings.\n\n\n\n\n\n\n\n\n\neval\ntrain\ntest\nfunction\ncomment\n\n\n\n\n\"train_hold_out\"\n\\(\\checkmark\\)\n\ntrain_one_epoch(), validate_one_epoch() for early stopping\nsplits the train data set internally\n\n\n\"test_hold_out\"\n\\(\\checkmark\\)\n\\(\\checkmark\\)\ntrain_one_epoch(), validate_one_epoch() for early stopping\nuse the test data set for validate_one_epoch()\n\n\n\"train_cv\"\n\\(\\checkmark\\)\n\nevaluate_cv(net, train)\nCV using the train data set\n\n\n\"test_cv\"\n\n\\(\\checkmark\\)\nevaluate_cv(net, test)\nCV using the test data set . Identical to \"train_cv\", uses only test data.\n\n\n\n\n\n\n14.7.4.2 Settings for the Final Evaluation of the Tuned Architecture\n\n14.7.4.2.1 Training of the Tuned Architecture\ntrain_tuned(model, train): train the model with the best hyperparameter configuration (or simply the default) on the training data set. It splits the traindata into new train and validation sets using create_train_val_data_loaders(), which calls torch.utils.data.random_split() internally. Currently, 60% of the data is used for training and 40% for validation. The train data is used for training the model with train_hold_out(). The validation data is used for early stopping using validate_fold_or_hold_out() on the validation data set.\n\n\n14.7.4.2.2 Testing of the Tuned Architecture\ntest_tuned(model, test): test the model on the test data set. No data splitting is performed. The (trained) model is evaluated using the validate_fold_or_hold_out() function. Note: During training, \"shuffle\" is set to True, whereas during testing, \"shuffle\" is set to False.\nSection 22.14.1.4 describes the final evaluation of the tuned architecture.\n\nfun_control.update({\n    \"eval\": \"train_hold_out\",\n    \"path\": \"torch_model.pt\",\n    \"shuffle\": True})\n\n\n\n\n\n14.7.5 Evaluation: Loss Functions and Metrics\nThe key \"loss_function\" specifies the loss function which is used during the optimization. There are several different loss functions under PyTorch’s nn package. For example, a simple loss is MSELoss, which computes the mean-squared error between the output and the target. In this tutorial we will use CrossEntropyLoss, because it is also used in the PyTorch tutorial.\n\nfrom torch.nn import CrossEntropyLoss\nloss_function = CrossEntropyLoss()\nfun_control.update({\"loss_function\": loss_function})\n\nIn addition to the loss functions, spotPython provides access to a large number of metrics.\n\nThe key \"metric_sklearn\" is used for metrics that follow the scikit-learn conventions.\nThe key \"river_metric\" is used for the river based evaluation (Montiel et al. 2021) via eval_oml_iter_progressive, and\nthe key \"metric_torch\" is used for the metrics from TorchMetrics.\n\nTorchMetrics is a collection of more than 90 PyTorch metrics, see https://torchmetrics.readthedocs.io/en/latest/. Because the PyTorch tutorial uses the accuracy as metric, we use the same metric here. Currently, accuracy is computed in the tutorial’s example code. We will use TorchMetrics instead, because it offers more flexibilty, e.g., it can be used for regression and classification. Furthermore, TorchMetrics offers the following advantages:\n* A standardized interface to increase reproducibility\n* Reduces Boilerplate\n* Distributed-training compatible\n* Rigorously tested\n* Automatic accumulation over batches\n* Automatic synchronization between multiple devices\nTherefore, we set\n\nimport torchmetrics\nmetric_torch = torchmetrics.Accuracy(task=\"multiclass\", num_classes=10).to(fun_control[\"device\"])\nfun_control.update({\"metric_torch\": metric_torch})"
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#step-8-calling-the-spot-function",
    "href": "14_spot_ray_hpt_torch_cifar10.html#step-8-calling-the-spot-function",
    "title": "14  HPT: PyTorch With spotPython and Ray Tune on CIFAR10",
    "section": "14.8 Step 8: Calling the SPOT Function",
    "text": "14.8 Step 8: Calling the SPOT Function\n\n14.8.1 Preparing the SPOT Call\nThe following code passes the information about the parameter ranges and bounds to spot.\n\nfrom spotPython.hyperparameters.values import (\n    get_var_type,\n    get_var_name,\n    get_bound_values\n    )\nvar_type = get_var_type(fun_control)\nvar_name = get_var_name(fun_control)\nfun_control.update({\"var_type\": var_type,\n                    \"var_name\": var_name})\n\nlower = get_bound_values(fun_control, \"lower\")\nupper = get_bound_values(fun_control, \"upper\")\n\nNow, the dictionary fun_control contains all information needed for the hyperparameter tuning. Before the hyperparameter tuning is started, it is recommended to take a look at the experimental design. The method gen_design_table generates a design table as follows:\n\nfrom spotPython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control))\n\n| name         | type   | default   |   lower |   upper | transform             |\n|--------------|--------|-----------|---------|---------|-----------------------|\n| l1           | int    | 5         |     2   |     9   | transform_power_2_int |\n| l2           | int    | 5         |     2   |     9   | transform_power_2_int |\n| lr_mult      | float  | 1.0       |     1   |     1   | None                  |\n| batch_size   | int    | 4         |     1   |     5   | transform_power_2_int |\n| epochs       | int    | 3         |     3   |     4   | transform_power_2_int |\n| k_folds      | int    | 1         |     0   |     0   | None                  |\n| patience     | int    | 5         |     3   |     3   | None                  |\n| optimizer    | factor | SGD       |     0   |     9   | None                  |\n| sgd_momentum | float  | 0.0       |     0.9 |     0.9 | None                  |\n\n\nThis allows to check if all information is available and if the information is correct. ?tbl-design shows the experimental design for the hyperparameter tuning. The table shows the hyperparameters, their types, default values, lower and upper bounds, and the transformation function. The transformation function is used to transform the hyperparameter values from the unit hypercube to the original domain. The transformation function is applied to the hyperparameter values before the evaluation of the objective function. Hyperparameter transformations are shown in the column “transform”, e.g., the l1 default is 5, which results in the value \\(2^5 = 32\\) for the network, because the transformation transform_power_2_int was selected in the JSON file. The default value of the batch_size is set to 4, which results in a batch size of \\(2^4 = 16\\).\n\n\n14.8.2 The Objective Function fun_torch\nThe objective function fun_torch is selected next. It implements an interface from PyTorch’s training, validation, and testing methods to spotPython.\n\nfrom spotPython.fun.hypertorch import HyperTorch\nfun = HyperTorch().fun_torch\n\n\n\n14.8.3 Using Default Hyperparameters or Results from Previous Runs\nWe add the default setting to the initial design:\n\nfrom spotPython.hyperparameters.values import get_default_hyperparameters_as_array\nhyper_dict=TorchHyperDict().load()\nX_start = get_default_hyperparameters_as_array(fun_control, hyper_dict)\n\n\n\n14.8.4 Starting the Hyperparameter Tuning\nThe spotPython hyperparameter tuning is started by calling the Spot function. Here, we will run the tuner for approximately 30 minutes (max_time). Note: the initial design is always evaluated in the spotPython run. As a consequence, the run may take longer than specified by max_time, because the evaluation time of initial design (here: init_size, 10 points) is performed independently of max_time. During the run, results from the training is shown. These results can be visualized with Tensorboard as will be shown in Section 14.9.\n\nfrom spotPython.spot import spot\nfrom math import inf\nimport numpy as np\nspot_tuner = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = inf,\n                   fun_repeats = 1,\n                   max_time = MAX_TIME,\n                   noise = False,\n                   tolerance_x = np.sqrt(np.spacing(1)),\n                   var_type = var_type,\n                   var_name = var_name,\n                   infill_criterion = \"y\",\n                   n_points = 1,\n                   seed=123,\n                   log_level = 50,\n                   show_models= False,\n                   show_progress= True,\n                   fun_control = fun_control,\n                   design_control={\"init_size\": INIT_SIZE,\n                                   \"repeats\": 1},\n                   surrogate_control={\"noise\": True,\n                                      \"cod_type\": \"norm\",\n                                      \"min_theta\": -4,\n                                      \"max_theta\": 3,\n                                      \"n_theta\": len(var_name),\n                                      \"model_fun_evals\": 10_000,\n                                      \"log_level\": 50\n                                      })\nspot_tuner.run(X_start=X_start)\n\n\nconfig: {'l1': 128, 'l2': 8, 'lr_mult': 1.0, 'batch_size': 32, 'epochs': 16, 'k_folds': 0, 'patience': 3, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMulticlassAccuracy: 0.3835000097751617 | Loss: 1.6555127101898193 | Acc: 0.3835000000000000.\nEpoch: 2 | \n\n\nMulticlassAccuracy: 0.4562000036239624 | Loss: 1.4890659008026124 | Acc: 0.4562000000000000.\nEpoch: 3 | \n\n\nMulticlassAccuracy: 0.4939999878406525 | Loss: 1.3872022548675538 | Acc: 0.4940000000000000.\nEpoch: 4 | \n\n\nMulticlassAccuracy: 0.5164999961853027 | Loss: 1.3260287700653077 | Acc: 0.5165000000000000.\nEpoch: 5 | \n\n\nMulticlassAccuracy: 0.5462999939918518 | Loss: 1.2660414114952088 | Acc: 0.5463000000000000.\nEpoch: 6 | \n\n\nMulticlassAccuracy: 0.5632500052452087 | Loss: 1.2166201056480408 | Acc: 0.5632500000000000.\nEpoch: 7 | \n\n\nMulticlassAccuracy: 0.5610499978065491 | Loss: 1.2368356624603272 | Acc: 0.5610500000000000.\nEpoch: 8 | \n\n\nMulticlassAccuracy: 0.5813000202178955 | Loss: 1.1746846567153930 | Acc: 0.5813000000000000.\nEpoch: 9 | \n\n\nMulticlassAccuracy: 0.5954499840736389 | Loss: 1.1482583248138427 | Acc: 0.5954500000000000.\nEpoch: 10 | \n\n\nMulticlassAccuracy: 0.6000999808311462 | Loss: 1.1498764616966248 | Acc: 0.6001000000000000.\nEpoch: 11 | \n\n\nMulticlassAccuracy: 0.5925999879837036 | Loss: 1.1826003037452697 | Acc: 0.5926000000000000.\nEpoch: 12 | \n\n\nMulticlassAccuracy: 0.5954999923706055 | Loss: 1.1827107128143310 | Acc: 0.5955000000000000.\nEarly stopping at epoch 11\nReturned to Spot: Validation loss: 1.182710712814331\n\nconfig: {'l1': 16, 'l2': 16, 'lr_mult': 1.0, 'batch_size': 8, 'epochs': 8, 'k_folds': 0, 'patience': 3, 'optimizer': 'NAdam', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMulticlassAccuracy: 0.4435999989509583 | Loss: 1.5066036984682083 | Acc: 0.4436000000000000.\nEpoch: 2 | \n\n\nMulticlassAccuracy: 0.4920499920845032 | Loss: 1.3805544215440750 | Acc: 0.4920500000000000.\nEpoch: 3 | \n\n\nMulticlassAccuracy: 0.5090500116348267 | Loss: 1.3838436133325100 | Acc: 0.5090500000000000.\nEpoch: 4 | \n\n\nMulticlassAccuracy: 0.5134000182151794 | Loss: 1.3652919138789177 | Acc: 0.5134000000000000.\nEpoch: 5 | \n\n\nMulticlassAccuracy: 0.5425000190734863 | Loss: 1.2813396899223328 | Acc: 0.5425000000000000.\nEpoch: 6 | \n\n\nMulticlassAccuracy: 0.5339499711990356 | Loss: 1.3223103511393071 | Acc: 0.5339500000000000.\nEpoch: 7 | \n\n\nMulticlassAccuracy: 0.5522000193595886 | Loss: 1.2933707284569740 | Acc: 0.5522000000000000.\nEpoch: 8 | \n\n\nMulticlassAccuracy: 0.5381000041961670 | Loss: 1.3226890068054200 | Acc: 0.5381000000000000.\nEarly stopping at epoch 7\nReturned to Spot: Validation loss: 1.32268900680542\n\nconfig: {'l1': 256, 'l2': 128, 'lr_mult': 1.0, 'batch_size': 2, 'epochs': 16, 'k_folds': 0, 'patience': 3, 'optimizer': 'RMSprop', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMulticlassAccuracy: 0.0981499999761581 | Loss: 2.3106271007537842 | Acc: 0.0981500000000000.\nEpoch: 2 | \n\n\nMulticlassAccuracy: 0.1515000015497208 | Loss: 2.3217867916107178 | Acc: 0.1515000000000000.\nEpoch: 3 | \n\n\nMulticlassAccuracy: 0.0960500016808510 | Loss: 2.3049573634743692 | Acc: 0.0960500000000000.\nEpoch: 4 | \n\n\nMulticlassAccuracy: 0.1013500019907951 | Loss: 2.3090307576417923 | Acc: 0.1013500000000000.\nEpoch: 5 | \n\n\nMulticlassAccuracy: 0.0958999991416931 | Loss: 2.3108412470340727 | Acc: 0.0959000000000000.\nEpoch: 6 | \n\n\nMulticlassAccuracy: 0.0987500026822090 | Loss: 2.3079020259976386 | Acc: 0.0987500000000000.\nEarly stopping at epoch 5\nReturned to Spot: Validation loss: 2.3079020259976386\n\nconfig: {'l1': 8, 'l2': 32, 'lr_mult': 1.0, 'batch_size': 4, 'epochs': 8, 'k_folds': 0, 'patience': 3, 'optimizer': 'Adamax', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMulticlassAccuracy: 0.3790499866008759 | Loss: 1.6489014202296735 | Acc: 0.3790500000000000.\nEpoch: 2 | \n\n\nMulticlassAccuracy: 0.4463999867439270 | Loss: 1.5321393435716628 | Acc: 0.4464000000000000.\nEpoch: 3 | \n\n\nMulticlassAccuracy: 0.4903500080108643 | Loss: 1.3922831337541342 | Acc: 0.4903500000000000.\nEpoch: 4 | \n\n\nMulticlassAccuracy: 0.5078499913215637 | Loss: 1.3624865150630474 | Acc: 0.5078500000000000.\nEpoch: 5 | \n\n\nMulticlassAccuracy: 0.5323500037193298 | Loss: 1.3182829683810473 | Acc: 0.5323500000000000.\nEpoch: 6 | \n\n\nMulticlassAccuracy: 0.5329999923706055 | Loss: 1.3107320315334945 | Acc: 0.5330000000000000.\nEpoch: 7 | \n\n\nMulticlassAccuracy: 0.5419999957084656 | Loss: 1.3036343170396985 | Acc: 0.5420000000000000.\nEpoch: 8 | \n\n\nMulticlassAccuracy: 0.5555999875068665 | Loss: 1.2665005367688835 | Acc: 0.5556000000000000.\nReturned to Spot: Validation loss: 1.2665005367688835\n\nconfig: {'l1': 64, 'l2': 512, 'lr_mult': 1.0, 'batch_size': 16, 'epochs': 16, 'k_folds': 0, 'patience': 3, 'optimizer': 'Adagrad', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMulticlassAccuracy: 0.4735499918460846 | Loss: 1.4344331402301789 | Acc: 0.4735500000000000.\nEpoch: 2 | \n\n\nMulticlassAccuracy: 0.5040000081062317 | Loss: 1.3720984834194183 | Acc: 0.5040000000000000.\nEpoch: 3 | \n\n\nMulticlassAccuracy: 0.5160499811172485 | Loss: 1.3293344084262848 | Acc: 0.5160500000000000.\nEpoch: 4 | \n\n\nMulticlassAccuracy: 0.5411000251770020 | Loss: 1.2745791875362396 | Acc: 0.5411000000000000.\nEpoch: 5 | \n\n\nMulticlassAccuracy: 0.5455999970436096 | Loss: 1.2595453467369080 | Acc: 0.5456000000000000.\nEpoch: 6 | \n\n\nMulticlassAccuracy: 0.5518000125885010 | Loss: 1.2371071474075317 | Acc: 0.5518000000000000.\nEpoch: 7 | \n\n\nMulticlassAccuracy: 0.5559499859809875 | Loss: 1.2294477246284485 | Acc: 0.5559500000000001.\nEpoch: 8 | \n\n\nMulticlassAccuracy: 0.5568500161170959 | Loss: 1.2272820011138916 | Acc: 0.5568500000000000.\nEpoch: 9 | \n\n\nMulticlassAccuracy: 0.5687500238418579 | Loss: 1.2133782124042511 | Acc: 0.5687500000000000.\nEpoch: 10 | \n\n\nMulticlassAccuracy: 0.5718500018119812 | Loss: 1.1942334382772446 | Acc: 0.5718500000000000.\nEpoch: 11 | \n\n\nMulticlassAccuracy: 0.5691499710083008 | Loss: 1.1962762669086455 | Acc: 0.5691500000000000.\nEpoch: 12 | \n\n\nMulticlassAccuracy: 0.5765500068664551 | Loss: 1.1818930788278579 | Acc: 0.5765500000000000.\nEpoch: 13 | \n\n\nMulticlassAccuracy: 0.5777999758720398 | Loss: 1.1739344074010849 | Acc: 0.5778000000000000.\nEpoch: 14 | \n\n\nMulticlassAccuracy: 0.5824999809265137 | Loss: 1.1722334628105164 | Acc: 0.5825000000000000.\nEpoch: 15 | \n\n\nMulticlassAccuracy: 0.5823000073432922 | Loss: 1.1642311267137528 | Acc: 0.5823000000000000.\nEpoch: 16 | \n\n\nMulticlassAccuracy: 0.5831000208854675 | Loss: 1.1653465260744096 | Acc: 0.5831000000000000.\nReturned to Spot: Validation loss: 1.1653465260744096\n\n\n\nconfig: {'l1': 64, 'l2': 256, 'lr_mult': 1.0, 'batch_size': 16, 'epochs': 16, 'k_folds': 0, 'patience': 3, 'optimizer': 'Adagrad', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMulticlassAccuracy: 0.4367499947547913 | Loss: 1.5347009962558746 | Acc: 0.4367500000000000.\nEpoch: 2 | \n\n\nMulticlassAccuracy: 0.4698500037193298 | Loss: 1.4526902680397034 | Acc: 0.4698500000000000.\nEpoch: 3 | \n\n\nMulticlassAccuracy: 0.4846000075340271 | Loss: 1.4155467565536499 | Acc: 0.4846000000000000.\nEpoch: 4 | \n\n\nMulticlassAccuracy: 0.4973999857902527 | Loss: 1.3829295865058899 | Acc: 0.4974000000000000.\nEpoch: 5 | \n\n\nMulticlassAccuracy: 0.5073999762535095 | Loss: 1.3607472479343414 | Acc: 0.5074000000000000.\nEpoch: 6 | \n\n\nMulticlassAccuracy: 0.5196999907493591 | Loss: 1.3298574501514435 | Acc: 0.5197000000000001.\nEpoch: 7 | \n\n\nMulticlassAccuracy: 0.5314999818801880 | Loss: 1.3078917122840881 | Acc: 0.5315000000000000.\nEpoch: 8 | \n\n\nMulticlassAccuracy: 0.5324500203132629 | Loss: 1.3053160723209380 | Acc: 0.5324500000000000.\nEpoch: 9 | \n\n\nMulticlassAccuracy: 0.5345500111579895 | Loss: 1.2932133648872375 | Acc: 0.5345500000000000.\nEpoch: 10 | \n\n\nMulticlassAccuracy: 0.5436000227928162 | Loss: 1.2697099392890929 | Acc: 0.5436000000000000.\nEpoch: 11 | \n\n\nMulticlassAccuracy: 0.5429499745368958 | Loss: 1.2708870210170746 | Acc: 0.5429500000000000.\nEpoch: 12 | \n\n\nMulticlassAccuracy: 0.5517500042915344 | Loss: 1.2512038480281831 | Acc: 0.5517500000000000.\nEpoch: 13 | \n\n\nMulticlassAccuracy: 0.5482500195503235 | Loss: 1.2566084330558778 | Acc: 0.5482500000000000.\nEpoch: 14 | \n\n\nMulticlassAccuracy: 0.5580499768257141 | Loss: 1.2443617900848389 | Acc: 0.5580500000000000.\nEpoch: 15 | \n\n\nMulticlassAccuracy: 0.5563499927520752 | Loss: 1.2389848153114318 | Acc: 0.5563500000000000.\nEpoch: 16 | \n\n\nMulticlassAccuracy: 0.5600500106811523 | Loss: 1.2298900278329850 | Acc: 0.5600500000000000.\nReturned to Spot: Validation loss: 1.229890027832985\n\n\nspotPython tuning: 1.1653465260744096 [####------] 37.10% \n\n\n\nconfig: {'l1': 128, 'l2': 64, 'lr_mult': 1.0, 'batch_size': 32, 'epochs': 16, 'k_folds': 0, 'patience': 3, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMulticlassAccuracy: 0.4414499998092651 | Loss: 1.5097254679679870 | Acc: 0.4414500000000000.\nEpoch: 2 | \n\n\nMulticlassAccuracy: 0.5005499720573425 | Loss: 1.3655176716804505 | Acc: 0.5005500000000001.\nEpoch: 3 | \n\n\nMulticlassAccuracy: 0.5336999893188477 | Loss: 1.2787800833702088 | Acc: 0.5337000000000000.\nEpoch: 4 | \n\n\nMulticlassAccuracy: 0.5530999898910522 | Loss: 1.2513076989173890 | Acc: 0.5531000000000000.\nEpoch: 5 | \n\n\nMulticlassAccuracy: 0.5716500282287598 | Loss: 1.1837824179649352 | Acc: 0.5716500000000000.\nEpoch: 6 | \n\n\nMulticlassAccuracy: 0.5983499884605408 | Loss: 1.1271832468032836 | Acc: 0.5983500000000000.\nEpoch: 7 | \n\n\nMulticlassAccuracy: 0.5827500224113464 | Loss: 1.1788005928039551 | Acc: 0.5827500000000000.\nEpoch: 8 | \n\n\nMulticlassAccuracy: 0.5946000218391418 | Loss: 1.1742735905647277 | Acc: 0.5946000000000000.\nEpoch: 9 | \n\n\nMulticlassAccuracy: 0.6100000143051147 | Loss: 1.1143370146751403 | Acc: 0.6100000000000000.\nEpoch: 10 | \n\n\nMulticlassAccuracy: 0.6213499903678894 | Loss: 1.1004798809051515 | Acc: 0.6213500000000000.\nEpoch: 11 | \n\n\nMulticlassAccuracy: 0.6097999811172485 | Loss: 1.1298187858581543 | Acc: 0.6098000000000000.\nEpoch: 12 | \n\n\nMulticlassAccuracy: 0.6251000165939331 | Loss: 1.1078383001804353 | Acc: 0.6251000000000000.\nEpoch: 13 | \n\n\nMulticlassAccuracy: 0.6301500201225281 | Loss: 1.1029071352005004 | Acc: 0.6301500000000000.\nEarly stopping at epoch 12\nReturned to Spot: Validation loss: 1.1029071352005004\n\n\nspotPython tuning: 1.1029071352005004 [######----] 63.04% \n\n\n\nconfig: {'l1': 128, 'l2': 512, 'lr_mult': 1.0, 'batch_size': 32, 'epochs': 16, 'k_folds': 0, 'patience': 3, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMulticlassAccuracy: 0.4770500063896179 | Loss: 1.4390149123191833 | Acc: 0.4770500000000000.\nEpoch: 2 | \n\n\nMulticlassAccuracy: 0.5321499705314636 | Loss: 1.3068075354576112 | Acc: 0.5321500000000000.\nEpoch: 3 | \n\n\nMulticlassAccuracy: 0.5607500076293945 | Loss: 1.2343128045082092 | Acc: 0.5607500000000000.\nEpoch: 4 | \n\n\nMulticlassAccuracy: 0.5713000297546387 | Loss: 1.2181520700454711 | Acc: 0.5713000000000000.\nEpoch: 5 | \n\n\nMulticlassAccuracy: 0.6044999957084656 | Loss: 1.1327894499778748 | Acc: 0.6045000000000000.\nEpoch: 6 | \n\n\nMulticlassAccuracy: 0.6054000258445740 | Loss: 1.1293966197967529 | Acc: 0.6054000000000000.\nEpoch: 7 | \n\n\nMulticlassAccuracy: 0.6141999959945679 | Loss: 1.1064595009803773 | Acc: 0.6142000000000000.\nEpoch: 8 | \n\n\nMulticlassAccuracy: 0.6161500215530396 | Loss: 1.1265255500793456 | Acc: 0.6161500000000000.\nEpoch: 9 | \n\n\nMulticlassAccuracy: 0.6103000044822693 | Loss: 1.1644302755832672 | Acc: 0.6103000000000000.\nEpoch: 10 | \n\n\nMulticlassAccuracy: 0.6125500202178955 | Loss: 1.1852258719921112 | Acc: 0.6125500000000000.\nEarly stopping at epoch 9\nReturned to Spot: Validation loss: 1.1852258719921112\n\n\nspotPython tuning: 1.1029071352005004 [########--] 82.87% \n\n\n\nconfig: {'l1': 128, 'l2': 128, 'lr_mult': 1.0, 'batch_size': 32, 'epochs': 16, 'k_folds': 0, 'patience': 3, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMulticlassAccuracy: 0.4485999941825867 | Loss: 1.5299455617904663 | Acc: 0.4486000000000000.\nEpoch: 2 | \n\n\nMulticlassAccuracy: 0.4990000128746033 | Loss: 1.3892097097396852 | Acc: 0.4990000000000000.\nEpoch: 3 | \n\n\nMulticlassAccuracy: 0.5450999736785889 | Loss: 1.2654036801338195 | Acc: 0.5451000000000000.\nEpoch: 4 | \n\n\nMulticlassAccuracy: 0.5626000165939331 | Loss: 1.2238172842979431 | Acc: 0.5626000000000000.\nEpoch: 5 | \n\n\nMulticlassAccuracy: 0.5759500265121460 | Loss: 1.1976863938331603 | Acc: 0.5759500000000000.\nEpoch: 6 | \n\n\nMulticlassAccuracy: 0.5945000052452087 | Loss: 1.1594608989715576 | Acc: 0.5945000000000000.\nEpoch: 7 | \n\n\nMulticlassAccuracy: 0.5829499959945679 | Loss: 1.2049226930618286 | Acc: 0.5829500000000000.\nEpoch: 8 | \n\n\nMulticlassAccuracy: 0.5950000286102295 | Loss: 1.1615549116134642 | Acc: 0.5950000000000000.\nEpoch: 9 | \n\n\nMulticlassAccuracy: 0.6095499992370605 | Loss: 1.1511459247589111 | Acc: 0.6095500000000000.\nEpoch: 10 | \n\n\nMulticlassAccuracy: 0.6107500195503235 | Loss: 1.1499798847198486 | Acc: 0.6107500000000000.\nEpoch: 11 | \n\n\nMulticlassAccuracy: 0.6051499843597412 | Loss: 1.1655514258384705 | Acc: 0.6051500000000000.\nEpoch: 12 | \n\n\nMulticlassAccuracy: 0.6012499928474426 | Loss: 1.2182928497314454 | Acc: 0.6012500000000000.\nEpoch: 13 | \n\n\nMulticlassAccuracy: 0.6016499996185303 | Loss: 1.2296336574554443 | Acc: 0.6016500000000000.\nEarly stopping at epoch 12\nReturned to Spot: Validation loss: 1.2296336574554443\n\n\nspotPython tuning: 1.1029071352005004 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x17f2a6830&gt;"
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#sec-tensorboard-14",
    "href": "14_spot_ray_hpt_torch_cifar10.html#sec-tensorboard-14",
    "title": "14  HPT: PyTorch With spotPython and Ray Tune on CIFAR10",
    "section": "14.9 Step 9: Tensorboard",
    "text": "14.9 Step 9: Tensorboard\nThe textual output shown in the console (or code cell) can be visualized with Tensorboard.\n\n14.9.1 Tensorboard: Start Tensorboard\nStart TensorBoard through the command line to visualize data you logged. Specify the root log directory as used in fun_control = fun_control_init(task=\"regression\", tensorboard_path=\"runs/24_spot_torch_regression\") as the tensorboard_path. The argument logdir points to directory where TensorBoard will look to find event files that it can display. TensorBoard will recursively walk the directory structure rooted at logdir, looking for .tfevents. files.\ntensorboard --logdir=runs\nGo to the URL it provides or to http://localhost:6006/. The following figures show some screenshots of Tensorboard.\n\n\n\nFigure 14.1: Tensorboard\n\n\n\n\n\nFigure 14.2: Tensorboard\n\n\n\n\n14.9.2 Saving the State of the Notebook\nThe state of the notebook can be saved and reloaded as follows:\n\nimport pickle\nSAVE = False\nLOAD = False\n\nif SAVE:\n    result_file_name = \"res_\" + experiment_name + \".pkl\"\n    with open(result_file_name, 'wb') as f:\n        pickle.dump(spot_tuner, f)\n\nif LOAD:\n    result_file_name = \"add_the_name_of_the_result_file_here.pkl\"\n    with open(result_file_name, 'rb') as f:\n        spot_tuner =  pickle.load(f)"
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#sec-results-14",
    "href": "14_spot_ray_hpt_torch_cifar10.html#sec-results-14",
    "title": "14  HPT: PyTorch With spotPython and Ray Tune on CIFAR10",
    "section": "14.10 Step 10: Results",
    "text": "14.10 Step 10: Results\nAfter the hyperparameter tuning run is finished, the progress of the hyperparameter tuning can be visualized. The following code generates the progress plot from ?fig-progress.\n\nspot_tuner.plot_progress(log_y=False, \n    filename=\"./figures/\" + experiment_name+\"_progress.png\")\n\n\n\n\nProgress plot. Black dots denote results from the initial design. Red dots illustrate the improvement found by the surrogate model based optimization.\n\n\n\n\n?fig-progress shows a typical behaviour that can be observed in many hyperparameter studies (Bartz et al. 2022): the largest improvement is obtained during the evaluation of the initial design. The surrogate model based optimization-optimization with the surrogate refines the results. ?fig-progress also illustrates one major difference between ray[tune] as used in PyTorch (2023a) and spotPython: the ray[tune] uses a random search and will generate results similar to the black dots, whereas spotPython uses a surrogate model based optimization and presents results represented by red dots in ?fig-progress. The surrogate model based optimization is considered to be more efficient than a random search, because the surrogate model guides the search towards promising regions in the hyperparameter space.\nIn addition to the improved (“optimized”) hyperparameter values, spotPython allows a statistical analysis, e.g., a sensitivity analysis, of the results. We can print the results of the hyperparameter tuning, see ?tbl-results. The table shows the hyperparameters, their types, default values, lower and upper bounds, and the transformation function. The column “tuned” shows the tuned values. The column “importance” shows the importance of the hyperparameters. The column “stars” shows the importance of the hyperparameters in stars. The importance is computed by the SPOT software.\n\nfrom spotPython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control=fun_control, spot=spot_tuner))\n\n| name         | type   | default   |   lower |   upper |   tuned | transform             |   importance | stars   |\n|--------------|--------|-----------|---------|---------|---------|-----------------------|--------------|---------|\n| l1           | int    | 5         |     2.0 |     9.0 |     7.0 | transform_power_2_int |        69.42 | **      |\n| l2           | int    | 5         |     2.0 |     9.0 |     6.0 | transform_power_2_int |         0.00 |         |\n| lr_mult      | float  | 1.0       |     1.0 |     1.0 |     1.0 | None                  |         0.00 |         |\n| batch_size   | int    | 4         |     1.0 |     5.0 |     5.0 | transform_power_2_int |       100.00 | ***     |\n| epochs       | int    | 3         |     3.0 |     4.0 |     4.0 | transform_power_2_int |         0.01 |         |\n| k_folds      | int    | 1         |     0.0 |     0.0 |     0.0 | None                  |         0.00 |         |\n| patience     | int    | 5         |     3.0 |     3.0 |     3.0 | None                  |         0.00 |         |\n| optimizer    | factor | SGD       |     0.0 |     9.0 |     3.0 | None                  |        37.53 | *       |\n| sgd_momentum | float  | 0.0       |     0.9 |     0.9 |     0.9 | None                  |         0.00 |         |\n\n\nTo visualize the most important hyperparameters, spotPython provides the function plot_importance. The following code generates the importance plot from ?fig-importance.\n\nspot_tuner.plot_importance(threshold=0.025,\n    filename=\"./figures/\" + experiment_name+\"_importance.png\")\n\n\n\n\nVariable importance plot, threshold 0.025.\n\n\n\n\n\n14.10.1 Get the Tuned Architecture (SPOT Results)\nThe architecture of the spotPython model can be obtained as follows. First, the numerical representation of the hyperparameters are obtained, i.e., the numpy array X is generated. This array is then used to generate the model model_spot by the function get_one_core_model_from_X. The model model_spot has the following architecture:\n\nfrom spotPython.hyperparameters.values import get_one_core_model_from_X\nX = spot_tuner.to_all_dim(spot_tuner.min_X.reshape(1,-1))\nmodel_spot = get_one_core_model_from_X(X, fun_control)\nmodel_spot\n\nNet_CIFAR10(\n  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))\n  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n  (fc1): Linear(in_features=400, out_features=128, bias=True)\n  (fc2): Linear(in_features=128, out_features=64, bias=True)\n  (fc3): Linear(in_features=64, out_features=10, bias=True)\n)\n\n\n\n\n14.10.2 Get Default Hyperparameters\nIn a similar manner as in Section 14.10.1, the default hyperparameters can be obtained.\n\n# fun_control was modified, we generate a new one with the original \n# default hyperparameters\nfrom spotPython.hyperparameters.values import get_one_core_model_from_X\nfc = fun_control\nfc.update({\"core_model_hyper_dict\":\n    hyper_dict[fun_control[\"core_model\"].__name__]})\nmodel_default = get_one_core_model_from_X(X_start, fun_control=fc)\nmodel_default\n\nNet_CIFAR10(\n  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))\n  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n  (fc1): Linear(in_features=400, out_features=32, bias=True)\n  (fc2): Linear(in_features=32, out_features=32, bias=True)\n  (fc3): Linear(in_features=32, out_features=10, bias=True)\n)\n\n\n\n\n14.10.3 Evaluation of the Default Architecture\nThe method train_tuned takes a model architecture without trained weights and trains this model with the train data. The train data is split into train and validation data. The validation data is used for early stopping. The trained model weights are saved as a dictionary.\nThis evaluation is similar to the final evaluation in PyTorch (2023a).\n\nfrom spotPython.torch.traintest import (\n    train_tuned,\n    test_tuned,\n    )\ntrain_tuned(net=model_default, train_dataset=train, shuffle=True,\n        loss_function=fun_control[\"loss_function\"],\n        metric=fun_control[\"metric_torch\"],\n        device = fun_control[\"device\"], show_batch_interval=1_000_000,\n        path=None,\n        task=fun_control[\"task\"],)\n\ntest_tuned(net=model_default, test_dataset=test, \n        loss_function=fun_control[\"loss_function\"],\n        metric=fun_control[\"metric_torch\"],\n        shuffle=False, \n        device = fun_control[\"device\"],\n        task=fun_control[\"task\"],)        \n\nEpoch: 1 | \n\n\nMulticlassAccuracy: 0.1009500026702881 | Loss: 2.3057962629318238 | Acc: 0.1009500000000000.\nEpoch: 2 | \n\n\nMulticlassAccuracy: 0.1108499988913536 | Loss: 2.3033584295272829 | Acc: 0.1108500000000000.\nEpoch: 3 | \n\n\nMulticlassAccuracy: 0.1353999972343445 | Loss: 2.3007775247573852 | Acc: 0.1354000000000000.\nEpoch: 4 | \n\n\nMulticlassAccuracy: 0.1523499935865402 | Loss: 2.2973377077102661 | Acc: 0.1523500000000000.\nEpoch: 5 | \n\n\nMulticlassAccuracy: 0.1611000001430511 | Loss: 2.2919936273574830 | Acc: 0.1611000000000000.\nEpoch: 6 | \n\n\nMulticlassAccuracy: 0.1942500025033951 | Loss: 2.2823992488861085 | Acc: 0.1942500000000000.\nEpoch: 7 | \n\n\nMulticlassAccuracy: 0.1798499971628189 | Loss: 2.2623666219711303 | Acc: 0.1798500000000000.\nEpoch: 8 | \n\n\nMulticlassAccuracy: 0.1803999990224838 | Loss: 2.2218215888977051 | Acc: 0.1804000000000000.\nReturned to Spot: Validation loss: 2.221821588897705\n\n\nMulticlassAccuracy: 0.1836999952793121 | Loss: 2.2199686935424805 | Acc: 0.1837000000000000.\nFinal evaluation: Validation loss: 2.2199686935424805\nFinal evaluation: Validation metric: 0.18369999527931213\n----------------------------------------------\n\n\n(2.2199686935424805, nan, tensor(0.1837))\n\n\n\n\n14.10.4 Evaluation of the Tuned Architecture\nThe following code trains the model model_spot.\nIf path is set to a filename, e.g., path = \"model_spot_trained.pt\", the weights of the trained model will be saved to this file.\nIf path is set to a filename, e.g., path = \"model_spot_trained.pt\", the weights of the trained model will be loaded from this file.\n\ntrain_tuned(net=model_spot, train_dataset=train,\n        loss_function=fun_control[\"loss_function\"],\n        metric=fun_control[\"metric_torch\"],\n        shuffle=True,\n        device = fun_control[\"device\"],\n        path=None,\n        task=fun_control[\"task\"],)\ntest_tuned(net=model_spot, test_dataset=test,\n            shuffle=False,\n            loss_function=fun_control[\"loss_function\"],\n            metric=fun_control[\"metric_torch\"],\n            device = fun_control[\"device\"],\n            task=fun_control[\"task\"],)\n\nEpoch: 1 | \n\n\nMulticlassAccuracy: 0.4460499882698059 | Loss: 1.5166250946044921 | Acc: 0.4460500000000000.\nEpoch: 2 | \n\n\nMulticlassAccuracy: 0.4973500072956085 | Loss: 1.3976579611778259 | Acc: 0.4973500000000000.\nEpoch: 3 | \n\n\nMulticlassAccuracy: 0.5412999987602234 | Loss: 1.2810937417030335 | Acc: 0.5413000000000000.\nEpoch: 4 | \n\n\nMulticlassAccuracy: 0.5569000244140625 | Loss: 1.2339107001304626 | Acc: 0.5569000000000000.\nEpoch: 5 | \n\n\nMulticlassAccuracy: 0.5667499899864197 | Loss: 1.2280268907546996 | Acc: 0.5667500000000000.\nEpoch: 6 | \n\n\nMulticlassAccuracy: 0.5781000256538391 | Loss: 1.1878850612640381 | Acc: 0.5780999999999999.\nEpoch: 7 | \n\n\nMulticlassAccuracy: 0.5874999761581421 | Loss: 1.1821841226577758 | Acc: 0.5875000000000000.\nEpoch: 8 | \n\n\nMulticlassAccuracy: 0.5930500030517578 | Loss: 1.1730224997520446 | Acc: 0.5930500000000000.\nEpoch: 9 | \n\n\nMulticlassAccuracy: 0.5921000242233276 | Loss: 1.1829405002593993 | Acc: 0.5921000000000000.\nEpoch: 10 | \n\n\nMulticlassAccuracy: 0.5839499831199646 | Loss: 1.2501484612464904 | Acc: 0.5839500000000000.\nEpoch: 11 | \n\n\nMulticlassAccuracy: 0.5913500189781189 | Loss: 1.2072612472534179 | Acc: 0.5913500000000000.\nEarly stopping at epoch 10\nReturned to Spot: Validation loss: 1.2072612472534179\n\n\nMulticlassAccuracy: 0.5849000215530396 | Loss: 1.2212051355038969 | Acc: 0.5849000000000000.\nFinal evaluation: Validation loss: 1.2212051355038969\nFinal evaluation: Validation metric: 0.5849000215530396\n----------------------------------------------\n\n\n(1.2212051355038969, nan, tensor(0.5849))\n\n\n\n\n14.10.5 Detailed Hyperparameter Plots\nThe contour plots in this section visualize the interactions of the three most important hyperparameters. Since some of these hyperparameters take fatorial or integer values, sometimes step-like fitness landcapes (or response surfaces) are generated. SPOT draws the interactions of the main hyperparameters by default. It is also possible to visualize all interactions.\n\nfilename = \"./figures/\" + experiment_name\nspot_tuner.plot_important_hyperparameter_contour(filename=filename)\n\nl1:  69.41527482095373\nbatch_size:  100.0\noptimizer:  37.528552455791356\n\n\n\n\n\nContour plots.\n\n\n\n\n\n\n\n\n\n\nThe figures (?fig-contour) show the contour plots of the loss as a function of the hyperparameters. These plots are very helpful for benchmark studies and for understanding neural networks. spotPython provides additional tools for a visual inspection of the results and give valuable insights into the hyperparameter tuning process. This is especially useful for model explainability, transparency, and trustworthiness. In addition to the contour plots, ?fig-parallel shows the parallel plot of the hyperparameters.\n\nspot_tuner.parallel_plot()\n\n\n                                                \nParallel coordinates plots"
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#sec-summary",
    "href": "14_spot_ray_hpt_torch_cifar10.html#sec-summary",
    "title": "14  HPT: PyTorch With spotPython and Ray Tune on CIFAR10",
    "section": "14.11 Summary and Outlook",
    "text": "14.11 Summary and Outlook\nThis tutorial presents the hyperparameter tuning open source software spotPython for PyTorch. To show its basic features, a comparison with the “official” PyTorch hyperparameter tuning tutorial (PyTorch 2023a) is presented. Some of the advantages of spotPython are:\n\nNumerical and categorical hyperparameters.\nPowerful surrogate models.\nFlexible approach and easy to use.\nSimple JSON files for the specification of the hyperparameters.\nExtension of default and user specified network classes.\nNoise handling techniques.\nInteraction with tensorboard.\n\nCurrently, only rudimentary parallel and distributed neural network training is possible, but these capabilities will be extended in the future. The next version of spotPython will also include a more detailed documentation and more examples.\n\n\n\n\n\n\nImportant\n\n\n\nImportant: This tutorial does not present a complete benchmarking study (Bartz-Beielstein et al. 2020). The results are only preliminary and highly dependent on the local configuration (hard- and software). Our goal is to provide a first impression of the performance of the hyperparameter tuning package spotPython. To demonstrate its capabilities, a quick comparison with ray[tune] was performed. ray[tune] was chosen, because it is presented as “an industry standard tool for distributed hyperparameter tuning.” The results should be interpreted with care."
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#sec-appendix",
    "href": "14_spot_ray_hpt_torch_cifar10.html#sec-appendix",
    "title": "14  HPT: PyTorch With spotPython and Ray Tune on CIFAR10",
    "section": "14.12 Appendix",
    "text": "14.12 Appendix\n\n14.12.1 Sample Output From Ray Tune’s Run\nThe output from ray[tune] could look like this (PyTorch 2023b):\nNumber of trials: 10 (10 TERMINATED)\n------+------+-------------+--------------+---------+------------+--------------------+\n|   l1 |   l2 |          lr |   batch_size |    loss |   accuracy | training_iteration |\n+------+------+-------------+--------------+---------+------------+--------------------|\n|   64 |    4 | 0.00011629  |            2 | 1.87273 |     0.244  |                  2 |\n|   32 |   64 | 0.000339763 |            8 | 1.23603 |     0.567  |                  8 |\n|    8 |   16 | 0.00276249  |           16 | 1.1815  |     0.5836 |                 10 |\n|    4 |   64 | 0.000648721 |            4 | 1.31131 |     0.5224 |                  8 |\n|   32 |   16 | 0.000340753 |            8 | 1.26454 |     0.5444 |                  8 |\n|    8 |    4 | 0.000699775 |            8 | 1.99594 |     0.1983 |                  2 |\n|  256 |    8 | 0.0839654   |           16 | 2.3119  |     0.0993 |                  1 |\n|   16 |  128 | 0.0758154   |           16 | 2.33575 |     0.1327 |                  1 |\n|   16 |    8 | 0.0763312   |           16 | 2.31129 |     0.1042 |                  4 |\n|  128 |   16 | 0.000124903 |            4 | 2.26917 |     0.1945 |                  1 |\n+-----+------+------+-------------+--------------+---------+------------+--------------------+\nBest trial config: {'l1': 8, 'l2': 16, 'lr': 0.00276249, 'batch_size': 16, 'data_dir': '...'}\nBest trial final validation loss: 1.181501\nBest trial final validation accuracy: 0.5836\nBest trial test set accuracy: 0.5806\n\n\n\n\nBartz, Eva, Thomas Bartz-Beielstein, Martin Zaefferer, and Olaf Mersmann, eds. 2022. Hyperparameter Tuning for Machine and Deep Learning with R - A Practical Guide. Springer.\n\n\nBartz-Beielstein, Thomas, Carola Doerr, Jakob Bossek, Sowmya Chandrasekaran, Tome Eftimov, Andreas Fischbach, Pascal Kerschke, et al. 2020. “Benchmarking in Optimization: Best Practice and Open Issues.” arXiv. https://arxiv.org/abs/2007.03488.\n\n\nMontiel, Jacob, Max Halford, Saulo Martiello Mastelini, Geoffrey Bolmier, Raphael Sourty, Robin Vaysse, Adil Zouitine, et al. 2021. “River: Machine Learning for Streaming Data in Python.”\n\n\nPyTorch. 2023a. “Hyperparameter Tuning with Ray Tune.” https://pytorch.org/tutorials/beginner/hyperparameter_tuning_tutorial.html.\n\n\n———. 2023b. “Training a Classifier.” https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html."
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#footnotes",
    "href": "14_spot_ray_hpt_torch_cifar10.html#footnotes",
    "title": "14  HPT: PyTorch With spotPython and Ray Tune on CIFAR10",
    "section": "",
    "text": "Alternatively, the source code can be downloaded from gitHub: https://github.com/sequential-parameter-optimization/spotPython.↩︎\nWe were not able to install Ray Tune on our system. Therefore, we used the results from the PyTorch tutorial.↩︎"
  },
  {
    "objectID": "16_spot_hpt_sklearn_multiclass_classification_randomforest.html#sec-setup-16",
    "href": "16_spot_hpt_sklearn_multiclass_classification_randomforest.html#sec-setup-16",
    "title": "15  HPT: sklearn RandomForestClassifier VBDP Data",
    "section": "15.1 Step 1: Setup",
    "text": "15.1 Step 1: Setup\nBefore we consider the detailed experimental setup, we select the parameters that affect run time and the initial design size.\n\nMAX_TIME = 1\nINIT_SIZE = 5\nORIGINAL = False\n\n\nimport os\nimport copy\nimport socket\nfrom datetime import datetime\nfrom dateutil.tz import tzlocal\nstart_time = datetime.now(tzlocal())\nHOSTNAME = socket.gethostname().split(\".\")[0]\nexperiment_name = '16-rf-sklearn' + \"_\" + HOSTNAME + \"_\" + str(MAX_TIME) + \"min_\" + str(INIT_SIZE) + \"init_\" + str(start_time).split(\".\", 1)[0].replace(' ', '_')\nexperiment_name = experiment_name.replace(':', '-')\nprint(experiment_name)\nif not os.path.exists('./figures'):\n    os.makedirs('./figures')\n\n16-rf-sklearn_maans03_1min_5init_2023-07-03_12-51-46\n\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")"
  },
  {
    "objectID": "16_spot_hpt_sklearn_multiclass_classification_randomforest.html#step-2-initialization-of-the-empty-fun_control-dictionary",
    "href": "16_spot_hpt_sklearn_multiclass_classification_randomforest.html#step-2-initialization-of-the-empty-fun_control-dictionary",
    "title": "15  HPT: sklearn RandomForestClassifier VBDP Data",
    "section": "15.2 Step 2: Initialization of the Empty fun_control Dictionary",
    "text": "15.2 Step 2: Initialization of the Empty fun_control Dictionary\n\n\n\n\n\n\nCaution: Tensorboard does not work under Windows\n\n\n\n\nSince tensorboard does not work under Windows, we recommend setting the parameter tensorboard_path to None if you are working under Windows.\n\n\n\n\nfrom spotPython.utils.init import fun_control_init\nfun_control = fun_control_init(task=\"classification\",\n    tensorboard_path=\"runs/16_spot_hpt_sklearn_classification\")"
  },
  {
    "objectID": "16_spot_hpt_sklearn_multiclass_classification_randomforest.html#step-3-pytorch-data-loading",
    "href": "16_spot_hpt_sklearn_multiclass_classification_randomforest.html#step-3-pytorch-data-loading",
    "title": "15  HPT: sklearn RandomForestClassifier VBDP Data",
    "section": "15.3 Step 3: PyTorch Data Loading",
    "text": "15.3 Step 3: PyTorch Data Loading\n\n15.3.1 Load Data: Classification VBDP\n\nimport pandas as pd\nif ORIGINAL == True:\n    train_df = pd.read_csv('./data/VBDP/trainn.csv')\n    test_df = pd.read_csv('./data/VBDP/testt.csv')\nelse:\n    train_df = pd.read_csv('./data/VBDP/train.csv')\n    # remove the id column\n    train_df = train_df.drop(columns=['id'])\n\n\nfrom sklearn.preprocessing import OrdinalEncoder\nn_samples = train_df.shape[0]\nn_features = train_df.shape[1] - 1\ntarget_column = \"prognosis\"\n# Encoder our prognosis labels as integers for easier decoding later\nenc = OrdinalEncoder()\ntrain_df[target_column] = enc.fit_transform(train_df[[target_column]])\ntrain_df.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\nprint(train_df.shape)\ntrain_df.head()\n\n(707, 65)\n\n\n\n\n\n\n\n\n\nx1\nx2\nx3\nx4\nx5\nx6\nx7\nx8\nx9\nx10\n...\nx56\nx57\nx58\nx59\nx60\nx61\nx62\nx63\nx64\nprognosis\n\n\n\n\n0\n1.0\n1.0\n0.0\n1.0\n1.0\n1.0\n1.0\n0.0\n1.0\n1.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n3.0\n\n\n1\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n0.0\n1.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n7.0\n\n\n2\n0.0\n1.0\n1.0\n1.0\n0.0\n1.0\n1.0\n1.0\n1.0\n1.0\n...\n1.0\n1.0\n1.0\n1.0\n1.0\n0.0\n1.0\n1.0\n1.0\n3.0\n\n\n3\n0.0\n0.0\n1.0\n1.0\n1.0\n1.0\n0.0\n1.0\n0.0\n1.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n10.0\n\n\n4\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n0.0\n...\n0.0\n1.0\n0.0\n0.0\n1.0\n1.0\n1.0\n0.0\n0.0\n6.0\n\n\n\n\n5 rows × 65 columns\n\n\n\nThe full data set train_df 64 features. The target column is labeled as prognosis.\n\n\n15.3.2 Holdout Train and Test Data\nWe split out a hold-out test set (25% of the data) so we can calculate an example MAP@K\n\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(train_df.drop(target_column, axis=1), train_df[target_column],\n                                                    random_state=42,\n                                                    test_size=0.25,\n                                                    stratify=train_df[target_column])\ntrain = pd.DataFrame(np.hstack((X_train, np.array(y_train).reshape(-1, 1))))\ntest = pd.DataFrame(np.hstack((X_test, np.array(y_test).reshape(-1, 1))))\ntrain.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\ntest.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\nprint(train.shape)\nprint(test.shape)\ntrain.head()\n\n(530, 65)\n(177, 65)\n\n\n\n\n\n\n\n\n\nx1\nx2\nx3\nx4\nx5\nx6\nx7\nx8\nx9\nx10\n...\nx56\nx57\nx58\nx59\nx60\nx61\nx62\nx63\nx64\nprognosis\n\n\n\n\n0\n1.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n2.0\n\n\n1\n0.0\n1.0\n1.0\n1.0\n1.0\n1.0\n1.0\n1.0\n1.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n4.0\n\n\n2\n0.0\n0.0\n0.0\n1.0\n1.0\n1.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n1.0\n1.0\n1.0\n0.0\n1.0\n1.0\n\n\n3\n1.0\n1.0\n0.0\n1.0\n1.0\n1.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n6.0\n\n\n4\n0.0\n0.0\n0.0\n1.0\n0.0\n0.0\n1.0\n1.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n5.0\n\n\n\n\n5 rows × 65 columns\n\n\n\n\n# add the dataset to the fun_control\nfun_control.update({\"data\": train_df, # full dataset,\n               \"train\": train,\n               \"test\": test,\n               \"n_samples\": n_samples,\n               \"target_column\": target_column})"
  },
  {
    "objectID": "16_spot_hpt_sklearn_multiclass_classification_randomforest.html#sec-specification-of-preprocessing-model-16",
    "href": "16_spot_hpt_sklearn_multiclass_classification_randomforest.html#sec-specification-of-preprocessing-model-16",
    "title": "15  HPT: sklearn RandomForestClassifier VBDP Data",
    "section": "15.4 Step 4: Specification of the Preprocessing Model",
    "text": "15.4 Step 4: Specification of the Preprocessing Model\nData preprocesssing can be very simple, e.g., you can ignore it. Then you would choose the prep_model “None”:\n\nprep_model = None\nfun_control.update({\"prep_model\": prep_model})\n\nA default approach for numerical data is the StandardScaler (mean 0, variance 1). This can be selected as follows:\n\n# prep_model = StandardScaler()\n# fun_control.update({\"prep_model\": prep_model})\n\nEven more complicated pre-processing steps are possible, e.g., the follwing pipeline:\n\n# categorical_columns = []\n# one_hot_encoder = OneHotEncoder(handle_unknown=\"ignore\", sparse_output=False)\n# prep_model = ColumnTransformer(\n#         transformers=[\n#             (\"categorical\", one_hot_encoder, categorical_columns),\n#         ],\n#         remainder=StandardScaler(),\n#     )"
  },
  {
    "objectID": "16_spot_hpt_sklearn_multiclass_classification_randomforest.html#step-5-select-model-algorithm-and-core_model_hyper_dict",
    "href": "16_spot_hpt_sklearn_multiclass_classification_randomforest.html#step-5-select-model-algorithm-and-core_model_hyper_dict",
    "title": "15  HPT: sklearn RandomForestClassifier VBDP Data",
    "section": "15.5 Step 5: Select Model (algorithm) and core_model_hyper_dict",
    "text": "15.5 Step 5: Select Model (algorithm) and core_model_hyper_dict\nThe selection of the algorithm (ML model) that should be tuned is done by specifying the its name from the sklearn implementation. For example, the SVC support vector machine classifier is selected as follows:\nfun_control = add_core_model_to_fun_control(SVC, fun_control, SklearnHyperDict)\nOther core_models are, e.g.,:\n\nRidgeCV\nGradientBoostingRegressor\nElasticNet\nRandomForestClassifier\nLogisticRegression\nKNeighborsClassifier\nRandomForestClassifier\nGradientBoostingClassifier\nHistGradientBoostingClassifier\n\nWe will use the RandomForestClassifier classifier in this example.\n\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.linear_model import ElasticNet\nfrom spotPython.hyperparameters.values import add_core_model_to_fun_control\nfrom spotPython.data.sklearn_hyper_dict import SklearnHyperDict\nfrom spotPython.fun.hypersklearn import HyperSklearn\n\n\n# core_model  = RidgeCV\n# core_model = GradientBoostingRegressor\n# core_model = ElasticNet\ncore_model = RandomForestClassifier\n# core_model = SVC\n# core_model = LogisticRegression\n# core_model = KNeighborsClassifier\n# core_model = GradientBoostingClassifier\nfun_control = add_core_model_to_fun_control(core_model=core_model,\n                              fun_control=fun_control,\n                              hyper_dict=SklearnHyperDict,\n                              filename=None)\n\nNow fun_control has the information from the JSON file. The available hyperparameters are:\n\nprint(*fun_control[\"core_model_hyper_dict\"].keys(), sep=\"\\n\")\n\nn_estimators\ncriterion\nmax_depth\nmin_samples_split\nmin_samples_leaf\nmin_weight_fraction_leaf\nmax_features\nmax_leaf_nodes\nmin_impurity_decrease\nbootstrap\noob_score"
  },
  {
    "objectID": "16_spot_hpt_sklearn_multiclass_classification_randomforest.html#step-6-modify-hyper_dict-hyperparameters-for-the-selected-algorithm-aka-core_model",
    "href": "16_spot_hpt_sklearn_multiclass_classification_randomforest.html#step-6-modify-hyper_dict-hyperparameters-for-the-selected-algorithm-aka-core_model",
    "title": "15  HPT: sklearn RandomForestClassifier VBDP Data",
    "section": "15.6 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model",
    "text": "15.6 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model\n\n15.6.1 Modify hyperparameter of type numeric and integer (boolean)\nNumeric and boolean values can be modified using the modify_hyper_parameter_bounds method. For example, to change the tol hyperparameter of the SVC model to the interval [1e-3, 1e-2], the following code can be used:\nfun_control = modify_hyper_parameter_bounds(fun_control, \"tol\", bounds=[1e-3, 1e-2])\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_bounds\n# fun_control = modify_hyper_parameter_bounds(fun_control, \"tol\", bounds=[1e-3, 1e-2])\n\n\n\n15.6.2 Modify hyperparameter of type factor\nspotPython provides functions for modifying the hyperparameters, their bounds and factors as well as for activating and de-activating hyperparameters without re-compilation of the Python source code. These functions were described in Section 14.6.\nFactors can be modified with the modify_hyper_parameter_levels function. For example, to exclude the sigmoid kernel from the tuning, the kernel hyperparameter of the SVC model can be modified as follows:\nfun_control = modify_hyper_parameter_levels(fun_control, \"kernel\", [\"linear\", \"rbf\"])\nThe new setting can be controlled via:\nfun_control[\"core_model_hyper_dict\"][\"kernel\"]\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_levels\n# XGBoost:\n# fun_control = modify_hyper_parameter_levels(fun_control, \"loss\", [\"log_loss\"])\n\n\n\n\n\n\n\nNote: RandomForestClassifier and Out-of-bag Estimation\n\n\n\nSince oob_score requires the bootstrap hyperparameter to True, we set the oob_score parameter to False. The oob_score is later discussed in Section 15.7.3.\n\n\n\nfun_control = modify_hyper_parameter_bounds(fun_control, \"bootstrap\", bounds=[0, 1])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"oob_score\", bounds=[0, 0])\n\n\n\n15.6.3 Optimizers\nOptimizers are described in Section 14.6.1.\n\n\n15.6.4 Selection of the Objective: Metric and Loss Functions\n\nMachine learning models are optimized with respect to a metric, for example, the accuracy function.\nDeep learning, e.g., neural networks are optimized with respect to a loss function, for example, the cross_entropy function and evaluated with respect to a metric, for example, the accuracy function."
  },
  {
    "objectID": "16_spot_hpt_sklearn_multiclass_classification_randomforest.html#step-7-selection-of-the-objective-loss-function",
    "href": "16_spot_hpt_sklearn_multiclass_classification_randomforest.html#step-7-selection-of-the-objective-loss-function",
    "title": "15  HPT: sklearn RandomForestClassifier VBDP Data",
    "section": "15.7 Step 7: Selection of the Objective (Loss) Function",
    "text": "15.7 Step 7: Selection of the Objective (Loss) Function\nThe loss function, that is usually used in deep learning for optimizing the weights of the net, is stored in the fun_control dictionary as \"loss_function\".\n\n15.7.1 Metric Function\nThere are two different types of metrics in spotPython:\n\n\"metric_river\" is used for the river based evaluation via eval_oml_iter_progressive.\n\"metric_sklearn\" is used for the sklearn based evaluation.\n\nWe will consider multi-class classification metrics, e.g., mapk_score and top_k_accuracy_score.\n\n\n\n\n\n\nPredict Probabilities\n\n\n\nIn this multi-class classification example the machine learning algorithm should return the probabilities of the specific classes (\"predict_proba\") instead of the predicted values.\n\n\nWe set \"predict_proba\" to True in the fun_control dictionary.\n\n15.7.1.1 The MAPK Metric\nTo select the MAPK metric, the following two entries can be added to the fun_control dictionary:\n\"metric_sklearn\": mapk_score\"\n\"metric_params\": {\"k\": 3}.\n\n\n15.7.1.2 Other Metrics\nAlternatively, other metrics for multi-class classification can be used, e.g.,: * top_k_accuracy_score or * roc_auc_score\nThe metric roc_auc_score requires the parameter \"multi_class\", e.g.,\n\"multi_class\": \"ovr\".\nThis is set in the fun_control dictionary.\n\n\n\n\n\n\nWeights\n\n\n\nspotPython performs a minimization, therefore, metrics that should be maximized have to be multiplied by -1. This is done by setting \"weights\" to -1.\n\n\n\nThe complete setup for the metric in our example is:\n\n\nfrom spotPython.utils.metrics import mapk_score\nfun_control.update({\n               \"weights\": -1,\n               \"metric_sklearn\": mapk_score,\n               \"predict_proba\": True,\n               \"metric_params\": {\"k\": 3},\n               })\n\n\n\n\n15.7.2 Evaluation on Hold-out Data\n\nThe default method for computing the performance is \"eval_holdout\".\nAlternatively, cross-validation can be used for every machine learning model.\nSpecifically for RandomForests, the OOB-score can be used.\n\n\nfun_control.update({\n    \"eval\": \"train_hold_out\",\n})\n\n\n\n15.7.3 OOB Score\nUsing the OOB-Score is a very efficient way to estimate the performance of a random forest classifier. The OOB-Score is calculated on the training data and does not require a hold-out test set. If the OOB-Score is used, the key “eval” in the fun_control dictionary should be set to \"oob_score\" as shown below.\n\n\n\n\n\n\nOOB-Score\n\n\n\nIn addition to setting the key \"eval\" in the fun_control dictionary to \"oob_score\", the keys \"oob_score\" and \"bootstrap\" have to be set to True, because the OOB-Score requires the bootstrap method.\n\n\n\nUncomment the following lines to use the OOB-Score:\n\n\nfun_control.update({\n    \"eval\": \"eval_oob_score\",\n})\nfun_control = modify_hyper_parameter_bounds(fun_control, \"bootstrap\", bounds=[1, 1])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"oob_score\", bounds=[1, 1])\n\n\n15.7.3.1 Cross Validation\nInstead of using the OOB-score, the classical cross validation can be used. The number of folds is set by the key \"k_folds\". For example, to use 5-fold cross validation, the key \"k_folds\" is set to 5. Uncomment the following line to use cross validation:\n\n# fun_control.update({\n#      \"eval\": \"train_cv\",\n#      \"k_folds\": 10,\n# })"
  },
  {
    "objectID": "16_spot_hpt_sklearn_multiclass_classification_randomforest.html#step-8-calling-the-spot-function",
    "href": "16_spot_hpt_sklearn_multiclass_classification_randomforest.html#step-8-calling-the-spot-function",
    "title": "15  HPT: sklearn RandomForestClassifier VBDP Data",
    "section": "15.8 Step 8: Calling the SPOT Function",
    "text": "15.8 Step 8: Calling the SPOT Function\n\n15.8.1 Preparing the SPOT Call\n\nGet types and variable names as well as lower and upper bounds for the hyperparameters.\n\n\n# extract the variable types, names, and bounds\nfrom spotPython.hyperparameters.values import (get_bound_values,\n    get_var_name,\n    get_var_type,)\nvar_type = get_var_type(fun_control)\nvar_name = get_var_name(fun_control)\nfun_control.update({\"var_type\": var_type,\n                    \"var_name\": var_name})\nlower = get_bound_values(fun_control, \"lower\")\nupper = get_bound_values(fun_control, \"upper\")\n\n\nfrom spotPython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control))\n\n| name                     | type   | default   |   lower |   upper | transform              |\n|--------------------------|--------|-----------|---------|---------|------------------------|\n| n_estimators             | int    | 7         |       5 |   10    | transform_power_2_int  |\n| criterion                | factor | gini      |       0 |    2    | None                   |\n| max_depth                | int    | 10        |       1 |   20    | transform_power_2_int  |\n| min_samples_split        | int    | 2         |       2 |  100    | None                   |\n| min_samples_leaf         | int    | 1         |       1 |   25    | None                   |\n| min_weight_fraction_leaf | float  | 0.0       |       0 |    0.01 | None                   |\n| max_features             | factor | sqrt      |       0 |    1    | transform_none_to_None |\n| max_leaf_nodes           | int    | 10        |       7 |   12    | transform_power_2_int  |\n| min_impurity_decrease    | float  | 0.0       |       0 |    0.01 | None                   |\n| bootstrap                | factor | 1         |       1 |    1    | None                   |\n| oob_score                | factor | 0         |       1 |    1    | None                   |\n\n\n\n\n15.8.2 The Objective Function\nThe objective function is selected next. It implements an interface from sklearn’s training, validation, and testing methods to spotPython.\n\nfrom spotPython.fun.hypersklearn import HyperSklearn\nfun = HyperSklearn().fun_sklearn\n\n\n\n15.8.3 Run the Spot Optimizer\n\nRun SPOT for approx. x mins (max_time).\nNote: the run takes longer, because the evaluation time of initial design (here: initi_size, 20 points) is not considered.\n\n\nfrom spotPython.hyperparameters.values import get_default_hyperparameters_as_array\nhyper_dict=SklearnHyperDict().load()\nX_start = get_default_hyperparameters_as_array(fun_control, hyper_dict)\nX_start\n\narray([[ 7.,  0., 10.,  2.,  1.,  0.,  0., 10.,  0.,  1.,  0.]])\n\n\n\nimport numpy as np\nfrom spotPython.spot import spot\nfrom math import inf\nspot_tuner = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = inf,\n                   fun_repeats = 1,\n                   max_time = MAX_TIME,\n                   noise = False,\n                   tolerance_x = np.sqrt(np.spacing(1)),\n                   var_type = var_type,\n                   var_name = var_name,\n                   infill_criterion = \"y\",\n                   n_points = 1,\n                   seed=123,\n                   log_level = 50,\n                   show_models= False,\n                   show_progress= True,\n                   fun_control = fun_control,\n                   design_control={\"init_size\": INIT_SIZE,\n                                   \"repeats\": 1},\n                   surrogate_control={\"noise\": True,\n                                      \"cod_type\": \"norm\",\n                                      \"min_theta\": -4,\n                                      \"max_theta\": 3,\n                                      \"n_theta\": len(var_name),\n                                      \"model_fun_evals\": 10_000,\n                                      \"log_level\": 50\n                                      })\nspot_tuner.run(X_start=X_start)\n\nspotPython tuning: -0.34276729559748426 [----------] 3.69% \n\n\nspotPython tuning: -0.34276729559748426 [----------] 4.94% \n\n\nspotPython tuning: -0.34276729559748426 [#---------] 6.19% \n\n\nspotPython tuning: -0.35660377358490564 [#---------] 7.56% \n\n\nspotPython tuning: -0.35660377358490564 [#---------] 9.10% \n\n\nspotPython tuning: -0.35660377358490564 [#---------] 10.29% \n\n\nspotPython tuning: -0.35660377358490564 [#---------] 12.79% \n\n\nspotPython tuning: -0.35660377358490564 [##--------] 15.24% \n\n\nspotPython tuning: -0.35660377358490564 [##--------] 19.46% \n\n\nspotPython tuning: -0.35660377358490564 [##--------] 22.69% \n\n\nspotPython tuning: -0.35660377358490564 [###-------] 25.70% \n\n\nspotPython tuning: -0.35660377358490564 [###-------] 29.14% \n\n\nspotPython tuning: -0.35660377358490564 [###-------] 33.75% \n\n\nspotPython tuning: -0.35660377358490564 [####------] 37.76% \n\n\nspotPython tuning: -0.35660377358490564 [####------] 42.45% \n\n\nspotPython tuning: -0.35660377358490564 [#####-----] 48.39% \n\n\nspotPython tuning: -0.35660377358490564 [#####-----] 54.18% \n\n\nspotPython tuning: -0.35660377358490564 [######----] 59.61% \n\n\nspotPython tuning: -0.35660377358490564 [######----] 64.85% \n\n\nspotPython tuning: -0.35880503144654086 [#######---] 70.15% \n\n\nspotPython tuning: -0.35880503144654086 [########--] 76.82% \n\n\nspotPython tuning: -0.35880503144654086 [########--] 81.74% \n\n\nspotPython tuning: -0.35880503144654086 [#########-] 86.61% \n\n\nspotPython tuning: -0.35880503144654086 [#########-] 91.14% \n\n\nspotPython tuning: -0.35880503144654086 [##########] 95.47% \n\n\nspotPython tuning: -0.35880503144654086 [##########] 99.74% \n\n\nspotPython tuning: -0.35880503144654086 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x18ca5b9d0&gt;"
  },
  {
    "objectID": "16_spot_hpt_sklearn_multiclass_classification_randomforest.html#sec-tensorboard-16",
    "href": "16_spot_hpt_sklearn_multiclass_classification_randomforest.html#sec-tensorboard-16",
    "title": "15  HPT: sklearn RandomForestClassifier VBDP Data",
    "section": "15.9 Step 9: Tensorboard",
    "text": "15.9 Step 9: Tensorboard\nThe textual output shown in the console (or code cell) can be visualized with Tensorboard as described in Section 14.9, see also the description in the documentation: Tensorboard."
  },
  {
    "objectID": "16_spot_hpt_sklearn_multiclass_classification_randomforest.html#sec-results-tuning-16",
    "href": "16_spot_hpt_sklearn_multiclass_classification_randomforest.html#sec-results-tuning-16",
    "title": "15  HPT: sklearn RandomForestClassifier VBDP Data",
    "section": "15.10 Step 10: Results",
    "text": "15.10 Step 10: Results\nAfter the hyperparameter tuning run is finished, the progress of the hyperparameter tuning can be visualized. The following code generates the progress plot from ?fig-progress.\n\nspot_tuner.plot_progress(log_y=False,\n    filename=\"./figures/\" + experiment_name+\"_progress.png\")\n\n\n\n\nProgress plot. Black dots denote results from the initial design. Red dots illustrate the improvement found by the surrogate model based optimization.\n\n\n\n\n\nPrint the results\n\n\nprint(gen_design_table(fun_control=fun_control,\n    spot=spot_tuner))\n\n| name                     | type   | default   |   lower |   upper |   tuned | transform              |   importance | stars   |\n|--------------------------|--------|-----------|---------|---------|---------|------------------------|--------------|---------|\n| n_estimators             | int    | 7         |     5.0 |    10.0 |     8.0 | transform_power_2_int  |        40.38 | *       |\n| criterion                | factor | gini      |     0.0 |     2.0 |     1.0 | None                   |         0.01 |         |\n| max_depth                | int    | 10        |     1.0 |    20.0 |    16.0 | transform_power_2_int  |         0.00 |         |\n| min_samples_split        | int    | 2         |     2.0 |   100.0 |     9.0 | None                   |        80.92 | **      |\n| min_samples_leaf         | int    | 1         |     1.0 |    25.0 |     6.0 | None                   |        30.31 | *       |\n| min_weight_fraction_leaf | float  | 0.0       |     0.0 |    0.01 |    0.01 | None                   |         0.00 |         |\n| max_features             | factor | sqrt      |     0.0 |     1.0 |     0.0 | transform_none_to_None |         0.06 |         |\n| max_leaf_nodes           | int    | 10        |     7.0 |    12.0 |    10.0 | transform_power_2_int  |       100.00 | ***     |\n| min_impurity_decrease    | float  | 0.0       |     0.0 |    0.01 |    0.01 | None                   |         0.00 |         |\n| bootstrap                | factor | 1         |     1.0 |     1.0 |     1.0 | None                   |         0.00 |         |\n| oob_score                | factor | 0         |     1.0 |     1.0 |     1.0 | None                   |         0.00 |         |\n\n\n\n15.10.1 Show variable importance\n\nspot_tuner.plot_importance(threshold=0.025, filename=\"./figures/\" + experiment_name+\"_importance.png\")\n\n\n\n\nVariable importance plot, threshold 0.025.\n\n\n\n\n\n\n15.10.2 Get Default Hyperparameters\n\nfrom spotPython.hyperparameters.values import get_default_values, transform_hyper_parameter_values\nvalues_default = get_default_values(fun_control)\nvalues_default = transform_hyper_parameter_values(fun_control=fun_control, hyper_parameter_values=values_default)\nvalues_default\n\n{'n_estimators': 128,\n 'criterion': 'gini',\n 'max_depth': 1024,\n 'min_samples_split': 2,\n 'min_samples_leaf': 1,\n 'min_weight_fraction_leaf': 0.0,\n 'max_features': 'sqrt',\n 'max_leaf_nodes': 1024,\n 'min_impurity_decrease': 0.0,\n 'bootstrap': 1,\n 'oob_score': 0}\n\n\n\nfrom sklearn.pipeline import make_pipeline\nmodel_default = make_pipeline(fun_control[\"prep_model\"], fun_control[\"core_model\"](**values_default))\nmodel_default\n\nPipeline(steps=[('nonetype', None),\n                ('randomforestclassifier',\n                 RandomForestClassifier(bootstrap=1, max_depth=1024,\n                                        max_leaf_nodes=1024, n_estimators=128,\n                                        oob_score=0))])In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.PipelinePipeline(steps=[('nonetype', None),\n                ('randomforestclassifier',\n                 RandomForestClassifier(bootstrap=1, max_depth=1024,\n                                        max_leaf_nodes=1024, n_estimators=128,\n                                        oob_score=0))])NoneNoneRandomForestClassifierRandomForestClassifier(bootstrap=1, max_depth=1024, max_leaf_nodes=1024,\n                       n_estimators=128, oob_score=0)\n\n\n\n\n15.10.3 Get SPOT Results\n\nX = spot_tuner.to_all_dim(spot_tuner.min_X.reshape(1,-1))\nprint(X)\n\n[[8.0e+00 1.0e+00 1.6e+01 9.0e+00 6.0e+00 1.0e-02 0.0e+00 1.0e+01 1.0e-02\n  1.0e+00 1.0e+00]]\n\n\n\nfrom spotPython.hyperparameters.values import assign_values, return_conf_list_from_var_dict\nv_dict = assign_values(X, fun_control[\"var_name\"])\nreturn_conf_list_from_var_dict(var_dict=v_dict, fun_control=fun_control)\n\n[{'n_estimators': 256,\n  'criterion': 'entropy',\n  'max_depth': 65536,\n  'min_samples_split': 9,\n  'min_samples_leaf': 6,\n  'min_weight_fraction_leaf': 0.01,\n  'max_features': 'sqrt',\n  'max_leaf_nodes': 1024,\n  'min_impurity_decrease': 0.01,\n  'bootstrap': 1,\n  'oob_score': 1}]\n\n\n\nfrom spotPython.hyperparameters.values import get_one_sklearn_model_from_X\nmodel_spot = get_one_sklearn_model_from_X(X, fun_control)\nmodel_spot\n\nRandomForestClassifier(bootstrap=1, criterion='entropy', max_depth=65536,\n                       max_leaf_nodes=1024, min_impurity_decrease=0.01,\n                       min_samples_leaf=6, min_samples_split=9,\n                       min_weight_fraction_leaf=0.01, n_estimators=256,\n                       oob_score=1)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestClassifierRandomForestClassifier(bootstrap=1, criterion='entropy', max_depth=65536,\n                       max_leaf_nodes=1024, min_impurity_decrease=0.01,\n                       min_samples_leaf=6, min_samples_split=9,\n                       min_weight_fraction_leaf=0.01, n_estimators=256,\n                       oob_score=1)\n\n\n\n\n15.10.4 Evaluate SPOT Results\n\nFetch the data.\n\n\nfrom spotPython.utils.convert import get_Xy_from_df\nX_train, y_train = get_Xy_from_df(fun_control[\"train\"], fun_control[\"target_column\"])\nX_test, y_test = get_Xy_from_df(fun_control[\"test\"], fun_control[\"target_column\"])\nX_test.shape, y_test.shape\n\n((177, 64), (177,))\n\n\n\nFit the model with the tuned hyperparameters. This gives one result:\n\n\nmodel_spot.fit(X_train, y_train)\ny_pred = model_spot.predict_proba(X_test)\nres = mapk_score(y_true=y_test, y_pred=y_pred, k=3)\nres\n\n0.3606403013182674\n\n\n\ndef repeated_eval(n, model):\n    res_values = []\n    for i in range(n):\n        model.fit(X_train, y_train)\n        y_pred = model.predict_proba(X_test)\n        res = mapk_score(y_true=y_test, y_pred=y_pred, k=3)\n        res_values.append(res)\n    mean_res = np.mean(res_values)\n    print(f\"mean_res: {mean_res}\")\n    std_res = np.std(res_values)\n    print(f\"std_res: {std_res}\")\n    min_res = np.min(res_values)\n    print(f\"min_res: {min_res}\")\n    max_res = np.max(res_values)\n    print(f\"max_res: {max_res}\")\n    median_res = np.median(res_values)\n    print(f\"median_res: {median_res}\")\n    return mean_res, std_res, min_res, max_res, median_res\n\n\n\n15.10.5 Handling Non-deterministic Results\n\nBecause the model is non-determinstic, we perform \\(n=30\\) runs and calculate the mean and standard deviation of the performance metric.\n\n\n_ = repeated_eval(30, model_spot)\n\nmean_res: 0.36198995605775264\nstd_res: 0.008560226083678893\nmin_res: 0.3474576271186441\nmax_res: 0.37476459510357824\nmedian_res: 0.36252354048964214\n\n\n\n\n15.10.6 Evalution of the Default Hyperparameters\n\nmodel_default.fit(X_train, y_train)[\"randomforestclassifier\"]\n\nRandomForestClassifier(bootstrap=1, max_depth=1024, max_leaf_nodes=1024,\n                       n_estimators=128, oob_score=0)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestClassifierRandomForestClassifier(bootstrap=1, max_depth=1024, max_leaf_nodes=1024,\n                       n_estimators=128, oob_score=0)\n\n\n\nOne evaluation of the default hyperparameters is performed on the hold-out test set.\n\n\ny_pred = model_default.predict_proba(X_test)\nmapk_score(y_true=y_test, y_pred=y_pred, k=3)\n\n0.3389830508474576\n\n\nSince one single evaluation is not meaningful, we perform, similar to the evaluation of the SPOT results, \\(n=30\\) runs of the default setting and and calculate the mean and standard deviation of the performance metric.\n\n_ = repeated_eval(30, model_default)\n\nmean_res: 0.3406779661016949\nstd_res: 0.015381195728261344\nmin_res: 0.3069679849340866\nmax_res: 0.384180790960452\nmedian_res: 0.3394538606403013\n\n\n\n\n15.10.7 Plot: Compare Predictions\n\nfrom spotPython.plot.validation import plot_confusion_matrix\nplot_confusion_matrix(model_default, fun_control, title = \"Default\")\n\n\n\n\n\nplot_confusion_matrix(model_spot, fun_control, title=\"SPOT\")\n\n\n\n\n\nmin(spot_tuner.y), max(spot_tuner.y)\n\n(-0.35880503144654086, -0.27861635220125786)\n\n\n\n\n15.10.8 Cross-validated Evaluations\n\nfrom spotPython.sklearn.traintest import evaluate_cv\nfun_control.update({\n     \"eval\": \"train_cv\",\n     \"k_folds\": 10,\n})\nevaluate_cv(model=model_spot, fun_control=fun_control, verbose=0)\n\n(0.35943396226415086, None)\n\n\n\nfun_control.update({\n     \"eval\": \"test_cv\",\n     \"k_folds\": 10,\n})\nevaluate_cv(model=model_spot, fun_control=fun_control, verbose=0)\n\n(0.32412854030501087, None)\n\n\n\nThis is the evaluation that will be used in the comparison:\n\n\nfun_control.update({\n     \"eval\": \"data_cv\",\n     \"k_folds\": 10,\n})\nevaluate_cv(model=model_spot, fun_control=fun_control, verbose=0)\n\n(0.3504795439302481, None)\n\n\n\n\n15.10.9 Detailed Hyperparameter Plots\n\nfilename = \"./figures/\" + experiment_name\nspot_tuner.plot_important_hyperparameter_contour(filename=filename)\n\nn_estimators:  40.37721802153124\nmin_samples_split:  80.92071639271273\nmin_samples_leaf:  30.309266746567783\nmax_features:  0.05823815631496568\nmax_leaf_nodes:  100.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n15.10.10 Parallel Coordinates Plot\n\nspot_tuner.parallel_plot()\n\n\n                                                \n\n\n\n\n15.10.11 Plot all Combinations of Hyperparameters\n\nWarning: this may take a while.\n\n\nPLOT_ALL = False\nif PLOT_ALL:\n    n = spot_tuner.k\n    for i in range(n-1):\n        for j in range(i+1, n):\n            spot_tuner.plot_contour(i=i, j=j, min_z=min_z, max_z = max_z)"
  },
  {
    "objectID": "17_spot_hpt_sklearn_multiclass_classification_xgb.html#sec-setup-17",
    "href": "17_spot_hpt_sklearn_multiclass_classification_xgb.html#sec-setup-17",
    "title": "16  HPT: sklearn XGB Classifier VBDP Data",
    "section": "16.1 Step 1: Setup",
    "text": "16.1 Step 1: Setup\nBefore we consider the detailed experimental setup, we select the parameters that affect run time and the initial design size.\n\nMAX_TIME = 1\nINIT_SIZE = 5\nORIGINAL = False\n\n\nimport os\nimport copy\nimport socket\nfrom datetime import datetime\nfrom dateutil.tz import tzlocal\nstart_time = datetime.now(tzlocal())\nHOSTNAME = socket.gethostname().split(\".\")[0]\nexperiment_name = '17-xgb-sklearn' + \"_\" + HOSTNAME + \"_\" + str(MAX_TIME) + \"min_\" + str(INIT_SIZE) + \"init_\" + str(start_time).split(\".\", 1)[0].replace(' ', '_')\nexperiment_name = experiment_name.replace(':', '-')\nprint(experiment_name)\nif not os.path.exists('./figures'):\n    os.makedirs('./figures')\n\n17-xgb-sklearn_maans03_1min_5init_2023-07-03_12-55-49\n\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")"
  },
  {
    "objectID": "17_spot_hpt_sklearn_multiclass_classification_xgb.html#step-2-initialization-of-the-empty-fun_control-dictionary",
    "href": "17_spot_hpt_sklearn_multiclass_classification_xgb.html#step-2-initialization-of-the-empty-fun_control-dictionary",
    "title": "16  HPT: sklearn XGB Classifier VBDP Data",
    "section": "16.2 Step 2: Initialization of the Empty fun_control Dictionary",
    "text": "16.2 Step 2: Initialization of the Empty fun_control Dictionary\n\n\n\n\n\n\nCaution: Tensorboard does not work under Windows\n\n\n\n\nSince tensorboard does not work under Windows, we recommend setting the parameter tensorboard_path to None if you are working under Windows.\n\n\n\n\nfrom spotPython.utils.init import fun_control_init\nfun_control = fun_control_init(task=\"classification\",\n    tensorboard_path=\"runs/16_spot_hpt_sklearn_classification\")"
  },
  {
    "objectID": "17_spot_hpt_sklearn_multiclass_classification_xgb.html#sec-data-loading-17",
    "href": "17_spot_hpt_sklearn_multiclass_classification_xgb.html#sec-data-loading-17",
    "title": "16  HPT: sklearn XGB Classifier VBDP Data",
    "section": "16.3 Step 3: PyTorch Data Loading",
    "text": "16.3 Step 3: PyTorch Data Loading\n\n16.3.1 1. Load Data: Classification VBDP\n\nimport pandas as pd\nif ORIGINAL == True:\n    train_df = pd.read_csv('./data/VBDP/trainn.csv')\n    test_df = pd.read_csv('./data/VBDP/testt.csv')\nelse:\n    train_df = pd.read_csv('./data/VBDP/train.csv')\n    # remove the id column\n    train_df = train_df.drop(columns=['id'])\n\n\nfrom sklearn.preprocessing import OrdinalEncoder\nn_samples = train_df.shape[0]\nn_features = train_df.shape[1] - 1\ntarget_column = \"prognosis\"\n# Encoder our prognosis labels as integers for easier decoding later\nenc = OrdinalEncoder()\ntrain_df[target_column] = enc.fit_transform(train_df[[target_column]])\ntrain_df.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\nprint(train_df.shape)\ntrain_df.head()\n\n(707, 65)\n\n\n\n\n\n\n\n\n\nx1\nx2\nx3\nx4\nx5\nx6\nx7\nx8\nx9\nx10\n...\nx56\nx57\nx58\nx59\nx60\nx61\nx62\nx63\nx64\nprognosis\n\n\n\n\n0\n1.0\n1.0\n0.0\n1.0\n1.0\n1.0\n1.0\n0.0\n1.0\n1.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n3.0\n\n\n1\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n0.0\n1.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n7.0\n\n\n2\n0.0\n1.0\n1.0\n1.0\n0.0\n1.0\n1.0\n1.0\n1.0\n1.0\n...\n1.0\n1.0\n1.0\n1.0\n1.0\n0.0\n1.0\n1.0\n1.0\n3.0\n\n\n3\n0.0\n0.0\n1.0\n1.0\n1.0\n1.0\n0.0\n1.0\n0.0\n1.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n10.0\n\n\n4\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n0.0\n...\n0.0\n1.0\n0.0\n0.0\n1.0\n1.0\n1.0\n0.0\n0.0\n6.0\n\n\n\n\n5 rows × 65 columns\n\n\n\nThe full data set train_df 64 features. The target column is labeled as prognosis.\n\n\n16.3.2 Holdout Train and Test Data\nWe split out a hold-out test set (25% of the data) so we can calculate an example MAP@K\n\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(train_df.drop(target_column, axis=1), train_df[target_column],\n                                                    random_state=42,\n                                                    test_size=0.25,\n                                                    stratify=train_df[target_column])\ntrain = pd.DataFrame(np.hstack((X_train, np.array(y_train).reshape(-1, 1))))\ntest = pd.DataFrame(np.hstack((X_test, np.array(y_test).reshape(-1, 1))))\ntrain.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\ntest.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\nprint(train.shape)\nprint(test.shape)\ntrain.head()\n\n(530, 65)\n(177, 65)\n\n\n\n\n\n\n\n\n\nx1\nx2\nx3\nx4\nx5\nx6\nx7\nx8\nx9\nx10\n...\nx56\nx57\nx58\nx59\nx60\nx61\nx62\nx63\nx64\nprognosis\n\n\n\n\n0\n1.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n2.0\n\n\n1\n0.0\n1.0\n1.0\n1.0\n1.0\n1.0\n1.0\n1.0\n1.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n4.0\n\n\n2\n0.0\n0.0\n0.0\n1.0\n1.0\n1.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n1.0\n1.0\n1.0\n0.0\n1.0\n1.0\n\n\n3\n1.0\n1.0\n0.0\n1.0\n1.0\n1.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n6.0\n\n\n4\n0.0\n0.0\n0.0\n1.0\n0.0\n0.0\n1.0\n1.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n5.0\n\n\n\n\n5 rows × 65 columns\n\n\n\n\n# add the dataset to the fun_control\nfun_control.update({\"data\": train_df, # full dataset,\n               \"train\": train,\n               \"test\": test,\n               \"n_samples\": n_samples,\n               \"target_column\": target_column})"
  },
  {
    "objectID": "17_spot_hpt_sklearn_multiclass_classification_xgb.html#sec-specification-of-preprocessing-model-17",
    "href": "17_spot_hpt_sklearn_multiclass_classification_xgb.html#sec-specification-of-preprocessing-model-17",
    "title": "16  HPT: sklearn XGB Classifier VBDP Data",
    "section": "16.4 Step 4: Specification of the Preprocessing Model",
    "text": "16.4 Step 4: Specification of the Preprocessing Model\nData preprocesssing can be very simple, e.g., you can ignore it. Then you would choose the prep_model “None”:\n\nprep_model = None\nfun_control.update({\"prep_model\": prep_model})\n\nA default approach for numerical data is the StandardScaler (mean 0, variance 1). This can be selected as follows:\n\n# prep_model = StandardScaler()\n# fun_control.update({\"prep_model\": prep_model})\n\nEven more complicated pre-processing steps are possible, e.g., the follwing pipeline:\n\n# categorical_columns = []\n# one_hot_encoder = OneHotEncoder(handle_unknown=\"ignore\", sparse_output=False)\n# prep_model = ColumnTransformer(\n#         transformers=[\n#             (\"categorical\", one_hot_encoder, categorical_columns),\n#         ],\n#         remainder=StandardScaler(),\n#     )"
  },
  {
    "objectID": "17_spot_hpt_sklearn_multiclass_classification_xgb.html#step-5-select-model-algorithm-and-core_model_hyper_dict",
    "href": "17_spot_hpt_sklearn_multiclass_classification_xgb.html#step-5-select-model-algorithm-and-core_model_hyper_dict",
    "title": "16  HPT: sklearn XGB Classifier VBDP Data",
    "section": "16.5 Step 5: Select Model (algorithm) and core_model_hyper_dict",
    "text": "16.5 Step 5: Select Model (algorithm) and core_model_hyper_dict\nThe selection of the algorithm (ML model) that should be tuned is done by specifying the its name from the sklearn implementation. For example, the SVC support vector machine classifier is selected as follows:\nfun_control = add_core_model_to_fun_control(SVC, fun_control, SklearnHyperDict)\nOther core_models are, e.g.,:\n\nRidgeCV\nGradientBoostingRegressor\nElasticNet\nRandomForestClassifier\nLogisticRegression\nKNeighborsClassifier\nRandomForestClassifier\nGradientBoostingClassifier\nHistGradientBoostingClassifier\n\nWe will use the RandomForestClassifier classifier in this example.\n\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import HistGradientBoostingClassifier\nfrom sklearn.linear_model import ElasticNet\nfrom spotPython.hyperparameters.values import add_core_model_to_fun_control\nfrom spotPython.data.sklearn_hyper_dict import SklearnHyperDict\nfrom spotPython.fun.hypersklearn import HyperSklearn\n\n\n# core_model  = RidgeCV\n# core_model = GradientBoostingRegressor\n# core_model = ElasticNet\ncore_model = RandomForestClassifier\n# core_model = SVC\n# core_model = LogisticRegression\n# core_model = KNeighborsClassifier\n# core_model = GradientBoostingClassifier\ncore_model = HistGradientBoostingClassifier\nfun_control = add_core_model_to_fun_control(core_model=core_model,\n                              fun_control=fun_control,\n                              hyper_dict=SklearnHyperDict,\n                              filename=None)\n\nNow fun_control has the information from the JSON file. The available hyperparameters are:\n\nprint(*fun_control[\"core_model_hyper_dict\"].keys(), sep=\"\\n\")\n\nloss\nlearning_rate\nmax_iter\nmax_leaf_nodes\nmax_depth\nmin_samples_leaf\nl2_regularization\nmax_bins\nearly_stopping\nn_iter_no_change\ntol"
  },
  {
    "objectID": "17_spot_hpt_sklearn_multiclass_classification_xgb.html#step-6-modify-hyper_dict-hyperparameters-for-the-selected-algorithm-aka-core_model",
    "href": "17_spot_hpt_sklearn_multiclass_classification_xgb.html#step-6-modify-hyper_dict-hyperparameters-for-the-selected-algorithm-aka-core_model",
    "title": "16  HPT: sklearn XGB Classifier VBDP Data",
    "section": "16.6 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model",
    "text": "16.6 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model\n\n16.6.1 Modify hyperparameter of type numeric and integer (boolean)\nNumeric and boolean values can be modified using the modify_hyper_parameter_bounds method. For example, to change the tol hyperparameter of the SVC model to the interval [1e-3, 1e-2], the following code can be used:\nfun_control = modify_hyper_parameter_bounds(fun_control, \"tol\", bounds=[1e-3, 1e-2])\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_bounds\n# fun_control = modify_hyper_parameter_bounds(fun_control, \"tol\", bounds=[1e-3, 1e-2])\n# fun_control = modify_hyper_parameter_bounds(fun_control, \"min_samples_split\", bounds=[3, 20])\n# fun_control = modify_hyper_parameter_bounds(fun_control, \"dual\", bounds=[0, 0])\n# fun_control = modify_hyper_parameter_bounds(fun_control, \"probability\", bounds=[1, 1])\n# fun_control[\"core_model_hyper_dict\"][\"tol\"]\n# fun_control = modify_hyper_parameter_bounds(fun_control, \"min_samples_leaf\", bounds=[1, 25])\n# fun_control = modify_hyper_parameter_bounds(fun_control, \"n_estimators\", bounds=[5, 10])\n\n\n\n16.6.2 Modify hyperparameter of type factor\nspotPython provides functions for modifying the hyperparameters, their bounds and factors as well as for activating and de-activating hyperparameters without re-compilation of the Python source code. These functions were described in Section 14.6.\nFactors can be modified with the modify_hyper_parameter_levels function. For example, to exclude the sigmoid kernel from the tuning, the kernel hyperparameter of the SVC model can be modified as follows:\nfun_control = modify_hyper_parameter_levels(fun_control, \"kernel\", [\"linear\", \"rbf\"])\nThe new setting can be controlled via:\nfun_control[\"core_model_hyper_dict\"][\"kernel\"]\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_levels\n# XGBoost:\nfun_control = modify_hyper_parameter_levels(fun_control, \"loss\", [\"log_loss\"])\n\n\n\n16.6.3 Optimizers\nOptimizers are described in Section 14.6.1."
  },
  {
    "objectID": "17_spot_hpt_sklearn_multiclass_classification_xgb.html#step-7-selection-of-the-objective-loss-function",
    "href": "17_spot_hpt_sklearn_multiclass_classification_xgb.html#step-7-selection-of-the-objective-loss-function",
    "title": "16  HPT: sklearn XGB Classifier VBDP Data",
    "section": "16.7 Step 7: Selection of the Objective (Loss) Function",
    "text": "16.7 Step 7: Selection of the Objective (Loss) Function\n\n16.7.1 Evaluation\nThe evaluation procedure requires the specification of two elements:\n\nthe way how the data is split into a train and a test set and\nthe loss function (and a metric).\n\n\n\n16.7.2 Selection of the Objective: Metric and Loss Functions\n\nMachine learning models are optimized with respect to a metric, for example, the accuracy function.\nDeep learning, e.g., neural networks are optimized with respect to a loss function, for example, the cross_entropy function and evaluated with respect to a metric, for example, the accuracy function.\n\n\n\n16.7.3 Loss Function\nThe loss function, that is usually used in deep learning for optimizing the weights of the net, is stored in the fun_control dictionary as \"loss_function\".\n\n\n16.7.4 Metric Function\nThere are two different types of metrics in spotPython:\n\n\"metric_river\" is used for the river based evaluation via eval_oml_iter_progressive.\n\"metric_sklearn\" is used for the sklearn based evaluation.\n\nWe will consider multi-class classification metrics, e.g., mapk_score and top_k_accuracy_score.\n\n\n\n\n\n\nPredict Probabilities\n\n\n\nIn this multi-class classification example the machine learning algorithm should return the probabilities of the specific classes (\"predict_proba\") instead of the predicted values.\n\n\nWe set \"predict_proba\" to True in the fun_control dictionary.\n\n16.7.4.1 The MAPK Metric\nTo select the MAPK metric, the following two entries can be added to the fun_control dictionary:\n\"metric_sklearn\": mapk_score\"\n\"metric_params\": {\"k\": 3}.\n\n\n16.7.4.2 Other Metrics\nAlternatively, other metrics for multi-class classification can be used, e.g.,: * top_k_accuracy_score or * roc_auc_score\nThe metric roc_auc_score requires the parameter \"multi_class\", e.g.,\n\"multi_class\": \"ovr\".\nThis is set in the fun_control dictionary.\n\n\n\n\n\n\nWeights\n\n\n\nspotPython performs a minimization, therefore, metrics that should be maximized have to be multiplied by -1. This is done by setting \"weights\" to -1.\n\n\n\nThe complete setup for the metric in our example is:\n\n\nfrom spotPython.utils.metrics import mapk_score\nfun_control.update({\n               \"weights\": -1,\n               \"metric_sklearn\": mapk_score,\n               \"predict_proba\": True,\n               \"metric_params\": {\"k\": 3},\n               })\n\n\n\n\n16.7.5 Evaluation on Hold-out Data\n\nThe default method for computing the performance is \"eval_holdout\".\nAlternatively, cross-validation can be used for every machine learning model.\nSpecifically for RandomForests, the OOB-score can be used.\n\n\nfun_control.update({\n    \"eval\": \"train_hold_out\",\n})\n\n\n16.7.5.1 Cross Validation\nInstead of using the OOB-score, the classical cross validation can be used. The number of folds is set by the key \"k_folds\". For example, to use 5-fold cross validation, the key \"k_folds\" is set to 5. Uncomment the following line to use cross validation:\n\n# fun_control.update({\n#      \"eval\": \"train_cv\",\n#      \"k_folds\": 10,\n# })"
  },
  {
    "objectID": "17_spot_hpt_sklearn_multiclass_classification_xgb.html#step-8-calling-the-spot-function",
    "href": "17_spot_hpt_sklearn_multiclass_classification_xgb.html#step-8-calling-the-spot-function",
    "title": "16  HPT: sklearn XGB Classifier VBDP Data",
    "section": "16.8 Step 8: Calling the SPOT Function",
    "text": "16.8 Step 8: Calling the SPOT Function\n\n16.8.1 Preparing the SPOT Call\n\nGet types and variable names as well as lower and upper bounds for the hyperparameters.\n\n\n# extract the variable types, names, and bounds\nfrom spotPython.hyperparameters.values import (get_bound_values,\n    get_var_name,\n    get_var_type,)\nvar_type = get_var_type(fun_control)\nvar_name = get_var_name(fun_control)\nfun_control.update({\"var_type\": var_type,\n                    \"var_name\": var_name})\nlower = get_bound_values(fun_control, \"lower\")\nupper = get_bound_values(fun_control, \"upper\")\n\n\nfrom spotPython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control))\n\n| name              | type   | default   |   lower |   upper | transform             |\n|-------------------|--------|-----------|---------|---------|-----------------------|\n| loss              | factor | log_loss  |   0     |   0     | None                  |\n| learning_rate     | float  | -1.0      |  -5     |   0     | transform_power_10    |\n| max_iter          | int    | 7         |   3     |  10     | transform_power_2_int |\n| max_leaf_nodes    | int    | 5         |   1     |  12     | transform_power_2_int |\n| max_depth         | int    | 2         |   1     |  20     | transform_power_2_int |\n| min_samples_leaf  | int    | 4         |   2     |  10     | transform_power_2_int |\n| l2_regularization | float  | 0.0       |   0     |  10     | None                  |\n| max_bins          | int    | 255       | 127     | 255     | None                  |\n| early_stopping    | factor | 1         |   0     |   1     | None                  |\n| n_iter_no_change  | int    | 10        |   5     |  20     | None                  |\n| tol               | float  | 0.0001    |   1e-05 |   0.001 | None                  |\n\n\n\n\n16.8.2 The Objective Function\nThe objective function is selected next. It implements an interface from sklearn’s training, validation, and testing methods to spotPython.\n\nfrom spotPython.fun.hypersklearn import HyperSklearn\nfun = HyperSklearn().fun_sklearn\n\n\n\n16.8.3 Run the Spot Optimizer\n\nRun SPOT for approx. x mins (max_time).\nNote: the run takes longer, because the evaluation time of initial design (here: initi_size, 20 points) is not considered.\n\n\nfrom spotPython.hyperparameters.values import get_default_hyperparameters_as_array\nhyper_dict=SklearnHyperDict().load()\nX_start = get_default_hyperparameters_as_array(fun_control, hyper_dict)\nX_start\n\narray([[ 0.00e+00, -1.00e+00,  7.00e+00,  5.00e+00,  2.00e+00,  4.00e+00,\n         0.00e+00,  2.55e+02,  1.00e+00,  1.00e+01,  1.00e-04]])\n\n\n\nimport numpy as np\nfrom spotPython.spot import spot\nfrom math import inf\nspot_tuner = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = inf,\n                   fun_repeats = 1,\n                   max_time = MAX_TIME,\n                   noise = False,\n                   tolerance_x = np.sqrt(np.spacing(1)),\n                   var_type = var_type,\n                   var_name = var_name,\n                   infill_criterion = \"y\",\n                   n_points = 1,\n                   seed=123,\n                   log_level = 50,\n                   show_models= False,\n                   show_progress= True,\n                   fun_control = fun_control,\n                   design_control={\"init_size\": INIT_SIZE,\n                                   \"repeats\": 1},\n                   surrogate_control={\"noise\": True,\n                                      \"cod_type\": \"norm\",\n                                      \"min_theta\": -4,\n                                      \"max_theta\": 3,\n                                      \"n_theta\": len(var_name),\n                                      \"model_fun_evals\": 10_000,\n                                      \"log_level\": 50\n                                      })\nspot_tuner.run(X_start=X_start)\n\nspotPython tuning: -0.38847117794486213 [----------] 3.81% \n\n\nspotPython tuning: -0.38847117794486213 [#---------] 6.62% \n\n\nspotPython tuning: -0.38847117794486213 [#---------] 9.70% \n\n\nspotPython tuning: -0.38847117794486213 [#---------] 14.45% \n\n\nspotPython tuning: -0.38847117794486213 [##--------] 24.54% \n\n\nspotPython tuning: -0.38847117794486213 [###-------] 27.42% \n\n\nspotPython tuning: -0.38847117794486213 [###-------] 29.80% \n\n\nspotPython tuning: -0.38847117794486213 [###-------] 32.69% \n\n\nspotPython tuning: -0.38847117794486213 [####------] 35.04% \n\n\nspotPython tuning: -0.38847117794486213 [####------] 38.38% \n\n\nspotPython tuning: -0.38847117794486213 [####------] 42.58% \n\n\nspotPython tuning: -0.38847117794486213 [#####-----] 46.46% \n\n\nspotPython tuning: -0.38847117794486213 [#####-----] 51.38% \n\n\nspotPython tuning: -0.38847117794486213 [######----] 58.07% \n\n\nspotPython tuning: -0.38847117794486213 [#######---] 72.85% \n\n\nspotPython tuning: -0.38847117794486213 [#########-] 88.03% \n\n\nspotPython tuning: -0.38847117794486213 [##########] 99.91% \n\n\nspotPython tuning: -0.38847117794486213 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x18457bf10&gt;"
  },
  {
    "objectID": "17_spot_hpt_sklearn_multiclass_classification_xgb.html#sec-tensorboard-17",
    "href": "17_spot_hpt_sklearn_multiclass_classification_xgb.html#sec-tensorboard-17",
    "title": "16  HPT: sklearn XGB Classifier VBDP Data",
    "section": "16.9 Step 9: Tensorboard",
    "text": "16.9 Step 9: Tensorboard\nThe textual output shown in the console (or code cell) can be visualized with Tensorboard as described in Section 14.9, see also the description in the documentation: Tensorboard."
  },
  {
    "objectID": "17_spot_hpt_sklearn_multiclass_classification_xgb.html#sec-results-tuning-17",
    "href": "17_spot_hpt_sklearn_multiclass_classification_xgb.html#sec-results-tuning-17",
    "title": "16  HPT: sklearn XGB Classifier VBDP Data",
    "section": "16.10 Step 10: Results",
    "text": "16.10 Step 10: Results\nAfter the hyperparameter tuning run is finished, the progress of the hyperparameter tuning can be visualized. The following code generates the progress plot from ?fig-progress.\n\nspot_tuner.plot_progress(log_y=False,\n    filename=\"./figures/\" + experiment_name+\"_progress.png\")\n\n\n\n\nProgress plot. Black dots denote results from the initial design. Red dots illustrate the improvement found by the surrogate model based optimization.\n\n\n\n\n\nPrint the results\n\n\nprint(gen_design_table(fun_control=fun_control,\n    spot=spot_tuner))\n\n| name              | type   | default   |   lower |   upper |                 tuned | transform             |   importance | stars   |\n|-------------------|--------|-----------|---------|---------|-----------------------|-----------------------|--------------|---------|\n| loss              | factor | log_loss  |     0.0 |     0.0 |                   0.0 | None                  |         0.00 |         |\n| learning_rate     | float  | -1.0      |    -5.0 |     0.0 |   -0.9302847174013998 | transform_power_10    |         0.87 | .       |\n| max_iter          | int    | 7         |     3.0 |    10.0 |                   9.0 | transform_power_2_int |         0.09 |         |\n| max_leaf_nodes    | int    | 5         |     1.0 |    12.0 |                   5.0 | transform_power_2_int |         0.00 |         |\n| max_depth         | int    | 2         |     1.0 |    20.0 |                  19.0 | transform_power_2_int |         0.22 | .       |\n| min_samples_leaf  | int    | 4         |     2.0 |    10.0 |                   2.0 | transform_power_2_int |       100.00 | ***     |\n| l2_regularization | float  | 0.0       |     0.0 |    10.0 |     2.402908317415685 | None                  |         0.00 |         |\n| max_bins          | int    | 255       |   127.0 |   255.0 |                 142.0 | None                  |         0.03 |         |\n| early_stopping    | factor | 1         |     0.0 |     1.0 |                   1.0 | None                  |         0.00 |         |\n| n_iter_no_change  | int    | 10        |     5.0 |    20.0 |                   6.0 | None                  |         0.00 |         |\n| tol               | float  | 0.0001    |   1e-05 |   0.001 | 0.0009512858283515322 | None                  |         0.00 |         |\n\n\n\n16.10.1 Show variable importance\n\nspot_tuner.plot_importance(threshold=0.025, filename=\"./figures/\" + experiment_name+\"_importance.png\")\n\n\n\n\nVariable importance plot, threshold 0.025.\n\n\n\n\n\n\n16.10.2 Get Default Hyperparameters\n\nfrom spotPython.hyperparameters.values import get_default_values, transform_hyper_parameter_values\nvalues_default = get_default_values(fun_control)\nvalues_default = transform_hyper_parameter_values(fun_control=fun_control, hyper_parameter_values=values_default)\nvalues_default\n\n{'loss': 'log_loss',\n 'learning_rate': 0.1,\n 'max_iter': 128,\n 'max_leaf_nodes': 32,\n 'max_depth': 4,\n 'min_samples_leaf': 16,\n 'l2_regularization': 0.0,\n 'max_bins': 255,\n 'early_stopping': 1,\n 'n_iter_no_change': 10,\n 'tol': 0.0001}\n\n\n\nfrom sklearn.pipeline import make_pipeline\nmodel_default = make_pipeline(fun_control[\"prep_model\"], fun_control[\"core_model\"](**values_default))\nmodel_default\n\nPipeline(steps=[('nonetype', None),\n                ('histgradientboostingclassifier',\n                 HistGradientBoostingClassifier(early_stopping=1, max_depth=4,\n                                                max_iter=128, max_leaf_nodes=32,\n                                                min_samples_leaf=16,\n                                                tol=0.0001))])In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.PipelinePipeline(steps=[('nonetype', None),\n                ('histgradientboostingclassifier',\n                 HistGradientBoostingClassifier(early_stopping=1, max_depth=4,\n                                                max_iter=128, max_leaf_nodes=32,\n                                                min_samples_leaf=16,\n                                                tol=0.0001))])NoneNoneHistGradientBoostingClassifierHistGradientBoostingClassifier(early_stopping=1, max_depth=4, max_iter=128,\n                               max_leaf_nodes=32, min_samples_leaf=16,\n                               tol=0.0001)\n\n\n\n\n16.10.3 Get SPOT Results\n\nX = spot_tuner.to_all_dim(spot_tuner.min_X.reshape(1,-1))\nprint(X)\n\n[[ 0.00000000e+00 -9.30284717e-01  9.00000000e+00  5.00000000e+00\n   1.90000000e+01  2.00000000e+00  2.40290832e+00  1.42000000e+02\n   1.00000000e+00  6.00000000e+00  9.51285828e-04]]\n\n\n\nfrom spotPython.hyperparameters.values import assign_values, return_conf_list_from_var_dict\nv_dict = assign_values(X, fun_control[\"var_name\"])\nreturn_conf_list_from_var_dict(var_dict=v_dict, fun_control=fun_control)\n\n[{'loss': 'log_loss',\n  'learning_rate': 0.11741275609254138,\n  'max_iter': 512,\n  'max_leaf_nodes': 32,\n  'max_depth': 524288,\n  'min_samples_leaf': 4,\n  'l2_regularization': 2.402908317415685,\n  'max_bins': 142,\n  'early_stopping': 1,\n  'n_iter_no_change': 6,\n  'tol': 0.0009512858283515322}]\n\n\n\nfrom spotPython.hyperparameters.values import get_one_sklearn_model_from_X\nmodel_spot = get_one_sklearn_model_from_X(X, fun_control)\nmodel_spot\n\nHistGradientBoostingClassifier(early_stopping=1,\n                               l2_regularization=2.402908317415685,\n                               learning_rate=0.11741275609254138, max_bins=142,\n                               max_depth=524288, max_iter=512,\n                               max_leaf_nodes=32, min_samples_leaf=4,\n                               n_iter_no_change=6, tol=0.0009512858283515322)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.HistGradientBoostingClassifierHistGradientBoostingClassifier(early_stopping=1,\n                               l2_regularization=2.402908317415685,\n                               learning_rate=0.11741275609254138, max_bins=142,\n                               max_depth=524288, max_iter=512,\n                               max_leaf_nodes=32, min_samples_leaf=4,\n                               n_iter_no_change=6, tol=0.0009512858283515322)\n\n\n\n\n16.10.4 Evaluate SPOT Results\n\nFetch the data.\n\n\nfrom spotPython.utils.convert import get_Xy_from_df\nX_train, y_train = get_Xy_from_df(fun_control[\"train\"], fun_control[\"target_column\"])\nX_test, y_test = get_Xy_from_df(fun_control[\"test\"], fun_control[\"target_column\"])\nX_test.shape, y_test.shape\n\n((177, 64), (177,))\n\n\n\nFit the model with the tuned hyperparameters. This gives one result:\n\n\nmodel_spot.fit(X_train, y_train)\ny_pred = model_spot.predict_proba(X_test)\nres = mapk_score(y_true=y_test, y_pred=y_pred, k=3)\nres\n\n0.35781544256120523\n\n\n\ndef repeated_eval(n, model):\n    res_values = []\n    for i in range(n):\n        model.fit(X_train, y_train)\n        y_pred = model.predict_proba(X_test)\n        res = mapk_score(y_true=y_test, y_pred=y_pred, k=3)\n        res_values.append(res)\n    mean_res = np.mean(res_values)\n    print(f\"mean_res: {mean_res}\")\n    std_res = np.std(res_values)\n    print(f\"std_res: {std_res}\")\n    min_res = np.min(res_values)\n    print(f\"min_res: {min_res}\")\n    max_res = np.max(res_values)\n    print(f\"max_res: {max_res}\")\n    median_res = np.median(res_values)\n    print(f\"median_res: {median_res}\")\n    return mean_res, std_res, min_res, max_res, median_res\n\n\n\n16.10.5 Handling Non-deterministic Results\n\nBecause the model is non-determinstic, we perform \\(n=30\\) runs and calculate the mean and standard deviation of the performance metric.\n\n\n_ = repeated_eval(30, model_spot)\n\nmean_res: 0.34227871939736343\nstd_res: 0.015248714445105125\nmin_res: 0.30414312617702444\nmax_res: 0.37099811676082856\nmedian_res: 0.3436911487758946\n\n\n\n\n16.10.6 Evalution of the Default Hyperparameters\n\nmodel_default.fit(X_train, y_train)[\"histgradientboostingclassifier\"]\n\nHistGradientBoostingClassifier(early_stopping=1, max_depth=4, max_iter=128,\n                               max_leaf_nodes=32, min_samples_leaf=16,\n                               tol=0.0001)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.HistGradientBoostingClassifierHistGradientBoostingClassifier(early_stopping=1, max_depth=4, max_iter=128,\n                               max_leaf_nodes=32, min_samples_leaf=16,\n                               tol=0.0001)\n\n\n\nOne evaluation of the default hyperparameters is performed on the hold-out test set.\n\n\ny_pred = model_default.predict_proba(X_test)\nmapk_score(y_true=y_test, y_pred=y_pred, k=3)\n\n0.3333333333333333\n\n\nSince one single evaluation is not meaningful, we perform, similar to the evaluation of the SPOT results, \\(n=30\\) runs of the default setting and and calculate the mean and standard deviation of the performance metric.\n\n_ = repeated_eval(30, model_default)\n\nmean_res: 0.3496547394852479\nstd_res: 0.01538106762795669\nmin_res: 0.3163841807909605\nmax_res: 0.38229755178907715\nmedian_res: 0.3516949152542373\n\n\n\n\n16.10.7 Plot: Compare Predictions\n\nfrom spotPython.plot.validation import plot_confusion_matrix\nplot_confusion_matrix(model_default, fun_control, title = \"Default\")\n\n\n\n\n\nplot_confusion_matrix(model_spot, fun_control, title=\"SPOT\")\n\n\n\n\n\nmin(spot_tuner.y), max(spot_tuner.y)\n\n(-0.38847117794486213, -0.20927318295739344)\n\n\n\n\n16.10.8 Cross-validated Evaluations\n\nfrom spotPython.sklearn.traintest import evaluate_cv\nfun_control.update({\n     \"eval\": \"train_cv\",\n     \"k_folds\": 10,\n})\nevaluate_cv(model=model_spot, fun_control=fun_control, verbose=0)\n\n(0.3352201257861635, None)\n\n\n\nfun_control.update({\n     \"eval\": \"test_cv\",\n     \"k_folds\": 10,\n})\nevaluate_cv(model=model_spot, fun_control=fun_control, verbose=0)\n\n(0.2888888888888889, None)\n\n\n\nThis is the evaluation that will be used in the comparison:\n\n\nfun_control.update({\n     \"eval\": \"data_cv\",\n     \"k_folds\": 10,\n})\nevaluate_cv(model=model_spot, fun_control=fun_control, verbose=0)\n\n(0.3410965794768612, None)\n\n\n\n\n16.10.9 Detailed Hyperparameter Plots\n\nfilename = \"./figures/\" + experiment_name\nspot_tuner.plot_important_hyperparameter_contour(filename=filename)\n\nlearning_rate:  0.8709323792660172\nmax_iter:  0.09116722945023455\nmax_depth:  0.22395594505245467\nmin_samples_leaf:  100.0\nmax_bins:  0.028738635600414647\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n16.10.10 Parallel Coordinates Plot\n\nspot_tuner.parallel_plot()\n\n\n                                                \n\n\n\n\n16.10.11 Plot all Combinations of Hyperparameters\n\nWarning: this may take a while.\n\n\nPLOT_ALL = False\nif PLOT_ALL:\n    n = spot_tuner.k\n    for i in range(n-1):\n        for j in range(i+1, n):\n            spot_tuner.plot_contour(i=i, j=j, min_z=min_z, max_z = max_z)"
  },
  {
    "objectID": "18_spot_hpt_sklearn_multiclass_classification_svc.html#sec-setup-18",
    "href": "18_spot_hpt_sklearn_multiclass_classification_svc.html#sec-setup-18",
    "title": "17  HPT: sklearn SVC VBDP Data",
    "section": "17.1 Step 1: Setup",
    "text": "17.1 Step 1: Setup\nBefore we consider the detailed experimental setup, we select the parameters that affect run time and the initial design size.\n\nMAX_TIME = 1\nINIT_SIZE = 5\nORIGINAL = False\n\n\nimport os\nimport copy\nimport socket\nfrom datetime import datetime\nfrom dateutil.tz import tzlocal\nstart_time = datetime.now(tzlocal())\nHOSTNAME = socket.gethostname().split(\".\")[0]\nexperiment_name = '18-svc-sklearn' + \"_\" + HOSTNAME + \"_\" + str(MAX_TIME) + \"min_\" + str(INIT_SIZE) + \"init_\" + str(start_time).split(\".\", 1)[0].replace(' ', '_')\nexperiment_name = experiment_name.replace(':', '-')\nprint(experiment_name)\nif not os.path.exists('./figures'):\n    os.makedirs('./figures')\n\n18-svc-sklearn_maans03_1min_5init_2023-07-03_13-01-01\n\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")"
  },
  {
    "objectID": "18_spot_hpt_sklearn_multiclass_classification_svc.html#step-2-initialization-of-the-empty-fun_control-dictionary",
    "href": "18_spot_hpt_sklearn_multiclass_classification_svc.html#step-2-initialization-of-the-empty-fun_control-dictionary",
    "title": "17  HPT: sklearn SVC VBDP Data",
    "section": "17.2 Step 2: Initialization of the Empty fun_control Dictionary",
    "text": "17.2 Step 2: Initialization of the Empty fun_control Dictionary\n\n\n\n\n\n\nCaution: Tensorboard does not work under Windows\n\n\n\n\nSince tensorboard does not work under Windows, we recommend setting the parameter tensorboard_path to None if you are working under Windows.\n\n\n\n\nfrom spotPython.utils.init import fun_control_init\nfun_control = fun_control_init(task=\"classification\",\n    tensorboard_path=\"runs/16_spot_hpt_sklearn_classification\")"
  },
  {
    "objectID": "18_spot_hpt_sklearn_multiclass_classification_svc.html#step-3-pytorch-data-loading",
    "href": "18_spot_hpt_sklearn_multiclass_classification_svc.html#step-3-pytorch-data-loading",
    "title": "17  HPT: sklearn SVC VBDP Data",
    "section": "17.3 Step 3: PyTorch Data Loading",
    "text": "17.3 Step 3: PyTorch Data Loading\n\n17.3.1 1. Load Data: Classification VBDP\n\nimport pandas as pd\nif ORIGINAL == True:\n    train_df = pd.read_csv('./data/VBDP/trainn.csv')\n    test_df = pd.read_csv('./data/VBDP/testt.csv')\nelse:\n    train_df = pd.read_csv('./data/VBDP/train.csv')\n    # remove the id column\n    train_df = train_df.drop(columns=['id'])\n\n\nfrom sklearn.preprocessing import OrdinalEncoder\nn_samples = train_df.shape[0]\nn_features = train_df.shape[1] - 1\ntarget_column = \"prognosis\"\n# Encoder our prognosis labels as integers for easier decoding later\nenc = OrdinalEncoder()\ntrain_df[target_column] = enc.fit_transform(train_df[[target_column]])\ntrain_df.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\nprint(train_df.shape)\ntrain_df.head()\n\n(707, 65)\n\n\n\n\n\n\n\n\n\nx1\nx2\nx3\nx4\nx5\nx6\nx7\nx8\nx9\nx10\n...\nx56\nx57\nx58\nx59\nx60\nx61\nx62\nx63\nx64\nprognosis\n\n\n\n\n0\n1.0\n1.0\n0.0\n1.0\n1.0\n1.0\n1.0\n0.0\n1.0\n1.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n3.0\n\n\n1\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n0.0\n1.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n7.0\n\n\n2\n0.0\n1.0\n1.0\n1.0\n0.0\n1.0\n1.0\n1.0\n1.0\n1.0\n...\n1.0\n1.0\n1.0\n1.0\n1.0\n0.0\n1.0\n1.0\n1.0\n3.0\n\n\n3\n0.0\n0.0\n1.0\n1.0\n1.0\n1.0\n0.0\n1.0\n0.0\n1.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n10.0\n\n\n4\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n0.0\n...\n0.0\n1.0\n0.0\n0.0\n1.0\n1.0\n1.0\n0.0\n0.0\n6.0\n\n\n\n\n5 rows × 65 columns\n\n\n\nThe full data set train_df 64 features. The target column is labeled as prognosis.\n\n\n17.3.2 Holdout Train and Test Data\nWe split out a hold-out test set (25% of the data) so we can calculate an example MAP@K\n\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(train_df.drop(target_column, axis=1), train_df[target_column],\n                                                    random_state=42,\n                                                    test_size=0.25,\n                                                    stratify=train_df[target_column])\ntrain = pd.DataFrame(np.hstack((X_train, np.array(y_train).reshape(-1, 1))))\ntest = pd.DataFrame(np.hstack((X_test, np.array(y_test).reshape(-1, 1))))\ntrain.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\ntest.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\nprint(train.shape)\nprint(test.shape)\ntrain.head()\n\n(530, 65)\n(177, 65)\n\n\n\n\n\n\n\n\n\nx1\nx2\nx3\nx4\nx5\nx6\nx7\nx8\nx9\nx10\n...\nx56\nx57\nx58\nx59\nx60\nx61\nx62\nx63\nx64\nprognosis\n\n\n\n\n0\n1.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n2.0\n\n\n1\n0.0\n1.0\n1.0\n1.0\n1.0\n1.0\n1.0\n1.0\n1.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n4.0\n\n\n2\n0.0\n0.0\n0.0\n1.0\n1.0\n1.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n1.0\n1.0\n1.0\n0.0\n1.0\n1.0\n\n\n3\n1.0\n1.0\n0.0\n1.0\n1.0\n1.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n6.0\n\n\n4\n0.0\n0.0\n0.0\n1.0\n0.0\n0.0\n1.0\n1.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n5.0\n\n\n\n\n5 rows × 65 columns\n\n\n\n\n# add the dataset to the fun_control\nfun_control.update({\"data\": train_df, # full dataset,\n               \"train\": train,\n               \"test\": test,\n               \"n_samples\": n_samples,\n               \"target_column\": target_column})"
  },
  {
    "objectID": "18_spot_hpt_sklearn_multiclass_classification_svc.html#sec-specification-of-preprocessing-model-18",
    "href": "18_spot_hpt_sklearn_multiclass_classification_svc.html#sec-specification-of-preprocessing-model-18",
    "title": "17  HPT: sklearn SVC VBDP Data",
    "section": "17.4 Step 4: Specification of the Preprocessing Model",
    "text": "17.4 Step 4: Specification of the Preprocessing Model\nData preprocesssing can be very simple, e.g., you can ignore it. Then you would choose the prep_model “None”:\n\nprep_model = None\nfun_control.update({\"prep_model\": prep_model})\n\nA default approach for numerical data is the StandardScaler (mean 0, variance 1). This can be selected as follows:\n\n# prep_model = StandardScaler()\n# fun_control.update({\"prep_model\": prep_model})\n\nEven more complicated pre-processing steps are possible, e.g., the follwing pipeline:\n\n# categorical_columns = []\n# one_hot_encoder = OneHotEncoder(handle_unknown=\"ignore\", sparse_output=False)\n# prep_model = ColumnTransformer(\n#         transformers=[\n#             (\"categorical\", one_hot_encoder, categorical_columns),\n#         ],\n#         remainder=StandardScaler(),\n#     )"
  },
  {
    "objectID": "18_spot_hpt_sklearn_multiclass_classification_svc.html#step-5-select-model-algorithm-and-core_model_hyper_dict",
    "href": "18_spot_hpt_sklearn_multiclass_classification_svc.html#step-5-select-model-algorithm-and-core_model_hyper_dict",
    "title": "17  HPT: sklearn SVC VBDP Data",
    "section": "17.5 Step 5: Select Model (algorithm) and core_model_hyper_dict",
    "text": "17.5 Step 5: Select Model (algorithm) and core_model_hyper_dict\nThe selection of the algorithm (ML model) that should be tuned is done by specifying the its name from the sklearn implementation. For example, the SVC support vector machine classifier is selected as follows:\nfun_control = add_core_model_to_fun_control(SVC, fun_control, SklearnHyperDict)\nOther core_models are, e.g.,:\n\nRidgeCV\nGradientBoostingRegressor\nElasticNet\nRandomForestClassifier\nLogisticRegression\nKNeighborsClassifier\nRandomForestClassifier\nGradientBoostingClassifier\nHistGradientBoostingClassifier\n\nWe will use the RandomForestClassifier classifier in this example.\n\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import HistGradientBoostingClassifier\nfrom sklearn.linear_model import ElasticNet\nfrom spotPython.hyperparameters.values import add_core_model_to_fun_control\nfrom spotPython.data.sklearn_hyper_dict import SklearnHyperDict\nfrom spotPython.fun.hypersklearn import HyperSklearn\n\n\n# core_model  = RidgeCV\n# core_model = GradientBoostingRegressor\n# core_model = ElasticNet\n# core_model = RandomForestClassifier\ncore_model = SVC\n# core_model = LogisticRegression\n# core_model = KNeighborsClassifier\n# core_model = GradientBoostingClassifier\n# core_model = HistGradientBoostingClassifier\nfun_control = add_core_model_to_fun_control(core_model=core_model,\n                              fun_control=fun_control,\n                              hyper_dict=SklearnHyperDict,\n                              filename=None)\n\nNow fun_control has the information from the JSON file. The available hyperparameters are:\n\nprint(*fun_control[\"core_model_hyper_dict\"].keys(), sep=\"\\n\")\n\nC\nkernel\ndegree\ngamma\ncoef0\nshrinking\nprobability\ntol\ncache_size\nbreak_ties"
  },
  {
    "objectID": "18_spot_hpt_sklearn_multiclass_classification_svc.html#step-6-modify-hyper_dict-hyperparameters-for-the-selected-algorithm-aka-core_model",
    "href": "18_spot_hpt_sklearn_multiclass_classification_svc.html#step-6-modify-hyper_dict-hyperparameters-for-the-selected-algorithm-aka-core_model",
    "title": "17  HPT: sklearn SVC VBDP Data",
    "section": "17.6 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model",
    "text": "17.6 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model\n\n17.6.1 Modify hyperparameter of type numeric and integer (boolean)\nNumeric and boolean values can be modified using the modify_hyper_parameter_bounds method. For example, to change the tol hyperparameter of the SVC model to the interval [1e-3, 1e-2], the following code can be used:\nfun_control = modify_hyper_parameter_bounds(fun_control, \"tol\", bounds=[1e-3, 1e-2])\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_bounds\nfun_control = modify_hyper_parameter_bounds(fun_control, \"probability\", bounds=[1, 1])\n\n\n\n17.6.2 Modify hyperparameter of type factor\nspotPython provides functions for modifying the hyperparameters, their bounds and factors as well as for activating and de-activating hyperparameters without re-compilation of the Python source code. These functions were described in Section 14.6.\nFactors can be modified with the modify_hyper_parameter_levels function. For example, to exclude the sigmoid kernel from the tuning, the kernel hyperparameter of the SVC model can be modified as follows:\nfun_control = modify_hyper_parameter_levels(fun_control, \"kernel\", [\"linear\", \"rbf\"])\nThe new setting can be controlled via:\nfun_control[\"core_model_hyper_dict\"][\"kernel\"]\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_levels\nfun_control = modify_hyper_parameter_levels(fun_control, \"kernel\", [\"rbf\"])\n\n\n\n17.6.3 Optimizers\nOptimizers are described in Section 14.6.1.\n\n\n17.6.4 Selection of the Objective: Metric and Loss Functions\n\nMachine learning models are optimized with respect to a metric, for example, the accuracy function.\nDeep learning, e.g., neural networks are optimized with respect to a loss function, for example, the cross_entropy function and evaluated with respect to a metric, for example, the accuracy function."
  },
  {
    "objectID": "18_spot_hpt_sklearn_multiclass_classification_svc.html#step-7-selection-of-the-objective-loss-function",
    "href": "18_spot_hpt_sklearn_multiclass_classification_svc.html#step-7-selection-of-the-objective-loss-function",
    "title": "17  HPT: sklearn SVC VBDP Data",
    "section": "17.7 Step 7: Selection of the Objective (Loss) Function",
    "text": "17.7 Step 7: Selection of the Objective (Loss) Function\nThe loss function, that is usually used in deep learning for optimizing the weights of the net, is stored in the fun_control dictionary as \"loss_function\".\n\n17.7.1 Metric Function\nThere are two different types of metrics in spotPython:\n\n\"metric_river\" is used for the river based evaluation via eval_oml_iter_progressive.\n\"metric_sklearn\" is used for the sklearn based evaluation.\n\nWe will consider multi-class classification metrics, e.g., mapk_score and top_k_accuracy_score.\n\n\n\n\n\n\nPredict Probabilities\n\n\n\nIn this multi-class classification example the machine learning algorithm should return the probabilities of the specific classes (\"predict_proba\") instead of the predicted values.\n\n\nWe set \"predict_proba\" to True in the fun_control dictionary.\n\n17.7.1.1 The MAPK Metric\nTo select the MAPK metric, the following two entries can be added to the fun_control dictionary:\n\"metric_sklearn\": mapk_score\"\n\"metric_params\": {\"k\": 3}.\n\n\n17.7.1.2 Other Metrics\nAlternatively, other metrics for multi-class classification can be used, e.g.,: * top_k_accuracy_score or * roc_auc_score\nThe metric roc_auc_score requires the parameter \"multi_class\", e.g.,\n\"multi_class\": \"ovr\".\nThis is set in the fun_control dictionary.\n\n\n\n\n\n\nWeights\n\n\n\nspotPython performs a minimization, therefore, metrics that should be maximized have to be multiplied by -1. This is done by setting \"weights\" to -1.\n\n\n\nThe complete setup for the metric in our example is:\n\n\nfrom spotPython.utils.metrics import mapk_score\nfun_control.update({\n               \"weights\": -1,\n               \"metric_sklearn\": mapk_score,\n               \"predict_proba\": True,\n               \"metric_params\": {\"k\": 3},\n               })\n\n\n\n\n17.7.2 Evaluation on Hold-out Data\n\nThe default method for computing the performance is \"eval_holdout\".\nAlternatively, cross-validation can be used for every machine learning model.\nSpecifically for RandomForests, the OOB-score can be used.\n\n\nfun_control.update({\n    \"eval\": \"train_hold_out\",\n})\n\n\n17.7.2.1 Cross Validation\nInstead of using the OOB-score, the classical cross validation can be used. The number of folds is set by the key \"k_folds\". For example, to use 5-fold cross validation, the key \"k_folds\" is set to 5. Uncomment the following line to use cross validation:\n\n# fun_control.update({\n#      \"eval\": \"train_cv\",\n#      \"k_folds\": 10,\n# })"
  },
  {
    "objectID": "18_spot_hpt_sklearn_multiclass_classification_svc.html#step-8-calling-the-spot-function",
    "href": "18_spot_hpt_sklearn_multiclass_classification_svc.html#step-8-calling-the-spot-function",
    "title": "17  HPT: sklearn SVC VBDP Data",
    "section": "17.8 Step 8: Calling the SPOT Function",
    "text": "17.8 Step 8: Calling the SPOT Function\n\n17.8.1 Preparing the SPOT Call\n\nGet types and variable names as well as lower and upper bounds for the hyperparameters.\n\n\n# extract the variable types, names, and bounds\nfrom spotPython.hyperparameters.values import (get_bound_values,\n    get_var_name,\n    get_var_type,)\nvar_type = get_var_type(fun_control)\nvar_name = get_var_name(fun_control)\nfun_control.update({\"var_type\": var_type,\n                    \"var_name\": var_name})\nlower = get_bound_values(fun_control, \"lower\")\nupper = get_bound_values(fun_control, \"upper\")\n\n\nfrom spotPython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control))\n\n| name        | type   | default   |    lower |   upper | transform   |\n|-------------|--------|-----------|----------|---------|-------------|\n| C           | float  | 1.0       |   0.1    |   10    | None        |\n| kernel      | factor | rbf       |   0      |    0    | None        |\n| degree      | int    | 3         |   3      |    3    | None        |\n| gamma       | factor | scale     |   0      |    1    | None        |\n| coef0       | float  | 0.0       |   0      |    0    | None        |\n| shrinking   | factor | 0         |   0      |    1    | None        |\n| probability | factor | 0         |   1      |    1    | None        |\n| tol         | float  | 0.001     |   0.0001 |    0.01 | None        |\n| cache_size  | float  | 200.0     | 100      |  400    | None        |\n| break_ties  | factor | 0         |   0      |    1    | None        |\n\n\n\n\n17.8.2 The Objective Function\nThe objective function is selected next. It implements an interface from sklearn’s training, validation, and testing methods to spotPython.\n\nfrom spotPython.fun.hypersklearn import HyperSklearn\nfun = HyperSklearn().fun_sklearn\n\n\n\n17.8.3 Run the Spot Optimizer\n\nRun SPOT for approx. x mins (max_time).\nNote: the run takes longer, because the evaluation time of initial design (here: initi_size, 20 points) is not considered.\n\n\nfrom spotPython.hyperparameters.values import get_default_hyperparameters_as_array\nhyper_dict=SklearnHyperDict().load()\nX_start = get_default_hyperparameters_as_array(fun_control, hyper_dict)\nX_start\n\narray([[1.e+00, 2.e+00, 3.e+00, 0.e+00, 0.e+00, 0.e+00, 0.e+00, 1.e-03,\n        2.e+02, 0.e+00]])\n\n\n\nimport numpy as np\nfrom spotPython.spot import spot\nfrom math import inf\nspot_tuner = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = inf,\n                   fun_repeats = 1,\n                   max_time = MAX_TIME,\n                   noise = False,\n                   tolerance_x = np.sqrt(np.spacing(1)),\n                   var_type = var_type,\n                   var_name = var_name,\n                   infill_criterion = \"y\",\n                   n_points = 1,\n                   seed=123,\n                   log_level = 50,\n                   show_models= False,\n                   show_progress= True,\n                   fun_control = fun_control,\n                   design_control={\"init_size\": INIT_SIZE,\n                                   \"repeats\": 1},\n                   surrogate_control={\"noise\": True,\n                                      \"cod_type\": \"norm\",\n                                      \"min_theta\": -4,\n                                      \"max_theta\": 3,\n                                      \"n_theta\": len(var_name),\n                                      \"model_fun_evals\": 10_000,\n                                      \"log_level\": 50\n                                      })\nspot_tuner.run(X_start=X_start)\n\nspotPython tuning: -0.38345864661654133 [----------] 0.80% \n\n\nspotPython tuning: -0.38345864661654133 [----------] 1.58% \n\n\nspotPython tuning: -0.38345864661654133 [----------] 3.54% \n\n\nspotPython tuning: -0.38345864661654133 [----------] 4.67% \n\n\nspotPython tuning: -0.38345864661654133 [#---------] 5.74% \n\n\nspotPython tuning: -0.38345864661654133 [#---------] 6.71% \n\n\nspotPython tuning: -0.38345864661654133 [#---------] 7.59% \n\n\nspotPython tuning: -0.38345864661654133 [#---------] 8.67% \n\n\nspotPython tuning: -0.38345864661654133 [#---------] 9.68% \n\n\nspotPython tuning: -0.38345864661654133 [#---------] 10.98% \n\n\nspotPython tuning: -0.38345864661654133 [#---------] 12.06% \n\n\nspotPython tuning: -0.38345864661654133 [#---------] 13.22% \n\n\nspotPython tuning: -0.38345864661654133 [#---------] 14.62% \n\n\nspotPython tuning: -0.38345864661654133 [##--------] 15.92% \n\n\nspotPython tuning: -0.38345864661654133 [##--------] 17.26% \n\n\nspotPython tuning: -0.38345864661654133 [##--------] 18.82% \n\n\nspotPython tuning: -0.38345864661654133 [##--------] 20.28% \n\n\nspotPython tuning: -0.38345864661654133 [##--------] 21.84% \n\n\nspotPython tuning: -0.38345864661654133 [##--------] 23.16% \n\n\nspotPython tuning: -0.38345864661654133 [##--------] 24.66% \n\n\nspotPython tuning: -0.38345864661654133 [###-------] 26.24% \n\n\nspotPython tuning: -0.38345864661654133 [###-------] 27.91% \n\n\nspotPython tuning: -0.38345864661654133 [###-------] 29.22% \n\n\nspotPython tuning: -0.38345864661654133 [###-------] 30.81% \n\n\nspotPython tuning: -0.38345864661654133 [###-------] 32.39% \n\n\nspotPython tuning: -0.38345864661654133 [###-------] 34.08% \n\n\nspotPython tuning: -0.38345864661654133 [####------] 35.77% \n\n\nspotPython tuning: -0.38345864661654133 [####------] 37.53% \n\n\nspotPython tuning: -0.38345864661654133 [####------] 39.31% \n\n\nspotPython tuning: -0.38345864661654133 [####------] 41.20% \n\n\nspotPython tuning: -0.38345864661654133 [####------] 43.00% \n\n\nspotPython tuning: -0.38345864661654133 [####------] 44.67% \n\n\nspotPython tuning: -0.38345864661654133 [#####-----] 46.58% \n\n\nspotPython tuning: -0.38596491228070173 [#####-----] 48.35% \n\n\nspotPython tuning: -0.38596491228070173 [#####-----] 50.03% \n\n\nspotPython tuning: -0.38596491228070173 [#####-----] 51.78% \n\n\nspotPython tuning: -0.38596491228070173 [#####-----] 53.62% \n\n\nspotPython tuning: -0.38596491228070173 [######----] 55.64% \n\n\nspotPython tuning: -0.38596491228070173 [######----] 57.60% \n\n\nspotPython tuning: -0.38596491228070173 [######----] 59.40% \n\n\nspotPython tuning: -0.38596491228070173 [######----] 61.27% \n\n\nspotPython tuning: -0.38596491228070173 [######----] 62.98% \n\n\nspotPython tuning: -0.38596491228070173 [#######---] 65.20% \n\n\nspotPython tuning: -0.38596491228070173 [#######---] 67.10% \n\n\nspotPython tuning: -0.38596491228070173 [#######---] 68.94% \n\n\nspotPython tuning: -0.38596491228070173 [#######---] 70.96% \n\n\nspotPython tuning: -0.38596491228070173 [#######---] 72.83% \n\n\nspotPython tuning: -0.38596491228070173 [#######---] 74.83% \n\n\nspotPython tuning: -0.38596491228070173 [########--] 77.00% \n\n\nspotPython tuning: -0.38596491228070173 [########--] 78.91% \n\n\nspotPython tuning: -0.38596491228070173 [########--] 80.93% \n\n\nspotPython tuning: -0.38596491228070173 [########--] 82.86% \n\n\nspotPython tuning: -0.38596491228070173 [########--] 84.68% \n\n\nspotPython tuning: -0.38596491228070173 [#########-] 86.91% \n\n\nspotPython tuning: -0.38596491228070173 [#########-] 89.24% \n\n\nspotPython tuning: -0.38596491228070173 [#########-] 91.58% \n\n\nspotPython tuning: -0.38596491228070173 [#########-] 93.62% \n\n\nspotPython tuning: -0.38596491228070173 [##########] 95.78% \n\n\nspotPython tuning: -0.38596491228070173 [##########] 99.11% \n\n\nspotPython tuning: -0.38596491228070173 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x18a7ecbb0&gt;"
  },
  {
    "objectID": "18_spot_hpt_sklearn_multiclass_classification_svc.html#sec-tensorboard-18",
    "href": "18_spot_hpt_sklearn_multiclass_classification_svc.html#sec-tensorboard-18",
    "title": "17  HPT: sklearn SVC VBDP Data",
    "section": "17.9 Step 9: Tensorboard",
    "text": "17.9 Step 9: Tensorboard\nThe textual output shown in the console (or code cell) can be visualized with Tensorboard as described in Section 14.9, see also the description in the documentation: Tensorboard."
  },
  {
    "objectID": "18_spot_hpt_sklearn_multiclass_classification_svc.html#sec-results-tuning-18",
    "href": "18_spot_hpt_sklearn_multiclass_classification_svc.html#sec-results-tuning-18",
    "title": "17  HPT: sklearn SVC VBDP Data",
    "section": "17.10 Step 10: Results",
    "text": "17.10 Step 10: Results\nAfter the hyperparameter tuning run is finished, the progress of the hyperparameter tuning can be visualized. The following code generates the progress plot from ?fig-progress.\n\nspot_tuner.plot_progress(log_y=False,\n    filename=\"./figures/\" + experiment_name+\"_progress.png\")\n\n\n\n\nProgress plot. Black dots denote results from the initial design. Red dots illustrate the improvement found by the surrogate model based optimization.\n\n\n\n\n\nPrint the results\n\n\nprint(gen_design_table(fun_control=fun_control,\n    spot=spot_tuner))\n\n| name        | type   | default   |   lower |   upper |               tuned | transform   |   importance | stars   |\n|-------------|--------|-----------|---------|---------|---------------------|-------------|--------------|---------|\n| C           | float  | 1.0       |     0.1 |    10.0 |   7.640370712487234 | None        |         4.59 | *       |\n| kernel      | factor | rbf       |     0.0 |     0.0 |                 0.0 | None        |         0.00 |         |\n| degree      | int    | 3         |     3.0 |     3.0 |                 3.0 | None        |         0.00 |         |\n| gamma       | factor | scale     |     0.0 |     1.0 |                 1.0 | None        |       100.00 | ***     |\n| coef0       | float  | 0.0       |     0.0 |     0.0 |                 0.0 | None        |         0.00 |         |\n| shrinking   | factor | 0         |     0.0 |     1.0 |                 1.0 | None        |         0.00 |         |\n| probability | factor | 0         |     1.0 |     1.0 |                 1.0 | None        |         0.00 |         |\n| tol         | float  | 0.001     |  0.0001 |    0.01 | 0.00658863194323043 | None        |         0.00 |         |\n| cache_size  | float  | 200.0     |   100.0 |   400.0 |  221.52728914167426 | None        |         0.00 |         |\n| break_ties  | factor | 0         |     0.0 |     1.0 |                 0.0 | None        |         0.00 |         |\n\n\n\n17.10.1 Show variable importance\n\nspot_tuner.plot_importance(threshold=0.025, filename=\"./figures/\" + experiment_name+\"_importance.png\")\n\n\n\n\nVariable importance plot, threshold 0.025.\n\n\n\n\n\n\n17.10.2 Get Default Hyperparameters\n\nfrom spotPython.hyperparameters.values import get_default_values, transform_hyper_parameter_values\nvalues_default = get_default_values(fun_control)\nvalues_default = transform_hyper_parameter_values(fun_control=fun_control, hyper_parameter_values=values_default)\nvalues_default\n\n{'C': 1.0,\n 'kernel': 'rbf',\n 'degree': 3,\n 'gamma': 'scale',\n 'coef0': 0.0,\n 'shrinking': 0,\n 'probability': 0,\n 'tol': 0.001,\n 'cache_size': 200.0,\n 'break_ties': 0}\n\n\n\nfrom sklearn.pipeline import make_pipeline\nmodel_default = make_pipeline(fun_control[\"prep_model\"], fun_control[\"core_model\"](**values_default))\nmodel_default\n\nPipeline(steps=[('nonetype', None),\n                ('svc',\n                 SVC(break_ties=0, cache_size=200.0, probability=0,\n                     shrinking=0))])In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.PipelinePipeline(steps=[('nonetype', None),\n                ('svc',\n                 SVC(break_ties=0, cache_size=200.0, probability=0,\n                     shrinking=0))])NoneNoneSVCSVC(break_ties=0, cache_size=200.0, probability=0, shrinking=0)\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nDefault value for “probability” is False, but we need it to be True for the metric “mapk_score”.\n\n\nvalues_default.update({\"probability\": 1})\n\n\n\n\n\n17.10.3 Get SPOT Results\n\nX = spot_tuner.to_all_dim(spot_tuner.min_X.reshape(1,-1))\nprint(X)\n\n[[7.64037071e+00 0.00000000e+00 3.00000000e+00 1.00000000e+00\n  0.00000000e+00 1.00000000e+00 1.00000000e+00 6.58863194e-03\n  2.21527289e+02 0.00000000e+00]]\n\n\n\nfrom spotPython.hyperparameters.values import assign_values, return_conf_list_from_var_dict\nv_dict = assign_values(X, fun_control[\"var_name\"])\nreturn_conf_list_from_var_dict(var_dict=v_dict, fun_control=fun_control)\n\n[{'C': 7.640370712487234,\n  'kernel': 'rbf',\n  'degree': 3,\n  'gamma': 'auto',\n  'coef0': 0.0,\n  'shrinking': 1,\n  'probability': 1,\n  'tol': 0.00658863194323043,\n  'cache_size': 221.52728914167426,\n  'break_ties': 0}]\n\n\n\nfrom spotPython.hyperparameters.values import get_one_sklearn_model_from_X\nmodel_spot = get_one_sklearn_model_from_X(X, fun_control)\nmodel_spot\n\nSVC(C=7.640370712487234, break_ties=0, cache_size=221.52728914167426,\n    gamma='auto', probability=1, shrinking=1, tol=0.00658863194323043)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.SVCSVC(C=7.640370712487234, break_ties=0, cache_size=221.52728914167426,\n    gamma='auto', probability=1, shrinking=1, tol=0.00658863194323043)\n\n\n\n\n17.10.4 Evaluate SPOT Results\n\nFetch the data.\n\n\nfrom spotPython.utils.convert import get_Xy_from_df\nX_train, y_train = get_Xy_from_df(fun_control[\"train\"], fun_control[\"target_column\"])\nX_test, y_test = get_Xy_from_df(fun_control[\"test\"], fun_control[\"target_column\"])\nX_test.shape, y_test.shape\n\n((177, 64), (177,))\n\n\n\nFit the model with the tuned hyperparameters. This gives one result:\n\n\nmodel_spot.fit(X_train, y_train)\ny_pred = model_spot.predict_proba(X_test)\nres = mapk_score(y_true=y_test, y_pred=y_pred, k=3)\nres\n\n0.3681732580037665\n\n\n\ndef repeated_eval(n, model):\n    res_values = []\n    for i in range(n):\n        model.fit(X_train, y_train)\n        y_pred = model.predict_proba(X_test)\n        res = mapk_score(y_true=y_test, y_pred=y_pred, k=3)\n        res_values.append(res)\n    mean_res = np.mean(res_values)\n    print(f\"mean_res: {mean_res}\")\n    std_res = np.std(res_values)\n    print(f\"std_res: {std_res}\")\n    min_res = np.min(res_values)\n    print(f\"min_res: {min_res}\")\n    max_res = np.max(res_values)\n    print(f\"max_res: {max_res}\")\n    median_res = np.median(res_values)\n    print(f\"median_res: {median_res}\")\n    return mean_res, std_res, min_res, max_res, median_res\n\n\n\n17.10.5 Handling Non-deterministic Results\n\nBecause the model is non-determinstic, we perform \\(n=30\\) runs and calculate the mean and standard deviation of the performance metric.\n\n\n_ = repeated_eval(30, model_spot)\n\nmean_res: 0.36434400502197106\nstd_res: 0.004287098827109566\nmin_res: 0.3559322033898305\nmax_res: 0.3747645951035781\nmedian_res: 0.3644067796610169\n\n\n\n\n17.10.6 Evalution of the Default Hyperparameters\n\nmodel_default[\"svc\"].probability = True\nmodel_default.fit(X_train, y_train)[\"svc\"]\n\nSVC(break_ties=0, cache_size=200.0, probability=True, shrinking=0)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.SVCSVC(break_ties=0, cache_size=200.0, probability=True, shrinking=0)\n\n\n\nOne evaluation of the default hyperparameters is performed on the hold-out test set.\n\n\ny_pred = model_default.predict_proba(X_test)\nmapk_score(y_true=y_test, y_pred=y_pred, k=3)\n\n0.3804143126177025\n\n\nSince one single evaluation is not meaningful, we perform, similar to the evaluation of the SPOT results, \\(n=30\\) runs of the default setting and and calculate the mean and standard deviation of the performance metric.\n\n_ = repeated_eval(30, model_default)\n\nmean_res: 0.38502824858757057\nstd_res: 0.005255947000135729\nmin_res: 0.37476459510357824\nmax_res: 0.396421845574388\nmedian_res: 0.3860640301318267\n\n\n\n\n17.10.7 Plot: Compare Predictions\n\nfrom spotPython.plot.validation import plot_confusion_matrix\nplot_confusion_matrix(model_default, fun_control, title = \"Default\")\n\n\n\n\n\nplot_confusion_matrix(model_spot, fun_control, title=\"SPOT\")\n\n\n\n\n\nmin(spot_tuner.y), max(spot_tuner.y)\n\n(-0.38596491228070173, -0.3308270676691729)\n\n\n\n\n17.10.8 Cross-validated Evaluations\n\nfrom spotPython.sklearn.traintest import evaluate_cv\nfun_control.update({\n     \"eval\": \"train_cv\",\n     \"k_folds\": 10,\n})\nevaluate_cv(model=model_spot, fun_control=fun_control, verbose=0)\n\n(0.3474842767295597, None)\n\n\n\nfun_control.update({\n     \"eval\": \"test_cv\",\n     \"k_folds\": 10,\n})\nevaluate_cv(model=model_spot, fun_control=fun_control, verbose=0)\n\n(0.35648148148148145, None)\n\n\n\nThis is the evaluation that will be used in the comparison:\n\n\nfun_control.update({\n     \"eval\": \"data_cv\",\n     \"k_folds\": 10,\n})\nevaluate_cv(model=model_spot, fun_control=fun_control, verbose=0)\n\n(0.35750503018108654, None)\n\n\n\n\n17.10.9 Detailed Hyperparameter Plots\n\nfilename = \"./figures/\" + experiment_name\nspot_tuner.plot_important_hyperparameter_contour(filename=filename)\n\nC:  4.591638264269645\ngamma:  100.0\n\n\n\n\n\n\n\n17.10.10 Parallel Coordinates Plot\n\nspot_tuner.parallel_plot()\n\n\n                                                \n\n\n\n\n17.10.11 Plot all Combinations of Hyperparameters\n\nWarning: this may take a while.\n\n\nPLOT_ALL = False\nif PLOT_ALL:\n    n = spot_tuner.k\n    for i in range(n-1):\n        for j in range(i+1, n):\n            spot_tuner.plot_contour(i=i, j=j, min_z=min_z, max_z = max_z)"
  },
  {
    "objectID": "19_spot_hpt_sklearn_multiclass_classification_knn.html#sec-setup-19",
    "href": "19_spot_hpt_sklearn_multiclass_classification_knn.html#sec-setup-19",
    "title": "18  HPT: sklearn KNN Classifier VBDP Data",
    "section": "18.1 Step 1: Setup",
    "text": "18.1 Step 1: Setup\nBefore we consider the detailed experimental setup, we select the parameters that affect run time and the initial design size.\n\nMAX_TIME = 1\nINIT_SIZE = 5\nORIGINAL = False\n\n\nimport os\nimport copy\nimport socket\nfrom datetime import datetime\nfrom dateutil.tz import tzlocal\nstart_time = datetime.now(tzlocal())\nHOSTNAME = socket.gethostname().split(\".\")[0]\nexperiment_name = '19-knn-sklearn' + \"_\" + HOSTNAME + \"_\" + str(MAX_TIME) + \"min_\" + str(INIT_SIZE) + \"init_\" + str(start_time).split(\".\", 1)[0].replace(' ', '_')\nexperiment_name = experiment_name.replace(':', '-')\nprint(experiment_name)\nif not os.path.exists('./figures'):\n    os.makedirs('./figures')\n\n19-knn-sklearn_maans03_1min_5init_2023-07-03_13-04-11\n\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")"
  },
  {
    "objectID": "19_spot_hpt_sklearn_multiclass_classification_knn.html#step-2-initialization-of-the-empty-fun_control-dictionary",
    "href": "19_spot_hpt_sklearn_multiclass_classification_knn.html#step-2-initialization-of-the-empty-fun_control-dictionary",
    "title": "18  HPT: sklearn KNN Classifier VBDP Data",
    "section": "18.2 Step 2: Initialization of the Empty fun_control Dictionary",
    "text": "18.2 Step 2: Initialization of the Empty fun_control Dictionary\n\n\n\n\n\n\nCaution: Tensorboard does not work under Windows\n\n\n\n\nSince tensorboard does not work under Windows, we recommend setting the parameter tensorboard_path to None if you are working under Windows.\n\n\n\n\nfrom spotPython.utils.init import fun_control_init\nfun_control = fun_control_init(task=\"classification\",\n    tensorboard_path=\"runs/16_spot_hpt_sklearn_classification\")\n\n\n18.2.1 Load Data: Classification VBDP\n\nimport pandas as pd\nif ORIGINAL == True:\n    train_df = pd.read_csv('./data/VBDP/trainn.csv')\n    test_df = pd.read_csv('./data/VBDP/testt.csv')\nelse:\n    train_df = pd.read_csv('./data/VBDP/train.csv')\n    # remove the id column\n    train_df = train_df.drop(columns=['id'])\n\n\nfrom sklearn.preprocessing import OrdinalEncoder\nn_samples = train_df.shape[0]\nn_features = train_df.shape[1] - 1\ntarget_column = \"prognosis\"\n# Encoder our prognosis labels as integers for easier decoding later\nenc = OrdinalEncoder()\ntrain_df[target_column] = enc.fit_transform(train_df[[target_column]])\ntrain_df.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\nprint(train_df.shape)\ntrain_df.head()\n\n(707, 65)\n\n\n\n\n\n\n\n\n\nx1\nx2\nx3\nx4\nx5\nx6\nx7\nx8\nx9\nx10\n...\nx56\nx57\nx58\nx59\nx60\nx61\nx62\nx63\nx64\nprognosis\n\n\n\n\n0\n1.0\n1.0\n0.0\n1.0\n1.0\n1.0\n1.0\n0.0\n1.0\n1.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n3.0\n\n\n1\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n0.0\n1.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n7.0\n\n\n2\n0.0\n1.0\n1.0\n1.0\n0.0\n1.0\n1.0\n1.0\n1.0\n1.0\n...\n1.0\n1.0\n1.0\n1.0\n1.0\n0.0\n1.0\n1.0\n1.0\n3.0\n\n\n3\n0.0\n0.0\n1.0\n1.0\n1.0\n1.0\n0.0\n1.0\n0.0\n1.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n10.0\n\n\n4\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n0.0\n...\n0.0\n1.0\n0.0\n0.0\n1.0\n1.0\n1.0\n0.0\n0.0\n6.0\n\n\n\n\n5 rows × 65 columns\n\n\n\nThe full data set train_df 64 features. The target column is labeled as prognosis.\n\n\n18.2.2 Holdout Train and Test Data\nWe split out a hold-out test set (25% of the data) so we can calculate an example MAP@K\n\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(train_df.drop(target_column, axis=1), train_df[target_column],\n                                                    random_state=42,\n                                                    test_size=0.25,\n                                                    stratify=train_df[target_column])\ntrain = pd.DataFrame(np.hstack((X_train, np.array(y_train).reshape(-1, 1))))\ntest = pd.DataFrame(np.hstack((X_test, np.array(y_test).reshape(-1, 1))))\ntrain.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\ntest.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\nprint(train.shape)\nprint(test.shape)\ntrain.head()\n\n(530, 65)\n(177, 65)\n\n\n\n\n\n\n\n\n\nx1\nx2\nx3\nx4\nx5\nx6\nx7\nx8\nx9\nx10\n...\nx56\nx57\nx58\nx59\nx60\nx61\nx62\nx63\nx64\nprognosis\n\n\n\n\n0\n1.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n2.0\n\n\n1\n0.0\n1.0\n1.0\n1.0\n1.0\n1.0\n1.0\n1.0\n1.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n4.0\n\n\n2\n0.0\n0.0\n0.0\n1.0\n1.0\n1.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n1.0\n1.0\n1.0\n0.0\n1.0\n1.0\n\n\n3\n1.0\n1.0\n0.0\n1.0\n1.0\n1.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n6.0\n\n\n4\n0.0\n0.0\n0.0\n1.0\n0.0\n0.0\n1.0\n1.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n5.0\n\n\n\n\n5 rows × 65 columns\n\n\n\n\n# add the dataset to the fun_control\nfun_control.update({\"data\": train_df, # full dataset,\n               \"train\": train,\n               \"test\": test,\n               \"n_samples\": n_samples,\n               \"target_column\": target_column})"
  },
  {
    "objectID": "19_spot_hpt_sklearn_multiclass_classification_knn.html#sec-specification-of-preprocessing-model-19",
    "href": "19_spot_hpt_sklearn_multiclass_classification_knn.html#sec-specification-of-preprocessing-model-19",
    "title": "18  HPT: sklearn KNN Classifier VBDP Data",
    "section": "18.3 Step 4: Specification of the Preprocessing Model",
    "text": "18.3 Step 4: Specification of the Preprocessing Model\nData preprocesssing can be very simple, e.g., you can ignore it. Then you would choose the prep_model “None”:\n\nprep_model = None\nfun_control.update({\"prep_model\": prep_model})\n\nA default approach for numerical data is the StandardScaler (mean 0, variance 1). This can be selected as follows:\n\n# prep_model = StandardScaler()\n# fun_control.update({\"prep_model\": prep_model})\n\nEven more complicated pre-processing steps are possible, e.g., the follwing pipeline:\n\n# categorical_columns = []\n# one_hot_encoder = OneHotEncoder(handle_unknown=\"ignore\", sparse_output=False)\n# prep_model = ColumnTransformer(\n#         transformers=[\n#             (\"categorical\", one_hot_encoder, categorical_columns),\n#         ],\n#         remainder=StandardScaler(),\n#     )"
  },
  {
    "objectID": "19_spot_hpt_sklearn_multiclass_classification_knn.html#step-5-select-model-algorithm-and-core_model_hyper_dict",
    "href": "19_spot_hpt_sklearn_multiclass_classification_knn.html#step-5-select-model-algorithm-and-core_model_hyper_dict",
    "title": "18  HPT: sklearn KNN Classifier VBDP Data",
    "section": "18.4 Step 5: Select Model (algorithm) and core_model_hyper_dict",
    "text": "18.4 Step 5: Select Model (algorithm) and core_model_hyper_dict\nThe selection of the algorithm (ML model) that should be tuned is done by specifying the its name from the sklearn implementation. For example, the SVC support vector machine classifier is selected as follows:\nfun_control = add_core_model_to_fun_control(SVC, fun_control, SklearnHyperDict)\nOther core_models are, e.g.,:\n\nRidgeCV\nGradientBoostingRegressor\nElasticNet\nRandomForestClassifier\nLogisticRegression\nKNeighborsClassifier\nRandomForestClassifier\nGradientBoostingClassifier\nHistGradientBoostingClassifier\n\nWe will use the RandomForestClassifier classifier in this example.\n\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import HistGradientBoostingClassifier\nfrom sklearn.linear_model import ElasticNet\nfrom spotPython.hyperparameters.values import add_core_model_to_fun_control\nfrom spotPython.data.sklearn_hyper_dict import SklearnHyperDict\nfrom spotPython.fun.hypersklearn import HyperSklearn\n\n\n# core_model  = RidgeCV\n# core_model = GradientBoostingRegressor\n# core_model = ElasticNet\n# core_model = RandomForestClassifier\ncore_model = KNeighborsClassifier\n# core_model = LogisticRegression\n# core_model = KNeighborsClassifier\n# core_model = GradientBoostingClassifier\n# core_model = HistGradientBoostingClassifier\nfun_control = add_core_model_to_fun_control(core_model=core_model,\n                              fun_control=fun_control,\n                              hyper_dict=SklearnHyperDict,\n                              filename=None)\n\nNow fun_control has the information from the JSON file. The available hyperparameters are:\n\nprint(*fun_control[\"core_model_hyper_dict\"].keys(), sep=\"\\n\")\n\nn_neighbors\nweights\nalgorithm\nleaf_size\np"
  },
  {
    "objectID": "19_spot_hpt_sklearn_multiclass_classification_knn.html#step-6-modify-hyper_dict-hyperparameters-for-the-selected-algorithm-aka-core_model",
    "href": "19_spot_hpt_sklearn_multiclass_classification_knn.html#step-6-modify-hyper_dict-hyperparameters-for-the-selected-algorithm-aka-core_model",
    "title": "18  HPT: sklearn KNN Classifier VBDP Data",
    "section": "18.5 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model",
    "text": "18.5 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model\n\n18.5.1 Modify hyperparameter of type numeric and integer (boolean)\nNumeric and boolean values can be modified using the modify_hyper_parameter_bounds method. For example, to change the tol hyperparameter of the SVC model to the interval [1e-3, 1e-2], the following code can be used:\nfun_control = modify_hyper_parameter_bounds(fun_control, \"tol\", bounds=[1e-3, 1e-2])\n\n# from spotPython.hyperparameters.values import modify_hyper_parameter_bounds\n# fun_control = modify_hyper_parameter_bounds(fun_control, \"probability\", bounds=[1, 1])\n\n\n\n18.5.2 Modify hyperparameter of type factor\nspotPython provides functions for modifying the hyperparameters, their bounds and factors as well as for activating and de-activating hyperparameters without re-compilation of the Python source code. These functions were described in Section 14.6.\nFactors can be modified with the modify_hyper_parameter_levels function. For example, to exclude the sigmoid kernel from the tuning, the kernel hyperparameter of the SVC model can be modified as follows:\nfun_control = modify_hyper_parameter_levels(fun_control, \"kernel\", [\"linear\", \"rbf\"])\nThe new setting can be controlled via:\nfun_control[\"core_model_hyper_dict\"][\"kernel\"]\n\n# from spotPython.hyperparameters.values import modify_hyper_parameter_levels\n# fun_control = modify_hyper_parameter_levels(fun_control, \"kernel\", [\"rbf\"])\n\n\n\n18.5.3 Optimizers\nOptimizers are described in Section 14.6.1.\n\n\n18.5.4 Selection of the Objective: Metric and Loss Functions\n\nMachine learning models are optimized with respect to a metric, for example, the accuracy function.\nDeep learning, e.g., neural networks are optimized with respect to a loss function, for example, the cross_entropy function and evaluated with respect to a metric, for example, the accuracy function."
  },
  {
    "objectID": "19_spot_hpt_sklearn_multiclass_classification_knn.html#step-7-selection-of-the-objective-loss-function",
    "href": "19_spot_hpt_sklearn_multiclass_classification_knn.html#step-7-selection-of-the-objective-loss-function",
    "title": "18  HPT: sklearn KNN Classifier VBDP Data",
    "section": "18.6 Step 7: Selection of the Objective (Loss) Function",
    "text": "18.6 Step 7: Selection of the Objective (Loss) Function\nThe loss function, that is usually used in deep learning for optimizing the weights of the net, is stored in the fun_control dictionary as \"loss_function\".\n\n18.6.1 Metric Function\nThere are two different types of metrics in spotPython:\n\n\"metric_river\" is used for the river based evaluation via eval_oml_iter_progressive.\n\"metric_sklearn\" is used for the sklearn based evaluation.\n\nWe will consider multi-class classification metrics, e.g., mapk_score and top_k_accuracy_score.\n\n\n\n\n\n\nPredict Probabilities\n\n\n\nIn this multi-class classification example the machine learning algorithm should return the probabilities of the specific classes (\"predict_proba\") instead of the predicted values.\n\n\nWe set \"predict_proba\" to True in the fun_control dictionary.\n\n18.6.1.1 The MAPK Metric\nTo select the MAPK metric, the following two entries can be added to the fun_control dictionary:\n\"metric_sklearn\": mapk_score\"\n\"metric_params\": {\"k\": 3}.\n\n\n18.6.1.2 Other Metrics\nAlternatively, other metrics for multi-class classification can be used, e.g.,: * top_k_accuracy_score or * roc_auc_score\nThe metric roc_auc_score requires the parameter \"multi_class\", e.g.,\n\"multi_class\": \"ovr\".\nThis is set in the fun_control dictionary.\n\n\n\n\n\n\nWeights\n\n\n\nspotPython performs a minimization, therefore, metrics that should be maximized have to be multiplied by -1. This is done by setting \"weights\" to -1.\n\n\n\nThe complete setup for the metric in our example is:\n\n\nfrom spotPython.utils.metrics import mapk_score\nfun_control.update({\n               \"weights\": -1,\n               \"metric_sklearn\": mapk_score,\n               \"predict_proba\": True,\n               \"metric_params\": {\"k\": 3},\n               })\n\n\n\n\n18.6.2 Evaluation on Hold-out Data\n\nThe default method for computing the performance is \"eval_holdout\".\nAlternatively, cross-validation can be used for every machine learning model.\nSpecifically for RandomForests, the OOB-score can be used.\n\n\nfun_control.update({\n    \"eval\": \"train_hold_out\",\n})\n\n\n18.6.2.1 Cross Validation\nInstead of using the OOB-score, the classical cross validation can be used. The number of folds is set by the key \"k_folds\". For example, to use 5-fold cross validation, the key \"k_folds\" is set to 5. Uncomment the following line to use cross validation:\n\n# fun_control.update({\n#      \"eval\": \"train_cv\",\n#      \"k_folds\": 10,\n# })"
  },
  {
    "objectID": "19_spot_hpt_sklearn_multiclass_classification_knn.html#step-8-calling-the-spot-function",
    "href": "19_spot_hpt_sklearn_multiclass_classification_knn.html#step-8-calling-the-spot-function",
    "title": "18  HPT: sklearn KNN Classifier VBDP Data",
    "section": "18.7 Step 8: Calling the SPOT Function",
    "text": "18.7 Step 8: Calling the SPOT Function\n\n18.7.1 Preparing the SPOT Call\n\nGet types and variable names as well as lower and upper bounds for the hyperparameters.\n\n\n# extract the variable types, names, and bounds\nfrom spotPython.hyperparameters.values import (get_bound_values,\n    get_var_name,\n    get_var_type,)\nvar_type = get_var_type(fun_control)\nvar_name = get_var_name(fun_control)\nfun_control.update({\"var_type\": var_type,\n                    \"var_name\": var_name})\nlower = get_bound_values(fun_control, \"lower\")\nupper = get_bound_values(fun_control, \"upper\")\n\n\nfrom spotPython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control))\n\n| name        | type   | default   |   lower |   upper | transform             |\n|-------------|--------|-----------|---------|---------|-----------------------|\n| n_neighbors | int    | 2         |       1 |       7 | transform_power_2_int |\n| weights     | factor | uniform   |       0 |       1 | None                  |\n| algorithm   | factor | auto      |       0 |       3 | None                  |\n| leaf_size   | int    | 5         |       2 |       7 | transform_power_2_int |\n| p           | int    | 2         |       1 |       2 | None                  |\n\n\n\n\n18.7.2 The Objective Function\nThe objective function is selected next. It implements an interface from sklearn’s training, validation, and testing methods to spotPython.\n\nfrom spotPython.fun.hypersklearn import HyperSklearn\nfun = HyperSklearn().fun_sklearn\n\n\n\n18.7.3 Run the Spot Optimizer\n\nRun SPOT for approx. x mins (max_time).\nNote: the run takes longer, because the evaluation time of initial design (here: initi_size, 20 points) is not considered.\n\n\nfrom spotPython.hyperparameters.values import get_default_hyperparameters_as_array\nhyper_dict=SklearnHyperDict().load()\nX_start = get_default_hyperparameters_as_array(fun_control, hyper_dict)\nX_start\n\narray([[2, 0, 0, 5, 2]])\n\n\n\nimport numpy as np\nfrom spotPython.spot import spot\nfrom math import inf\nspot_tuner = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = inf,\n                   fun_repeats = 1,\n                   max_time = MAX_TIME,\n                   noise = False,\n                   tolerance_x = np.sqrt(np.spacing(1)),\n                   var_type = var_type,\n                   var_name = var_name,\n                   infill_criterion = \"y\",\n                   n_points = 1,\n                   seed=123,\n                   log_level = 50,\n                   show_models= False,\n                   show_progress= True,\n                   fun_control = fun_control,\n                   design_control={\"init_size\": INIT_SIZE,\n                                   \"repeats\": 1},\n                   surrogate_control={\"noise\": True,\n                                      \"cod_type\": \"norm\",\n                                      \"min_theta\": -4,\n                                      \"max_theta\": 3,\n                                      \"n_theta\": len(var_name),\n                                      \"model_fun_evals\": 10_000,\n                                      \"log_level\": 50\n                                      })\nspot_tuner.run(X_start=X_start)\n\nspotPython tuning: -0.3107769423558897 [----------] 0.72% \n\n\nspotPython tuning: -0.3107769423558897 [----------] 1.57% \n\n\nspotPython tuning: -0.3107769423558897 [----------] 2.37% \n\n\nspotPython tuning: -0.3107769423558897 [----------] 3.08% \n\n\nspotPython tuning: -0.3107769423558897 [----------] 3.85% \n\n\nspotPython tuning: -0.3107769423558897 [----------] 4.71% \n\n\nspotPython tuning: -0.3107769423558897 [#---------] 5.86% \n\n\nspotPython tuning: -0.3107769423558897 [#---------] 6.87% \n\n\nspotPython tuning: -0.3107769423558897 [#---------] 7.81% \n\n\nspotPython tuning: -0.3107769423558897 [#---------] 8.74% \n\n\nspotPython tuning: -0.3107769423558897 [#---------] 9.68% \n\n\nspotPython tuning: -0.3107769423558897 [#---------] 11.01% \n\n\nspotPython tuning: -0.3107769423558897 [#---------] 12.45% \n\n\nspotPython tuning: -0.3107769423558897 [#---------] 14.09% \n\n\nspotPython tuning: -0.3107769423558897 [##--------] 15.60% \n\n\nspotPython tuning: -0.3107769423558897 [##--------] 17.26% \n\n\nspotPython tuning: -0.3107769423558897 [##--------] 19.37% \n\n\nspotPython tuning: -0.3107769423558897 [##--------] 20.81% \n\n\nspotPython tuning: -0.3107769423558897 [##--------] 22.58% \n\n\nspotPython tuning: -0.3107769423558897 [##--------] 24.04% \n\n\nspotPython tuning: -0.3107769423558897 [###-------] 25.41% \n\n\nspotPython tuning: -0.3107769423558897 [###-------] 26.55% \n\n\nspotPython tuning: -0.3107769423558897 [###-------] 27.86% \n\n\nspotPython tuning: -0.3107769423558897 [###-------] 29.63% \n\n\nspotPython tuning: -0.3107769423558897 [###-------] 31.24% \n\n\nspotPython tuning: -0.3107769423558897 [###-------] 33.26% \n\n\nspotPython tuning: -0.3107769423558897 [###-------] 34.70% \n\n\nspotPython tuning: -0.3107769423558897 [####------] 36.30% \n\n\nspotPython tuning: -0.3107769423558897 [####------] 38.18% \n\n\nspotPython tuning: -0.3107769423558897 [####------] 40.03% \n\n\nspotPython tuning: -0.3107769423558897 [####------] 41.65% \n\n\nspotPython tuning: -0.3107769423558897 [####------] 43.50% \n\n\nspotPython tuning: -0.3107769423558897 [#####-----] 45.08% \n\n\nspotPython tuning: -0.3107769423558897 [#####-----] 47.00% \n\n\nspotPython tuning: -0.3107769423558897 [#####-----] 49.52% \n\n\nspotPython tuning: -0.3107769423558897 [#####-----] 51.86% \n\n\nspotPython tuning: -0.3107769423558897 [#####-----] 54.02% \n\n\nspotPython tuning: -0.3107769423558897 [######----] 56.66% \n\n\nspotPython tuning: -0.3107769423558897 [######----] 58.81% \n\n\nspotPython tuning: -0.3107769423558897 [######----] 61.02% \n\n\nspotPython tuning: -0.3107769423558897 [######----] 63.64% \n\n\nspotPython tuning: -0.3107769423558897 [#######---] 66.46% \n\n\nspotPython tuning: -0.3107769423558897 [#######---] 68.70% \n\n\nspotPython tuning: -0.3107769423558897 [#######---] 71.42% \n\n\nspotPython tuning: -0.3107769423558897 [#######---] 73.92% \n\n\nspotPython tuning: -0.3107769423558897 [########--] 76.62% \n\n\nspotPython tuning: -0.3107769423558897 [########--] 79.83% \n\n\nspotPython tuning: -0.3107769423558897 [########--] 82.78% \n\n\nspotPython tuning: -0.3107769423558897 [#########-] 85.95% \n\n\nspotPython tuning: -0.3107769423558897 [#########-] 89.53% \n\n\nspotPython tuning: -0.3107769423558897 [#########-] 92.74% \n\n\nspotPython tuning: -0.3107769423558897 [##########] 95.59% \n\n\nspotPython tuning: -0.3107769423558897 [##########] 97.94% \n\n\nspotPython tuning: -0.3107769423558897 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x18e9d8a60&gt;"
  },
  {
    "objectID": "19_spot_hpt_sklearn_multiclass_classification_knn.html#sec-tensorboard-19",
    "href": "19_spot_hpt_sklearn_multiclass_classification_knn.html#sec-tensorboard-19",
    "title": "18  HPT: sklearn KNN Classifier VBDP Data",
    "section": "18.8 Step 9: Tensorboard",
    "text": "18.8 Step 9: Tensorboard\nThe textual output shown in the console (or code cell) can be visualized with Tensorboard as described in Section 14.9, see also the description in the documentation: Tensorboard."
  },
  {
    "objectID": "19_spot_hpt_sklearn_multiclass_classification_knn.html#sec-results-tuning-19",
    "href": "19_spot_hpt_sklearn_multiclass_classification_knn.html#sec-results-tuning-19",
    "title": "18  HPT: sklearn KNN Classifier VBDP Data",
    "section": "18.9 Step 10: Results",
    "text": "18.9 Step 10: Results\nAfter the hyperparameter tuning run is finished, the progress of the hyperparameter tuning can be visualized. The following code generates the progress plot from ?fig-progress.\n\nspot_tuner.plot_progress(log_y=False,\n    filename=\"./figures/\" + experiment_name+\"_progress.png\")\n\n\n\n\nProgress plot. Black dots denote results from the initial design. Red dots illustrate the improvement found by the surrogate model based optimization.\n\n\n\n\n\nPrint the results\n\n\nprint(gen_design_table(fun_control=fun_control,\n    spot=spot_tuner))\n\n| name        | type   | default   |   lower |   upper |   tuned | transform             |   importance | stars   |\n|-------------|--------|-----------|---------|---------|---------|-----------------------|--------------|---------|\n| n_neighbors | int    | 2         |       1 |       7 |     4.0 | transform_power_2_int |         7.66 | *       |\n| weights     | factor | uniform   |       0 |       1 |     1.0 | None                  |       100.00 | ***     |\n| algorithm   | factor | auto      |       0 |       3 |     2.0 | None                  |         0.00 |         |\n| leaf_size   | int    | 5         |       2 |       7 |     6.0 | transform_power_2_int |         0.02 |         |\n| p           | int    | 2         |       1 |       2 |     1.0 | None                  |         0.01 |         |\n\n\n\n18.9.1 Show variable importance\n\nspot_tuner.plot_importance(threshold=0.025, filename=\"./figures/\" + experiment_name+\"_importance.png\")\n\n\n\n\nVariable importance plot, threshold 0.025.\n\n\n\n\n\n\n18.9.2 Get Default Hyperparameters\n\nfrom spotPython.hyperparameters.values import get_default_values, transform_hyper_parameter_values\nvalues_default = get_default_values(fun_control)\nvalues_default = transform_hyper_parameter_values(fun_control=fun_control, hyper_parameter_values=values_default)\nvalues_default\n\n{'n_neighbors': 4,\n 'weights': 'uniform',\n 'algorithm': 'auto',\n 'leaf_size': 32,\n 'p': 2}\n\n\n\nfrom sklearn.pipeline import make_pipeline\nmodel_default = make_pipeline(fun_control[\"prep_model\"], fun_control[\"core_model\"](**values_default))\nmodel_default\n\nPipeline(steps=[('nonetype', None),\n                ('kneighborsclassifier',\n                 KNeighborsClassifier(leaf_size=32, n_neighbors=4))])In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.PipelinePipeline(steps=[('nonetype', None),\n                ('kneighborsclassifier',\n                 KNeighborsClassifier(leaf_size=32, n_neighbors=4))])NoneNoneKNeighborsClassifierKNeighborsClassifier(leaf_size=32, n_neighbors=4)\n\n\n\n\n18.9.3 Get SPOT Results\n\nX = spot_tuner.to_all_dim(spot_tuner.min_X.reshape(1,-1))\nprint(X)\n\n[[4. 1. 2. 6. 1.]]\n\n\n\nfrom spotPython.hyperparameters.values import assign_values, return_conf_list_from_var_dict\nv_dict = assign_values(X, fun_control[\"var_name\"])\nreturn_conf_list_from_var_dict(var_dict=v_dict, fun_control=fun_control)\n\n[{'n_neighbors': 16,\n  'weights': 'distance',\n  'algorithm': 'kd_tree',\n  'leaf_size': 64,\n  'p': 1}]\n\n\n\nfrom spotPython.hyperparameters.values import get_one_sklearn_model_from_X\nmodel_spot = get_one_sklearn_model_from_X(X, fun_control)\nmodel_spot\n\nKNeighborsClassifier(algorithm='kd_tree', leaf_size=64, n_neighbors=16, p=1,\n                     weights='distance')In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.KNeighborsClassifierKNeighborsClassifier(algorithm='kd_tree', leaf_size=64, n_neighbors=16, p=1,\n                     weights='distance')\n\n\n\n\n18.9.4 Evaluate SPOT Results\n\nFetch the data.\n\n\nfrom spotPython.utils.convert import get_Xy_from_df\nX_train, y_train = get_Xy_from_df(fun_control[\"train\"], fun_control[\"target_column\"])\nX_test, y_test = get_Xy_from_df(fun_control[\"test\"], fun_control[\"target_column\"])\nX_test.shape, y_test.shape\n\n((177, 64), (177,))\n\n\n\nFit the model with the tuned hyperparameters. This gives one result:\n\n\nmodel_spot.fit(X_train, y_train)\ny_pred = model_spot.predict_proba(X_test)\nres = mapk_score(y_true=y_test, y_pred=y_pred, k=3)\nres\n\n0.3267419962335216\n\n\n\ndef repeated_eval(n, model):\n    res_values = []\n    for i in range(n):\n        model.fit(X_train, y_train)\n        y_pred = model.predict_proba(X_test)\n        res = mapk_score(y_true=y_test, y_pred=y_pred, k=3)\n        res_values.append(res)\n    mean_res = np.mean(res_values)\n    print(f\"mean_res: {mean_res}\")\n    std_res = np.std(res_values)\n    print(f\"std_res: {std_res}\")\n    min_res = np.min(res_values)\n    print(f\"min_res: {min_res}\")\n    max_res = np.max(res_values)\n    print(f\"max_res: {max_res}\")\n    median_res = np.median(res_values)\n    print(f\"median_res: {median_res}\")\n    return mean_res, std_res, min_res, max_res, median_res\n\n\n\n18.9.5 Handling Non-deterministic Results\n\nBecause the model is non-determinstic, we perform \\(n=30\\) runs and calculate the mean and standard deviation of the performance metric.\n\n\n_ = repeated_eval(30, model_spot)\n\nmean_res: 0.3267419962335218\nstd_res: 1.6653345369377348e-16\nmin_res: 0.3267419962335216\nmax_res: 0.3267419962335216\nmedian_res: 0.3267419962335216\n\n\n\n\n18.9.6 Evalution of the Default Hyperparameters\n\nmodel_default.fit(X_train, y_train)[\"kneighborsclassifier\"]\n\nKNeighborsClassifier(leaf_size=32, n_neighbors=4)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.KNeighborsClassifierKNeighborsClassifier(leaf_size=32, n_neighbors=4)\n\n\n\nOne evaluation of the default hyperparameters is performed on the hold-out test set.\n\n\ny_pred = model_default.predict_proba(X_test)\nmapk_score(y_true=y_test, y_pred=y_pred, k=3)\n\n0.2768361581920904\n\n\nSince one single evaluation is not meaningful, we perform, similar to the evaluation of the SPOT results, \\(n=30\\) runs of the default setting and and calculate the mean and standard deviation of the performance metric.\n\n_ = repeated_eval(30, model_default)\n\nmean_res: 0.2768361581920903\nstd_res: 1.1102230246251565e-16\nmin_res: 0.2768361581920904\nmax_res: 0.2768361581920904\nmedian_res: 0.2768361581920904\n\n\n\n\n18.9.7 Plot: Compare Predictions\n\nfrom spotPython.plot.validation import plot_confusion_matrix\nplot_confusion_matrix(model_default, fun_control, title = \"Default\")\n\n\n\n\n\nplot_confusion_matrix(model_spot, fun_control, title=\"SPOT\")\n\n\n\n\n\nmin(spot_tuner.y), max(spot_tuner.y)\n\n(-0.3107769423558897, -0.23558897243107768)\n\n\n\n\n18.9.8 Cross-validated Evaluations\n\nfrom spotPython.sklearn.traintest import evaluate_cv\nfun_control.update({\n     \"eval\": \"train_cv\",\n     \"k_folds\": 10,\n})\nevaluate_cv(model=model_spot, fun_control=fun_control, verbose=0)\n\n(0.3157232704402516, None)\n\n\n\nfun_control.update({\n     \"eval\": \"test_cv\",\n     \"k_folds\": 10,\n})\nevaluate_cv(model=model_spot, fun_control=fun_control, verbose=0)\n\n(0.2832788671023965, None)\n\n\n\nThis is the evaluation that will be used in the comparison:\n\n\nfun_control.update({\n     \"eval\": \"data_cv\",\n     \"k_folds\": 10,\n})\nevaluate_cv(model=model_spot, fun_control=fun_control, verbose=0)\n\n(0.3061904761904762, None)\n\n\n\n\n18.9.9 Detailed Hyperparameter Plots\n\nfilename = \"./figures/\" + experiment_name\nspot_tuner.plot_important_hyperparameter_contour(filename=filename)\n\nn_neighbors:  7.658019446927902\nweights:  100.0\n\n\n\n\n\n\n\n18.9.10 Parallel Coordinates Plot\n\nspot_tuner.parallel_plot()\n\n\n                                                \n\n\n\n\n18.9.11 Plot all Combinations of Hyperparameters\n\nWarning: this may take a while.\n\n\nPLOT_ALL = False\nif PLOT_ALL:\n    n = spot_tuner.k\n    for i in range(n-1):\n        for j in range(i+1, n):\n            spot_tuner.plot_contour(i=i, j=j, min_z=min_z, max_z = max_z)"
  },
  {
    "objectID": "24_spot_torch_regression.html#sec-setup-24",
    "href": "24_spot_torch_regression.html#sec-setup-24",
    "title": "19  HPT PyTorch: Regression",
    "section": "19.1 Step 1: Setup",
    "text": "19.1 Step 1: Setup\nBefore we consider the detailed experimental setup, we select the parameters that affect run time, initial design size and the device that is used.\n\n\n\n\n\n\nCaution: Run time and initial design size should be increased for real experiments\n\n\n\n\nMAX_TIME is set to one minute for demonstration purposes. For real experiments, this should be increased to at least 1 hour.\nINIT_SIZE is set to 5 for demonstration purposes. For real experiments, this should be increased to at least 10.\n\n\n\n\n\n\n\n\n\nNote: Device selection\n\n\n\n\nThe device can be selected by setting the variable DEVICE.\nSince we are using a simple neural net, the setting \"cpu\" is preferred (on Mac).\nIf you have a GPU, you can use \"cuda:0\" instead.\nIf DEVICE is set to None, spotPython will automatically select the device.\n\nThis might result in \"mps\" on Macs, which is not the best choice for simple neural nets.\n\n\n\n\n\nMAX_TIME = 1\nINIT_SIZE = 5\nDEVICE = \"cpu\" # \"cuda:0\"\n\n\nfrom spotPython.utils.device import getDevice\nDEVICE = getDevice(DEVICE)\nprint(DEVICE)\n\ncpu\n\n\n\nimport os\nimport copy\nimport socket\nfrom datetime import datetime\nfrom dateutil.tz import tzlocal\nstart_time = datetime.now(tzlocal())\nHOSTNAME = socket.gethostname().split(\".\")[0]\nexperiment_name = '24-torch' + \"_\" + HOSTNAME + \"_\" + str(MAX_TIME) + \"min_\" + str(INIT_SIZE) + \"init_\" + str(start_time).split(\".\", 1)[0].replace(' ', '_')\nexperiment_name = experiment_name.replace(':', '-')\nprint(experiment_name)\nif not os.path.exists('./figures'):\n    os.makedirs('./figures')\n\n24-torch_maans03_1min_5init_2023-07-03_13-07-02"
  },
  {
    "objectID": "24_spot_torch_regression.html#step-2-initialization-of-the-fun_control-dictionary",
    "href": "24_spot_torch_regression.html#step-2-initialization-of-the-fun_control-dictionary",
    "title": "19  HPT PyTorch: Regression",
    "section": "19.2 Step 2: Initialization of the fun_control Dictionary",
    "text": "19.2 Step 2: Initialization of the fun_control Dictionary\n\n\n\n\n\n\nCaution: Tensorboard does not work under Windows\n\n\n\n\nSince tensorboard does not work under Windows, we recommend setting the parameter tensorboard_path to None if you are working under Windows.\n\n\n\nspotPython uses a Python dictionary for storing the information required for the hyperparameter tuning process, which was described in Section 14.2.\n\nfrom spotPython.utils.init import fun_control_init\nfun_control = fun_control_init(task=\"regression\",\n tensorboard_path=\"runs/24_spot_torch_regression\",\n device=DEVICE)"
  },
  {
    "objectID": "24_spot_torch_regression.html#sec-data-loading-24",
    "href": "24_spot_torch_regression.html#sec-data-loading-24",
    "title": "19  HPT PyTorch: Regression",
    "section": "19.3 Step 3: PyTorch Data Loading",
    "text": "19.3 Step 3: PyTorch Data Loading\n\n# Create dataset\nimport pandas as pd\nimport numpy as np\nfrom sklearn import datasets as sklearn_datasets\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nX, y = sklearn_datasets.make_regression(\n    n_samples=1000, n_features=10, noise=1, random_state=123)\ny = y.reshape(-1, 1)\n\n# Normalize the data\nX_scaler = MinMaxScaler()\nX_scaled = X_scaler.fit_transform(X)\ny_scaler = MinMaxScaler()\ny_scaled = y_scaler.fit_transform(y)\n\n# combine the features and target into a single dataframe named train_df\ntrain_df = pd.DataFrame(np.hstack((X_scaled, y_scaled)))\n\ntarget_column = \"y\"\nn_samples = train_df.shape[0]\nn_features = train_df.shape[1] - 1\ntrain_df.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\nX_train, X_test, y_train, y_test = train_test_split(train_df.drop(target_column,\n    axis=1), \n    train_df[target_column],\n    random_state=42,\n    test_size=0.25)\ntrainset = pd.DataFrame(np.hstack((X_train, np.array(y_train).reshape(-1, 1))))\ntestset = pd.DataFrame(np.hstack((X_test, np.array(y_test).reshape(-1, 1))))\ntrainset.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\ntestset.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\nprint(train_df.shape)\nprint(trainset.shape)\nprint(testset.shape)\n\n(1000, 11)\n(750, 11)\n(250, 11)\n\n\n\nimport torch\nfrom spotPython.torch.dataframedataset import DataFrameDataset\ndtype_x = torch.float32\ndtype_y = torch.float32\ntrain_df = DataFrameDataset(train_df, target_column=target_column,\n    dtype_x=dtype_x, dtype_y=dtype_y)\ntrain = DataFrameDataset(trainset, target_column=target_column,\n    dtype_x=dtype_x, dtype_y=dtype_y)\ntest = DataFrameDataset(testset, target_column=target_column,\n    dtype_x=dtype_x, dtype_y=dtype_y)\nn_samples = len(train)\n\n\nNow we can test the data loading:\n\n\nfrom spotPython.torch.traintest import create_train_val_data_loaders\ntrainloader, testloader = create_train_val_data_loaders(train, 2, True, 0)\nfor i, data in enumerate(trainloader, 0):\n    inputs, labels = data\n    print(inputs.shape)\n    print(labels.shape)\n    print(inputs)\n    print(labels)\n    break\n\ntorch.Size([2, 10])\ntorch.Size([2])\ntensor([[0.3566, 0.2825, 0.4358, 0.5737, 0.3085, 0.4328, 0.4551, 0.5332, 0.3735,\n         0.4098],\n        [0.4123, 0.5197, 0.6590, 0.6292, 0.3662, 0.2946, 0.5570, 0.5681, 0.4320,\n         0.6783]])\ntensor([0.1767, 0.4051])\n\n\n\nSince this works fine, we can add the data loading to the fun_control dictionary:\n\n\n# add the dataset to the fun_control\nfun_control.update({\"data\": train_df, # full dataset,\n               \"train\": train,\n               \"test\": test,\n               \"n_samples\": n_samples,\n               \"target_column\": target_column,})"
  },
  {
    "objectID": "24_spot_torch_regression.html#sec-specification-of-preprocessing-model-24",
    "href": "24_spot_torch_regression.html#sec-specification-of-preprocessing-model-24",
    "title": "19  HPT PyTorch: Regression",
    "section": "19.4 Step 4: Specification of the Preprocessing Model",
    "text": "19.4 Step 4: Specification of the Preprocessing Model\nAfter the training and test data are specified and added to the fun_control dictionary, spotPython allows the specification of a data preprocessing pipeline, e.g., for the scaling of the data or for the one-hot encoding of categorical variables, see Section 14.4. This feature is not used here, so we do not change the default value (which is None)."
  },
  {
    "objectID": "24_spot_torch_regression.html#sec-selection-of-the-algorithm-24",
    "href": "24_spot_torch_regression.html#sec-selection-of-the-algorithm-24",
    "title": "19  HPT PyTorch: Regression",
    "section": "19.5 Step 5: Select Model (algorithm) and core_model_hyper_dict",
    "text": "19.5 Step 5: Select Model (algorithm) and core_model_hyper_dict\n\n19.5.1 Implementing a Configurable Neural Network With spotPython\nspotPython includes the Net_lin_reg class which is implemented in the file netregression.py.\nThis class inherits from the class Net_Core which is implemented in the file netcore.py, see Section 14.5.1.\nfrom torch import nn\nimport spotPython.torch.netcore as netcore\n\n\nclass Net_lin_reg(netcore.Net_Core):\n    def __init__(\n        self, _L_in, _L_out, l1, dropout_prob, lr_mult,\n        batch_size, epochs, k_folds, patience, optimizer,\n        sgd_momentum\n    ):\n        super(Net_lin_reg, self).__init__(\n            lr_mult=lr_mult,\n            batch_size=batch_size,\n            epochs=epochs,\n            k_folds=k_folds,\n            patience=patience,\n            optimizer=optimizer,\n            sgd_momentum=sgd_momentum,\n        )\n        l2 = max(l1 // 2, 4)\n        self.fc1 = nn.Linear(_L_in, l1)\n        self.fc2 = nn.Linear(l1, l2)\n        self.fc3 = nn.Linear(l2, _L_out)\n        self.relu = nn.ReLU()\n        self.softmax = nn.Softmax(dim=1)\n        self.dropout1 = nn.Dropout(p=dropout_prob)\n        self.dropout2 = nn.Dropout(p=dropout_prob / 2)\n\n    def forward(self, x):\n        x = self.fc1(x)\n        x = self.relu(x)\n        x = self.dropout1(x)\n        x = self.fc2(x)\n        x = self.relu(x)\n        x = self.dropout2(x)\n        x = self.fc3(x)\n        return x\n\n\n19.5.1.1 The Net_Core class\nNet_lin_reg inherits from the class Net_Core which is implemented in the file netcore.py. This class was described in Section 14.5.1.\n\nfrom spotPython.torch.netregression import Net_lin_reg\nfrom spotPython.data.torch_hyper_dict import TorchHyperDict\nfrom spotPython.hyperparameters.values import add_core_model_to_fun_control\nfun_control = add_core_model_to_fun_control(core_model=Net_lin_reg,\n                              fun_control=fun_control,\n                              hyper_dict=TorchHyperDict,\n                              filename=None)\n\n\n\n\n19.5.2 The Search Space\n\n\n19.5.3 Configuring the Search Space With spotPython\n\n19.5.3.1 The hyper_dict Hyperparameters for the Selected Algorithm\nspotPython uses JSON files for the specification of the hyperparameters, which were described in Section 14.5.5.\nThe corresponding entries for the core_model class are shown below.\n\nfun_control['core_model_hyper_dict']\n\n{'_L_in': {'type': 'int',\n  'default': 10,\n  'transform': 'None',\n  'lower': 10,\n  'upper': 10},\n '_L_out': {'type': 'int',\n  'default': 1,\n  'transform': 'None',\n  'lower': 1,\n  'upper': 1},\n 'l1': {'type': 'int',\n  'default': 3,\n  'transform': 'transform_power_2_int',\n  'lower': 3,\n  'upper': 8},\n 'dropout_prob': {'type': 'float',\n  'default': 0.01,\n  'transform': 'None',\n  'lower': 0.0,\n  'upper': 0.9},\n 'lr_mult': {'type': 'float',\n  'default': 1.0,\n  'transform': 'None',\n  'lower': 0.1,\n  'upper': 10.0},\n 'batch_size': {'type': 'int',\n  'default': 4,\n  'transform': 'transform_power_2_int',\n  'lower': 1,\n  'upper': 4},\n 'epochs': {'type': 'int',\n  'default': 4,\n  'transform': 'transform_power_2_int',\n  'lower': 4,\n  'upper': 9},\n 'k_folds': {'type': 'int',\n  'default': 1,\n  'transform': 'None',\n  'lower': 1,\n  'upper': 1},\n 'patience': {'type': 'int',\n  'default': 2,\n  'transform': 'transform_power_2_int',\n  'lower': 1,\n  'upper': 5},\n 'optimizer': {'levels': ['Adadelta',\n   'Adagrad',\n   'Adam',\n   'AdamW',\n   'SparseAdam',\n   'Adamax',\n   'ASGD',\n   'NAdam',\n   'RAdam',\n   'RMSprop',\n   'Rprop',\n   'SGD'],\n  'type': 'factor',\n  'default': 'SGD',\n  'transform': 'None',\n  'class_name': 'torch.optim',\n  'core_model_parameter_type': 'str',\n  'lower': 0,\n  'upper': 12},\n 'sgd_momentum': {'type': 'float',\n  'default': 0.0,\n  'transform': 'None',\n  'lower': 0.0,\n  'upper': 1.0}}"
  },
  {
    "objectID": "24_spot_torch_regression.html#sec-modification-of-hyperparameters-24",
    "href": "24_spot_torch_regression.html#sec-modification-of-hyperparameters-24",
    "title": "19  HPT PyTorch: Regression",
    "section": "19.6 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model",
    "text": "19.6 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model\nspotPython provides functions for modifying the hyperparameters, their bounds and factors as well as for activating and de-activating hyperparameters without re-compilation of the Python source code. These functions were described in Section 14.6.\n\n19.6.1 Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model\n\n19.6.1.1 Modify Hyperparameters of Type numeric and integer (boolean)\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_bounds\n\nfun_control = modify_hyper_parameter_bounds(fun_control, \"epochs\", bounds=[2, 16])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"patience\", bounds=[3, 7])\n\n\n\n19.6.1.2 Modify Hyperparameter of Type factor\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_levels\nfun_control = modify_hyper_parameter_levels(fun_control, \"optimizer\",\n    [\"Adadelta\", \"Adagrad\", \"Adam\", \"AdamW\", \"Adamax\", \"ASGD\", \"NAdam\"])\n\n\nfun_control.update({\n               \"_L_in\": n_features,\n               \"_L_out\": 1,})\n\n\n\n\n19.6.2 Optimizers\nOptimizers are described in Section 14.6.1."
  },
  {
    "objectID": "24_spot_torch_regression.html#step-7-selection-of-the-objective-loss-function",
    "href": "24_spot_torch_regression.html#step-7-selection-of-the-objective-loss-function",
    "title": "19  HPT PyTorch: Regression",
    "section": "19.7 Step 7: Selection of the Objective (Loss) Function",
    "text": "19.7 Step 7: Selection of the Objective (Loss) Function\n\n19.7.1 Evaluation\nThe evaluation procedure requires the specification of two elements:\n\nthe way how the data is split into a train and a test set (see Section 14.7.1)\nthe loss function (and a metric).\n\n\n\n19.7.2 Loss Functions and Metrics\nThe key \"loss_function\" specifies the loss function which is used during the optimization, see Section 14.7.5.\nWe will use MSE loss for the regression task.\n\nfrom torch.nn import MSELoss\nloss_torch = MSELoss()\nfun_control.update({\"loss_function\": loss_torch})\n\n\n\n19.7.3 Metric\n\nfrom torchmetrics import MeanAbsoluteError\nmetric_torch = MeanAbsoluteError().to(fun_control[\"device\"])\nfun_control.update({\"metric_torch\": metric_torch})"
  },
  {
    "objectID": "24_spot_torch_regression.html#step-8-calling-the-spot-function",
    "href": "24_spot_torch_regression.html#step-8-calling-the-spot-function",
    "title": "19  HPT PyTorch: Regression",
    "section": "19.8 Step 8: Calling the SPOT Function",
    "text": "19.8 Step 8: Calling the SPOT Function\n\n19.8.1 Preparing the SPOT Call\nThe following code passes the information about the parameter ranges and bounds to spot.\n\n# extract the variable types, names, and bounds\nfrom spotPython.hyperparameters.values import (get_bound_values,\n    get_var_name,\n    get_var_type,)\nvar_type = get_var_type(fun_control)\nvar_name = get_var_name(fun_control)\nfun_control.update({\"var_type\": var_type,\n                    \"var_name\": var_name})\nlower = get_bound_values(fun_control, \"lower\")\nupper = get_bound_values(fun_control, \"upper\")\n\n\nfrom spotPython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control))\n\n| name         | type   | default   |   lower |   upper | transform             |\n|--------------|--------|-----------|---------|---------|-----------------------|\n| _L_in        | int    | 10        |    10   |    10   | None                  |\n| _L_out       | int    | 1         |     1   |     1   | None                  |\n| l1           | int    | 3         |     3   |     8   | transform_power_2_int |\n| dropout_prob | float  | 0.01      |     0   |     0.9 | None                  |\n| lr_mult      | float  | 1.0       |     0.1 |    10   | None                  |\n| batch_size   | int    | 4         |     1   |     4   | transform_power_2_int |\n| epochs       | int    | 4         |     2   |    16   | transform_power_2_int |\n| k_folds      | int    | 1         |     1   |     1   | None                  |\n| patience     | int    | 2         |     3   |     7   | transform_power_2_int |\n| optimizer    | factor | SGD       |     0   |     6   | None                  |\n| sgd_momentum | float  | 0.0       |     0   |     1   | None                  |\n\n\n\n\n19.8.2 The Objective Function fun_torch\nThe objective function fun_torch is selected next. It implements an interface from PyTorch’s training, validation, and testing methods to spotPython.\n\nfrom spotPython.fun.hypertorch import HyperTorch\nfun = HyperTorch().fun_torch\n\n\nfrom spotPython.hyperparameters.values import get_default_hyperparameters_as_array\nhyper_dict=TorchHyperDict().load()\nX_start = get_default_hyperparameters_as_array(fun_control, hyper_dict)\n\n\n\n19.8.3 Starting the Hyperparameter Tuning\nThe spotPython hyperparameter tuning is started by calling the Spot function as described in Section 14.8.4.\n\nfrom spotPython.spot import spot\nfrom math import inf\nspot_tuner = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = inf,\n                   fun_repeats = 1,\n                   max_time = MAX_TIME,\n                   noise = False,\n                   tolerance_x = np.sqrt(np.spacing(1)),\n                   var_type = var_type,\n                   var_name = var_name,\n                   infill_criterion = \"y\",\n                   n_points = 1,\n                   seed=123,\n                   log_level = 50,\n                   show_models= False,\n                   show_progress= True,\n                   fun_control = fun_control,\n                   design_control={\"init_size\": INIT_SIZE,\n                                   \"repeats\": 1},\n                   surrogate_control={\"noise\": True,\n                                      \"cod_type\": \"norm\",\n                                      \"min_theta\": -4,\n                                      \"max_theta\": 3,\n                                      \"n_theta\": len(var_name),\n                                      \"model_fun_evals\": 10_000,\n                                      \"log_level\": 50\n                                      })\nspot_tuner.run(X_start=X_start)\n\n\nconfig: {'_L_in': 10, '_L_out': 1, 'l1': 64, 'dropout_prob': 0.7103122166156, 'lr_mult': 3.62368745191023, 'batch_size': 8, 'epochs': 128, 'k_folds': 1, 'patience': 16, 'optimizer': 'Adam', 'sgd_momentum': 0.5446851204405787}\nEpoch: 1 | \n\n\nMeanAbsoluteError: 0.1465502679347992 | Loss: 0.0343003983511344 | Epoch: 2 | MeanAbsoluteError: 0.1433185786008835 | Loss: 0.0325688291463609 | Epoch: 3 | \n\n\nMeanAbsoluteError: 0.1404336094856262 | Loss: 0.0299330577989550 | Epoch: 4 | MeanAbsoluteError: 0.1258818358182907 | Loss: 0.0255257219051648 | Epoch: 5 | \n\n\nMeanAbsoluteError: 0.1188727095723152 | Loss: 0.0235464455388290 | Epoch: 6 | MeanAbsoluteError: 0.1231291741132736 | Loss: 0.0247487991950230 | Epoch: 7 | \n\n\nMeanAbsoluteError: 0.1182753592729568 | Loss: 0.0222063015068048 | Epoch: 8 | MeanAbsoluteError: 0.1137692406773567 | Loss: 0.0213574432694402 | Epoch: 9 | \n\n\nMeanAbsoluteError: 0.1292541027069092 | Loss: 0.0255118774152116 | Epoch: 10 | MeanAbsoluteError: 0.1144954264163971 | Loss: 0.0200379248340859 | Epoch: 11 | \n\n\nMeanAbsoluteError: 0.1036395356059074 | Loss: 0.0182879555137142 | Epoch: 12 | MeanAbsoluteError: 0.1130254492163658 | Loss: 0.0209219976401839 | Epoch: 13 | \n\n\nMeanAbsoluteError: 0.1133170798420906 | Loss: 0.0217107345877019 | Epoch: 14 | MeanAbsoluteError: 0.1066759377717972 | Loss: 0.0187184988324972 | Epoch: 15 | \n\n\nMeanAbsoluteError: 0.1110114008188248 | Loss: 0.0201303499174843 | Epoch: 16 | MeanAbsoluteError: 0.1097626909613609 | Loss: 0.0190721750994654 | Epoch: 17 | \n\n\nMeanAbsoluteError: 0.1082964465022087 | Loss: 0.0198494462100299 | Epoch: 18 | MeanAbsoluteError: 0.1022551208734512 | Loss: 0.0169152787604712 | \n\n\nEpoch: 19 | MeanAbsoluteError: 0.1047790795564651 | Loss: 0.0172961684875190 | Epoch: 20 | MeanAbsoluteError: 0.1004447713494301 | Loss: 0.0171259393253805 | Epoch: 21 | \n\n\nMeanAbsoluteError: 0.0924532860517502 | Loss: 0.0140425119806375 | Epoch: 22 | \n\n\nMeanAbsoluteError: 0.1031959652900696 | Loss: 0.0186140003221992 | Epoch: 23 | MeanAbsoluteError: 0.0938113108277321 | Loss: 0.0150768763116120 | Epoch: 24 | \n\n\nMeanAbsoluteError: 0.0933983549475670 | Loss: 0.0144720881393081 | Epoch: 25 | \n\n\nMeanAbsoluteError: 0.0874785110354424 | Loss: 0.0137459026484162 | Epoch: 26 | MeanAbsoluteError: 0.0949684306979179 | Loss: 0.0159820871256096 | Epoch: 27 | MeanAbsoluteError: 0.0895402207970619 | Loss: 0.0133270176470672 | \n\n\nEpoch: 28 | \n\n\nMeanAbsoluteError: 0.0920959487557411 | Loss: 0.0142600782718019 | Epoch: 29 | MeanAbsoluteError: 0.0840932503342628 | Loss: 0.0116627598671537 | Epoch: 30 | MeanAbsoluteError: 0.0906529277563095 | Loss: 0.0137360144749676 | \n\n\nEpoch: 31 | MeanAbsoluteError: 0.0888112634420395 | Loss: 0.0130078479230992 | Epoch: 32 | \n\n\nMeanAbsoluteError: 0.0819668993353844 | Loss: 0.0119643201377537 | Epoch: 33 | MeanAbsoluteError: 0.0862467885017395 | Loss: 0.0129927315314202 | \n\n\nEpoch: 34 | MeanAbsoluteError: 0.0752064362168312 | Loss: 0.0100128317227293 | Epoch: 35 | MeanAbsoluteError: 0.0841168686747551 | Loss: 0.0125765538909227 | Epoch: 36 | \n\n\nMeanAbsoluteError: 0.0841892212629318 | Loss: 0.0122822045324076 | Epoch: 37 | \n\n\nMeanAbsoluteError: 0.0800836384296417 | Loss: 0.0118883071638840 | Epoch: 38 | MeanAbsoluteError: 0.0824426338076591 | Loss: 0.0121180862647873 | Epoch: 39 | MeanAbsoluteError: 0.0853315889835358 | Loss: 0.0125345584483033 | Epoch: 40 | \n\n\nMeanAbsoluteError: 0.0792756006121635 | Loss: 0.0111103206750398 | Epoch: 41 | \n\n\nMeanAbsoluteError: 0.0707920864224434 | Loss: 0.0094240001635626 | Epoch: 42 | MeanAbsoluteError: 0.0768285393714905 | Loss: 0.0106067246310168 | Epoch: 43 | MeanAbsoluteError: 0.0692230984568596 | Loss: 0.0081795909546169 | Epoch: 44 | \n\n\nMeanAbsoluteError: 0.0698742344975471 | Loss: 0.0089140196367608 | Epoch: 45 | \n\n\nMeanAbsoluteError: 0.0897505283355713 | Loss: 0.0127671012826460 | Epoch: 46 | MeanAbsoluteError: 0.0829731002449989 | Loss: 0.0120533580315839 | Epoch: 47 | MeanAbsoluteError: 0.0736887753009796 | Loss: 0.0098165841742517 | \n\n\nEpoch: 48 | MeanAbsoluteError: 0.0784743875265121 | Loss: 0.0095865090965833 | \n\n\nEpoch: 49 | MeanAbsoluteError: 0.0779817551374435 | Loss: 0.0114169973316357 | Epoch: 50 | \n\n\nMeanAbsoluteError: 0.0723554939031601 | Loss: 0.0093342512723451 | Epoch: 51 | \n\n\nMeanAbsoluteError: 0.0710147842764854 | Loss: 0.0090036800033168 | Epoch: 52 | MeanAbsoluteError: 0.0743891298770905 | Loss: 0.0111278193439112 | Epoch: 53 | MeanAbsoluteError: 0.0727041661739349 | Loss: 0.0103133383979041 | Epoch: 54 | \n\n\nMeanAbsoluteError: 0.0706437826156616 | Loss: 0.0097242977292473 | Epoch: 55 | \n\n\nMeanAbsoluteError: 0.0646881759166718 | Loss: 0.0088876342327383 | Epoch: 56 | MeanAbsoluteError: 0.0829079076647758 | Loss: 0.0128933832625319 | Epoch: 57 | MeanAbsoluteError: 0.0675030723214149 | Loss: 0.0083705220359231 | \n\n\nEpoch: 58 | MeanAbsoluteError: 0.0767833068966866 | Loss: 0.0099373241353437 | \n\n\nEpoch: 59 | MeanAbsoluteError: 0.0714833438396454 | Loss: 0.0100503236432192 | Early stopping at epoch 58\nReturned to Spot: Validation loss: 0.010050323643219216\n\nconfig: {'_L_in': 10, '_L_out': 1, 'l1': 32, 'dropout_prob': 0.19981931523998656, 'lr_mult': 7.004318498645526, 'batch_size': 16, 'epochs': 2048, 'k_folds': 1, 'patience': 32, 'optimizer': 'Adadelta', 'sgd_momentum': 0.07401195908206384}\nEpoch: 1 | MeanAbsoluteError: 0.2298645228147507 | Loss: 0.0723050262190794 | Epoch: 2 | \n\n\nMeanAbsoluteError: 0.1311577558517456 | Loss: 0.0276005463184495 | Epoch: 3 | MeanAbsoluteError: 0.1222146376967430 | Loss: 0.0238469290105920 | Epoch: 4 | \n\n\nMeanAbsoluteError: 0.1406924873590469 | Loss: 0.0298010570634353 | Epoch: 5 | MeanAbsoluteError: 0.1447687745094299 | Loss: 0.0306070074439049 | Epoch: 6 | MeanAbsoluteError: 0.1171868517994881 | Loss: 0.0211990836419557 | Epoch: 7 | MeanAbsoluteError: 0.1036706194281578 | Loss: 0.0170289297637187 | Epoch: 8 | MeanAbsoluteError: 0.1349335461854935 | Loss: 0.0267111237503980 | \n\n\nEpoch: 9 | MeanAbsoluteError: 0.0933966487646103 | Loss: 0.0132947640101376 | Epoch: 10 | \n\n\nMeanAbsoluteError: 0.1245425045490265 | Loss: 0.0230791570226613 | Epoch: 11 | MeanAbsoluteError: 0.0915151908993721 | Loss: 0.0135606373905351 | Epoch: 12 | MeanAbsoluteError: 0.1636169105768204 | Loss: 0.0340025353392488 | Epoch: 13 | MeanAbsoluteError: 0.0957288071513176 | Loss: 0.0143535225407073 | Epoch: 14 | MeanAbsoluteError: 0.1493275016546249 | Loss: 0.0307427759429342 | \n\n\nEpoch: 15 | MeanAbsoluteError: 0.1574276685714722 | Loss: 0.0327281426442297 | Epoch: 16 | MeanAbsoluteError: 0.0799869596958160 | Loss: 0.0095492583748541 | Epoch: 17 | \n\n\nMeanAbsoluteError: 0.0761413052678108 | Loss: 0.0090572702649393 | Epoch: 18 | MeanAbsoluteError: 0.1375507563352585 | Loss: 0.0265040458425095 | Epoch: 19 | MeanAbsoluteError: 0.1663704961538315 | Loss: 0.0342947627956930 | Epoch: 20 | MeanAbsoluteError: 0.0865119770169258 | Loss: 0.0105804685307176 | Epoch: 21 | \n\n\nMeanAbsoluteError: 0.0645374730229378 | Loss: 0.0066027457482721 | Epoch: 22 | MeanAbsoluteError: 0.0716007500886917 | Loss: 0.0083035270830518 | Epoch: 23 | MeanAbsoluteError: 0.0532590672373772 | Loss: 0.0049695630533327 | Epoch: 24 | \n\n\nMeanAbsoluteError: 0.0775581076741219 | Loss: 0.0082704918704143 | Epoch: 25 | MeanAbsoluteError: 0.0954759418964386 | Loss: 0.0141071457611887 | Epoch: 26 | MeanAbsoluteError: 0.0511733144521713 | Loss: 0.0045458936181508 | Epoch: 27 | MeanAbsoluteError: 0.0539892278611660 | Loss: 0.0053302555614592 | Epoch: 28 | \n\n\nMeanAbsoluteError: 0.0490333661437035 | Loss: 0.0041849723048998 | Epoch: 29 | MeanAbsoluteError: 0.1263512074947357 | Loss: 0.0196785601836286 | Epoch: 30 | MeanAbsoluteError: 0.1145513504743576 | Loss: 0.0166868288560133 | Epoch: 31 | \n\n\nMeanAbsoluteError: 0.0717080235481262 | Loss: 0.0082769460706530 | Epoch: 32 | MeanAbsoluteError: 0.0793527066707611 | Loss: 0.0103870619235462 | Epoch: 33 | MeanAbsoluteError: 0.0636511668562889 | Loss: 0.0060786533071414 | Epoch: 34 | MeanAbsoluteError: 0.0551659502089024 | Loss: 0.0057379902818387 | Epoch: 35 | \n\n\nMeanAbsoluteError: 0.0763480439782143 | Loss: 0.0092521949524158 | Epoch: 36 | MeanAbsoluteError: 0.0559752397239208 | Loss: 0.0056035308118321 | Epoch: 37 | MeanAbsoluteError: 0.0908609852194786 | Loss: 0.0110796308880182 | Epoch: 38 | \n\n\nMeanAbsoluteError: 0.0624473690986633 | Loss: 0.0056381771267441 | Epoch: 39 | MeanAbsoluteError: 0.0537531673908234 | Loss: 0.0047649907891786 | Epoch: 40 | MeanAbsoluteError: 0.0589927732944489 | Loss: 0.0058194381478978 | Epoch: 41 | MeanAbsoluteError: 0.0445129461586475 | Loss: 0.0032646789730183 | Epoch: 42 | \n\n\nMeanAbsoluteError: 0.0535773038864136 | Loss: 0.0046113730334726 | Epoch: 43 | MeanAbsoluteError: 0.0585017465054989 | Loss: 0.0065994161230169 | Epoch: 44 | MeanAbsoluteError: 0.1343590170145035 | Loss: 0.0217486551325572 | Epoch: 45 | \n\n\nMeanAbsoluteError: 0.0881341919302940 | Loss: 0.0101912020656623 | Epoch: 46 | MeanAbsoluteError: 0.0506394654512405 | Loss: 0.0040953639392300 | Epoch: 47 | MeanAbsoluteError: 0.0433488637208939 | Loss: 0.0031640424246066 | Epoch: 48 | MeanAbsoluteError: 0.0720015540719032 | Loss: 0.0075748084407104 | \n\n\nEpoch: 49 | MeanAbsoluteError: 0.0413276106119156 | Loss: 0.0031068314442803 | Epoch: 50 | MeanAbsoluteError: 0.0785648524761200 | Loss: 0.0080422553184785 | Epoch: 51 | MeanAbsoluteError: 0.0684561282396317 | Loss: 0.0077080047983480 | Epoch: 52 | \n\n\nMeanAbsoluteError: 0.0443604439496994 | Loss: 0.0030910904445734 | Epoch: 53 | MeanAbsoluteError: 0.0574641153216362 | Loss: 0.0045455167756269 | Epoch: 54 | MeanAbsoluteError: 0.0848084315657616 | Loss: 0.0096277989888270 | Epoch: 55 | \n\n\nMeanAbsoluteError: 0.0866882652044296 | Loss: 0.0095783900959711 | Epoch: 56 | MeanAbsoluteError: 0.0801673755049706 | Loss: 0.0086018133810476 | Epoch: 57 | MeanAbsoluteError: 0.0415003709495068 | Loss: 0.0029076966457069 | Epoch: 58 | MeanAbsoluteError: 0.0437917225062847 | Loss: 0.0038134715103201 | Epoch: 59 | \n\n\nMeanAbsoluteError: 0.0766886174678802 | Loss: 0.0097043512045945 | Epoch: 60 | MeanAbsoluteError: 0.0417851246893406 | Loss: 0.0030413038207610 | Epoch: 61 | MeanAbsoluteError: 0.0751864090561867 | Loss: 0.0072491896142693 | \n\n\nEpoch: 62 | MeanAbsoluteError: 0.0851616486907005 | Loss: 0.0100979880723906 | Epoch: 63 | MeanAbsoluteError: 0.0689888969063759 | Loss: 0.0078919382618838 | Epoch: 64 | MeanAbsoluteError: 0.0381616614758968 | Loss: 0.0027377061472323 | Epoch: 65 | MeanAbsoluteError: 0.0942744985222816 | Loss: 0.0108227148946179 | Epoch: 66 | \n\n\nMeanAbsoluteError: 0.0565058588981628 | Loss: 0.0048832347077367 | Epoch: 67 | MeanAbsoluteError: 0.0653484761714935 | Loss: 0.0059973378175575 | Epoch: 68 | \n\n\nMeanAbsoluteError: 0.0433216914534569 | Loss: 0.0037468733743912 | Epoch: 69 | MeanAbsoluteError: 0.0819345414638519 | Loss: 0.0093703104036027 | Epoch: 70 | MeanAbsoluteError: 0.0438974499702454 | Loss: 0.0034950638655573 | Epoch: 71 | MeanAbsoluteError: 0.0938752368092537 | Loss: 0.0110000211402382 | Epoch: 72 | MeanAbsoluteError: 0.0833513885736465 | Loss: 0.0088046958522969 | Epoch: 73 | \n\n\nMeanAbsoluteError: 0.0758317783474922 | Loss: 0.0091762362832302 | Epoch: 74 | MeanAbsoluteError: 0.0623837485909462 | Loss: 0.0060014659171238 | Epoch: 75 | \n\n\nMeanAbsoluteError: 0.0429614149034023 | Loss: 0.0029395381417616 | Epoch: 76 | MeanAbsoluteError: 0.0693752616643906 | Loss: 0.0077041397361379 | Epoch: 77 | MeanAbsoluteError: 0.0344431884586811 | Loss: 0.0022107944793166 | Epoch: 78 | MeanAbsoluteError: 0.0788850039243698 | Loss: 0.0104683409199903 | Epoch: 79 | MeanAbsoluteError: 0.0481766313314438 | Loss: 0.0036854942353736 | Epoch: 80 | \n\n\nMeanAbsoluteError: 0.0325442999601364 | Loss: 0.0020409580932832 | Epoch: 81 | MeanAbsoluteError: 0.0447830818593502 | Loss: 0.0032139029476399 | Epoch: 82 | \n\n\nMeanAbsoluteError: 0.0595495998859406 | Loss: 0.0062200540162035 | Epoch: 83 | MeanAbsoluteError: 0.0506231524050236 | Loss: 0.0046691363738654 | Epoch: 84 | MeanAbsoluteError: 0.0438967347145081 | Loss: 0.0027406412777246 | Epoch: 85 | MeanAbsoluteError: 0.0430453494191170 | Loss: 0.0032540942039831 | Epoch: 86 | MeanAbsoluteError: 0.0385330989956856 | Loss: 0.0028732616766846 | Epoch: 87 | \n\n\nMeanAbsoluteError: 0.0415843129158020 | Loss: 0.0029628015870817 | Epoch: 88 | MeanAbsoluteError: 0.0615296885371208 | Loss: 0.0067420810902197 | Epoch: 89 | \n\n\nMeanAbsoluteError: 0.0409345738589764 | Loss: 0.0030407296603938 | Epoch: 90 | MeanAbsoluteError: 0.0437403544783592 | Loss: 0.0034806847045394 | Epoch: 91 | MeanAbsoluteError: 0.0718301683664322 | Loss: 0.0083132274693957 | Epoch: 92 | MeanAbsoluteError: 0.0430223196744919 | Loss: 0.0028670883590454 | Epoch: 93 | MeanAbsoluteError: 0.0390532128512859 | Loss: 0.0029509935380989 | \n\n\nEpoch: 94 | MeanAbsoluteError: 0.0603561960160732 | Loss: 0.0057925927134133 | Epoch: 95 | MeanAbsoluteError: 0.0698826834559441 | Loss: 0.0068900385062749 | Epoch: 96 | \n\n\nMeanAbsoluteError: 0.1048073843121529 | Loss: 0.0131166071974133 | Epoch: 97 | MeanAbsoluteError: 0.0438184067606926 | Loss: 0.0037703027054177 | Epoch: 98 | MeanAbsoluteError: 0.0324225984513760 | Loss: 0.0021546576233385 | Epoch: 99 | MeanAbsoluteError: 0.0379888266324997 | Loss: 0.0027638493675592 | Epoch: 100 | \n\n\nMeanAbsoluteError: 0.0622935816645622 | Loss: 0.0052003516742077 | Epoch: 101 | MeanAbsoluteError: 0.0335472039878368 | Loss: 0.0027016623291849 | Epoch: 102 | MeanAbsoluteError: 0.0643774047493935 | Loss: 0.0066801846444019 | Epoch: 103 | \n\n\nMeanAbsoluteError: 0.0358759909868240 | Loss: 0.0025026529573982 | Epoch: 104 | MeanAbsoluteError: 0.0479043386876583 | Loss: 0.0031632323577804 | Epoch: 105 | MeanAbsoluteError: 0.0461565032601357 | Loss: 0.0036297049434660 | Epoch: 106 | \n\n\nMeanAbsoluteError: 0.0557995922863483 | Loss: 0.0040632623345836 | Epoch: 107 | MeanAbsoluteError: 0.0603315494954586 | Loss: 0.0056074119516109 | Epoch: 108 | MeanAbsoluteError: 0.0408070124685764 | Loss: 0.0029361801846933 | Epoch: 109 | MeanAbsoluteError: 0.0372107438743114 | Loss: 0.0022350637959071 | Epoch: 110 | \n\n\nMeanAbsoluteError: 0.0597605779767036 | Loss: 0.0055995307201029 | Epoch: 111 | MeanAbsoluteError: 0.0372264198958874 | Loss: 0.0024809391102999 | Epoch: 112 | MeanAbsoluteError: 0.0302692726254463 | Loss: 0.0020200722486295 | Epoch: 113 | \n\n\nMeanAbsoluteError: 0.0556732565164566 | Loss: 0.0044167078970196 | Epoch: 114 | MeanAbsoluteError: 0.0319532789289951 | Loss: 0.0020377111520104 | Epoch: 115 | MeanAbsoluteError: 0.0315410792827606 | Loss: 0.0020351166420273 | Epoch: 116 | MeanAbsoluteError: 0.0289837904274464 | Loss: 0.0017579200074052 | \n\n\nEpoch: 117 | MeanAbsoluteError: 0.0457379482686520 | Loss: 0.0030549824678976 | Epoch: 118 | MeanAbsoluteError: 0.0479692481458187 | Loss: 0.0035312132248165 | Epoch: 119 | MeanAbsoluteError: 0.0726120769977570 | Loss: 0.0088981146630096 | Epoch: 120 | \n\n\nMeanAbsoluteError: 0.0352841094136238 | Loss: 0.0021452760280992 | Epoch: 121 | MeanAbsoluteError: 0.0844720602035522 | Loss: 0.0092097637243569 | Epoch: 122 | MeanAbsoluteError: 0.0354913063347340 | Loss: 0.0021139433129544 | Epoch: 123 | \n\n\nMeanAbsoluteError: 0.0820707380771637 | Loss: 0.0088259873323535 | Epoch: 124 | MeanAbsoluteError: 0.0723874494433403 | Loss: 0.0084685692318568 | Epoch: 125 | MeanAbsoluteError: 0.0435980558395386 | Loss: 0.0027748649131115 | Epoch: 126 | MeanAbsoluteError: 0.0299818012863398 | Loss: 0.0018187495573473 | Epoch: 127 | \n\n\nMeanAbsoluteError: 0.0337663255631924 | Loss: 0.0024028556317238 | Epoch: 128 | MeanAbsoluteError: 0.0620326288044453 | Loss: 0.0059802178170924 | Epoch: 129 | MeanAbsoluteError: 0.0765396505594254 | Loss: 0.0102964709512889 | Epoch: 130 | \n\n\nMeanAbsoluteError: 0.0462801568210125 | Loss: 0.0033860426077521 | Epoch: 131 | MeanAbsoluteError: 0.0664553046226501 | Loss: 0.0052954085955494 | Epoch: 132 | MeanAbsoluteError: 0.0607513189315796 | Loss: 0.0059288451693168 | Epoch: 133 | MeanAbsoluteError: 0.0566596537828445 | Loss: 0.0041695506262936 | Epoch: 134 | \n\n\nMeanAbsoluteError: 0.0738382712006569 | Loss: 0.0068019349618178 | Epoch: 135 | MeanAbsoluteError: 0.0451808162033558 | Loss: 0.0032654718471397 | Epoch: 136 | MeanAbsoluteError: 0.0627372190356255 | Loss: 0.0058779554613131 | Epoch: 137 | \n\n\nMeanAbsoluteError: 0.0437181219458580 | Loss: 0.0029652392197596 | Epoch: 138 | MeanAbsoluteError: 0.0580667257308960 | Loss: 0.0058665504850643 | Epoch: 139 | MeanAbsoluteError: 0.0392470806837082 | Loss: 0.0024223542269809 | Epoch: 140 | MeanAbsoluteError: 0.0693906098604202 | Loss: 0.0063008509919439 | Epoch: 141 | \n\n\nMeanAbsoluteError: 0.0473736338317394 | Loss: 0.0043357821536790 | Epoch: 142 | MeanAbsoluteError: 0.0538762100040913 | Loss: 0.0046466826093628 | Epoch: 143 | MeanAbsoluteError: 0.0292934514582157 | Loss: 0.0015782496852090 | Epoch: 144 | \n\n\nMeanAbsoluteError: 0.0544405877590179 | Loss: 0.0050655248158268 | Epoch: 145 | MeanAbsoluteError: 0.0407013744115829 | Loss: 0.0028923121832409 | Epoch: 146 | MeanAbsoluteError: 0.0275894012302160 | Loss: 0.0014298474278276 | Epoch: 147 | MeanAbsoluteError: 0.0556350946426392 | Loss: 0.0045638380841793 | Epoch: 148 | \n\n\nMeanAbsoluteError: 0.0449847579002380 | Loss: 0.0032801519356374 | Epoch: 149 | MeanAbsoluteError: 0.0566510334610939 | Loss: 0.0055462677693485 | Epoch: 150 | MeanAbsoluteError: 0.0416226498782635 | Loss: 0.0027181418232718 | \n\n\nEpoch: 151 | MeanAbsoluteError: 0.0474987365305424 | Loss: 0.0038212974813130 | Epoch: 152 | MeanAbsoluteError: 0.0548770762979984 | Loss: 0.0048469587743871 | Epoch: 153 | MeanAbsoluteError: 0.0422151461243629 | Loss: 0.0031461943504646 | Epoch: 154 | MeanAbsoluteError: 0.0726694539189339 | Loss: 0.0088899297345626 | Epoch: 155 | \n\n\nMeanAbsoluteError: 0.0610570348799229 | Loss: 0.0050748230546321 | Epoch: 156 | MeanAbsoluteError: 0.0385513938963413 | Loss: 0.0026788482944922 | Epoch: 157 | \n\n\nMeanAbsoluteError: 0.0530892871320248 | Loss: 0.0049227942516537 | Epoch: 158 | MeanAbsoluteError: 0.0310471914708614 | Loss: 0.0017961909179576 | Epoch: 159 | MeanAbsoluteError: 0.0362704619765282 | Loss: 0.0021518998117627 | Epoch: 160 | MeanAbsoluteError: 0.0621766522526741 | Loss: 0.0055169100922189 | Epoch: 161 | MeanAbsoluteError: 0.0603983737528324 | Loss: 0.0064058644501002 | Epoch: 162 | \n\n\nMeanAbsoluteError: 0.0713345557451248 | Loss: 0.0070993927258410 | Epoch: 163 | \n\n\nMeanAbsoluteError: 0.0521365962922573 | Loss: 0.0039538823827905 | Epoch: 164 | MeanAbsoluteError: 0.0392248518764973 | Loss: 0.0029431987235225 | Epoch: 165 | MeanAbsoluteError: 0.0363257303833961 | Loss: 0.0024879901657665 | Epoch: 166 | MeanAbsoluteError: 0.0896980091929436 | Loss: 0.0127976233580787 | Epoch: 167 | MeanAbsoluteError: 0.0479886382818222 | Loss: 0.0031969212240687 | Epoch: 168 | \n\n\nMeanAbsoluteError: 0.0312237106263638 | Loss: 0.0018164984005699 | Epoch: 169 | \n\n\nMeanAbsoluteError: 0.0420375838875771 | Loss: 0.0025478645632240 | Epoch: 170 | MeanAbsoluteError: 0.0311065893620253 | Loss: 0.0019898864220044 | Epoch: 171 | MeanAbsoluteError: 0.0465169586241245 | Loss: 0.0035185340522347 | Epoch: 172 | MeanAbsoluteError: 0.0409976653754711 | Loss: 0.0026161860074162 | Epoch: 173 | MeanAbsoluteError: 0.0353823266923428 | Loss: 0.0022442561059602 | Epoch: 174 | MeanAbsoluteError: 0.1094226688146591 | Loss: 0.0159117877483368 | Epoch: 175 | \n\n\nMeanAbsoluteError: 0.0506212487816811 | Loss: 0.0036283952404598 | Epoch: 176 | \n\n\nMeanAbsoluteError: 0.0396159291267395 | Loss: 0.0026525409745150 | Epoch: 177 | MeanAbsoluteError: 0.0348135903477669 | Loss: 0.0026475669246314 | Epoch: 178 | MeanAbsoluteError: 0.0306412409991026 | Loss: 0.0016865455361671 | Early stopping at epoch 177\nReturned to Spot: Validation loss: 0.0016865455361671354\n\nconfig: {'_L_in': 10, '_L_out': 1, 'l1': 128, 'dropout_prob': 0.8582565260508446, 'lr_mult': 0.4977322453322358, 'batch_size': 2, 'epochs': 32768, 'k_folds': 1, 'patience': 128, 'optimizer': 'ASGD', 'sgd_momentum': 0.6834550718769361}\nEpoch: 1 | \n\n\nMeanAbsoluteError: 0.2102675139904022 | Loss: 0.0700052329490427 | Epoch: 2 | \n\n\nMeanAbsoluteError: 0.1902111917734146 | Loss: 0.0578029420127859 | Epoch: 3 | \n\n\nMeanAbsoluteError: 0.1704472601413727 | Loss: 0.0455920836143196 | Epoch: 4 | \n\n\nMeanAbsoluteError: 0.1693751066923141 | Loss: 0.0453828522380597 | Epoch: 5 | \n\n\nMeanAbsoluteError: 0.1519162058830261 | Loss: 0.0370325942806570 | Epoch: 6 | \n\n\nMeanAbsoluteError: 0.1647857576608658 | Loss: 0.0413459200109355 | Epoch: 7 | \n\n\nMeanAbsoluteError: 0.1444289833307266 | Loss: 0.0329250520459997 | Epoch: 8 | \n\n\nMeanAbsoluteError: 0.1495256125926971 | Loss: 0.0346060129922019 | Epoch: 9 | \n\n\nMeanAbsoluteError: 0.1445829421281815 | Loss: 0.0327894075153745 | Epoch: 10 | \n\n\nMeanAbsoluteError: 0.1404394507408142 | Loss: 0.0309249591022247 | Epoch: 11 | \n\n\nMeanAbsoluteError: 0.1367861032485962 | Loss: 0.0301508035687342 | Epoch: 12 | \n\n\nMeanAbsoluteError: 0.1403637528419495 | Loss: 0.0298146008420736 | Epoch: 13 | \n\n\nMeanAbsoluteError: 0.1421889811754227 | Loss: 0.0309560968841348 | Epoch: 14 | \n\n\nMeanAbsoluteError: 0.1355681270360947 | Loss: 0.0287911524920492 | Epoch: 15 | \n\n\nMeanAbsoluteError: 0.1322758793830872 | Loss: 0.0269071043825049 | Epoch: 16 | \n\n\nMeanAbsoluteError: 0.1372147947549820 | Loss: 0.0299760351347504 | Epoch: 17 | \n\n\nMeanAbsoluteError: 0.1334013938903809 | Loss: 0.0284501889260719 | Epoch: 18 | \n\n\nMeanAbsoluteError: 0.1335695087909698 | Loss: 0.0275006578292232 | Epoch: 19 | \n\n\nMeanAbsoluteError: 0.1363352984189987 | Loss: 0.0290654015521189 | Epoch: 20 | \n\n\nMeanAbsoluteError: 0.1326225101947784 | Loss: 0.0275961426610108 | Epoch: 21 | \n\n\nMeanAbsoluteError: 0.1369360089302063 | Loss: 0.0287218223907015 | Epoch: 22 | \n\n\nMeanAbsoluteError: 0.1323734968900681 | Loss: 0.0278122280626364 | Epoch: 23 | \n\n\nMeanAbsoluteError: 0.1373230367898941 | Loss: 0.0291733847224774 | Epoch: 24 | \n\n\nMeanAbsoluteError: 0.1348941922187805 | Loss: 0.0287413676993068 | Epoch: 25 | \n\n\nMeanAbsoluteError: 0.1398703008890152 | Loss: 0.0300548223855731 | Epoch: 26 | \n\n\nMeanAbsoluteError: 0.1359839737415314 | Loss: 0.0278233862900136 | Epoch: 27 | \n\n\nMeanAbsoluteError: 0.1371723413467407 | Loss: 0.0295950265634262 | Epoch: 28 | \n\n\nMeanAbsoluteError: 0.1320696026086807 | Loss: 0.0275795390935915 | Epoch: 29 | \n\n\nMeanAbsoluteError: 0.1351308971643448 | Loss: 0.0282096868621496 | Epoch: 30 | \n\n\nMeanAbsoluteError: 0.1336297243833542 | Loss: 0.0284704427943022 | Epoch: 31 | \n\n\nMeanAbsoluteError: 0.1294516921043396 | Loss: 0.0259481846124011 | Epoch: 32 | \n\n\nMeanAbsoluteError: 0.1316147893667221 | Loss: 0.0278283554319448 | Epoch: 33 | \n\n\nMeanAbsoluteError: 0.1346359699964523 | Loss: 0.0281896035256796 | Epoch: 34 | \n\n\nMeanAbsoluteError: 0.1319144815206528 | Loss: 0.0273319061663157 | Epoch: 35 | \n\n\nMeanAbsoluteError: 0.1326851397752762 | Loss: 0.0276891666042502 | Epoch: 36 | \n\n\nMeanAbsoluteError: 0.1345913410186768 | Loss: 0.0280713521813353 | Epoch: 37 | \n\n\nMeanAbsoluteError: 0.1326993554830551 | Loss: 0.0272130460611243 | Epoch: 38 | \n\n\nMeanAbsoluteError: 0.1354285031557083 | Loss: 0.0286762683039221 | Epoch: 39 | \n\n\nMeanAbsoluteError: 0.1343396306037903 | Loss: 0.0292079061026501 | Epoch: 40 | \n\n\nMeanAbsoluteError: 0.1323216855525970 | Loss: 0.0271999799676511 | Epoch: 41 | \n\n\nMeanAbsoluteError: 0.1359363347291946 | Loss: 0.0287333529506577 | Epoch: 42 | \n\n\nMeanAbsoluteError: 0.1383922100067139 | Loss: 0.0297411425444686 | Epoch: 43 | \n\n\nMeanAbsoluteError: 0.1332575231790543 | Loss: 0.0271407835496939 | Epoch: 44 | \n\n\nMeanAbsoluteError: 0.1348319053649902 | Loss: 0.0285623567773534 | Epoch: 45 | \n\n\nMeanAbsoluteError: 0.1325636655092239 | Loss: 0.0269271087023662 | Epoch: 46 | \n\n\nMeanAbsoluteError: 0.1323404908180237 | Loss: 0.0273918965288127 | Epoch: 47 | \n\n\nMeanAbsoluteError: 0.1314835548400879 | Loss: 0.0275082659434217 | Epoch: 48 | \n\n\nMeanAbsoluteError: 0.1325118839740753 | Loss: 0.0277585854500649 | Epoch: 49 | \n\n\nMeanAbsoluteError: 0.1351818889379501 | Loss: 0.0288086264085723 | Epoch: 50 | \n\n\nMeanAbsoluteError: 0.1328666657209396 | Loss: 0.0270632607707133 | Epoch: 51 | \n\n\nMeanAbsoluteError: 0.1315873265266418 | Loss: 0.0271051560469399 | Epoch: 52 | \n\n\nMeanAbsoluteError: 0.1309643387794495 | Loss: 0.0270515738606142 | Epoch: 53 | \n\n\nMeanAbsoluteError: 0.1308590173721313 | Loss: 0.0267266542107488 | Epoch: 54 | \n\n\nMeanAbsoluteError: 0.1291332244873047 | Loss: 0.0262955247475960 | Epoch: 55 | \n\n\nMeanAbsoluteError: 0.1332070380449295 | Loss: 0.0278715249624414 | Epoch: 56 | \n\n\nMeanAbsoluteError: 0.1315446794033051 | Loss: 0.0265039573529793 | Epoch: 57 | \n\n\nMeanAbsoluteError: 0.1346282660961151 | Loss: 0.0280348556671136 | Epoch: 58 | \n\n\nMeanAbsoluteError: 0.1319085508584976 | Loss: 0.0279327961548794 | Epoch: 59 | \n\n\nMeanAbsoluteError: 0.1346115320920944 | Loss: 0.0284140881807131 | Epoch: 60 | \n\n\nMeanAbsoluteError: 0.1329792886972427 | Loss: 0.0274519832962081 | Epoch: 61 | \n\n\nMeanAbsoluteError: 0.1313138455152512 | Loss: 0.0273683139205483 | Epoch: 62 | \n\n\nMeanAbsoluteError: 0.1324835121631622 | Loss: 0.0272303155153349 | Epoch: 63 | \n\n\nMeanAbsoluteError: 0.1308646500110626 | Loss: 0.0263581244484521 | Epoch: 64 | \n\n\nMeanAbsoluteError: 0.1340015381574631 | Loss: 0.0274037616678591 | Epoch: 65 | \n\n\nMeanAbsoluteError: 0.1322430223226547 | Loss: 0.0272585186181823 | Epoch: 66 | \n\n\nMeanAbsoluteError: 0.1358350366353989 | Loss: 0.0285829973557459 | Epoch: 67 | \n\n\nMeanAbsoluteError: 0.1313312202692032 | Loss: 0.0262801016263256 | Epoch: 68 | \n\n\nMeanAbsoluteError: 0.1326214373111725 | Loss: 0.0282333546235653 | Epoch: 69 | \n\n\nMeanAbsoluteError: 0.1294749230146408 | Loss: 0.0274280032874473 | Epoch: 70 | \n\n\nMeanAbsoluteError: 0.1334284991025925 | Loss: 0.0276461564169343 | Epoch: 71 | \n\n\nMeanAbsoluteError: 0.1350211650133133 | Loss: 0.0280860106343607 | Epoch: 72 | \n\n\nMeanAbsoluteError: 0.1288627386093140 | Loss: 0.0262988397310073 | Epoch: 73 | \n\n\nMeanAbsoluteError: 0.1258650571107864 | Loss: 0.0257986366617843 | Epoch: 74 | \n\n\nMeanAbsoluteError: 0.1320160180330276 | Loss: 0.0284305243047735 | Epoch: 75 | \n\n\nMeanAbsoluteError: 0.1315242499113083 | Loss: 0.0267569974019716 | Epoch: 76 | \n\n\nMeanAbsoluteError: 0.1270900815725327 | Loss: 0.0251626516123846 | Epoch: 77 | \n\n\nMeanAbsoluteError: 0.1290774196386337 | Loss: 0.0262120977829909 | Epoch: 78 | \n\n\nMeanAbsoluteError: 0.1323226839303970 | Loss: 0.0267147681474065 | Epoch: 79 | \n\n\nMeanAbsoluteError: 0.1293153911828995 | Loss: 0.0263596312516165 | Epoch: 80 | \n\n\nMeanAbsoluteError: 0.1291421055793762 | Loss: 0.0266981449957530 | Epoch: 81 | \n\n\nMeanAbsoluteError: 0.1317014396190643 | Loss: 0.0267117979713172 | Epoch: 82 | \n\n\nMeanAbsoluteError: 0.1329379826784134 | Loss: 0.0267283582722303 | Epoch: 83 | \n\n\nMeanAbsoluteError: 0.1293889582157135 | Loss: 0.0268393121918659 | Epoch: 84 | \n\n\nMeanAbsoluteError: 0.1289502680301666 | Loss: 0.0265247344132513 | Epoch: 85 | \n\n\nMeanAbsoluteError: 0.1309358477592468 | Loss: 0.0267960062957718 | Epoch: 86 | \n\n\nMeanAbsoluteError: 0.1339800208806992 | Loss: 0.0291091277476638 | Epoch: 87 | \n\n\nMeanAbsoluteError: 0.1306488364934921 | Loss: 0.0276701888881507 | Epoch: 88 | \n\n\nMeanAbsoluteError: 0.1269007325172424 | Loss: 0.0251975345493580 | Epoch: 89 | \n\n\nMeanAbsoluteError: 0.1317367702722549 | Loss: 0.0266242250544140 | Epoch: 90 | \n\n\nMeanAbsoluteError: 0.1306271106004715 | Loss: 0.0258505436492851 | Epoch: 91 | \n\n\nMeanAbsoluteError: 0.1257923096418381 | Loss: 0.0254803450923525 | Epoch: 92 | \n\n\nMeanAbsoluteError: 0.1319987326860428 | Loss: 0.0263663655910447 | Epoch: 93 | \n\n\nMeanAbsoluteError: 0.1297155171632767 | Loss: 0.0262844181972711 | Epoch: 94 | \n\n\nMeanAbsoluteError: 0.1282313317060471 | Loss: 0.0258336456426575 | Epoch: 95 | \n\n\nMeanAbsoluteError: 0.1305791288614273 | Loss: 0.0259409813903039 | Epoch: 96 | \n\n\nMeanAbsoluteError: 0.1299192458391190 | Loss: 0.0267952538813309 | Epoch: 97 | \n\n\nMeanAbsoluteError: 0.1337317526340485 | Loss: 0.0285358113419109 | Epoch: 98 | \n\n\nMeanAbsoluteError: 0.1359720528125763 | Loss: 0.0284682803261482 | Epoch: 99 | \n\n\nMeanAbsoluteError: 0.1368359178304672 | Loss: 0.0274737656553043 | Epoch: 100 | \n\n\nMeanAbsoluteError: 0.1246303915977478 | Loss: 0.0250178357934177 | Epoch: 101 | \n\n\nMeanAbsoluteError: 0.1314410716295242 | Loss: 0.0273502034942309 | Epoch: 102 | \n\n\nMeanAbsoluteError: 0.1310835480690002 | Loss: 0.0265947020305612 | Epoch: 103 | \n\n\nMeanAbsoluteError: 0.1256079375743866 | Loss: 0.0248133385669886 | Epoch: 104 | \n\n\nMeanAbsoluteError: 0.1273702085018158 | Loss: 0.0258738804601793 | Epoch: 105 | \n\n\nMeanAbsoluteError: 0.1329370141029358 | Loss: 0.0266674335473605 | Epoch: 106 | \n\n\nMeanAbsoluteError: 0.1300746947526932 | Loss: 0.0260796583358509 | Epoch: 107 | \n\n\nMeanAbsoluteError: 0.1262635737657547 | Loss: 0.0252232829822848 | Epoch: 108 | \n\n\nMeanAbsoluteError: 0.1316016614437103 | Loss: 0.0267054219685391 | Epoch: 109 | \n\n\nMeanAbsoluteError: 0.1257272958755493 | Loss: 0.0246715343375884 | Epoch: 110 | \n\n\nMeanAbsoluteError: 0.1216469556093216 | Loss: 0.0241570896546909 | Epoch: 111 | \n\n\nMeanAbsoluteError: 0.1300028711557388 | Loss: 0.0257637493615039 | Epoch: 112 | \n\n\nMeanAbsoluteError: 0.1254722923040390 | Loss: 0.0244095791159392 | Epoch: 113 | \n\n\nMeanAbsoluteError: 0.1247556433081627 | Loss: 0.0243579811501938 | Epoch: 114 | \n\n\nMeanAbsoluteError: 0.1298024356365204 | Loss: 0.0257387680254760 | Epoch: 115 | \n\n\nMeanAbsoluteError: 0.1292264163494110 | Loss: 0.0258599332454226 | Epoch: 116 | \n\n\nMeanAbsoluteError: 0.1263683587312698 | Loss: 0.0237060754367849 | Epoch: 117 | \n\n\nMeanAbsoluteError: 0.1295398175716400 | Loss: 0.0254856416733674 | Epoch: 118 | \n\n\nMeanAbsoluteError: 0.1306554675102234 | Loss: 0.0269362826354336 | Epoch: 119 | \n\n\nMeanAbsoluteError: 0.1246975362300873 | Loss: 0.0245332025622095 | Epoch: 120 | \n\n\nMeanAbsoluteError: 0.1276959031820297 | Loss: 0.0257547269590092 | Epoch: 121 | \n\n\nMeanAbsoluteError: 0.1313905268907547 | Loss: 0.0263389125947530 | Epoch: 122 | \n\n\nMeanAbsoluteError: 0.1308957487344742 | Loss: 0.0259577891469235 | Epoch: 123 | \n\n\nMeanAbsoluteError: 0.1270331889390945 | Loss: 0.0255616329296026 | Epoch: 124 | \n\n\nMeanAbsoluteError: 0.1258517652750015 | Loss: 0.0248064573726151 | Epoch: 125 | \n\n\nMeanAbsoluteError: 0.1281343549489975 | Loss: 0.0259041373229653 | Epoch: 126 | \n\n\nMeanAbsoluteError: 0.1216480880975723 | Loss: 0.0236343797259906 | Epoch: 127 | \n\n\nMeanAbsoluteError: 0.1280666887760162 | Loss: 0.0255383877176791 | Epoch: 128 | \n\n\nMeanAbsoluteError: 0.1275421082973480 | Loss: 0.0249033994598237 | Epoch: 129 | \n\n\nMeanAbsoluteError: 0.1286983937025070 | Loss: 0.0250221212751543 | Epoch: 130 | \n\n\nMeanAbsoluteError: 0.1285388320684433 | Loss: 0.0263967684063634 | Epoch: 131 | \n\n\nMeanAbsoluteError: 0.1292266100645065 | Loss: 0.0251264087326369 | Epoch: 132 | \n\n\nMeanAbsoluteError: 0.1295073479413986 | Loss: 0.0253726596887767 | Epoch: 133 | \n\n\nMeanAbsoluteError: 0.1279838830232620 | Loss: 0.0255606904519664 | Epoch: 134 | \n\n\nMeanAbsoluteError: 0.1300766915082932 | Loss: 0.0256406949323718 | Epoch: 135 | \n\n\nMeanAbsoluteError: 0.1244168356060982 | Loss: 0.0241338649195192 | Epoch: 136 | \n\n\nMeanAbsoluteError: 0.1242953985929489 | Loss: 0.0250053166821211 | Epoch: 137 | \n\n\nMeanAbsoluteError: 0.1281491816043854 | Loss: 0.0251866012951359 | Epoch: 138 | \n\n\nMeanAbsoluteError: 0.1280431002378464 | Loss: 0.0251377001110920 | Epoch: 139 | \n\n\nMeanAbsoluteError: 0.1248274371027946 | Loss: 0.0241240021228441 | Epoch: 140 | \n\n\nMeanAbsoluteError: 0.1227015554904938 | Loss: 0.0245439655071459 | Epoch: 141 | \n\n\nMeanAbsoluteError: 0.1298843622207642 | Loss: 0.0255411586355573 | Epoch: 142 | \n\n\nMeanAbsoluteError: 0.1220896765589714 | Loss: 0.0243916879071427 | Epoch: 143 | \n\n\nMeanAbsoluteError: 0.1272732764482498 | Loss: 0.0256080518243834 | Epoch: 144 | \n\n\nMeanAbsoluteError: 0.1272633075714111 | Loss: 0.0250219793947933 | Epoch: 145 | \n\n\nMeanAbsoluteError: 0.1243763342499733 | Loss: 0.0249034954612337 | Epoch: 146 | \n\n\nMeanAbsoluteError: 0.1276964098215103 | Loss: 0.0247417030789044 | Epoch: 147 | \n\n\nMeanAbsoluteError: 0.1216303780674934 | Loss: 0.0235365609275565 | Epoch: 148 | \n\n\nMeanAbsoluteError: 0.1283976584672928 | Loss: 0.0257982634430906 | Epoch: 149 | \n\n\nMeanAbsoluteError: 0.1304911673069000 | Loss: 0.0254237747793862 | Epoch: 150 | \n\n\nMeanAbsoluteError: 0.1330068707466125 | Loss: 0.0264143744669855 | Epoch: 151 | \n\n\nMeanAbsoluteError: 0.1230328232049942 | Loss: 0.0236413720425238 | Epoch: 152 | \n\n\nMeanAbsoluteError: 0.1269550323486328 | Loss: 0.0255889309786047 | Epoch: 153 | \n\n\nMeanAbsoluteError: 0.1303141266107559 | Loss: 0.0259740762907313 | Epoch: 154 | \n\n\nMeanAbsoluteError: 0.1235509589314461 | Loss: 0.0238506868071515 | Epoch: 155 | \n\n\nMeanAbsoluteError: 0.1253559440374374 | Loss: 0.0245093535417497 | Epoch: 156 | \n\n\nMeanAbsoluteError: 0.1231924667954445 | Loss: 0.0247702913483954 | Epoch: 157 | \n\n\nMeanAbsoluteError: 0.1295823603868484 | Loss: 0.0262727898198258 | Epoch: 158 | \n\n\nMeanAbsoluteError: 0.1278733760118484 | Loss: 0.0251748437492643 | Epoch: 159 | \n\n\nMeanAbsoluteError: 0.1199144199490547 | Loss: 0.0227695104174200 | Epoch: 160 | \n\n\nMeanAbsoluteError: 0.1252374053001404 | Loss: 0.0247888246475486 | Epoch: 161 | \n\n\nMeanAbsoluteError: 0.1227606311440468 | Loss: 0.0233336357145163 | Epoch: 162 | \n\n\nMeanAbsoluteError: 0.1273369789123535 | Loss: 0.0257185621307387 | Epoch: 163 | \n\n\nMeanAbsoluteError: 0.1237519830465317 | Loss: 0.0232765136946303 | Epoch: 164 | \n\n\nMeanAbsoluteError: 0.1229064166545868 | Loss: 0.0237345356884180 | Epoch: 165 | \n\n\nMeanAbsoluteError: 0.1262762397527695 | Loss: 0.0253981210764808 | Epoch: 166 | \n\n\nMeanAbsoluteError: 0.1281509995460510 | Loss: 0.0249654590317126 | Epoch: 167 | \n\n\nMeanAbsoluteError: 0.1239137649536133 | Loss: 0.0242376528247648 | Epoch: 168 | \n\n\nMeanAbsoluteError: 0.1230630204081535 | Loss: 0.0239877468943208 | Epoch: 169 | \n\n\nMeanAbsoluteError: 0.1247112378478050 | Loss: 0.0256065924063053 | Epoch: 170 | \n\n\nMeanAbsoluteError: 0.1229579001665115 | Loss: 0.0249163790212090 | Epoch: 171 | \n\n\nMeanAbsoluteError: 0.1241895556449890 | Loss: 0.0244219807383827 | Epoch: 172 | \n\n\nMeanAbsoluteError: 0.1243385672569275 | Loss: 0.0241788867663126 | Epoch: 173 | \n\n\nMeanAbsoluteError: 0.1253541409969330 | Loss: 0.0248438792563805 | Epoch: 174 | \n\n\nMeanAbsoluteError: 0.1242505386471748 | Loss: 0.0252868995567527 | Epoch: 175 | \n\n\nMeanAbsoluteError: 0.1203417703509331 | Loss: 0.0230033636144314 | Epoch: 176 | \n\n\nMeanAbsoluteError: 0.1245066076517105 | Loss: 0.0246181107750939 | Epoch: 177 | \n\n\nMeanAbsoluteError: 0.1221471279859543 | Loss: 0.0239063262273946 | Epoch: 178 | \n\n\nMeanAbsoluteError: 0.1234842538833618 | Loss: 0.0242254837757597 | Epoch: 179 | \n\n\nMeanAbsoluteError: 0.1209900826215744 | Loss: 0.0230126463896401 | Epoch: 180 | \n\n\nMeanAbsoluteError: 0.1258654892444611 | Loss: 0.0244968820097468 | Epoch: 181 | \n\n\nMeanAbsoluteError: 0.1274453699588776 | Loss: 0.0249511652763855 | Epoch: 182 | \n\n\nMeanAbsoluteError: 0.1274299621582031 | Loss: 0.0260672907218880 | Epoch: 183 | \n\n\nMeanAbsoluteError: 0.1197483167052269 | Loss: 0.0229019757693944 | Epoch: 184 | \n\n\nMeanAbsoluteError: 0.1219831183552742 | Loss: 0.0234900968522804 | Epoch: 185 | \n\n\nMeanAbsoluteError: 0.1258478760719299 | Loss: 0.0243632268416695 | Epoch: 186 | \n\n\nMeanAbsoluteError: 0.1289843916893005 | Loss: 0.0255433419044130 | Epoch: 187 | \n\n\nMeanAbsoluteError: 0.1220621392130852 | Loss: 0.0223041181580144 | Epoch: 188 | \n\n\nMeanAbsoluteError: 0.1205440238118172 | Loss: 0.0223933748658601 | Epoch: 189 | \n\n\nMeanAbsoluteError: 0.1234936118125916 | Loss: 0.0244739943884391 | Epoch: 190 | \n\n\nMeanAbsoluteError: 0.1201927065849304 | Loss: 0.0223184843539881 | Epoch: 191 | \n\n\nMeanAbsoluteError: 0.1359861940145493 | Loss: 0.0281348931079265 | Epoch: 192 | \n\n\nMeanAbsoluteError: 0.1225375011563301 | Loss: 0.0235323135276364 | Epoch: 193 | \n\n\nMeanAbsoluteError: 0.1156979724764824 | Loss: 0.0221839884005021 | Epoch: 194 | \n\n\nMeanAbsoluteError: 0.1230374276638031 | Loss: 0.0237839971993041 | Epoch: 195 | \n\n\nMeanAbsoluteError: 0.1287959814071655 | Loss: 0.0258700679007840 | Epoch: 196 | \n\n\nMeanAbsoluteError: 0.1242656931281090 | Loss: 0.0250640546331609 | Epoch: 197 | \n\n\nMeanAbsoluteError: 0.1216176822781563 | Loss: 0.0225814329611603 | Epoch: 198 | \n\n\nMeanAbsoluteError: 0.1183160766959190 | Loss: 0.0216939987466321 | Epoch: 199 | \n\n\nMeanAbsoluteError: 0.1174577325582504 | Loss: 0.0220731549389408 | Epoch: 200 | \n\n\nMeanAbsoluteError: 0.1178647205233574 | Loss: 0.0218637973417450 | Epoch: 201 | \n\n\nMeanAbsoluteError: 0.1207670569419861 | Loss: 0.0224049093275971 | Epoch: 202 | \n\n\nMeanAbsoluteError: 0.1222442239522934 | Loss: 0.0233788612563512 | Epoch: 203 | \n\n\nMeanAbsoluteError: 0.1254101097583771 | Loss: 0.0239695930171486 | Epoch: 204 | \n\n\nMeanAbsoluteError: 0.1194647103548050 | Loss: 0.0233337992228917 | Epoch: 205 | \n\n\nMeanAbsoluteError: 0.1226928457617760 | Loss: 0.0235651551392705 | Epoch: 206 | \n\n\nMeanAbsoluteError: 0.1238314583897591 | Loss: 0.0238619637972442 | Epoch: 207 | \n\n\nMeanAbsoluteError: 0.1176069006323814 | Loss: 0.0221152269300849 | Epoch: 208 | \n\n\nMeanAbsoluteError: 0.1229983121156693 | Loss: 0.0231393391072440 | Epoch: 209 | \n\n\nMeanAbsoluteError: 0.1220446676015854 | Loss: 0.0229629165236474 | Epoch: 210 | \n\n\nMeanAbsoluteError: 0.1209176108241081 | Loss: 0.0227465720652253 | Epoch: 211 | \n\n\nMeanAbsoluteError: 0.1284721046686172 | Loss: 0.0245805704874995 | Epoch: 212 | \n\n\nMeanAbsoluteError: 0.1285114139318466 | Loss: 0.0248372880018239 | Epoch: 213 | \n\n\nMeanAbsoluteError: 0.1275059878826141 | Loss: 0.0256342718140998 | Epoch: 214 | \n\n\nMeanAbsoluteError: 0.1207654848694801 | Loss: 0.0236312665033135 | Epoch: 215 | \n\n\nMeanAbsoluteError: 0.1192171126604080 | Loss: 0.0224707571422914 | Epoch: 216 | \n\n\nMeanAbsoluteError: 0.1203290522098541 | Loss: 0.0227653912679186 | Epoch: 217 | \n\n\nMeanAbsoluteError: 0.1214761883020401 | Loss: 0.0227677798597142 | Epoch: 218 | \n\n\nMeanAbsoluteError: 0.1233539208769798 | Loss: 0.0233017162022952 | Epoch: 219 | \n\n\nMeanAbsoluteError: 0.1244300305843353 | Loss: 0.0239834562751154 | Epoch: 220 | \n\n\nMeanAbsoluteError: 0.1210247576236725 | Loss: 0.0232080408688247 | Epoch: 221 | \n\n\nMeanAbsoluteError: 0.1149001941084862 | Loss: 0.0209321498541491 | Epoch: 222 | \n\n\nMeanAbsoluteError: 0.1260302066802979 | Loss: 0.0250623940417184 | Epoch: 223 | \n\n\nMeanAbsoluteError: 0.1296425759792328 | Loss: 0.0265303449663528 | Epoch: 224 | \n\n\nMeanAbsoluteError: 0.1263261884450912 | Loss: 0.0234201644613252 | Epoch: 225 | \n\n\nMeanAbsoluteError: 0.1197481378912926 | Loss: 0.0226027781875261 | Epoch: 226 | \n\n\nMeanAbsoluteError: 0.1205332800745964 | Loss: 0.0218801511206160 | Epoch: 227 | \n\n\nMeanAbsoluteError: 0.1243117749691010 | Loss: 0.0235715339456995 | Epoch: 228 | \n\n\nMeanAbsoluteError: 0.1212009415030479 | Loss: 0.0236190035902352 | Epoch: 229 | \n\n\nMeanAbsoluteError: 0.1238471493124962 | Loss: 0.0242575536294316 | Epoch: 230 | \n\n\nMeanAbsoluteError: 0.1184770092368126 | Loss: 0.0239081451293896 | Epoch: 231 | \n\n\nMeanAbsoluteError: 0.1209292635321617 | Loss: 0.0224181624354484 | Epoch: 232 | \n\n\nMeanAbsoluteError: 0.1230580285191536 | Loss: 0.0245733254488247 | Epoch: 233 | \n\n\nMeanAbsoluteError: 0.1239335536956787 | Loss: 0.0228608987199307 | Epoch: 234 | \n\n\nMeanAbsoluteError: 0.1182504147291183 | Loss: 0.0217470101684254 | Epoch: 235 | \n\n\nMeanAbsoluteError: 0.1203619986772537 | Loss: 0.0224266062828125 | Epoch: 236 | \n\n\nMeanAbsoluteError: 0.1190977096557617 | Loss: 0.0228768746853651 | Epoch: 237 | \n\n\nMeanAbsoluteError: 0.1222894787788391 | Loss: 0.0225844189309282 | Epoch: 238 | \n\n\nMeanAbsoluteError: 0.1228785216808319 | Loss: 0.0245114814394522 | Epoch: 239 | \n\n\nMeanAbsoluteError: 0.1206199228763580 | Loss: 0.0224941258190665 | Epoch: 240 | \n\n\nMeanAbsoluteError: 0.1278737038373947 | Loss: 0.0247227553539172 | Epoch: 241 | \n\n\nMeanAbsoluteError: 0.1167895644903183 | Loss: 0.0211972226358436 | Epoch: 242 | \n\n\nMeanAbsoluteError: 0.1184048876166344 | Loss: 0.0216626869243555 | Epoch: 243 | \n\n\nMeanAbsoluteError: 0.1244337484240532 | Loss: 0.0245967773436132 | Epoch: 244 | \n\n\nMeanAbsoluteError: 0.1168437972664833 | Loss: 0.0211213659144899 | Epoch: 245 | \n\n\nMeanAbsoluteError: 0.1190522983670235 | Loss: 0.0220293253432828 | Epoch: 246 | \n\n\nMeanAbsoluteError: 0.1138084158301353 | Loss: 0.0211509681826283 | Epoch: 247 | \n\n\nMeanAbsoluteError: 0.1150573864579201 | Loss: 0.0218722552771214 | Epoch: 248 | \n\n\nMeanAbsoluteError: 0.1180302798748016 | Loss: 0.0220100900266940 | Epoch: 249 | \n\n\nMeanAbsoluteError: 0.1220537573099136 | Loss: 0.0230908026724258 | Epoch: 250 | \n\n\nMeanAbsoluteError: 0.1188417300581932 | Loss: 0.0225336065472220 | Epoch: 251 | \n\n\nMeanAbsoluteError: 0.1138249188661575 | Loss: 0.0200077641700530 | Epoch: 252 | \n\n\nMeanAbsoluteError: 0.1161041930317879 | Loss: 0.0206555419291059 | Epoch: 253 | \n\n\nMeanAbsoluteError: 0.1129278019070625 | Loss: 0.0196378064693029 | Epoch: 254 | \n\n\nMeanAbsoluteError: 0.1191969439387321 | Loss: 0.0217842380475486 | Epoch: 255 | \n\n\nMeanAbsoluteError: 0.1178955957293510 | Loss: 0.0217673723236658 | Epoch: 256 | \n\n\nMeanAbsoluteError: 0.1225695312023163 | Loss: 0.0235642511541179 | Epoch: 257 | \n\n\nMeanAbsoluteError: 0.1189354062080383 | Loss: 0.0221451033592651 | Epoch: 258 | \n\n\nMeanAbsoluteError: 0.1159379482269287 | Loss: 0.0209394718445643 | Epoch: 259 | \n\n\nMeanAbsoluteError: 0.1145046129822731 | Loss: 0.0207393894296062 | Epoch: 260 | \n\n\nMeanAbsoluteError: 0.1135144531726837 | Loss: 0.0209288315546170 | Epoch: 261 | \n\n\nMeanAbsoluteError: 0.1143190860748291 | Loss: 0.0212320348639635 | Epoch: 262 | \n\n\nMeanAbsoluteError: 0.1203311905264854 | Loss: 0.0223308805727963 | Epoch: 263 | \n\n\nMeanAbsoluteError: 0.1187510788440704 | Loss: 0.0223521757698230 | Epoch: 264 | \n\n\nMeanAbsoluteError: 0.1112951263785362 | Loss: 0.0194042576799984 | Epoch: 265 | \n\n\nMeanAbsoluteError: 0.1200256124138832 | Loss: 0.0220208585454384 | Epoch: 266 | \n\n\nMeanAbsoluteError: 0.1108825802803040 | Loss: 0.0195892313580650 | Epoch: 267 | \n\n\nMeanAbsoluteError: 0.1140665039420128 | Loss: 0.0212596434280082 | Epoch: 268 | \n\n\nMeanAbsoluteError: 0.1138576492667198 | Loss: 0.0208727094482553 | Epoch: 269 | \n\n\nMeanAbsoluteError: 0.1228623837232590 | Loss: 0.0229354494923246 | Epoch: 270 | \n\n\nMeanAbsoluteError: 0.1239947527647018 | Loss: 0.0235173111618496 | Epoch: 271 | \n\n\nMeanAbsoluteError: 0.1184322088956833 | Loss: 0.0215539103346722 | Epoch: 272 | \n\n\nMeanAbsoluteError: 0.1139651089906693 | Loss: 0.0196214106114424 | Epoch: 273 | \n\n\nMeanAbsoluteError: 0.1161968633532524 | Loss: 0.0205856080231024 | Epoch: 274 | \n\n\nMeanAbsoluteError: 0.1189232617616653 | Loss: 0.0228102921399598 | Epoch: 275 | \n\n\nMeanAbsoluteError: 0.1183187365531921 | Loss: 0.0211991970293457 | Epoch: 276 | \n\n\nMeanAbsoluteError: 0.1199806481599808 | Loss: 0.0214618806982374 | Epoch: 277 | \n\n\nMeanAbsoluteError: 0.1160579398274422 | Loss: 0.0213208495988996 | Epoch: 278 | \n\n\nMeanAbsoluteError: 0.1179701387882233 | Loss: 0.0215897889621556 | Epoch: 279 | \n\n\nMeanAbsoluteError: 0.1227130219340324 | Loss: 0.0238527893999011 | Epoch: 280 | \n\n\nMeanAbsoluteError: 0.1229173764586449 | Loss: 0.0231404031535688 | Epoch: 281 | \n\n\nMeanAbsoluteError: 0.1178055182099342 | Loss: 0.0214884666224680 | Epoch: 282 | \n\n\nMeanAbsoluteError: 0.1166307330131531 | Loss: 0.0213225198407114 | Epoch: 283 | \n\n\nMeanAbsoluteError: 0.1184815838932991 | Loss: 0.0224593540875135 | Epoch: 284 | \n\n\nMeanAbsoluteError: 0.1215936392545700 | Loss: 0.0226987398487593 | Epoch: 285 | \n\n\nMeanAbsoluteError: 0.1152554228901863 | Loss: 0.0212227753332506 | Epoch: 286 | \n\n\nMeanAbsoluteError: 0.1137505620718002 | Loss: 0.0205230907607135 | Epoch: 287 | \n\n\nMeanAbsoluteError: 0.1227038577198982 | Loss: 0.0233315011995728 | Epoch: 288 | \n\n\nMeanAbsoluteError: 0.1172978356480598 | Loss: 0.0216168211314653 | Epoch: 289 | \n\n\nMeanAbsoluteError: 0.1165268421173096 | Loss: 0.0219216217240319 | Epoch: 290 | \n\n\nMeanAbsoluteError: 0.1112872809171677 | Loss: 0.0201413721899735 | Epoch: 291 | \n\n\nMeanAbsoluteError: 0.1169391870498657 | Loss: 0.0211478150009740 | Epoch: 292 | \n\n\nMeanAbsoluteError: 0.1087261065840721 | Loss: 0.0187534253972990 | Epoch: 293 | \n\n\nMeanAbsoluteError: 0.1149894446134567 | Loss: 0.0205256762765930 | Epoch: 294 | \n\n\nMeanAbsoluteError: 0.1132562011480331 | Loss: 0.0200840635438605 | Epoch: 295 | \n\n\nMeanAbsoluteError: 0.1164590567350388 | Loss: 0.0211450988286621 | Epoch: 296 | \n\n\nMeanAbsoluteError: 0.1234339922666550 | Loss: 0.0227225621935456 | Epoch: 297 | \n\n\nMeanAbsoluteError: 0.1213747635483742 | Loss: 0.0218261067468363 | Epoch: 298 | \n\n\nMeanAbsoluteError: 0.1127093881368637 | Loss: 0.0206090404669521 | Epoch: 299 | \n\n\nMeanAbsoluteError: 0.1139312908053398 | Loss: 0.0207886384594409 | Epoch: 300 | \n\n\nMeanAbsoluteError: 0.1185982152819633 | Loss: 0.0210673390916781 | Epoch: 301 | \n\n\nMeanAbsoluteError: 0.1100021600723267 | Loss: 0.0195816084379718 | Epoch: 302 | \n\n\nMeanAbsoluteError: 0.1146771907806396 | Loss: 0.0209409156637654 | Epoch: 303 | \n\n\nMeanAbsoluteError: 0.1114989444613457 | Loss: 0.0204456535896558 | Epoch: 304 | \n\n\nMeanAbsoluteError: 0.1060042157769203 | Loss: 0.0182423085901731 | Epoch: 305 | \n\n\nMeanAbsoluteError: 0.1107240915298462 | Loss: 0.0195195720785220 | Epoch: 306 | \n\n\nMeanAbsoluteError: 0.1152724325656891 | Loss: 0.0207731267367975 | Epoch: 307 | \n\n\nMeanAbsoluteError: 0.1147233545780182 | Loss: 0.0200741056437255 | Epoch: 308 | \n\n\nMeanAbsoluteError: 0.1116947531700134 | Loss: 0.0197723196629280 | Epoch: 309 | \n\n\nMeanAbsoluteError: 0.1184227392077446 | Loss: 0.0224489457386274 | Epoch: 310 | \n\n\nMeanAbsoluteError: 0.1177092269062996 | Loss: 0.0216322571821608 | Epoch: 311 | \n\n\nMeanAbsoluteError: 0.1190647482872009 | Loss: 0.0211090057645924 | Epoch: 312 | \n\n\nMeanAbsoluteError: 0.1083347573876381 | Loss: 0.0184748093901483 | Epoch: 313 | \n\n\nMeanAbsoluteError: 0.1128053441643715 | Loss: 0.0201024182817491 | Epoch: 314 | \n\n\nMeanAbsoluteError: 0.1107850670814514 | Loss: 0.0195984465022048 | Epoch: 315 | \n\n\nMeanAbsoluteError: 0.1091450899839401 | Loss: 0.0194626172037533 | Epoch: 316 | \n\n\nMeanAbsoluteError: 0.1038403734564781 | Loss: 0.0178249661163697 | Epoch: 317 | \n\n\nMeanAbsoluteError: 0.1171389669179916 | Loss: 0.0213841378810654 | Epoch: 318 | \n\n\nMeanAbsoluteError: 0.1109480038285255 | Loss: 0.0190781150546779 | Epoch: 319 | \n\n\nMeanAbsoluteError: 0.1136367172002792 | Loss: 0.0201267168830236 | Epoch: 320 | \n\n\nMeanAbsoluteError: 0.1172280088067055 | Loss: 0.0222621215877977 | Epoch: 321 | \n\n\nMeanAbsoluteError: 0.1155606955289841 | Loss: 0.0203938189101367 | Epoch: 322 | \n\n\nMeanAbsoluteError: 0.1099353805184364 | Loss: 0.0197518191332347 | Epoch: 323 | \n\n\nMeanAbsoluteError: 0.1141984686255455 | Loss: 0.0202540502073528 | Epoch: 324 | \n\n\nMeanAbsoluteError: 0.1124569475650787 | Loss: 0.0196308325407639 | Epoch: 325 | \n\n\nMeanAbsoluteError: 0.1116140782833099 | Loss: 0.0194612937883358 | Epoch: 326 | \n\n\nMeanAbsoluteError: 0.1172863021492958 | Loss: 0.0207787396640651 | Epoch: 327 | \n\n\nMeanAbsoluteError: 0.1136894226074219 | Loss: 0.0197656322567491 | Epoch: 328 | \n\n\nMeanAbsoluteError: 0.1135412752628326 | Loss: 0.0206906095358621 | Epoch: 329 | \n\n\nMeanAbsoluteError: 0.1099154949188232 | Loss: 0.0195675870151839 | Epoch: 330 | \n\n\nMeanAbsoluteError: 0.1114951446652412 | Loss: 0.0194799950518548 | Epoch: 331 | \n\n\nMeanAbsoluteError: 0.1203667297959328 | Loss: 0.0221433327442113 | Epoch: 332 | \n\n\nMeanAbsoluteError: 0.1172201782464981 | Loss: 0.0214955961201728 | Epoch: 333 | \n\n\nMeanAbsoluteError: 0.1101076230406761 | Loss: 0.0190324027752195 | Epoch: 334 | \n\n\nMeanAbsoluteError: 0.1202044039964676 | Loss: 0.0217025208938867 | Epoch: 335 | \n\n\nMeanAbsoluteError: 0.1143727004528046 | Loss: 0.0203296812928844 | Epoch: 336 | \n\n\nMeanAbsoluteError: 0.1074640005826950 | Loss: 0.0183476901652345 | Epoch: 337 | \n\n\nMeanAbsoluteError: 0.1090474724769592 | Loss: 0.0196792662288256 | Epoch: 338 | \n\n\nMeanAbsoluteError: 0.1105525046586990 | Loss: 0.0194957763344185 | Epoch: 339 | \n\n\nMeanAbsoluteError: 0.1099732816219330 | Loss: 0.0199719384095321 | Epoch: 340 | \n\n\nMeanAbsoluteError: 0.1112416237592697 | Loss: 0.0185751687509279 | Epoch: 341 | \n\n\nMeanAbsoluteError: 0.1115840375423431 | Loss: 0.0185860737370482 | Epoch: 342 | \n\n\nMeanAbsoluteError: 0.1100447699427605 | Loss: 0.0185696589054229 | Epoch: 343 | \n\n\nMeanAbsoluteError: 0.1146142706274986 | Loss: 0.0205673177303591 | Epoch: 344 | \n\n\nMeanAbsoluteError: 0.1180334240198135 | Loss: 0.0215321239770856 | Epoch: 345 | \n\n\nMeanAbsoluteError: 0.1154225170612335 | Loss: 0.0203762664787549 | Epoch: 346 | \n\n\nMeanAbsoluteError: 0.1113865002989769 | Loss: 0.0198626081445642 | Epoch: 347 | \n\n\nMeanAbsoluteError: 0.1113539114594460 | Loss: 0.0185956120409537 | Epoch: 348 | \n\n\nMeanAbsoluteError: 0.1109112277626991 | Loss: 0.0204713044206437 | Epoch: 349 | \n\n\nMeanAbsoluteError: 0.1102373898029327 | Loss: 0.0183471426501637 | Epoch: 350 | \n\n\nMeanAbsoluteError: 0.1079941317439079 | Loss: 0.0178741592704925 | Epoch: 351 | \n\n\nMeanAbsoluteError: 0.1133004501461983 | Loss: 0.0195486071342990 | Epoch: 352 | \n\n\nMeanAbsoluteError: 0.1091309711337090 | Loss: 0.0192581023531966 | Epoch: 353 | \n\n\nMeanAbsoluteError: 0.1106746271252632 | Loss: 0.0197598629271670 | Epoch: 354 | \n\n\nMeanAbsoluteError: 0.1061421483755112 | Loss: 0.0183699913645008 | Epoch: 355 | \n\n\nMeanAbsoluteError: 0.1197916194796562 | Loss: 0.0237493675776447 | Epoch: 356 | \n\n\nMeanAbsoluteError: 0.1131652444601059 | Loss: 0.0199773004423817 | Epoch: 357 | \n\n\nMeanAbsoluteError: 0.1060523763298988 | Loss: 0.0176641216907107 | Epoch: 358 | \n\n\nMeanAbsoluteError: 0.1121506020426750 | Loss: 0.0201430348924381 | Epoch: 359 | \n\n\nMeanAbsoluteError: 0.1088513806462288 | Loss: 0.0181910248589944 | Epoch: 360 | \n\n\nMeanAbsoluteError: 0.1114470958709717 | Loss: 0.0202714130242627 | Epoch: 361 | \n\n\nMeanAbsoluteError: 0.1084359213709831 | Loss: 0.0181774812148069 | Epoch: 362 | \n\n\nMeanAbsoluteError: 0.1131586357951164 | Loss: 0.0202884888344367 | Epoch: 363 | \n\n\nMeanAbsoluteError: 0.1085071936249733 | Loss: 0.0186360509012593 | Epoch: 364 | \n\n\nMeanAbsoluteError: 0.1097636669874191 | Loss: 0.0193709138991350 | Epoch: 365 | \n\n\nMeanAbsoluteError: 0.1120966821908951 | Loss: 0.0196423731649217 | Epoch: 366 | \n\n\nMeanAbsoluteError: 0.1163576766848564 | Loss: 0.0211185560436570 | Epoch: 367 | \n\n\nMeanAbsoluteError: 0.1069724559783936 | Loss: 0.0182413802355101 | Epoch: 368 | \n\n\nMeanAbsoluteError: 0.1158574447035789 | Loss: 0.0215859119286082 | Epoch: 369 | \n\n\nMeanAbsoluteError: 0.1151331961154938 | Loss: 0.0217689722171053 | Epoch: 370 | \n\n\nMeanAbsoluteError: 0.1170153692364693 | Loss: 0.0213258852182965 | Epoch: 371 | \n\n\nMeanAbsoluteError: 0.1130115613341331 | Loss: 0.0207253134681378 | Epoch: 372 | \n\n\nMeanAbsoluteError: 0.1014262735843658 | Loss: 0.0172444242029451 | Epoch: 373 | \n\n\nMeanAbsoluteError: 0.1079891100525856 | Loss: 0.0187004893554240 | Epoch: 374 | \n\n\nMeanAbsoluteError: 0.1104081496596336 | Loss: 0.0190538861916866 | Epoch: 375 | \n\n\nMeanAbsoluteError: 0.1107673421502113 | Loss: 0.0193246308959594 | Epoch: 376 | \n\n\nMeanAbsoluteError: 0.1056442558765411 | Loss: 0.0185647574392654 | Epoch: 377 | \n\n\nMeanAbsoluteError: 0.1040799021720886 | Loss: 0.0178372529238307 | Epoch: 378 | \n\n\nMeanAbsoluteError: 0.1148910671472549 | Loss: 0.0208913113199136 | Epoch: 379 | \n\n\nMeanAbsoluteError: 0.1141818091273308 | Loss: 0.0201505185857726 | Epoch: 380 | \n\n\nMeanAbsoluteError: 0.1101194769144058 | Loss: 0.0184993584140223 | Epoch: 381 | \n\n\nMeanAbsoluteError: 0.1112821325659752 | Loss: 0.0191732752729877 | Epoch: 382 | \n\n\nMeanAbsoluteError: 0.1083045080304146 | Loss: 0.0184835520648024 | Epoch: 383 | \n\n\nMeanAbsoluteError: 0.1031277924776077 | Loss: 0.0176558217865992 | Epoch: 384 | \n\n\nMeanAbsoluteError: 0.1162542626261711 | Loss: 0.0206359932509561 | Epoch: 385 | \n\n\nMeanAbsoluteError: 0.1100053116679192 | Loss: 0.0186747396927482 | Epoch: 386 | \n\n\nMeanAbsoluteError: 0.1042319014668465 | Loss: 0.0172732980792838 | Epoch: 387 | \n\n\nMeanAbsoluteError: 0.1054554954171181 | Loss: 0.0179135237121469 | Epoch: 388 | \n\n\nMeanAbsoluteError: 0.1136918142437935 | Loss: 0.0205074256897691 | Epoch: 389 | \n\n\nMeanAbsoluteError: 0.1144536435604095 | Loss: 0.0207948570311419 | Epoch: 390 | \n\n\nMeanAbsoluteError: 0.1063778251409531 | Loss: 0.0184382278054788 | Epoch: 391 | \n\n\nMeanAbsoluteError: 0.1093017458915710 | Loss: 0.0189151251932102 | Epoch: 392 | \n\n\nMeanAbsoluteError: 0.1103127673268318 | Loss: 0.0189185671649708 | Epoch: 393 | \n\n\nMeanAbsoluteError: 0.1163487210869789 | Loss: 0.0204652114893058 | Epoch: 394 | \n\n\nMeanAbsoluteError: 0.1059659570455551 | Loss: 0.0175768491303218 | Epoch: 395 | \n\n\nMeanAbsoluteError: 0.1061762496829033 | Loss: 0.0181319024823764 | Epoch: 396 | \n\n\nMeanAbsoluteError: 0.1082430258393288 | Loss: 0.0174185658502392 | Epoch: 397 | \n\n\nMeanAbsoluteError: 0.1135094985365868 | Loss: 0.0197790348138369 | Epoch: 398 | \n\n\nMeanAbsoluteError: 0.1118199303746223 | Loss: 0.0194046005930674 | Epoch: 399 | \n\n\nMeanAbsoluteError: 0.1096143499016762 | Loss: 0.0186319853877406 | Epoch: 400 | \n\n\nMeanAbsoluteError: 0.1098315417766571 | Loss: 0.0194485069151627 | Epoch: 401 | \n\n\nMeanAbsoluteError: 0.1078771948814392 | Loss: 0.0183863855820285 | Epoch: 402 | \n\n\nMeanAbsoluteError: 0.0985797420144081 | Loss: 0.0162425671764019 | Epoch: 403 | \n\n\nMeanAbsoluteError: 0.1073623374104500 | Loss: 0.0179628877468834 | Epoch: 404 | \n\n\nMeanAbsoluteError: 0.1028630584478378 | Loss: 0.0178884074802530 | Epoch: 405 | \n\n\nMeanAbsoluteError: 0.1082184761762619 | Loss: 0.0183466988605990 | Epoch: 406 | \n\n\nMeanAbsoluteError: 0.1104218661785126 | Loss: 0.0186570576659869 | Epoch: 407 | \n\n\nMeanAbsoluteError: 0.1006022244691849 | Loss: 0.0165893402691775 | Epoch: 408 | \n\n\nMeanAbsoluteError: 0.1080789044499397 | Loss: 0.0184906883639148 | Epoch: 409 | \n\n\nMeanAbsoluteError: 0.1065803915262222 | Loss: 0.0179645125131841 | Epoch: 410 | \n\n\nMeanAbsoluteError: 0.1124235391616821 | Loss: 0.0203065908331579 | Epoch: 411 | \n\n\nMeanAbsoluteError: 0.1093000248074532 | Loss: 0.0191671217917368 | Epoch: 412 | \n\n\nMeanAbsoluteError: 0.0966078862547874 | Loss: 0.0152736370590342 | Epoch: 413 | \n\n\nMeanAbsoluteError: 0.1038100868463516 | Loss: 0.0168429692335970 | Epoch: 414 | \n\n\nMeanAbsoluteError: 0.1072236746549606 | Loss: 0.0186142792037572 | Epoch: 415 | \n\n\nMeanAbsoluteError: 0.1052646860480309 | Loss: 0.0174917519066366 | Epoch: 416 | \n\n\nMeanAbsoluteError: 0.1088057681918144 | Loss: 0.0178884330691653 | Epoch: 417 | \n\n\nMeanAbsoluteError: 0.1104790866374969 | Loss: 0.0196447814899147 | Epoch: 418 | \n\n\nMeanAbsoluteError: 0.1005770936608315 | Loss: 0.0154605810453844 | Epoch: 419 | \n\n\nMeanAbsoluteError: 0.1070555001497269 | Loss: 0.0177700087717191 | Epoch: 420 | \n\n\nMeanAbsoluteError: 0.1097387820482254 | Loss: 0.0189863474376034 | Epoch: 421 | \n\n\nMeanAbsoluteError: 0.1024144440889359 | Loss: 0.0170932739910495 | Epoch: 422 | \n\n\nMeanAbsoluteError: 0.1085557937622070 | Loss: 0.0188421526051631 | Epoch: 423 | \n\n\nMeanAbsoluteError: 0.1129229366779327 | Loss: 0.0197384734790921 | Epoch: 424 | \n\n\nMeanAbsoluteError: 0.1020447090268135 | Loss: 0.0154831843953192 | Epoch: 425 | \n\n\nMeanAbsoluteError: 0.0974431484937668 | Loss: 0.0144806950667165 | Epoch: 426 | \n\n\nMeanAbsoluteError: 0.1066611930727959 | Loss: 0.0182443831500132 | Epoch: 427 | \n\n\nMeanAbsoluteError: 0.1082078516483307 | Loss: 0.0186480926018339 | Epoch: 428 | \n\n\nMeanAbsoluteError: 0.1127255484461784 | Loss: 0.0199842765862316 | Epoch: 429 | \n\n\nMeanAbsoluteError: 0.1010202616453171 | Loss: 0.0157428803886554 | Epoch: 430 | \n\n\nMeanAbsoluteError: 0.1073424816131592 | Loss: 0.0184276818295863 | Epoch: 431 | \n\n\nMeanAbsoluteError: 0.1078823879361153 | Loss: 0.0189910158392740 | Epoch: 432 | \n\n\nMeanAbsoluteError: 0.1061350405216217 | Loss: 0.0182186201614483 | Epoch: 433 | \n\n\nMeanAbsoluteError: 0.1050368621945381 | Loss: 0.0174774029051089 | Epoch: 434 | \n\n\nMeanAbsoluteError: 0.1022097021341324 | Loss: 0.0176141184859898 | Epoch: 435 | \n\n\nMeanAbsoluteError: 0.1035732775926590 | Loss: 0.0170162531867815 | Epoch: 436 | \n\n\nMeanAbsoluteError: 0.1107955649495125 | Loss: 0.0189139174593341 | Epoch: 437 | \n\n\nMeanAbsoluteError: 0.1076001003384590 | Loss: 0.0181775151464778 | Epoch: 438 | \n\n\nMeanAbsoluteError: 0.1103157550096512 | Loss: 0.0180585617210212 | Epoch: 439 | \n\n\nMeanAbsoluteError: 0.0987242907285690 | Loss: 0.0166644142848478 | Epoch: 440 | \n\n\nMeanAbsoluteError: 0.1042128056287766 | Loss: 0.0178156605951032 | Epoch: 441 | \n\n\nMeanAbsoluteError: 0.1036315336823463 | Loss: 0.0166473287887250 | Epoch: 442 | \n\n\nMeanAbsoluteError: 0.1042812764644623 | Loss: 0.0168682512188874 | Epoch: 443 | \n\n\nMeanAbsoluteError: 0.1039046868681908 | Loss: 0.0169052274274388 | Epoch: 444 | \n\n\nMeanAbsoluteError: 0.1005613729357719 | Loss: 0.0171008928685236 | Epoch: 445 | \n\n\nMeanAbsoluteError: 0.1089297086000443 | Loss: 0.0185141705477387 | Epoch: 446 | \n\n\nMeanAbsoluteError: 0.1029682159423828 | Loss: 0.0170057015290270 | Epoch: 447 | \n\n\nMeanAbsoluteError: 0.1019812151789665 | Loss: 0.0172717804495763 | Epoch: 448 | \n\n\nMeanAbsoluteError: 0.1016053408384323 | Loss: 0.0168519639029788 | Epoch: 449 | \n\n\nMeanAbsoluteError: 0.1032952666282654 | Loss: 0.0174556447161497 | Epoch: 450 | \n\n\nMeanAbsoluteError: 0.1090637966990471 | Loss: 0.0194075546173553 | Epoch: 451 | \n\n\nMeanAbsoluteError: 0.0968510285019875 | Loss: 0.0153647898138782 | Epoch: 452 | \n\n\nMeanAbsoluteError: 0.1080319434404373 | Loss: 0.0181882659715605 | Epoch: 453 | \n\n\nMeanAbsoluteError: 0.1026531010866165 | Loss: 0.0165582563802794 | Epoch: 454 | \n\n\nMeanAbsoluteError: 0.1027656644582748 | Loss: 0.0169871264434187 | Epoch: 455 | \n\n\nMeanAbsoluteError: 0.1030584499239922 | Loss: 0.0182213424418417 | Epoch: 456 | \n\n\nMeanAbsoluteError: 0.1050972566008568 | Loss: 0.0176845944045878 | Epoch: 457 | \n\n\nMeanAbsoluteError: 0.1082886606454849 | Loss: 0.0188664381343794 | Epoch: 458 | \n\n\nMeanAbsoluteError: 0.1030610427260399 | Loss: 0.0168680448738936 | Epoch: 459 | \n\n\nMeanAbsoluteError: 0.1062390878796577 | Loss: 0.0176622357205391 | Epoch: 460 | \n\n\nMeanAbsoluteError: 0.1010513603687286 | Loss: 0.0160592330798924 | Epoch: 461 | \n\n\nMeanAbsoluteError: 0.1037242189049721 | Loss: 0.0175088923414781 | Epoch: 462 | \n\n\nMeanAbsoluteError: 0.0996847227215767 | Loss: 0.0162871328825895 | Epoch: 463 | \n\n\nMeanAbsoluteError: 0.1028450280427933 | Loss: 0.0175891913717351 | Epoch: 464 | \n\n\nMeanAbsoluteError: 0.1076999828219414 | Loss: 0.0182758360010727 | Epoch: 465 | \n\n\nMeanAbsoluteError: 0.0998352468013763 | Loss: 0.0156349182651805 | Epoch: 466 | \n\n\nMeanAbsoluteError: 0.0980077013373375 | Loss: 0.0154706906826686 | Epoch: 467 | \n\n\nMeanAbsoluteError: 0.0983856990933418 | Loss: 0.0155107726874606 | Epoch: 468 | \n\n\nMeanAbsoluteError: 0.1016805022954941 | Loss: 0.0177262570226837 | Epoch: 469 | \n\n\nMeanAbsoluteError: 0.1044908687472343 | Loss: 0.0180568924769129 | Epoch: 470 | \n\n\nMeanAbsoluteError: 0.1044169664382935 | Loss: 0.0180222642709001 | Epoch: 471 | \n\n\nMeanAbsoluteError: 0.0998695790767670 | Loss: 0.0173250358633716 | Epoch: 472 | \n\n\nMeanAbsoluteError: 0.1001142412424088 | Loss: 0.0167369568090847 | Epoch: 473 | \n\n\nMeanAbsoluteError: 0.1080079749226570 | Loss: 0.0179532358421905 | Epoch: 474 | \n\n\nMeanAbsoluteError: 0.1014707535505295 | Loss: 0.0168618322504835 | Epoch: 475 | \n\n\nMeanAbsoluteError: 0.1033758297562599 | Loss: 0.0171427309479138 | Epoch: 476 | \n\n\nMeanAbsoluteError: 0.1050861328840256 | Loss: 0.0179493298879243 | Epoch: 477 | \n\n\nMeanAbsoluteError: 0.0991537272930145 | Loss: 0.0155396374180176 | Epoch: 478 | \n\n\nMeanAbsoluteError: 0.0994060561060905 | Loss: 0.0162475738374633 | Epoch: 479 | \n\n\nMeanAbsoluteError: 0.1072624996304512 | Loss: 0.0181582321104967 | Epoch: 480 | \n\n\nMeanAbsoluteError: 0.1012874171137810 | Loss: 0.0174265437384990 | Epoch: 481 | \n\n\nMeanAbsoluteError: 0.1009065657854080 | Loss: 0.0159158798698869 | Epoch: 482 | \n\n\nMeanAbsoluteError: 0.1054950878024101 | Loss: 0.0181722106381009 | Epoch: 483 | \n\n\nMeanAbsoluteError: 0.0971867144107819 | Loss: 0.0156648227361438 | Epoch: 484 | \n\n\nMeanAbsoluteError: 0.1049359813332558 | Loss: 0.0172289869571978 | Epoch: 485 | \n\n\nMeanAbsoluteError: 0.1019908413290977 | Loss: 0.0170625475561246 | Epoch: 486 | \n\n\nMeanAbsoluteError: 0.1018972173333168 | Loss: 0.0163799107017257 | Epoch: 487 | \n\n\nMeanAbsoluteError: 0.0923860073089600 | Loss: 0.0140937910763508 | Epoch: 488 | \n\n\nMeanAbsoluteError: 0.0976248905062675 | Loss: 0.0155754736408320 | Epoch: 489 | \n\n\nMeanAbsoluteError: 0.1014536321163177 | Loss: 0.0166061183147516 | Epoch: 490 | \n\n\nMeanAbsoluteError: 0.1052436381578445 | Loss: 0.0184943631670224 | Epoch: 491 | \n\n\nMeanAbsoluteError: 0.0991752594709396 | Loss: 0.0156068176250362 | Epoch: 492 | \n\n\nMeanAbsoluteError: 0.0947347655892372 | Loss: 0.0148993021188411 | Epoch: 493 | \n\n\nMeanAbsoluteError: 0.1100518777966499 | Loss: 0.0191614920042533 | Epoch: 494 | \n\n\nMeanAbsoluteError: 0.1056070923805237 | Loss: 0.0173845929727152 | Epoch: 495 | \n\n\nMeanAbsoluteError: 0.1005499660968781 | Loss: 0.0164102801292514 | Epoch: 496 | \n\n\nMeanAbsoluteError: 0.1027273982763290 | Loss: 0.0165491457164292 | Epoch: 497 | \n\n\nMeanAbsoluteError: 0.0989020764827728 | Loss: 0.0170743581438031 | Epoch: 498 | \n\n\nMeanAbsoluteError: 0.1039193496108055 | Loss: 0.0183461209881110 | Epoch: 499 | \n\n\nMeanAbsoluteError: 0.1026449576020241 | Loss: 0.0168292134146517 | Epoch: 500 | \n\n\nMeanAbsoluteError: 0.0939760431647301 | Loss: 0.0147978980380382 | Epoch: 501 | \n\n\nMeanAbsoluteError: 0.1077166125178337 | Loss: 0.0183066413398774 | Epoch: 502 | \n\n\nMeanAbsoluteError: 0.0993370488286018 | Loss: 0.0163019097216844 | Epoch: 503 | \n\n\nMeanAbsoluteError: 0.0945171266794205 | Loss: 0.0153303724879515 | Epoch: 504 | \n\n\nMeanAbsoluteError: 0.1008688509464264 | Loss: 0.0167775752919260 | Epoch: 505 | \n\n\nMeanAbsoluteError: 0.1000161617994308 | Loss: 0.0160814810981780 | Epoch: 506 | \n\n\nMeanAbsoluteError: 0.0964475125074387 | Loss: 0.0152281972941516 | Epoch: 507 | \n\n\nMeanAbsoluteError: 0.0980840399861336 | Loss: 0.0151069655128716 | Epoch: 508 | \n\n\nMeanAbsoluteError: 0.1020107269287109 | Loss: 0.0166987450830250 | Epoch: 509 | \n\n\nMeanAbsoluteError: 0.1021979674696922 | Loss: 0.0167664950191465 | Epoch: 510 | \n\n\nMeanAbsoluteError: 0.0917973965406418 | Loss: 0.0138971836048950 | Epoch: 511 | \n\n\nMeanAbsoluteError: 0.0963429212570190 | Loss: 0.0152386311171881 | Epoch: 512 | \n\n\nMeanAbsoluteError: 0.1007172763347626 | Loss: 0.0163271431545976 | Epoch: 513 | \n\n\nMeanAbsoluteError: 0.0974454432725906 | Loss: 0.0150090079839962 | Epoch: 514 | \n\n\nMeanAbsoluteError: 0.0970909595489502 | Loss: 0.0152078219187570 | Epoch: 515 | \n\n\nMeanAbsoluteError: 0.1093857213854790 | Loss: 0.0189685863059033 | Epoch: 516 | \n\n\nMeanAbsoluteError: 0.1001348719000816 | Loss: 0.0159167319953364 | Epoch: 517 | \n\n\nMeanAbsoluteError: 0.1002429872751236 | Loss: 0.0173474698936722 | Epoch: 518 | \n\n\nMeanAbsoluteError: 0.0968904420733452 | Loss: 0.0147789504478290 | Epoch: 519 | \n\n\nMeanAbsoluteError: 0.1099022030830383 | Loss: 0.0189467534753688 | Epoch: 520 | \n\n\nMeanAbsoluteError: 0.0999557301402092 | Loss: 0.0163296968406727 | Epoch: 521 | \n\n\nMeanAbsoluteError: 0.0940432772040367 | Loss: 0.0150107734339629 | Epoch: 522 | \n\n\nMeanAbsoluteError: 0.1007972657680511 | Loss: 0.0165020587223019 | Epoch: 523 | \n\n\nMeanAbsoluteError: 0.1039046943187714 | Loss: 0.0179870286903558 | Epoch: 524 | \n\n\nMeanAbsoluteError: 0.1025696396827698 | Loss: 0.0168178719457258 | Epoch: 525 | \n\n\nMeanAbsoluteError: 0.0984179973602295 | Loss: 0.0154235302003993 | Epoch: 526 | \n\n\nMeanAbsoluteError: 0.0999756827950478 | Loss: 0.0161285601375372 | Epoch: 527 | \n\n\nMeanAbsoluteError: 0.1014905944466591 | Loss: 0.0169098500771361 | Epoch: 528 | \n\n\nMeanAbsoluteError: 0.0993648767471313 | Loss: 0.0157294345559058 | Epoch: 529 | \n\n\nMeanAbsoluteError: 0.0958481952548027 | Loss: 0.0151875809337071 | Epoch: 530 | \n\n\nMeanAbsoluteError: 0.0981381163001060 | Loss: 0.0157585828482053 | Epoch: 531 | \n\n\nMeanAbsoluteError: 0.0965672805905342 | Loss: 0.0149766461527421 | Epoch: 532 | \n\n\nMeanAbsoluteError: 0.0964750424027443 | Loss: 0.0154436523162440 | Epoch: 533 | \n\n\nMeanAbsoluteError: 0.0996313169598579 | Loss: 0.0153808052581735 | Epoch: 534 | \n\n\nMeanAbsoluteError: 0.1016926169395447 | Loss: 0.0164642078203421 | Epoch: 535 | \n\n\nMeanAbsoluteError: 0.0961120948195457 | Loss: 0.0155447739682859 | Epoch: 536 | \n\n\nMeanAbsoluteError: 0.1009661704301834 | Loss: 0.0154702615079016 | Epoch: 537 | \n\n\nMeanAbsoluteError: 0.0927701070904732 | Loss: 0.0139665581687101 | Epoch: 538 | \n\n\nMeanAbsoluteError: 0.0975929275155067 | Loss: 0.0158387144066364 | Epoch: 539 | \n\n\nMeanAbsoluteError: 0.1090823113918304 | Loss: 0.0187838930328508 | Epoch: 540 | \n\n\nMeanAbsoluteError: 0.0926862731575966 | Loss: 0.0139182428712957 | Epoch: 541 | \n\n\nMeanAbsoluteError: 0.0952141359448433 | Loss: 0.0151013247385466 | Epoch: 542 | \n\n\nMeanAbsoluteError: 0.1026523187756538 | Loss: 0.0169537403314704 | Epoch: 543 | \n\n\nMeanAbsoluteError: 0.0927795246243477 | Loss: 0.0137619458422220 | Epoch: 544 | \n\n\nMeanAbsoluteError: 0.1018760204315186 | Loss: 0.0173547741950218 | Epoch: 545 | \n\n\nMeanAbsoluteError: 0.0876221582293510 | Loss: 0.0129409775619085 | Epoch: 546 | \n\n\nMeanAbsoluteError: 0.0948479548096657 | Loss: 0.0155146177764254 | Epoch: 547 | \n\n\nMeanAbsoluteError: 0.0949814319610596 | Loss: 0.0144324240290734 | Epoch: 548 | \n\n\nMeanAbsoluteError: 0.1003346219658852 | Loss: 0.0164650584347934 | Epoch: 549 | \n\n\nMeanAbsoluteError: 0.0971016734838486 | Loss: 0.0160147672195308 | Epoch: 550 | \n\n\nMeanAbsoluteError: 0.0968489944934845 | Loss: 0.0155255982812378 | Epoch: 551 | \n\n\nMeanAbsoluteError: 0.0989157184958458 | Loss: 0.0159895595274672 | Epoch: 552 | \n\n\nMeanAbsoluteError: 0.0949094891548157 | Loss: 0.0159155225827756 | Epoch: 553 | \n\n\nMeanAbsoluteError: 0.0996364429593086 | Loss: 0.0171524579235605 | Epoch: 554 | \n\n\nMeanAbsoluteError: 0.0945355296134949 | Loss: 0.0136509586978354 | Epoch: 555 | \n\n\nMeanAbsoluteError: 0.0961039140820503 | Loss: 0.0149329183692074 | Epoch: 556 | \n\n\nMeanAbsoluteError: 0.0990012139081955 | Loss: 0.0165087454026313 | Epoch: 557 | \n\n\nMeanAbsoluteError: 0.0989302769303322 | Loss: 0.0161787420539379 | Epoch: 558 | \n\n\nMeanAbsoluteError: 0.0916829332709312 | Loss: 0.0142824590044135 | Epoch: 559 | \n\n\nMeanAbsoluteError: 0.0980954542756081 | Loss: 0.0163639789991430 | Epoch: 560 | \n\n\nMeanAbsoluteError: 0.0932519435882568 | Loss: 0.0141505422331587 | Epoch: 561 | \n\n\nMeanAbsoluteError: 0.0952534526586533 | Loss: 0.0145549110552626 | Epoch: 562 | \n\n\nMeanAbsoluteError: 0.0996774584054947 | Loss: 0.0156302000666619 | Epoch: 563 | \n\n\nMeanAbsoluteError: 0.0977452695369720 | Loss: 0.0161742547542478 | Epoch: 564 | \n\n\nMeanAbsoluteError: 0.0895439311861992 | Loss: 0.0132933590046984 | Epoch: 565 | \n\n\nMeanAbsoluteError: 0.0941376537084579 | Loss: 0.0146976954252265 | Epoch: 566 | \n\n\nMeanAbsoluteError: 0.1013995260000229 | Loss: 0.0165438991334910 | Epoch: 567 | \n\n\nMeanAbsoluteError: 0.1030474603176117 | Loss: 0.0171867421689209 | Epoch: 568 | \n\n\nMeanAbsoluteError: 0.0905660465359688 | Loss: 0.0138430645086676 | Epoch: 569 | \n\n\nMeanAbsoluteError: 0.0905057564377785 | Loss: 0.0134842142437022 | Epoch: 570 | \n\n\nMeanAbsoluteError: 0.0910122320055962 | Loss: 0.0136786883624639 | Epoch: 571 | \n\n\nMeanAbsoluteError: 0.0933640524744987 | Loss: 0.0150762352257637 | Epoch: 572 | \n\n\nMeanAbsoluteError: 0.0958045050501823 | Loss: 0.0152325371302868 | Epoch: 573 | \n\n\nMeanAbsoluteError: 0.0984153971076012 | Loss: 0.0157607538873466 | Epoch: 574 | \n\n\nMeanAbsoluteError: 0.0905474945902824 | Loss: 0.0135822923557619 | Epoch: 575 | \n\n\nMeanAbsoluteError: 0.0918791666626930 | Loss: 0.0142797212744154 | Epoch: 576 | \n\n\nMeanAbsoluteError: 0.0922047346830368 | Loss: 0.0138489314861363 | Epoch: 577 | \n\n\nMeanAbsoluteError: 0.0958790108561516 | Loss: 0.0150872529657014 | Epoch: 578 | \n\n\nMeanAbsoluteError: 0.0954126641154289 | Loss: 0.0150977555640566 | Epoch: 579 | \n\n\nMeanAbsoluteError: 0.1041245311498642 | Loss: 0.0187601747452572 | Epoch: 580 | \n\n\nMeanAbsoluteError: 0.0959928110241890 | Loss: 0.0142142682177170 | Epoch: 581 | \n\n\nMeanAbsoluteError: 0.0892215967178345 | Loss: 0.0133904045842549 | Epoch: 582 | \n\n\nMeanAbsoluteError: 0.0938471630215645 | Loss: 0.0136533047924361 | Epoch: 583 | \n\n\nMeanAbsoluteError: 0.0891572833061218 | Loss: 0.0131718141755361 | Epoch: 584 | \n\n\nMeanAbsoluteError: 0.0962666049599648 | Loss: 0.0152779891085083 | Epoch: 585 | \n\n\nMeanAbsoluteError: 0.0949072614312172 | Loss: 0.0148243514096733 | Epoch: 586 | \n\n\nMeanAbsoluteError: 0.0947503522038460 | Loss: 0.0140619072997166 | Epoch: 587 | \n\n\nMeanAbsoluteError: 0.0899440199136734 | Loss: 0.0123618191588563 | Epoch: 588 | \n\n\nMeanAbsoluteError: 0.0914239287376404 | Loss: 0.0136703018918100 | Epoch: 589 | \n\n\nMeanAbsoluteError: 0.0943471118807793 | Loss: 0.0145854217026014 | Epoch: 590 | \n\n\nMeanAbsoluteError: 0.0967638194561005 | Loss: 0.0153680206452069 | Epoch: 591 | \n\n\nMeanAbsoluteError: 0.0934237316250801 | Loss: 0.0138307518876779 | Epoch: 592 | \n\n\nMeanAbsoluteError: 0.0914214104413986 | Loss: 0.0138032288863421 | Epoch: 593 | \n\n\nMeanAbsoluteError: 0.0960265845060349 | Loss: 0.0160195194552701 | Epoch: 594 | \n\n\nMeanAbsoluteError: 0.0908762589097023 | Loss: 0.0144466645822104 | Epoch: 595 | \n\n\nMeanAbsoluteError: 0.0973815470933914 | Loss: 0.0152153484319084 | Epoch: 596 | \n\n\nMeanAbsoluteError: 0.0903173089027405 | Loss: 0.0136349404588206 | Epoch: 597 | \n\n\nMeanAbsoluteError: 0.0993798300623894 | Loss: 0.0164040038574725 | Epoch: 598 | \n\n\nMeanAbsoluteError: 0.0928648784756660 | Loss: 0.0148511308150773 | Epoch: 599 | \n\n\nMeanAbsoluteError: 0.0925984457135201 | Loss: 0.0144162231851078 | Epoch: 600 | \n\n\nMeanAbsoluteError: 0.0999183505773544 | Loss: 0.0163086755104208 | Epoch: 601 | \n\n\nMeanAbsoluteError: 0.0949678793549538 | Loss: 0.0147953141444790 | Epoch: 602 | \n\n\nMeanAbsoluteError: 0.0939765349030495 | Loss: 0.0151060917086215 | Epoch: 603 | \n\n\nMeanAbsoluteError: 0.0900883451104164 | Loss: 0.0144351810567120 | Epoch: 604 | \n\n\nMeanAbsoluteError: 0.0943650528788567 | Loss: 0.0142321199094780 | Epoch: 605 | \n\n\nMeanAbsoluteError: 0.0943175479769707 | Loss: 0.0144278338145705 | Epoch: 606 | \n\n\nMeanAbsoluteError: 0.0966250672936440 | Loss: 0.0148062422547567 | Epoch: 607 | \n\n\nMeanAbsoluteError: 0.0929063409566879 | Loss: 0.0143242070393414 | Epoch: 608 | \n\n\nMeanAbsoluteError: 0.0964447259902954 | Loss: 0.0165878285482177 | Epoch: 609 | \n\n\nMeanAbsoluteError: 0.0911976322531700 | Loss: 0.0141807622512958 | Epoch: 610 | \n\n\nMeanAbsoluteError: 0.0998397096991539 | Loss: 0.0168758690922550 | Epoch: 611 | \n\n\nMeanAbsoluteError: 0.0933445617556572 | Loss: 0.0141533588031598 | Epoch: 612 | \n\n\nMeanAbsoluteError: 0.1003218889236450 | Loss: 0.0170749911178215 | Epoch: 613 | \n\n\nMeanAbsoluteError: 0.0928163006901741 | Loss: 0.0134476699212852 | Epoch: 614 | \n\n\nMeanAbsoluteError: 0.0897209718823433 | Loss: 0.0137047016221428 | Epoch: 615 | \n\n\nMeanAbsoluteError: 0.0935354456305504 | Loss: 0.0142482936388357 | Epoch: 616 | \n\n\nMeanAbsoluteError: 0.0933858901262283 | Loss: 0.0135930238121493 | Epoch: 617 | \n\n\nMeanAbsoluteError: 0.0918898880481720 | Loss: 0.0136457925226114 | Epoch: 618 | \n\n\nMeanAbsoluteError: 0.0930190011858940 | Loss: 0.0148269979656592 | Epoch: 619 | \n\n\nMeanAbsoluteError: 0.0951678082346916 | Loss: 0.0146986238623746 | Epoch: 620 | \n\n\nMeanAbsoluteError: 0.0936522185802460 | Loss: 0.0144980985643148 | Epoch: 621 | \n\n\nMeanAbsoluteError: 0.0880865082144737 | Loss: 0.0127878839933631 | Epoch: 622 | \n\n\nMeanAbsoluteError: 0.0964249148964882 | Loss: 0.0150128442532878 | Epoch: 623 | \n\n\nMeanAbsoluteError: 0.0964215323328972 | Loss: 0.0150659070204711 | Epoch: 624 | \n\n\nMeanAbsoluteError: 0.0916870385408401 | Loss: 0.0139418501170682 | Epoch: 625 | \n\n\nMeanAbsoluteError: 0.0943727493286133 | Loss: 0.0147048733378930 | Epoch: 626 | \n\n\nMeanAbsoluteError: 0.0872936844825745 | Loss: 0.0126948013046422 | Epoch: 627 | \n\n\nMeanAbsoluteError: 0.0949321165680885 | Loss: 0.0146096022160176 | Epoch: 628 | \n\n\nMeanAbsoluteError: 0.0940456688404083 | Loss: 0.0145572021667613 | Epoch: 629 | \n\n\nMeanAbsoluteError: 0.0927180722355843 | Loss: 0.0145954246538652 | Epoch: 630 | \n\n\nMeanAbsoluteError: 0.0939121916890144 | Loss: 0.0143216857194542 | Epoch: 631 | \n\n\nMeanAbsoluteError: 0.0899544879794121 | Loss: 0.0141671223289207 | Epoch: 632 | \n\n\nMeanAbsoluteError: 0.0897123292088509 | Loss: 0.0139130756513138 | Epoch: 633 | \n\n\nMeanAbsoluteError: 0.0875496789813042 | Loss: 0.0122651119255412 | Epoch: 634 | \n\n\nMeanAbsoluteError: 0.0856055542826653 | Loss: 0.0122901948574387 | Epoch: 635 | \n\n\nMeanAbsoluteError: 0.0943021997809410 | Loss: 0.0145512787488406 | Epoch: 636 | \n\n\nMeanAbsoluteError: 0.0920844003558159 | Loss: 0.0140073012297459 | Epoch: 637 | \n\n\nMeanAbsoluteError: 0.0914235934615135 | Loss: 0.0142126699681588 | Epoch: 638 | \n\n\nMeanAbsoluteError: 0.0964135974645615 | Loss: 0.0152535194434070 | Epoch: 639 | \n\n\nMeanAbsoluteError: 0.0941481292247772 | Loss: 0.0140724621999349 | Epoch: 640 | \n\n\nMeanAbsoluteError: 0.0919471979141235 | Loss: 0.0136402633980227 | Epoch: 641 | \n\n\nMeanAbsoluteError: 0.0897419601678848 | Loss: 0.0128721297246860 | Epoch: 642 | \n\n\nMeanAbsoluteError: 0.0859987735748291 | Loss: 0.0123512204378979 | Epoch: 643 | \n\n\nMeanAbsoluteError: 0.0952442437410355 | Loss: 0.0146059012127807 | Epoch: 644 | \n\n\nMeanAbsoluteError: 0.0882844403386116 | Loss: 0.0131798083862911 | Epoch: 645 | \n\n\nMeanAbsoluteError: 0.0949488058686256 | Loss: 0.0153795219777385 | Epoch: 646 | \n\n\nMeanAbsoluteError: 0.0833041220903397 | Loss: 0.0123624810551822 | Epoch: 647 | \n\n\nMeanAbsoluteError: 0.0986357480287552 | Loss: 0.0167904764682316 | Epoch: 648 | \n\n\nMeanAbsoluteError: 0.0921415761113167 | Loss: 0.0136074942604137 | Epoch: 649 | \n\n\nMeanAbsoluteError: 0.0899546146392822 | Loss: 0.0134202059395951 | Epoch: 650 | \n\n\nMeanAbsoluteError: 0.0902867093682289 | Loss: 0.0139226380417191 | Epoch: 651 | \n\n\nMeanAbsoluteError: 0.0890051722526550 | Loss: 0.0136951213330576 | Epoch: 652 | \n\n\nMeanAbsoluteError: 0.0883634686470032 | Loss: 0.0135377957807699 | Epoch: 653 | \n\n\nMeanAbsoluteError: 0.0934864357113838 | Loss: 0.0142462751980929 | Epoch: 654 | \n\n\nMeanAbsoluteError: 0.0901531502604485 | Loss: 0.0131909499006845 | Epoch: 655 | \n\n\nMeanAbsoluteError: 0.0906517803668976 | Loss: 0.0135523621848309 | Epoch: 656 | \n\n\nMeanAbsoluteError: 0.0944647192955017 | Loss: 0.0147696035142872 | Epoch: 657 | \n\n\nMeanAbsoluteError: 0.0898716524243355 | Loss: 0.0134419995284892 | Epoch: 658 | \n\n\nMeanAbsoluteError: 0.0908722653985023 | Loss: 0.0141600228689398 | Epoch: 659 | \n\n\nMeanAbsoluteError: 0.0914921090006828 | Loss: 0.0136172812132524 | Epoch: 660 | \n\n\nMeanAbsoluteError: 0.0862129181623459 | Loss: 0.0125896860675615 | Epoch: 661 | \n\n\nMeanAbsoluteError: 0.0899091660976410 | Loss: 0.0128018571685789 | Epoch: 662 | \n\n\nMeanAbsoluteError: 0.0886658951640129 | Loss: 0.0123498835242981 | Epoch: 663 | \n\n\nMeanAbsoluteError: 0.0919820815324783 | Loss: 0.0136060434315247 | Epoch: 664 | \n\n\nMeanAbsoluteError: 0.0909993052482605 | Loss: 0.0136573489211150 | Epoch: 665 | \n\n\nMeanAbsoluteError: 0.0857016146183014 | Loss: 0.0125602142562275 | Epoch: 666 | \n\n\nMeanAbsoluteError: 0.0921309068799019 | Loss: 0.0153196479408251 | Epoch: 667 | \n\n\nMeanAbsoluteError: 0.0874250382184982 | Loss: 0.0122946061741095 | Epoch: 668 | \n\n\nMeanAbsoluteError: 0.0904047191143036 | Loss: 0.0137904984501559 | Epoch: 669 | \n\n\nMeanAbsoluteError: 0.0838717892765999 | Loss: 0.0120195161146694 | Epoch: 670 | \n\n\nMeanAbsoluteError: 0.0933444276452065 | Loss: 0.0142137601671902 | Epoch: 671 | \n\n\nMeanAbsoluteError: 0.0826912149786949 | Loss: 0.0116376230075548 | Epoch: 672 | \n\n\nMeanAbsoluteError: 0.0937707796692848 | Loss: 0.0143063872153895 | Epoch: 673 | \n\n\nMeanAbsoluteError: 0.0928021073341370 | Loss: 0.0143146147663356 | Epoch: 674 | \n\n\nMeanAbsoluteError: 0.0910034552216530 | Loss: 0.0140793540118223 | Epoch: 675 | \n\n\nMeanAbsoluteError: 0.0887886211276054 | Loss: 0.0126948969314374 | Epoch: 676 | \n\n\nMeanAbsoluteError: 0.0914553999900818 | Loss: 0.0144349705032497 | Epoch: 677 | \n\n\nMeanAbsoluteError: 0.0864346474409103 | Loss: 0.0122873366463561 | Epoch: 678 | \n\n\nMeanAbsoluteError: 0.0911565199494362 | Loss: 0.0155455442583479 | Epoch: 679 | \n\n\nMeanAbsoluteError: 0.0874512195587158 | Loss: 0.0124682045781325 | Epoch: 680 | \n\n\nMeanAbsoluteError: 0.0868952050805092 | Loss: 0.0122871886139304 | Epoch: 681 | \n\n\nMeanAbsoluteError: 0.0857532098889351 | Loss: 0.0122076764364950 | Epoch: 682 | \n\n\nMeanAbsoluteError: 0.0893708765506744 | Loss: 0.0130092634931498 | Epoch: 683 | \n\n\nMeanAbsoluteError: 0.0933153033256531 | Loss: 0.0140856258919424 | Epoch: 684 | \n\n\nMeanAbsoluteError: 0.0828882381320000 | Loss: 0.0114508920138144 | Epoch: 685 | \n\n\nMeanAbsoluteError: 0.0847683623433113 | Loss: 0.0119703660677624 | Epoch: 686 | \n\n\nMeanAbsoluteError: 0.0841552242636681 | Loss: 0.0119749532328084 | Epoch: 687 | \n\n\nMeanAbsoluteError: 0.0901032462716103 | Loss: 0.0135006122748988 | Epoch: 688 | \n\n\nMeanAbsoluteError: 0.0865492448210716 | Loss: 0.0127749186941522 | Epoch: 689 | \n\n\nMeanAbsoluteError: 0.0901451110839844 | Loss: 0.0138095143953251 | Epoch: 690 | \n\n\nMeanAbsoluteError: 0.0857677608728409 | Loss: 0.0126865721644572 | Epoch: 691 | \n\n\nMeanAbsoluteError: 0.0843984186649323 | Loss: 0.0115191478347697 | Epoch: 692 | \n\n\nMeanAbsoluteError: 0.0862066298723221 | Loss: 0.0126267376492130 | Epoch: 693 | \n\n\nMeanAbsoluteError: 0.0904658734798431 | Loss: 0.0141702425702715 | Epoch: 694 | \n\n\nMeanAbsoluteError: 0.0892438367009163 | Loss: 0.0129698373368592 | Epoch: 695 | \n\n\nMeanAbsoluteError: 0.0888628959655762 | Loss: 0.0137570939340609 | Epoch: 696 | \n\n\nMeanAbsoluteError: 0.0895384326577187 | Loss: 0.0141815451815637 | Epoch: 697 | \n\n\nMeanAbsoluteError: 0.0861149206757545 | Loss: 0.0129314811857815 | Epoch: 698 | \n\n\nMeanAbsoluteError: 0.0846960097551346 | Loss: 0.0120541747261692 | Epoch: 699 | \n\n\nMeanAbsoluteError: 0.0872166976332664 | Loss: 0.0128992301407076 | Epoch: 700 | \n\n\nMeanAbsoluteError: 0.0866595730185509 | Loss: 0.0130213049557642 | Epoch: 701 | \n\n\nMeanAbsoluteError: 0.0869608595967293 | Loss: 0.0124296186906152 | Epoch: 702 | \n\n\nMeanAbsoluteError: 0.0872699767351151 | Loss: 0.0127087680813565 | Epoch: 703 | \n\n\nMeanAbsoluteError: 0.0841317698359489 | Loss: 0.0123266009954386 | Epoch: 704 | \n\n\nMeanAbsoluteError: 0.0838478431105614 | Loss: 0.0118643810501165 | Epoch: 705 | \n\n\nMeanAbsoluteError: 0.0907689630985260 | Loss: 0.0131419796437694 | Epoch: 706 | \n\n\nMeanAbsoluteError: 0.0923736691474915 | Loss: 0.0144344044545627 | Epoch: 707 | \n\n\nMeanAbsoluteError: 0.0874848067760468 | Loss: 0.0127259459533767 | Epoch: 708 | \n\n\nMeanAbsoluteError: 0.0847158059477806 | Loss: 0.0120570911309843 | Epoch: 709 | \n\n\nMeanAbsoluteError: 0.0846907198429108 | Loss: 0.0122015894107123 | Epoch: 710 | \n\n\nMeanAbsoluteError: 0.0923567339777946 | Loss: 0.0139561093621645 | Epoch: 711 | \n\n\nMeanAbsoluteError: 0.0813598558306694 | Loss: 0.0111752887310467 | Epoch: 712 | \n\n\nMeanAbsoluteError: 0.0870706215500832 | Loss: 0.0123346273374167 | Epoch: 713 | \n\n\nMeanAbsoluteError: 0.0867228657007217 | Loss: 0.0130413301346258 | Epoch: 714 | \n\n\nMeanAbsoluteError: 0.0853150933980942 | Loss: 0.0122990863758908 | Epoch: 715 | \n\n\nMeanAbsoluteError: 0.0857815966010094 | Loss: 0.0125917645540418 | Epoch: 716 | \n\n\nMeanAbsoluteError: 0.0787195339798927 | Loss: 0.0110922103355612 | Epoch: 717 | \n\n\nMeanAbsoluteError: 0.0846261307597160 | Loss: 0.0128886540252953 | Epoch: 718 | \n\n\nMeanAbsoluteError: 0.0919289961457253 | Loss: 0.0144492278527954 | Epoch: 719 | \n\n\nMeanAbsoluteError: 0.0877352878451347 | Loss: 0.0127414701784922 | Epoch: 720 | \n\n\nMeanAbsoluteError: 0.0868565812706947 | Loss: 0.0131175352238643 | Epoch: 721 | \n\n\nMeanAbsoluteError: 0.0793544575572014 | Loss: 0.0110426154763991 | Epoch: 722 | \n\n\nMeanAbsoluteError: 0.0870934426784515 | Loss: 0.0129277984675718 | Epoch: 723 | \n\n\nMeanAbsoluteError: 0.0913423523306847 | Loss: 0.0143532960437733 | Epoch: 724 | \n\n\nMeanAbsoluteError: 0.0847107842564583 | Loss: 0.0122247315116086 | Epoch: 725 | \n\n\nMeanAbsoluteError: 0.0861899107694626 | Loss: 0.0122133094459423 | Epoch: 726 | \n\n\nMeanAbsoluteError: 0.0843392908573151 | Loss: 0.0121308150672121 | Epoch: 727 | \n\n\nMeanAbsoluteError: 0.0903706103563309 | Loss: 0.0136447772903678 | Epoch: 728 | \n\n\nMeanAbsoluteError: 0.0850528925657272 | Loss: 0.0121053997641866 | Epoch: 729 | \n\n\nMeanAbsoluteError: 0.0886157676577568 | Loss: 0.0128993192680355 | Epoch: 730 | \n\n\nMeanAbsoluteError: 0.0836841538548470 | Loss: 0.0119437256065915 | Epoch: 731 | \n\n\nMeanAbsoluteError: 0.0845359638333321 | Loss: 0.0126823827906888 | Epoch: 732 | \n\n\nMeanAbsoluteError: 0.0884646475315094 | Loss: 0.0134886265749810 | Epoch: 733 | \n\n\nMeanAbsoluteError: 0.0781354084610939 | Loss: 0.0104260638561633 | Epoch: 734 | \n\n\nMeanAbsoluteError: 0.0892178565263748 | Loss: 0.0127959528273641 | Epoch: 735 | \n\n\nMeanAbsoluteError: 0.0856087207794189 | Loss: 0.0125594279036159 | Epoch: 736 | \n\n\nMeanAbsoluteError: 0.0869164317846298 | Loss: 0.0136363014497495 | Epoch: 737 | \n\n\nMeanAbsoluteError: 0.0886043310165405 | Loss: 0.0125537945987404 | Epoch: 738 | \n\n\nMeanAbsoluteError: 0.0798406973481178 | Loss: 0.0114735874767454 | Epoch: 739 | \n\n\nMeanAbsoluteError: 0.0847795084118843 | Loss: 0.0123684825277026 | Epoch: 740 | \n\n\nMeanAbsoluteError: 0.0835280641913414 | Loss: 0.0121070020223851 | Epoch: 741 | \n\n\nMeanAbsoluteError: 0.0758345872163773 | Loss: 0.0101700595118746 | Epoch: 742 | \n\n\nMeanAbsoluteError: 0.0866424366831779 | Loss: 0.0130124807901060 | Epoch: 743 | \n\n\nMeanAbsoluteError: 0.0827291831374168 | Loss: 0.0115952412581343 | Epoch: 744 | \n\n\nMeanAbsoluteError: 0.0893577411770821 | Loss: 0.0131314118698598 | Epoch: 745 | \n\n\nMeanAbsoluteError: 0.0815343558788300 | Loss: 0.0107954051935485 | Epoch: 746 | \n\n\nMeanAbsoluteError: 0.0882723331451416 | Loss: 0.0130692929822302 | Epoch: 747 | \n\n\nMeanAbsoluteError: 0.0816751047968864 | Loss: 0.0118581207354146 | Epoch: 748 | \n\n\nMeanAbsoluteError: 0.0859503075480461 | Loss: 0.0119931101474261 | Epoch: 749 | \n\n\nMeanAbsoluteError: 0.0868570432066917 | Loss: 0.0135347506445639 | Epoch: 750 | \n\n\nMeanAbsoluteError: 0.0853116810321808 | Loss: 0.0129509823729556 | Epoch: 751 | \n\n\nMeanAbsoluteError: 0.0842114314436913 | Loss: 0.0114447023558508 | Epoch: 752 | \n\n\nMeanAbsoluteError: 0.0837864205241203 | Loss: 0.0117758664601449 | Epoch: 753 | \n\n\nMeanAbsoluteError: 0.0848613902926445 | Loss: 0.0121458923700266 | Epoch: 754 | \n\n\nMeanAbsoluteError: 0.0860714688897133 | Loss: 0.0132789638465329 | Epoch: 755 | \n\n\nMeanAbsoluteError: 0.0842629298567772 | Loss: 0.0122338818977657 | Epoch: 756 | \n\n\nMeanAbsoluteError: 0.0842579752206802 | Loss: 0.0117402255890435 | Epoch: 757 | \n\n\nMeanAbsoluteError: 0.0839567407965660 | Loss: 0.0113860609992844 | Epoch: 758 | \n\n\nMeanAbsoluteError: 0.0879777744412422 | Loss: 0.0127438877175397 | Epoch: 759 | \n\n\nMeanAbsoluteError: 0.0808393731713295 | Loss: 0.0117020922933201 | Epoch: 760 | \n\n\nMeanAbsoluteError: 0.0866187661886215 | Loss: 0.0123780815792998 | Epoch: 761 | \n\n\nMeanAbsoluteError: 0.0900759920477867 | Loss: 0.0135301536951738 | Epoch: 762 | \n\n\nMeanAbsoluteError: 0.0831434130668640 | Loss: 0.0120612022713370 | Epoch: 763 | \n\n\nMeanAbsoluteError: 0.0854535922408104 | Loss: 0.0122649531954812 | Epoch: 764 | \n\n\nMeanAbsoluteError: 0.0810860916972160 | Loss: 0.0108526033610906 | Epoch: 765 | \n\n\nMeanAbsoluteError: 0.0850465297698975 | Loss: 0.0119650142199437 | Epoch: 766 | \n\n\nMeanAbsoluteError: 0.0840029492974281 | Loss: 0.0119365388162987 | Epoch: 767 | \n\n\nMeanAbsoluteError: 0.0808563232421875 | Loss: 0.0114324077948064 | Epoch: 768 | \n\n\nMeanAbsoluteError: 0.0813310593366623 | Loss: 0.0114667138246781 | Epoch: 769 | \n\n\nMeanAbsoluteError: 0.0834070518612862 | Loss: 0.0116390952894775 | Epoch: 770 | \n\n\nMeanAbsoluteError: 0.0799439474940300 | Loss: 0.0109760382125023 | Epoch: 771 | \n\n\nMeanAbsoluteError: 0.0862026885151863 | Loss: 0.0121631451724655 | Epoch: 772 | \n\n\nMeanAbsoluteError: 0.0773942023515701 | Loss: 0.0100014267676367 | Epoch: 773 | \n\n\nMeanAbsoluteError: 0.0828531980514526 | Loss: 0.0120185061364706 | Epoch: 774 | \n\n\nMeanAbsoluteError: 0.0864127799868584 | Loss: 0.0125402316975427 | Epoch: 775 | \n\n\nMeanAbsoluteError: 0.0896718800067902 | Loss: 0.0133060978676076 | Epoch: 776 | \n\n\nMeanAbsoluteError: 0.0802150443196297 | Loss: 0.0118395192625515 | Epoch: 777 | \n\n\nMeanAbsoluteError: 0.0791711807250977 | Loss: 0.0100883760230651 | Epoch: 778 | \n\n\nMeanAbsoluteError: 0.0781316012144089 | Loss: 0.0107688300175020 | Epoch: 779 | \n\n\nMeanAbsoluteError: 0.0775944516062737 | Loss: 0.0104368809142549 | Epoch: 780 | \n\n\nMeanAbsoluteError: 0.0889874026179314 | Loss: 0.0134515109674248 | Epoch: 781 | \n\n\nMeanAbsoluteError: 0.0862208902835846 | Loss: 0.0122916398667197 | Epoch: 782 | \n\n\nMeanAbsoluteError: 0.0798108205199242 | Loss: 0.0110968768920672 | Epoch: 783 | \n\n\nMeanAbsoluteError: 0.0804963931441307 | Loss: 0.0118157476947817 | Epoch: 784 | \n\n\nMeanAbsoluteError: 0.0776522010564804 | Loss: 0.0103806896301345 | Epoch: 785 | \n\n\nMeanAbsoluteError: 0.0859545767307281 | Loss: 0.0132408880347975 | Epoch: 786 | \n\n\nMeanAbsoluteError: 0.0854678750038147 | Loss: 0.0121864469328041 | Epoch: 787 | \n\n\nMeanAbsoluteError: 0.0822122320532799 | Loss: 0.0114099829130161 | Epoch: 788 | \n\n\nMeanAbsoluteError: 0.0790107324719429 | Loss: 0.0107910923366580 | Epoch: 789 | \n\n\nMeanAbsoluteError: 0.0771248340606689 | Loss: 0.0102200264722342 | Epoch: 790 | \n\n\nMeanAbsoluteError: 0.0901091620326042 | Loss: 0.0141825376562580 | Epoch: 791 | \n\n\nMeanAbsoluteError: 0.0827606171369553 | Loss: 0.0113155116213602 | Epoch: 792 | \n\n\nMeanAbsoluteError: 0.0812526568770409 | Loss: 0.0117330015626673 | Epoch: 793 | \n\n\nMeanAbsoluteError: 0.0786401331424713 | Loss: 0.0105240611347229 | Epoch: 794 | \n\n\nMeanAbsoluteError: 0.0906210988759995 | Loss: 0.0140195084948148 | Epoch: 795 | \n\n\nMeanAbsoluteError: 0.0812895819544792 | Loss: 0.0112063214911905 | Epoch: 796 | \n\n\nMeanAbsoluteError: 0.0839850381016731 | Loss: 0.0120314592663393 | Epoch: 797 | \n\n\nMeanAbsoluteError: 0.0834412723779678 | Loss: 0.0115786623429934 | Epoch: 798 | \n\n\nMeanAbsoluteError: 0.0812151804566383 | Loss: 0.0106683049314112 | Epoch: 799 | \n\n\nMeanAbsoluteError: 0.0763742700219154 | Loss: 0.0103957144342106 | Epoch: 800 | \n\n\nMeanAbsoluteError: 0.0798877403140068 | Loss: 0.0112059782354754 | Epoch: 801 | \n\n\nMeanAbsoluteError: 0.0794545784592628 | Loss: 0.0113850245135473 | Epoch: 802 | \n\n\nMeanAbsoluteError: 0.0882772952318192 | Loss: 0.0136871946473548 | Epoch: 803 | \n\n\nMeanAbsoluteError: 0.0800916701555252 | Loss: 0.0110358890703962 | Epoch: 804 | \n\n\nMeanAbsoluteError: 0.0725259333848953 | Loss: 0.0090490159723655 | Epoch: 805 | \n\n\nMeanAbsoluteError: 0.0803226828575134 | Loss: 0.0112123991530340 | Epoch: 806 | \n\n\nMeanAbsoluteError: 0.0840378403663635 | Loss: 0.0119105132838498 | Epoch: 807 | \n\n\nMeanAbsoluteError: 0.0873498767614365 | Loss: 0.0131001907811636 | Epoch: 808 | \n\n\nMeanAbsoluteError: 0.0818428918719292 | Loss: 0.0120988382856255 | Epoch: 809 | \n\n\nMeanAbsoluteError: 0.0782985016703606 | Loss: 0.0106757854460254 | Epoch: 810 | \n\n\nMeanAbsoluteError: 0.0824560895562172 | Loss: 0.0119074617669533 | Epoch: 811 | \n\n\nMeanAbsoluteError: 0.0821293517947197 | Loss: 0.0119441724711457 | Epoch: 812 | \n\n\nMeanAbsoluteError: 0.0832219794392586 | Loss: 0.0115171739636571 | Epoch: 813 | \n\n\nMeanAbsoluteError: 0.0824938267469406 | Loss: 0.0110972798257656 | Epoch: 814 | \n\n\nMeanAbsoluteError: 0.0840878710150719 | Loss: 0.0117424935035827 | Epoch: 815 | \n\n\nMeanAbsoluteError: 0.0839302688837051 | Loss: 0.0118463204779709 | Epoch: 816 | \n\n\nMeanAbsoluteError: 0.0832107365131378 | Loss: 0.0124136097215523 | Epoch: 817 | \n\n\nMeanAbsoluteError: 0.0769073739647865 | Loss: 0.0101805126779558 | Epoch: 818 | \n\n\nMeanAbsoluteError: 0.0832949578762054 | Loss: 0.0117550637021971 | Epoch: 819 | \n\n\nMeanAbsoluteError: 0.0740096569061279 | Loss: 0.0095643966046312 | Epoch: 820 | \n\n\nMeanAbsoluteError: 0.0754168927669525 | Loss: 0.0096059564733393 | Epoch: 821 | \n\n\nMeanAbsoluteError: 0.0801299884915352 | Loss: 0.0109681259503122 | Epoch: 822 | \n\n\nMeanAbsoluteError: 0.0877290070056915 | Loss: 0.0132411294273576 | Epoch: 823 | \n\n\nMeanAbsoluteError: 0.0738099738955498 | Loss: 0.0091930555650833 | Epoch: 824 | \n\n\nMeanAbsoluteError: 0.0823216438293457 | Loss: 0.0113966476301236 | Epoch: 825 | \n\n\nMeanAbsoluteError: 0.0730762258172035 | Loss: 0.0096490480711994 | Epoch: 826 | \n\n\nMeanAbsoluteError: 0.0775209143757820 | Loss: 0.0108585520722651 | Epoch: 827 | \n\n\nMeanAbsoluteError: 0.0800625681877136 | Loss: 0.0106971635242614 | Epoch: 828 | \n\n\nMeanAbsoluteError: 0.0830442681908607 | Loss: 0.0114131947926944 | Epoch: 829 | \n\n\nMeanAbsoluteError: 0.0812834650278091 | Loss: 0.0124094398109749 | Epoch: 830 | \n\n\nMeanAbsoluteError: 0.0802404880523682 | Loss: 0.0111840228424990 | Epoch: 831 | \n\n\nMeanAbsoluteError: 0.0865611061453819 | Loss: 0.0122170231806558 | Epoch: 832 | \n\n\nMeanAbsoluteError: 0.0766393169760704 | Loss: 0.0107930416374681 | Epoch: 833 | \n\n\nMeanAbsoluteError: 0.0792775452136993 | Loss: 0.0110985868957990 | Epoch: 834 | \n\n\nMeanAbsoluteError: 0.0718979611992836 | Loss: 0.0087367886219439 | Epoch: 835 | \n\n\nMeanAbsoluteError: 0.0837861150503159 | Loss: 0.0112630593621968 | Epoch: 836 | \n\n\nMeanAbsoluteError: 0.0794481039047241 | Loss: 0.0112295329577501 | Epoch: 837 | \n\n\nMeanAbsoluteError: 0.0799805447459221 | Loss: 0.0108191633181499 | Epoch: 838 | \n\n\nMeanAbsoluteError: 0.0753138363361359 | Loss: 0.0100799758657983 | Epoch: 839 | \n\n\nMeanAbsoluteError: 0.0814361795783043 | Loss: 0.0113643640919690 | Epoch: 840 | \n\n\nMeanAbsoluteError: 0.0781028494238853 | Loss: 0.0107340678073494 | Epoch: 841 | \n\n\nMeanAbsoluteError: 0.0771855488419533 | Loss: 0.0102697229348511 | Epoch: 842 | \n\n\nMeanAbsoluteError: 0.0809403955936432 | Loss: 0.0111956146650179 | Epoch: 843 | \n\n\nMeanAbsoluteError: 0.0764201506972313 | Loss: 0.0105490690810499 | Epoch: 844 | \n\n\nMeanAbsoluteError: 0.0738255828619003 | Loss: 0.0097503840384767 | Epoch: 845 | \n\n\nMeanAbsoluteError: 0.0785881280899048 | Loss: 0.0117377337430662 | Epoch: 846 | \n\n\nMeanAbsoluteError: 0.0779688134789467 | Loss: 0.0101995708775818 | Epoch: 847 | \n\n\nMeanAbsoluteError: 0.0807364657521248 | Loss: 0.0107182800451119 | Epoch: 848 | \n\n\nMeanAbsoluteError: 0.0804117023944855 | Loss: 0.0113706592589006 | Epoch: 849 | \n\n\nMeanAbsoluteError: 0.0828294157981873 | Loss: 0.0110238781937854 | Epoch: 850 | \n\n\nMeanAbsoluteError: 0.0774060785770416 | Loss: 0.0108154441271048 | Epoch: 851 | \n\n\nMeanAbsoluteError: 0.0771163329482079 | Loss: 0.0102891369386793 | Epoch: 852 | \n\n\nMeanAbsoluteError: 0.0783403366804123 | Loss: 0.0100651222461117 | Epoch: 853 | \n\n\nMeanAbsoluteError: 0.0766426697373390 | Loss: 0.0103630085376911 | Epoch: 854 | \n\n\nMeanAbsoluteError: 0.0791056975722313 | Loss: 0.0108683706768594 | Epoch: 855 | \n\n\nMeanAbsoluteError: 0.0764939263463020 | Loss: 0.0102093208984782 | Epoch: 856 | \n\n\nMeanAbsoluteError: 0.0814418941736221 | Loss: 0.0116528933390024 | Epoch: 857 | \n\n\nMeanAbsoluteError: 0.0757196247577667 | Loss: 0.0098749243262379 | Epoch: 858 | \n\n\nMeanAbsoluteError: 0.0742248371243477 | Loss: 0.0095135539109712 | Epoch: 859 | \n\n\nMeanAbsoluteError: 0.0841125324368477 | Loss: 0.0119662338884882 | Epoch: 860 | \n\n\nMeanAbsoluteError: 0.0771385431289673 | Loss: 0.0106761798496397 | Epoch: 861 | \n\n\nMeanAbsoluteError: 0.0801075771450996 | Loss: 0.0110092316208102 | Epoch: 862 | \n\n\nMeanAbsoluteError: 0.0781409740447998 | Loss: 0.0107365397114578 | Epoch: 863 | \n\n\nMeanAbsoluteError: 0.0781718343496323 | Loss: 0.0104807782462619 | Epoch: 864 | \n\n\nMeanAbsoluteError: 0.0794635787606239 | Loss: 0.0108283075337143 | Epoch: 865 | \n\n\nMeanAbsoluteError: 0.0785385444760323 | Loss: 0.0109409504162371 | Epoch: 866 | \n\n\nMeanAbsoluteError: 0.0750286206603050 | Loss: 0.0095710122664362 | Epoch: 867 | \n\n\nMeanAbsoluteError: 0.0773174315690994 | Loss: 0.0098690391287285 | Epoch: 868 | \n\n\nMeanAbsoluteError: 0.0767803639173508 | Loss: 0.0110145149399553 | Epoch: 869 | \n\n\nMeanAbsoluteError: 0.0764931514859200 | Loss: 0.0102086972078018 | Epoch: 870 | \n\n\nMeanAbsoluteError: 0.0775896161794662 | Loss: 0.0095922199140356 | Epoch: 871 | \n\n\nMeanAbsoluteError: 0.0743670612573624 | Loss: 0.0099460433783421 | Epoch: 872 | \n\n\nMeanAbsoluteError: 0.0775201916694641 | Loss: 0.0103023139870250 | Epoch: 873 | \n\n\nMeanAbsoluteError: 0.0769089236855507 | Loss: 0.0104139984305948 | Epoch: 874 | \n\n\nMeanAbsoluteError: 0.0778351575136185 | Loss: 0.0103990351249134 | Epoch: 875 | \n\n\nMeanAbsoluteError: 0.0746545642614365 | Loss: 0.0097688974583192 | Epoch: 876 | \n\n\nMeanAbsoluteError: 0.0754441544413567 | Loss: 0.0104262638159222 | Epoch: 877 | \n\n\nMeanAbsoluteError: 0.0789302289485931 | Loss: 0.0107850675039663 | Epoch: 878 | \n\n\nMeanAbsoluteError: 0.0779957920312881 | Loss: 0.0104319902939460 | Epoch: 879 | \n\n\nMeanAbsoluteError: 0.0791888460516930 | Loss: 0.0109203641870196 | Epoch: 880 | \n\n\nMeanAbsoluteError: 0.0734420269727707 | Loss: 0.0102968009971179 | Epoch: 881 | \n\n\nMeanAbsoluteError: 0.0805623084306717 | Loss: 0.0116654501038829 | Epoch: 882 | \n\n\nMeanAbsoluteError: 0.0795516967773438 | Loss: 0.0110667387986662 | Epoch: 883 | \n\n\nMeanAbsoluteError: 0.0825117006897926 | Loss: 0.0111786892855404 | Epoch: 884 | \n\n\nMeanAbsoluteError: 0.0732105821371078 | Loss: 0.0095361146165912 | Epoch: 885 | \n\n\nMeanAbsoluteError: 0.0807303711771965 | Loss: 0.0109143830911247 | Epoch: 886 | \n\n\nMeanAbsoluteError: 0.0835117027163506 | Loss: 0.0127478042116854 | Epoch: 887 | \n\n\nMeanAbsoluteError: 0.0746336653828621 | Loss: 0.0095123651331717 | Epoch: 888 | \n\n\nMeanAbsoluteError: 0.0762807503342628 | Loss: 0.0101715381572285 | Epoch: 889 | \n\n\nMeanAbsoluteError: 0.0816012024879456 | Loss: 0.0111705045261381 | Epoch: 890 | \n\n\nMeanAbsoluteError: 0.0728234797716141 | Loss: 0.0093935145442568 | Epoch: 891 | \n\n\nMeanAbsoluteError: 0.0753166228532791 | Loss: 0.0100770461460039 | Epoch: 892 | \n\n\nMeanAbsoluteError: 0.0754622742533684 | Loss: 0.0094174520477827 | Epoch: 893 | \n\n\nMeanAbsoluteError: 0.0743034332990646 | Loss: 0.0098858077853705 | Epoch: 894 | \n\n\nMeanAbsoluteError: 0.0756712555885315 | Loss: 0.0095969021834026 | Epoch: 895 | \n\n\nMeanAbsoluteError: 0.0754574611783028 | Loss: 0.0102671565598575 | Epoch: 896 | \n\n\nMeanAbsoluteError: 0.0775607079267502 | Loss: 0.0100980512174040 | Epoch: 897 | \n\n\nMeanAbsoluteError: 0.0826487243175507 | Loss: 0.0122165740561710 | Epoch: 898 | \n\n\nMeanAbsoluteError: 0.0699848905205727 | Loss: 0.0087210551842266 | Epoch: 899 | \n\n\nMeanAbsoluteError: 0.0771350860595703 | Loss: 0.0101687256007184 | Epoch: 900 | \n\n\nMeanAbsoluteError: 0.0748658180236816 | Loss: 0.0101067419190076 | Epoch: 901 | \n\n\nMeanAbsoluteError: 0.0805472210049629 | Loss: 0.0112878356254078 | Epoch: 902 | \n\n\nMeanAbsoluteError: 0.0746419876813889 | Loss: 0.0098066572048750 | Epoch: 903 | \n\n\nMeanAbsoluteError: 0.0746952071785927 | Loss: 0.0098825468095553 | Epoch: 904 | \n\n\nMeanAbsoluteError: 0.0787869393825531 | Loss: 0.0108093548449203 | Epoch: 905 | \n\n\nMeanAbsoluteError: 0.0752108991146088 | Loss: 0.0097216395382808 | Epoch: 906 | \n\n\nMeanAbsoluteError: 0.0848613604903221 | Loss: 0.0121929631560245 | Epoch: 907 | \n\n\nMeanAbsoluteError: 0.0791209191083908 | Loss: 0.0117048701097398 | Epoch: 908 | \n\n\nMeanAbsoluteError: 0.0808530300855637 | Loss: 0.0113955594588333 | Epoch: 909 | \n\n\nMeanAbsoluteError: 0.0770772770047188 | Loss: 0.0103067371755454 | Epoch: 910 | \n\n\nMeanAbsoluteError: 0.0764493718743324 | Loss: 0.0102760676636361 | Epoch: 911 | \n\n\nMeanAbsoluteError: 0.0741509124636650 | Loss: 0.0092806246098189 | Epoch: 912 | \n\n\nMeanAbsoluteError: 0.0816884860396385 | Loss: 0.0119303727195802 | Epoch: 913 | \n\n\nMeanAbsoluteError: 0.0733480826020241 | Loss: 0.0095463680885344 | Epoch: 914 | \n\n\nMeanAbsoluteError: 0.0761298462748528 | Loss: 0.0099002483793690 | Epoch: 915 | \n\n\nMeanAbsoluteError: 0.0747096389532089 | Loss: 0.0095522906991149 | Epoch: 916 | \n\n\nMeanAbsoluteError: 0.0766460001468658 | Loss: 0.0108985542458746 | Epoch: 917 | \n\n\nMeanAbsoluteError: 0.0786527916789055 | Loss: 0.0104521911375923 | Epoch: 918 | \n\n\nMeanAbsoluteError: 0.0804752409458160 | Loss: 0.0116180918461760 | Epoch: 919 | \n\n\nMeanAbsoluteError: 0.0777545571327209 | Loss: 0.0103211307371870 | Epoch: 920 | \n\n\nMeanAbsoluteError: 0.0779756531119347 | Loss: 0.0102706307186115 | Epoch: 921 | \n\n\nMeanAbsoluteError: 0.0779359862208366 | Loss: 0.0108993076187714 | Epoch: 922 | \n\n\nMeanAbsoluteError: 0.0759358704090118 | Loss: 0.0103246881165008 | Epoch: 923 | \n\n\nMeanAbsoluteError: 0.0763984173536301 | Loss: 0.0100957613766999 | Epoch: 924 | \n\n\nMeanAbsoluteError: 0.0703286752104759 | Loss: 0.0090990765301346 | Epoch: 925 | \n\n\nMeanAbsoluteError: 0.0735248699784279 | Loss: 0.0098544619079621 | Epoch: 926 | \n\n\nMeanAbsoluteError: 0.0746264457702637 | Loss: 0.0100789326563730 | Epoch: 927 | \n\n\nMeanAbsoluteError: 0.0730664730072021 | Loss: 0.0090286806012470 | Epoch: 928 | \n\n\nMeanAbsoluteError: 0.0797500163316727 | Loss: 0.0102156727723680 | Epoch: 929 | \n\n\nMeanAbsoluteError: 0.0764885991811752 | Loss: 0.0098379029554053 | Epoch: 930 | \n\n\nMeanAbsoluteError: 0.0715815722942352 | Loss: 0.0089564489267408 | Epoch: 931 | \n\n\nMeanAbsoluteError: 0.0794423967599869 | Loss: 0.0112672232636032 | Epoch: 932 | \n\n\nMeanAbsoluteError: 0.0724268928170204 | Loss: 0.0090378722118112 | Epoch: 933 | \n\n\nMeanAbsoluteError: 0.0754097327589989 | Loss: 0.0099079379982322 | Epoch: 934 | \n\n\nMeanAbsoluteError: 0.0757404565811157 | Loss: 0.0097645578289424 | Epoch: 935 | \n\n\nMeanAbsoluteError: 0.0724296793341637 | Loss: 0.0089836852836985 | Epoch: 936 | \n\n\nMeanAbsoluteError: 0.0719136893749237 | Loss: 0.0088832404560041 | Epoch: 937 | \n\n\nMeanAbsoluteError: 0.0790272280573845 | Loss: 0.0099801414067042 | Epoch: 938 | \n\n\nMeanAbsoluteError: 0.0677152350544930 | Loss: 0.0081527328717190 | Epoch: 939 | \n\n\nMeanAbsoluteError: 0.0721540227532387 | Loss: 0.0091816935042637 | Epoch: 940 | \n\n\nMeanAbsoluteError: 0.0765955522656441 | Loss: 0.0094809635374744 | Epoch: 941 | \n\n\nMeanAbsoluteError: 0.0727129876613617 | Loss: 0.0095080480841231 | Epoch: 942 | \n\n\nMeanAbsoluteError: 0.0773292258381844 | Loss: 0.0103785896316579 | Epoch: 943 | \n\n\nMeanAbsoluteError: 0.0792438313364983 | Loss: 0.0110065474185346 | Epoch: 944 | \n\n\nMeanAbsoluteError: 0.0739024132490158 | Loss: 0.0095757057363274 | Epoch: 945 | \n\n\nMeanAbsoluteError: 0.0727039873600006 | Loss: 0.0089056415118163 | Epoch: 946 | \n\n\nMeanAbsoluteError: 0.0793486312031746 | Loss: 0.0110480698788888 | Epoch: 947 | \n\n\nMeanAbsoluteError: 0.0771549344062805 | Loss: 0.0105916457230827 | Epoch: 948 | \n\n\nMeanAbsoluteError: 0.0703706443309784 | Loss: 0.0090822723888171 | Epoch: 949 | \n\n\nMeanAbsoluteError: 0.0740337669849396 | Loss: 0.0102533181999267 | Epoch: 950 | \n\n\nMeanAbsoluteError: 0.0765396952629089 | Loss: 0.0100489563544882 | Epoch: 951 | \n\n\nMeanAbsoluteError: 0.0765357688069344 | Loss: 0.0101444794183408 | Epoch: 952 | \n\n\nMeanAbsoluteError: 0.0734773129224777 | Loss: 0.0099917671943695 | Epoch: 953 | \n\n\nMeanAbsoluteError: 0.0715711712837219 | Loss: 0.0095782629013411 | Epoch: 954 | \n\n\nMeanAbsoluteError: 0.0729345530271530 | Loss: 0.0094018803842967 | Epoch: 955 | \n\n\nMeanAbsoluteError: 0.0733283907175064 | Loss: 0.0096717089774756 | Epoch: 956 | \n\n\nMeanAbsoluteError: 0.0664042308926582 | Loss: 0.0075158126316516 | Epoch: 957 | \n\n\nMeanAbsoluteError: 0.0849085971713066 | Loss: 0.0119881409450318 | Epoch: 958 | \n\n\nMeanAbsoluteError: 0.0715690329670906 | Loss: 0.0091539401113626 | Epoch: 959 | \n\n\nMeanAbsoluteError: 0.0777297839522362 | Loss: 0.0104211996043159 | Epoch: 960 | \n\n\nMeanAbsoluteError: 0.0760367810726166 | Loss: 0.0104746409421205 | Epoch: 961 | \n\n\nMeanAbsoluteError: 0.0776511132717133 | Loss: 0.0111037619700316 | Epoch: 962 | \n\n\nMeanAbsoluteError: 0.0707922950387001 | Loss: 0.0090281871824603 | Epoch: 963 | \n\n\nMeanAbsoluteError: 0.0769897550344467 | Loss: 0.0107690826061783 | Epoch: 964 | \n\n\nMeanAbsoluteError: 0.0697699263691902 | Loss: 0.0081867781741797 | Epoch: 965 | \n\n\nMeanAbsoluteError: 0.0764012634754181 | Loss: 0.0108604474635892 | Epoch: 966 | \n\n\nMeanAbsoluteError: 0.0792110189795494 | Loss: 0.0113623218954369 | Epoch: 967 | \n\n\nMeanAbsoluteError: 0.0680814906954765 | Loss: 0.0083186678276009 | Epoch: 968 | \n\n\nMeanAbsoluteError: 0.0725850313901901 | Loss: 0.0094845377973009 | Epoch: 969 | \n\n\nMeanAbsoluteError: 0.0762547701597214 | Loss: 0.0102596534014204 | Epoch: 970 | \n\n\nMeanAbsoluteError: 0.0696619078516960 | Loss: 0.0081080010741910 | Epoch: 971 | \n\n\nMeanAbsoluteError: 0.0711411610245705 | Loss: 0.0090589344280428 | Epoch: 972 | \n\n\nMeanAbsoluteError: 0.0727351084351540 | Loss: 0.0092486638832391 | Epoch: 973 | \n\n\nMeanAbsoluteError: 0.0737860798835754 | Loss: 0.0092965269653359 | Epoch: 974 | \n\n\nMeanAbsoluteError: 0.0753273069858551 | Loss: 0.0099358842343402 | Epoch: 975 | \n\n\nMeanAbsoluteError: 0.0756720975041389 | Loss: 0.0098584534610563 | Epoch: 976 | \n\n\nMeanAbsoluteError: 0.0716525614261627 | Loss: 0.0090443917666077 | Epoch: 977 | \n\n\nMeanAbsoluteError: 0.0730086863040924 | Loss: 0.0097757532730611 | Epoch: 978 | \n\n\nMeanAbsoluteError: 0.0764009654521942 | Loss: 0.0101318568076385 | Epoch: 979 | \n\n\nMeanAbsoluteError: 0.0712708234786987 | Loss: 0.0090927594126212 | Epoch: 980 | \n\n\nMeanAbsoluteError: 0.0709680244326591 | Loss: 0.0096254755349582 | Epoch: 981 | \n\n\nMeanAbsoluteError: 0.0715130865573883 | Loss: 0.0096350274606569 | Epoch: 982 | \n\n\nMeanAbsoluteError: 0.0728397071361542 | Loss: 0.0099155692999648 | Epoch: 983 | \n\n\nMeanAbsoluteError: 0.0771391838788986 | Loss: 0.0107261698419461 | Epoch: 984 | \n\n\nMeanAbsoluteError: 0.0724724307656288 | Loss: 0.0090657099912035 | Epoch: 985 | \n\n\nMeanAbsoluteError: 0.0712971761822701 | Loss: 0.0090209147415165 | Epoch: 986 | \n\n\nMeanAbsoluteError: 0.0698899328708649 | Loss: 0.0085721351750302 | Epoch: 987 | \n\n\nMeanAbsoluteError: 0.0693163201212883 | Loss: 0.0077545857433385 | Epoch: 988 | \n\n\nMeanAbsoluteError: 0.0778072550892830 | Loss: 0.0107944230326878 | Epoch: 989 | \n\n\nMeanAbsoluteError: 0.0761123374104500 | Loss: 0.0094622577789490 | Epoch: 990 | \n\n\nMeanAbsoluteError: 0.0749316513538361 | Loss: 0.0101282367263229 | Epoch: 991 | \n\n\nMeanAbsoluteError: 0.0717362016439438 | Loss: 0.0088800959480674 | Epoch: 992 | \n\n\nMeanAbsoluteError: 0.0655228495597839 | Loss: 0.0076068037412733 | Epoch: 993 | \n\n\nMeanAbsoluteError: 0.0738191530108452 | Loss: 0.0094339414276571 | Epoch: 994 | \n\n\nMeanAbsoluteError: 0.0797284319996834 | Loss: 0.0114746082314766 | Epoch: 995 | \n\n\nMeanAbsoluteError: 0.0736414566636086 | Loss: 0.0100833321006697 | Epoch: 996 | \n\n\nMeanAbsoluteError: 0.0766720548272133 | Loss: 0.0103790204787462 | Epoch: 997 | \n\n\nMeanAbsoluteError: 0.0690694302320480 | Loss: 0.0089957126947896 | Epoch: 998 | \n\n\nMeanAbsoluteError: 0.0725758820772171 | Loss: 0.0092693577688866 | Epoch: 999 | \n\n\nMeanAbsoluteError: 0.0757641568779945 | Loss: 0.0099406880475484 | Epoch: 1000 | \n\n\nMeanAbsoluteError: 0.0723375603556633 | Loss: 0.0101366889583248 | Epoch: 1001 | \n\n\nMeanAbsoluteError: 0.0713929086923599 | Loss: 0.0091776353289364 | Epoch: 1002 | \n\n\nMeanAbsoluteError: 0.0694112330675125 | Loss: 0.0086696119510937 | Epoch: 1003 | \n\n\nMeanAbsoluteError: 0.0732303783297539 | Loss: 0.0095423594975849 | Epoch: 1004 | \n\n\nMeanAbsoluteError: 0.0719602331519127 | Loss: 0.0082926946849329 | Epoch: 1005 | \n\n\nMeanAbsoluteError: 0.0707664713263512 | Loss: 0.0089822108592731 | Epoch: 1006 | \n\n\nMeanAbsoluteError: 0.0708745792508125 | Loss: 0.0093132891812517 | Epoch: 1007 | \n\n\nMeanAbsoluteError: 0.0725696086883545 | Loss: 0.0094351426910725 | Epoch: 1008 | \n\n\nMeanAbsoluteError: 0.0679365545511246 | Loss: 0.0079000075886628 | Epoch: 1009 | \n\n\nMeanAbsoluteError: 0.0667665898799896 | Loss: 0.0092165257916046 | Epoch: 1010 | \n\n\nMeanAbsoluteError: 0.0719863474369049 | Loss: 0.0090799885893405 | Epoch: 1011 | \n\n\nMeanAbsoluteError: 0.0761761292815208 | Loss: 0.0102922801974637 | Epoch: 1012 | \n\n\nMeanAbsoluteError: 0.0675073340535164 | Loss: 0.0081174084200272 | Epoch: 1013 | \n\n\nMeanAbsoluteError: 0.0678270235657692 | Loss: 0.0079732331828806 | Epoch: 1014 | \n\n\nMeanAbsoluteError: 0.0752263218164444 | Loss: 0.0106562207843914 | Epoch: 1015 | \n\n\nMeanAbsoluteError: 0.0706823244690895 | Loss: 0.0092785234641300 | Epoch: 1016 | \n\n\nMeanAbsoluteError: 0.0702643245458603 | Loss: 0.0087310705716845 | Epoch: 1017 | \n\n\nMeanAbsoluteError: 0.0732280239462852 | Loss: 0.0096235771773142 | Epoch: 1018 | \n\n\nMeanAbsoluteError: 0.0692768841981888 | Loss: 0.0082831174120171 | Epoch: 1019 | \n\n\nMeanAbsoluteError: 0.0753551498055458 | Loss: 0.0096873664389326 | Epoch: 1020 | \n\n\nMeanAbsoluteError: 0.0788179561495781 | Loss: 0.0112903491220156 | Epoch: 1021 | \n\n\nMeanAbsoluteError: 0.0696059018373489 | Loss: 0.0085636919625783 | Epoch: 1022 | \n\n\nMeanAbsoluteError: 0.0750660821795464 | Loss: 0.0098088718126261 | Epoch: 1023 | \n\n\nMeanAbsoluteError: 0.0688222870230675 | Loss: 0.0089297082419822 | Epoch: 1024 | \n\n\nMeanAbsoluteError: 0.0734671279788017 | Loss: 0.0099654179563125 | Epoch: 1025 | \n\n\nMeanAbsoluteError: 0.0677940100431442 | Loss: 0.0084685865843433 | Epoch: 1026 | \n\n\nMeanAbsoluteError: 0.0730460286140442 | Loss: 0.0097838113074319 | Epoch: 1027 | \n\n\nMeanAbsoluteError: 0.0737103074789047 | Loss: 0.0096964498836314 | Epoch: 1028 | \n\n\nMeanAbsoluteError: 0.0693713650107384 | Loss: 0.0093506347872608 | Epoch: 1029 | \n\n\nMeanAbsoluteError: 0.0701157450675964 | Loss: 0.0087472067823546 | Epoch: 1030 | \n\n\nMeanAbsoluteError: 0.0719802454113960 | Loss: 0.0096490722182110 | Epoch: 1031 | \n\n\nMeanAbsoluteError: 0.0744744092226028 | Loss: 0.0104563620192145 | Epoch: 1032 | \n\n\nMeanAbsoluteError: 0.0747015625238419 | Loss: 0.0103342440272293 | Epoch: 1033 | \n\n\nMeanAbsoluteError: 0.0731337293982506 | Loss: 0.0096799701658892 | Epoch: 1034 | \n\n\nMeanAbsoluteError: 0.0718859583139420 | Loss: 0.0092115516729730 | Epoch: 1035 | \n\n\nMeanAbsoluteError: 0.0719785094261169 | Loss: 0.0090696068745698 | Epoch: 1036 | \n\n\nMeanAbsoluteError: 0.0762908458709717 | Loss: 0.0108155495210970 | Epoch: 1037 | \n\n\nMeanAbsoluteError: 0.0699102133512497 | Loss: 0.0090078560039175 | Epoch: 1038 | \n\n\nMeanAbsoluteError: 0.0694839209318161 | Loss: 0.0086378032860375 | Epoch: 1039 | \n\n\nMeanAbsoluteError: 0.0731324180960655 | Loss: 0.0096406716015917 | Epoch: 1040 | \n\n\nMeanAbsoluteError: 0.0663361102342606 | Loss: 0.0076710213937743 | Epoch: 1041 | \n\n\nMeanAbsoluteError: 0.0674593001604080 | Loss: 0.0081189934132271 | Epoch: 1042 | \n\n\nMeanAbsoluteError: 0.0701092034578323 | Loss: 0.0089317029489708 | Epoch: 1043 | \n\n\nMeanAbsoluteError: 0.0735797211527824 | Loss: 0.0096080499193583 | Epoch: 1044 | \n\n\nMeanAbsoluteError: 0.0681488066911697 | Loss: 0.0079945703036507 | Epoch: 1045 | \n\n\nMeanAbsoluteError: 0.0694965645670891 | Loss: 0.0086281360519691 | Epoch: 1046 | \n\n\nMeanAbsoluteError: 0.0708992630243301 | Loss: 0.0085548651159055 | Epoch: 1047 | \n\n\nMeanAbsoluteError: 0.0678436905145645 | Loss: 0.0080009132574439 | Epoch: 1048 | \n\n\nMeanAbsoluteError: 0.0731303021311760 | Loss: 0.0092584842301646 | Epoch: 1049 | \n\n\nMeanAbsoluteError: 0.0756253078579903 | Loss: 0.0105017330964862 | Epoch: 1050 | \n\n\nMeanAbsoluteError: 0.0721068158745766 | Loss: 0.0089157650391523 | Epoch: 1051 | \n\n\nMeanAbsoluteError: 0.0698562487959862 | Loss: 0.0081887228436244 | Epoch: 1052 | \n\n\nMeanAbsoluteError: 0.0688799545168877 | Loss: 0.0084516765458996 | Epoch: 1053 | \n\n\nMeanAbsoluteError: 0.0791916921734810 | Loss: 0.0116683767591409 | Epoch: 1054 | \n\n\nMeanAbsoluteError: 0.0730694830417633 | Loss: 0.0094450911650529 | Epoch: 1055 | \n\n\nMeanAbsoluteError: 0.0685431510210037 | Loss: 0.0087991150578576 | Epoch: 1056 | \n\n\nMeanAbsoluteError: 0.0678988918662071 | Loss: 0.0082361182645339 | Epoch: 1057 | \n\n\nMeanAbsoluteError: 0.0718125626444817 | Loss: 0.0095836025548518 | Epoch: 1058 | \n\n\nMeanAbsoluteError: 0.0689691454172134 | Loss: 0.0083297175485738 | Epoch: 1059 | \n\n\nMeanAbsoluteError: 0.0660716146230698 | Loss: 0.0076677496425570 | Epoch: 1060 | \n\n\nMeanAbsoluteError: 0.0669567584991455 | Loss: 0.0078201846442971 | Epoch: 1061 | \n\n\nMeanAbsoluteError: 0.0718378126621246 | Loss: 0.0092942472408079 | Epoch: 1062 | \n\n\nMeanAbsoluteError: 0.0683273673057556 | Loss: 0.0085367330375690 | Epoch: 1063 | \n\n\nMeanAbsoluteError: 0.0689010992646217 | Loss: 0.0087301500673228 | Epoch: 1064 | \n\n\nMeanAbsoluteError: 0.0643932297825813 | Loss: 0.0071408245173613 | Epoch: 1065 | \n\n\nMeanAbsoluteError: 0.0712036862969398 | Loss: 0.0091494820010121 | Epoch: 1066 | \n\n\nMeanAbsoluteError: 0.0682067498564720 | Loss: 0.0087686679004764 | Epoch: 1067 | \n\n\nMeanAbsoluteError: 0.0710598751902580 | Loss: 0.0090669604683111 | Epoch: 1068 | \n\n\nMeanAbsoluteError: 0.0675958842039108 | Loss: 0.0081680967913417 | Epoch: 1069 | \n\n\nMeanAbsoluteError: 0.0707667469978333 | Loss: 0.0094727789251677 | Epoch: 1070 | \n\n\nMeanAbsoluteError: 0.0663241595029831 | Loss: 0.0078773448887538 | Epoch: 1071 | \n\n\nMeanAbsoluteError: 0.0724717304110527 | Loss: 0.0093914666551670 | Epoch: 1072 | \n\n\nMeanAbsoluteError: 0.0717313811182976 | Loss: 0.0090600793244569 | Epoch: 1073 | \n\n\nMeanAbsoluteError: 0.0719677880406380 | Loss: 0.0091367837757692 | Epoch: 1074 | \n\n\nMeanAbsoluteError: 0.0674020349979401 | Loss: 0.0085003050091230 | Epoch: 1075 | \n\n\nMeanAbsoluteError: 0.0694231316447258 | Loss: 0.0089321442251821 | Epoch: 1076 | \n\n\nMeanAbsoluteError: 0.0661793649196625 | Loss: 0.0070797218290924 | Epoch: 1077 | \n\n\nMeanAbsoluteError: 0.0693086609244347 | Loss: 0.0086002728496048 | Epoch: 1078 | \n\n\nMeanAbsoluteError: 0.0682182610034943 | Loss: 0.0084075029252078 | Epoch: 1079 | \n\n\nMeanAbsoluteError: 0.0723419412970543 | Loss: 0.0090570476208813 | Epoch: 1080 | \n\n\nMeanAbsoluteError: 0.0651640966534615 | Loss: 0.0080746152600235 | Epoch: 1081 | \n\n\nMeanAbsoluteError: 0.0617406852543354 | Loss: 0.0069656755405716 | Epoch: 1082 | \n\n\nMeanAbsoluteError: 0.0633678138256073 | Loss: 0.0072673743660562 | Epoch: 1083 | \n\n\nMeanAbsoluteError: 0.0673019960522652 | Loss: 0.0079992112914139 | Epoch: 1084 | \n\n\nMeanAbsoluteError: 0.0694029703736305 | Loss: 0.0083690348218806 | Epoch: 1085 | \n\n\nMeanAbsoluteError: 0.0638776794075966 | Loss: 0.0074368117840095 | Epoch: 1086 | \n\n\nMeanAbsoluteError: 0.0665798112750053 | Loss: 0.0080212725897824 | Epoch: 1087 | \n\n\nMeanAbsoluteError: 0.0722908452153206 | Loss: 0.0093754962139550 | Epoch: 1088 | \n\n\nMeanAbsoluteError: 0.0764328837394714 | Loss: 0.0104183597763282 | Epoch: 1089 | \n\n\nMeanAbsoluteError: 0.0698969215154648 | Loss: 0.0095780186166182 | Epoch: 1090 | \n\n\nMeanAbsoluteError: 0.0676443576812744 | Loss: 0.0079124876828185 | Epoch: 1091 | \n\n\nMeanAbsoluteError: 0.0707011148333549 | Loss: 0.0085442703529285 | Epoch: 1092 | \n\n\nMeanAbsoluteError: 0.0677080750465393 | Loss: 0.0080793829660009 | Epoch: 1093 | \n\n\nMeanAbsoluteError: 0.0691639408469200 | Loss: 0.0086508790500860 | Epoch: 1094 | \n\n\nMeanAbsoluteError: 0.0643378347158432 | Loss: 0.0072232539331981 | Epoch: 1095 | \n\n\nMeanAbsoluteError: 0.0713246688246727 | Loss: 0.0092748370420062 | Epoch: 1096 | \n\n\nMeanAbsoluteError: 0.0711861550807953 | Loss: 0.0087414858707052 | Epoch: 1097 | \n\n\nMeanAbsoluteError: 0.0624565519392490 | Loss: 0.0068722203207653 | Epoch: 1098 | \n\n\nMeanAbsoluteError: 0.0719688534736633 | Loss: 0.0088836418749270 | Epoch: 1099 | \n\n\nMeanAbsoluteError: 0.0663241520524025 | Loss: 0.0074788226276473 | Epoch: 1100 | \n\n\nMeanAbsoluteError: 0.0681140944361687 | Loss: 0.0081330509797651 | Epoch: 1101 | \n\n\nMeanAbsoluteError: 0.0636119991540909 | Loss: 0.0069956652772574 | Epoch: 1102 | \n\n\nMeanAbsoluteError: 0.0701044127345085 | Loss: 0.0090232997812564 | Epoch: 1103 | \n\n\nMeanAbsoluteError: 0.0704035684466362 | Loss: 0.0088492787976065 | Epoch: 1104 | \n\n\nMeanAbsoluteError: 0.0680999532341957 | Loss: 0.0082811595315676 | Epoch: 1105 | \n\n\nMeanAbsoluteError: 0.0747594609856606 | Loss: 0.0104180746887384 | Epoch: 1106 | \n\n\nMeanAbsoluteError: 0.0672458261251450 | Loss: 0.0086416085725553 | Epoch: 1107 | \n\n\nMeanAbsoluteError: 0.0632396042346954 | Loss: 0.0071163129012992 | Epoch: 1108 | \n\n\nMeanAbsoluteError: 0.0686077326536179 | Loss: 0.0078957221242308 | Epoch: 1109 | \n\n\nMeanAbsoluteError: 0.0693401023745537 | Loss: 0.0088114524478200 | Epoch: 1110 | \n\n\nMeanAbsoluteError: 0.0736144557595253 | Loss: 0.0092911955611695 | Epoch: 1111 | \n\n\nMeanAbsoluteError: 0.0670956149697304 | Loss: 0.0083384482148055 | Epoch: 1112 | \n\n\nMeanAbsoluteError: 0.0610097646713257 | Loss: 0.0068200649288337 | Epoch: 1113 | \n\n\nMeanAbsoluteError: 0.0702242180705070 | Loss: 0.0086200210745604 | Epoch: 1114 | \n\n\nMeanAbsoluteError: 0.0643501579761505 | Loss: 0.0074991043059951 | Epoch: 1115 | \n\n\nMeanAbsoluteError: 0.0699807405471802 | Loss: 0.0084590349494465 | Epoch: 1116 | \n\n\nMeanAbsoluteError: 0.0649750903248787 | Loss: 0.0079310609535363 | Epoch: 1117 | \n\n\nMeanAbsoluteError: 0.0683524161577225 | Loss: 0.0086109045504539 | Epoch: 1118 | \n\n\nMeanAbsoluteError: 0.0705199390649796 | Loss: 0.0088848530270419 | Epoch: 1119 | \n\n\nMeanAbsoluteError: 0.0647038966417313 | Loss: 0.0078909225898678 | Epoch: 1120 | \n\n\nMeanAbsoluteError: 0.0658162757754326 | Loss: 0.0074180137240910 | Epoch: 1121 | \n\n\nMeanAbsoluteError: 0.0630656927824020 | Loss: 0.0073879817066942 | Epoch: 1122 | \n\n\nMeanAbsoluteError: 0.0704290568828583 | Loss: 0.0097256720506872 | Epoch: 1123 | \n\n\nMeanAbsoluteError: 0.0673821568489075 | Loss: 0.0086733655763722 | Epoch: 1124 | \n\n\nMeanAbsoluteError: 0.0633160769939423 | Loss: 0.0074544591983105 | Epoch: 1125 | \n\n\nMeanAbsoluteError: 0.0698489397764206 | Loss: 0.0092363261471716 | Epoch: 1126 | \n\n\nMeanAbsoluteError: 0.0667150542140007 | Loss: 0.0085544286544367 | Epoch: 1127 | \n\n\nMeanAbsoluteError: 0.0622264780104160 | Loss: 0.0073222268723475 | Epoch: 1128 | \n\n\nMeanAbsoluteError: 0.0700443759560585 | Loss: 0.0087137780142560 | Epoch: 1129 | \n\n\nMeanAbsoluteError: 0.0636391043663025 | Loss: 0.0080010952279796 | Epoch: 1130 | \n\n\nMeanAbsoluteError: 0.0685411989688873 | Loss: 0.0085516337645155 | Epoch: 1131 | \n\n\nMeanAbsoluteError: 0.0694776251912117 | Loss: 0.0088909361958455 | Epoch: 1132 | \n\n\nMeanAbsoluteError: 0.0710195824503899 | Loss: 0.0093507448901801 | Epoch: 1133 | \n\n\nMeanAbsoluteError: 0.0692139938473701 | Loss: 0.0095294034390342 | Epoch: 1134 | \n\n\nMeanAbsoluteError: 0.0640364289283752 | Loss: 0.0074145980762357 | Epoch: 1135 | \n\n\nMeanAbsoluteError: 0.0730346888303757 | Loss: 0.0099281933723008 | Epoch: 1136 | \n\n\nMeanAbsoluteError: 0.0645968988537788 | Loss: 0.0076082818453475 | Epoch: 1137 | \n\n\nMeanAbsoluteError: 0.0681149587035179 | Loss: 0.0081982624193188 | Epoch: 1138 | \n\n\nMeanAbsoluteError: 0.0568541400134563 | Loss: 0.0061345131113436 | Epoch: 1139 | \n\n\nMeanAbsoluteError: 0.0721034705638885 | Loss: 0.0091914032175312 | Epoch: 1140 | \n\n\nMeanAbsoluteError: 0.0628835782408714 | Loss: 0.0072235697410118 | Epoch: 1141 | \n\n\nMeanAbsoluteError: 0.0682444572448730 | Loss: 0.0088440893554556 | Epoch: 1142 | \n\n\nMeanAbsoluteError: 0.0657172799110413 | Loss: 0.0081542717427102 | Epoch: 1143 | \n\n\nMeanAbsoluteError: 0.0689317211508751 | Loss: 0.0088074087502294 | Epoch: 1144 | \n\n\nMeanAbsoluteError: 0.0665861964225769 | Loss: 0.0082033753929803 | Epoch: 1145 | \n\n\nMeanAbsoluteError: 0.0685911178588867 | Loss: 0.0083404243922996 | Epoch: 1146 | \n\n\nMeanAbsoluteError: 0.0693357139825821 | Loss: 0.0087487636282337 | Epoch: 1147 | \n\n\nMeanAbsoluteError: 0.0690763443708420 | Loss: 0.0085716901036115 | Epoch: 1148 | \n\n\nMeanAbsoluteError: 0.0654565021395683 | Loss: 0.0075826229208421 | Epoch: 1149 | \n\n\nMeanAbsoluteError: 0.0637311413884163 | Loss: 0.0080189988608921 | Epoch: 1150 | \n\n\nMeanAbsoluteError: 0.0630521327257156 | Loss: 0.0073405471866863 | Epoch: 1151 | \n\n\nMeanAbsoluteError: 0.0673010796308517 | Loss: 0.0082781683623974 | Epoch: 1152 | \n\n\nMeanAbsoluteError: 0.0652497187256813 | Loss: 0.0075149046512282 | Epoch: 1153 | \n\n\nMeanAbsoluteError: 0.0644122660160065 | Loss: 0.0076896131125432 | Epoch: 1154 | \n\n\nMeanAbsoluteError: 0.0695091784000397 | Loss: 0.0089211251551933 | Epoch: 1155 | \n\n\nMeanAbsoluteError: 0.0651471838355064 | Loss: 0.0078405609992236 | Epoch: 1156 | \n\n\nMeanAbsoluteError: 0.0650300532579422 | Loss: 0.0082767158206358 | Epoch: 1157 | \n\n\nMeanAbsoluteError: 0.0638088062405586 | Loss: 0.0075246719357043 | Epoch: 1158 | \n\n\nMeanAbsoluteError: 0.0634868741035461 | Loss: 0.0084015505952266 | Epoch: 1159 | \n\n\nMeanAbsoluteError: 0.0657244622707367 | Loss: 0.0075654348954837 | Epoch: 1160 | \n\n\nMeanAbsoluteError: 0.0686446800827980 | Loss: 0.0085990752160918 | Epoch: 1161 | \n\n\nMeanAbsoluteError: 0.0593461729586124 | Loss: 0.0063627362946863 | Epoch: 1162 | \n\n\nMeanAbsoluteError: 0.0659839585423470 | Loss: 0.0084608737313435 | Epoch: 1163 | \n\n\nMeanAbsoluteError: 0.0680202767252922 | Loss: 0.0081164759048746 | Epoch: 1164 | \n\n\nMeanAbsoluteError: 0.0614863261580467 | Loss: 0.0067693859304488 | Epoch: 1165 | \n\n\nMeanAbsoluteError: 0.0639742016792297 | Loss: 0.0075848067779407 | Epoch: 1166 | \n\n\nMeanAbsoluteError: 0.0661838501691818 | Loss: 0.0072266113433094 | Epoch: 1167 | \n\n\nMeanAbsoluteError: 0.0694292783737183 | Loss: 0.0087912789970475 | Epoch: 1168 | \n\n\nMeanAbsoluteError: 0.0628383010625839 | Loss: 0.0072622589636194 | Epoch: 1169 | \n\n\nMeanAbsoluteError: 0.0737675130367279 | Loss: 0.0095739141812858 | Epoch: 1170 | \n\n\nMeanAbsoluteError: 0.0631414502859116 | Loss: 0.0071509282972784 | Epoch: 1171 | \n\n\nMeanAbsoluteError: 0.0655021741986275 | Loss: 0.0075843964378995 | Epoch: 1172 | \n\n\nMeanAbsoluteError: 0.0635970532894135 | Loss: 0.0075995598383588 | Epoch: 1173 | \n\n\nMeanAbsoluteError: 0.0690304338932037 | Loss: 0.0088975602488790 | Epoch: 1174 | \n\n\nMeanAbsoluteError: 0.0650118961930275 | Loss: 0.0073082571775012 | Epoch: 1175 | \n\n\nMeanAbsoluteError: 0.0636664181947708 | Loss: 0.0084230540087447 | Epoch: 1176 | \n\n\nMeanAbsoluteError: 0.0656239017844200 | Loss: 0.0078917141198508 | Epoch: 1177 | \n\n\nMeanAbsoluteError: 0.0640999376773834 | Loss: 0.0077136761686173 | Epoch: 1178 | \n\n\nMeanAbsoluteError: 0.0677836909890175 | Loss: 0.0082124785569370 | Epoch: 1179 | \n\n\nMeanAbsoluteError: 0.0680667757987976 | Loss: 0.0084519529765930 | Epoch: 1180 | \n\n\nMeanAbsoluteError: 0.0644348189234734 | Loss: 0.0077755609569188 | Epoch: 1181 | \n\n\nMeanAbsoluteError: 0.0679789781570435 | Loss: 0.0082269871740209 | Epoch: 1182 | \n\n\nMeanAbsoluteError: 0.0693719983100891 | Loss: 0.0088834195684467 | Epoch: 1183 | \n\n\nMeanAbsoluteError: 0.0708234310150146 | Loss: 0.0084363166937449 | Epoch: 1184 | \n\n\nMeanAbsoluteError: 0.0643603578209877 | Loss: 0.0071625918989594 | Epoch: 1185 | \n\n\nMeanAbsoluteError: 0.0663974136114120 | Loss: 0.0078951712282408 | Epoch: 1186 | \n\n\nMeanAbsoluteError: 0.0646793991327286 | Loss: 0.0071780992643107 | Epoch: 1187 | \n\n\nMeanAbsoluteError: 0.0636620670557022 | Loss: 0.0079789436916326 | Epoch: 1188 | \n\n\nMeanAbsoluteError: 0.0629383102059364 | Loss: 0.0070229293719361 | Epoch: 1189 | \n\n\nMeanAbsoluteError: 0.0677320435643196 | Loss: 0.0090679464868541 | Epoch: 1190 | \n\n\nMeanAbsoluteError: 0.0631995424628258 | Loss: 0.0069566987120197 | Epoch: 1191 | \n\n\nMeanAbsoluteError: 0.0657962933182716 | Loss: 0.0077235924074193 | Epoch: 1192 | \n\n\nMeanAbsoluteError: 0.0663131698966026 | Loss: 0.0092412873707660 | Epoch: 1193 | \n\n\nMeanAbsoluteError: 0.0706317797303200 | Loss: 0.0083772922731199 | Epoch: 1194 | \n\n\nMeanAbsoluteError: 0.0617574639618397 | Loss: 0.0068849398712094 | Epoch: 1195 | \n\n\nMeanAbsoluteError: 0.0634381845593452 | Loss: 0.0072911292174892 | Epoch: 1196 | \n\n\nMeanAbsoluteError: 0.0610828660428524 | Loss: 0.0069242807231785 | Epoch: 1197 | \n\n\nMeanAbsoluteError: 0.0656199231743813 | Loss: 0.0077633254823741 | Epoch: 1198 | \n\n\nMeanAbsoluteError: 0.0640247687697411 | Loss: 0.0071229057681436 | Epoch: 1199 | \n\n\nMeanAbsoluteError: 0.0605994984507561 | Loss: 0.0064563069170739 | Epoch: 1200 | \n\n\nMeanAbsoluteError: 0.0638386979699135 | Loss: 0.0079527828085217 | Epoch: 1201 | \n\n\nMeanAbsoluteError: 0.0638684779405594 | Loss: 0.0074921829904876 | Epoch: 1202 | \n\n\nMeanAbsoluteError: 0.0665121003985405 | Loss: 0.0076121065080103 | Epoch: 1203 | \n\n\nMeanAbsoluteError: 0.0627066642045975 | Loss: 0.0067927504340817 | Epoch: 1204 | \n\n\nMeanAbsoluteError: 0.0616116859018803 | Loss: 0.0066306355282965 | Epoch: 1205 | \n\n\nMeanAbsoluteError: 0.0623222216963768 | Loss: 0.0068787825482286 | Epoch: 1206 | \n\n\nMeanAbsoluteError: 0.0655873268842697 | Loss: 0.0077651797419336 | Epoch: 1207 | \n\n\nMeanAbsoluteError: 0.0612384974956512 | Loss: 0.0075284201707594 | Epoch: 1208 | \n\n\nMeanAbsoluteError: 0.0662722215056419 | Loss: 0.0078261838824255 | Epoch: 1209 | \n\n\nMeanAbsoluteError: 0.0682407394051552 | Loss: 0.0078729740777150 | Epoch: 1210 | \n\n\nMeanAbsoluteError: 0.0614073686301708 | Loss: 0.0067319621486240 | Epoch: 1211 | \n\n\nMeanAbsoluteError: 0.0699118971824646 | Loss: 0.0092297816770345 | Epoch: 1212 | \n\n\nMeanAbsoluteError: 0.0663583725690842 | Loss: 0.0077028569242248 | Epoch: 1213 | \n\n\nMeanAbsoluteError: 0.0629780292510986 | Loss: 0.0072989186171132 | Epoch: 1214 | \n\n\nMeanAbsoluteError: 0.0623923316597939 | Loss: 0.0071688902984048 | Epoch: 1215 | \n\n\nMeanAbsoluteError: 0.0588259436190128 | Loss: 0.0064029444973736 | Epoch: 1216 | \n\n\nMeanAbsoluteError: 0.0604680627584457 | Loss: 0.0068228776528940 | Epoch: 1217 | \n\n\nMeanAbsoluteError: 0.0586263462901115 | Loss: 0.0064769137612226 | Epoch: 1218 | \n\n\nMeanAbsoluteError: 0.0602800883352757 | Loss: 0.0070878212951963 | Epoch: 1219 | \n\n\nMeanAbsoluteError: 0.0674337223172188 | Loss: 0.0092628806611174 | Epoch: 1220 | \n\n\nMeanAbsoluteError: 0.0636176913976669 | Loss: 0.0072799733443208 | Epoch: 1221 | \n\n\nMeanAbsoluteError: 0.0637678205966949 | Loss: 0.0073069029384836 | Epoch: 1222 | \n\n\nMeanAbsoluteError: 0.0659564435482025 | Loss: 0.0083267193833550 | Epoch: 1223 | \n\n\nMeanAbsoluteError: 0.0627924129366875 | Loss: 0.0073029461163727 | Epoch: 1224 | \n\n\nMeanAbsoluteError: 0.0610148310661316 | Loss: 0.0069422768032139 | Epoch: 1225 | \n\n\nMeanAbsoluteError: 0.0654839575290680 | Loss: 0.0077286712363032 | Epoch: 1226 | \n\n\nMeanAbsoluteError: 0.0612850524485111 | Loss: 0.0070277456571178 | Epoch: 1227 | \n\n\nMeanAbsoluteError: 0.0624229349195957 | Loss: 0.0072544638851347 | Epoch: 1228 | \n\n\nMeanAbsoluteError: 0.0678682103753090 | Loss: 0.0082256965307442 | Epoch: 1229 | \n\n\nMeanAbsoluteError: 0.0637050569057465 | Loss: 0.0075593736559676 | Epoch: 1230 | \n\n\nMeanAbsoluteError: 0.0608091801404953 | Loss: 0.0070597851579108 | Epoch: 1231 | \n\n\nMeanAbsoluteError: 0.0629947930574417 | Loss: 0.0079606243237504 | Epoch: 1232 | \n\n\nMeanAbsoluteError: 0.0592392273247242 | Loss: 0.0063577746347922 | Epoch: 1233 | \n\n\nMeanAbsoluteError: 0.0641319230198860 | Loss: 0.0074856198683119 | Epoch: 1234 | \n\n\nMeanAbsoluteError: 0.0640417709946632 | Loss: 0.0076579014409557 | Epoch: 1235 | \n\n\nMeanAbsoluteError: 0.0648472234606743 | Loss: 0.0072228103398447 | Epoch: 1236 | \n\n\nMeanAbsoluteError: 0.0654282867908478 | Loss: 0.0078260383226977 | Epoch: 1237 | \n\n\nMeanAbsoluteError: 0.0594246536493301 | Loss: 0.0063910981766579 | Epoch: 1238 | \n\n\nMeanAbsoluteError: 0.0600025355815887 | Loss: 0.0071964854974552 | Epoch: 1239 | \n\n\nMeanAbsoluteError: 0.0626812949776649 | Loss: 0.0070920031542361 | Epoch: 1240 | \n\n\nMeanAbsoluteError: 0.0636621788144112 | Loss: 0.0071963769529702 | Epoch: 1241 | \n\n\nMeanAbsoluteError: 0.0603998377919197 | Loss: 0.0066154810394194 | Epoch: 1242 | \n\n\nMeanAbsoluteError: 0.0580286346375942 | Loss: 0.0068103034042815 | Epoch: 1243 | \n\n\nMeanAbsoluteError: 0.0658731386065483 | Loss: 0.0077163204426567 | Epoch: 1244 | \n\n\nMeanAbsoluteError: 0.0682158097624779 | Loss: 0.0090915094003140 | Epoch: 1245 | \n\n\nMeanAbsoluteError: 0.0638194233179092 | Loss: 0.0076256748243153 | Epoch: 1246 | \n\n\nMeanAbsoluteError: 0.0638536140322685 | Loss: 0.0074687880871534 | Epoch: 1247 | \n\n\nMeanAbsoluteError: 0.0676750391721725 | Loss: 0.0083274144616007 | Epoch: 1248 | \n\n\nMeanAbsoluteError: 0.0632640346884727 | Loss: 0.0076300418087703 | Epoch: 1249 | \n\n\nMeanAbsoluteError: 0.0602971278131008 | Loss: 0.0067283271338359 | Epoch: 1250 | \n\n\nMeanAbsoluteError: 0.0630327090620995 | Loss: 0.0074337795241854 | Epoch: 1251 | \n\n\nMeanAbsoluteError: 0.0637849867343903 | Loss: 0.0076189291305491 | Epoch: 1252 | \n\n\nMeanAbsoluteError: 0.0609539151191711 | Loss: 0.0072467654468710 | Epoch: 1253 | \n\n\nMeanAbsoluteError: 0.0717900246381760 | Loss: 0.0093050736988031 | Epoch: 1254 | \n\n\nMeanAbsoluteError: 0.0611215718090534 | Loss: 0.0069163748118808 | Epoch: 1255 | \n\n\nMeanAbsoluteError: 0.0634086951613426 | Loss: 0.0077655467807199 | Epoch: 1256 | \n\n\nMeanAbsoluteError: 0.0623031929135323 | Loss: 0.0069076488720990 | Epoch: 1257 | \n\n\nMeanAbsoluteError: 0.0590523481369019 | Loss: 0.0064767875665954 | Epoch: 1258 | \n\n\nMeanAbsoluteError: 0.0597368627786636 | Loss: 0.0058900471955470 | Epoch: 1259 | \n\n\nMeanAbsoluteError: 0.0659222677350044 | Loss: 0.0078090839892623 | Epoch: 1260 | \n\n\nMeanAbsoluteError: 0.0587507560849190 | Loss: 0.0060456933487876 | Epoch: 1261 | \n\n\nMeanAbsoluteError: 0.0604133717715740 | Loss: 0.0064466639775977 | Epoch: 1262 | \n\n\nMeanAbsoluteError: 0.0602659657597542 | Loss: 0.0066147537159486 | Epoch: 1263 | \n\n\nMeanAbsoluteError: 0.0659210681915283 | Loss: 0.0075018033431297 | Epoch: 1264 | \n\n\nMeanAbsoluteError: 0.0629273429512978 | Loss: 0.0077414131077482 | Epoch: 1265 | \n\n\nMeanAbsoluteError: 0.0602748617529869 | Loss: 0.0069400191610233 | Epoch: 1266 | \n\n\nMeanAbsoluteError: 0.0618423782289028 | Loss: 0.0073407786262032 | Epoch: 1267 | \n\n\nMeanAbsoluteError: 0.0601481124758720 | Loss: 0.0072917424881962 | Epoch: 1268 | \n\n\nMeanAbsoluteError: 0.0637676566839218 | Loss: 0.0080641012059035 | Epoch: 1269 | \n\n\nMeanAbsoluteError: 0.0600695498287678 | Loss: 0.0066601895076504 | Epoch: 1270 | \n\n\nMeanAbsoluteError: 0.0643502548336983 | Loss: 0.0085518484201020 | Epoch: 1271 | \n\n\nMeanAbsoluteError: 0.0621754974126816 | Loss: 0.0069625924370969 | Epoch: 1272 | \n\n\nMeanAbsoluteError: 0.0601709112524986 | Loss: 0.0060629628669267 | Epoch: 1273 | \n\n\nMeanAbsoluteError: 0.0641725510358810 | Loss: 0.0077398539259896 | Epoch: 1274 | \n\n\nMeanAbsoluteError: 0.0588267147541046 | Loss: 0.0070124945870217 | Epoch: 1275 | \n\n\nMeanAbsoluteError: 0.0626857057213783 | Loss: 0.0071745190692188 | Epoch: 1276 | \n\n\nMeanAbsoluteError: 0.0624087601900101 | Loss: 0.0067718264816601 | Epoch: 1277 | \n\n\nMeanAbsoluteError: 0.0588923916220665 | Loss: 0.0065521929023392 | Epoch: 1278 | \n\n\nMeanAbsoluteError: 0.0618937946856022 | Loss: 0.0068137911330511 | Epoch: 1279 | \n\n\nMeanAbsoluteError: 0.0579067021608353 | Loss: 0.0057953725017069 | Epoch: 1280 | \n\n\nMeanAbsoluteError: 0.0647194832563400 | Loss: 0.0076527326156490 | Epoch: 1281 | \n\n\nMeanAbsoluteError: 0.0623487271368504 | Loss: 0.0070749801584073 | Epoch: 1282 | \n\n\nMeanAbsoluteError: 0.0650510042905807 | Loss: 0.0080797809162201 | Epoch: 1283 | \n\n\nMeanAbsoluteError: 0.0673635900020599 | Loss: 0.0075853963613433 | Epoch: 1284 | \n\n\nMeanAbsoluteError: 0.0673955306410789 | Loss: 0.0084427857683174 | Epoch: 1285 | \n\n\nMeanAbsoluteError: 0.0636771395802498 | Loss: 0.0071116609923289 | Epoch: 1286 | \n\n\nMeanAbsoluteError: 0.0557297952473164 | Loss: 0.0058030620970627 | Epoch: 1287 | \n\n\nMeanAbsoluteError: 0.0586284138262272 | Loss: 0.0068149602077998 | Epoch: 1288 | \n\n\nMeanAbsoluteError: 0.0616724006831646 | Loss: 0.0071897057637761 | Epoch: 1289 | \n\n\nMeanAbsoluteError: 0.0647143125534058 | Loss: 0.0073602350142028 | Epoch: 1290 | \n\n\nMeanAbsoluteError: 0.0561532340943813 | Loss: 0.0060248755173719 | Epoch: 1291 | \n\n\nMeanAbsoluteError: 0.0588872097432613 | Loss: 0.0066914881002716 | Epoch: 1292 | \n\n\nMeanAbsoluteError: 0.0592726506292820 | Loss: 0.0062342988254629 | Epoch: 1293 | \n\n\nMeanAbsoluteError: 0.0595637112855911 | Loss: 0.0066505825210455 | Epoch: 1294 | \n\n\nMeanAbsoluteError: 0.0549105443060398 | Loss: 0.0056616590865148 | Epoch: 1295 | \n\n\nMeanAbsoluteError: 0.0625222697854042 | Loss: 0.0068665233757565 | Epoch: 1296 | \n\n\nMeanAbsoluteError: 0.0566158629953861 | Loss: 0.0062104222044521 | Epoch: 1297 | \n\n\nMeanAbsoluteError: 0.0618584044277668 | Loss: 0.0070241265785050 | Epoch: 1298 | \n\n\nMeanAbsoluteError: 0.0594248883426189 | Loss: 0.0069459147612118 | Epoch: 1299 | \n\n\nMeanAbsoluteError: 0.0622272603213787 | Loss: 0.0074573160023526 | Epoch: 1300 | \n\n\nMeanAbsoluteError: 0.0594698637723923 | Loss: 0.0069741047012303 | Epoch: 1301 | \n\n\nMeanAbsoluteError: 0.0579961128532887 | Loss: 0.0069740403233360 | Epoch: 1302 | \n\n\nMeanAbsoluteError: 0.0599656663835049 | Loss: 0.0072865175659535 | Epoch: 1303 | \n\n\nMeanAbsoluteError: 0.0624936595559120 | Loss: 0.0073876735518328 | Epoch: 1304 | \n\n\nMeanAbsoluteError: 0.0610631369054317 | Loss: 0.0067687466252695 | Epoch: 1305 | \n\n\nMeanAbsoluteError: 0.0625288039445877 | Loss: 0.0072661710742106 | Epoch: 1306 | \n\n\nMeanAbsoluteError: 0.0603088513016701 | Loss: 0.0070992012679199 | Epoch: 1307 | \n\n\nMeanAbsoluteError: 0.0615134350955486 | Loss: 0.0068495385882003 | Epoch: 1308 | \n\n\nMeanAbsoluteError: 0.0575127936899662 | Loss: 0.0061127125966262 | Epoch: 1309 | \n\n\nMeanAbsoluteError: 0.0672807991504669 | Loss: 0.0086072244690392 | Epoch: 1310 | \n\n\nMeanAbsoluteError: 0.0644313320517540 | Loss: 0.0084025245387420 | Epoch: 1311 | \n\n\nMeanAbsoluteError: 0.0646878629922867 | Loss: 0.0071357543653236 | Epoch: 1312 | \n\n\nMeanAbsoluteError: 0.0562869086861610 | Loss: 0.0058477657335849 | Epoch: 1313 | \n\n\nMeanAbsoluteError: 0.0620988830924034 | Loss: 0.0074806166989447 | Epoch: 1314 | \n\n\nMeanAbsoluteError: 0.0671301335096359 | Loss: 0.0084829986490452 | Epoch: 1315 | \n\n\nMeanAbsoluteError: 0.0634774938225746 | Loss: 0.0082823823812214 | Epoch: 1316 | \n\n\nMeanAbsoluteError: 0.0584264993667603 | Loss: 0.0060556682418413 | Epoch: 1317 | \n\n\nMeanAbsoluteError: 0.0553562752902508 | Loss: 0.0055762075724730 | Epoch: 1318 | \n\n\nMeanAbsoluteError: 0.0631681606173515 | Loss: 0.0072884432606467 | Epoch: 1319 | \n\n\nMeanAbsoluteError: 0.0585636831820011 | Loss: 0.0067937828821899 | Epoch: 1320 | \n\n\nMeanAbsoluteError: 0.0601073652505875 | Loss: 0.0069069218236837 | Epoch: 1321 | \n\n\nMeanAbsoluteError: 0.0592857040464878 | Loss: 0.0060135061820135 | Epoch: 1322 | \n\n\nMeanAbsoluteError: 0.0585643053054810 | Loss: 0.0065385152722350 | Epoch: 1323 | \n\n\nMeanAbsoluteError: 0.0556948855519295 | Loss: 0.0055800235328085 | Epoch: 1324 | \n\n\nMeanAbsoluteError: 0.0630860254168510 | Loss: 0.0076132753168349 | Epoch: 1325 | \n\n\nMeanAbsoluteError: 0.0604993179440498 | Loss: 0.0065574741142821 | Epoch: 1326 | \n\n\nMeanAbsoluteError: 0.0557281114161015 | Loss: 0.0057680278202558 | Epoch: 1327 | \n\n\nMeanAbsoluteError: 0.0650261491537094 | Loss: 0.0077713587357236 | Epoch: 1328 | \n\n\nMeanAbsoluteError: 0.0594450384378433 | Loss: 0.0072241933765842 | Epoch: 1329 | \n\n\nMeanAbsoluteError: 0.0586771965026855 | Loss: 0.0064483105690548 | Epoch: 1330 | \n\n\nMeanAbsoluteError: 0.0587195083498955 | Loss: 0.0074206920600288 | Epoch: 1331 | \n\n\nMeanAbsoluteError: 0.0637977644801140 | Loss: 0.0067886768792232 | Epoch: 1332 | \n\n\nMeanAbsoluteError: 0.0652621686458588 | Loss: 0.0074189749639481 | Epoch: 1333 | \n\n\nMeanAbsoluteError: 0.0586406141519547 | Loss: 0.0060554788097761 | Epoch: 1334 | \n\n\nMeanAbsoluteError: 0.0655524730682373 | Loss: 0.0084028575081902 | Epoch: 1335 | \n\n\nMeanAbsoluteError: 0.0602464750409126 | Loss: 0.0068814275343660 | Epoch: 1336 | \n\n\nMeanAbsoluteError: 0.0621792227029800 | Loss: 0.0076427560026059 | Epoch: 1337 | \n\n\nMeanAbsoluteError: 0.0623363032937050 | Loss: 0.0070257983475676 | Epoch: 1338 | \n\n\nMeanAbsoluteError: 0.0573655441403389 | Loss: 0.0054982766404767 | Epoch: 1339 | \n\n\nMeanAbsoluteError: 0.0578860044479370 | Loss: 0.0061039369699392 | Epoch: 1340 | \n\n\nMeanAbsoluteError: 0.0609294176101685 | Loss: 0.0068390948525121 | Epoch: 1341 | \n\n\nMeanAbsoluteError: 0.0595331117510796 | Loss: 0.0063120169434114 | Epoch: 1342 | \n\n\nMeanAbsoluteError: 0.0590211860835552 | Loss: 0.0062593080263468 | Epoch: 1343 | \n\n\nMeanAbsoluteError: 0.0525709092617035 | Loss: 0.0055392229639582 | Epoch: 1344 | \n\n\nMeanAbsoluteError: 0.0588330067694187 | Loss: 0.0065999297063536 | Epoch: 1345 | \n\n\nMeanAbsoluteError: 0.0631908699870110 | Loss: 0.0074271243907181 | Epoch: 1346 | \n\n\nMeanAbsoluteError: 0.0613631233572960 | Loss: 0.0074646979543468 | Epoch: 1347 | \n\n\nMeanAbsoluteError: 0.0590438134968281 | Loss: 0.0071434897894263 | Epoch: 1348 | \n\n\nMeanAbsoluteError: 0.0591630823910236 | Loss: 0.0071320187094777 | Epoch: 1349 | \n\n\nMeanAbsoluteError: 0.0613437257707119 | Loss: 0.0066808529830450 | Epoch: 1350 | \n\n\nMeanAbsoluteError: 0.0550273023545742 | Loss: 0.0059833803693377 | Epoch: 1351 | \n\n\nMeanAbsoluteError: 0.0572957471013069 | Loss: 0.0063646000387477 | Epoch: 1352 | \n\n\nMeanAbsoluteError: 0.0646844133734703 | Loss: 0.0076713488257034 | Epoch: 1353 | \n\n\nMeanAbsoluteError: 0.0533348023891449 | Loss: 0.0051347972557172 | Epoch: 1354 | \n\n\nMeanAbsoluteError: 0.0610402487218380 | Loss: 0.0073597275284070 | Epoch: 1355 | \n\n\nMeanAbsoluteError: 0.0563038513064384 | Loss: 0.0062525593141618 | Epoch: 1356 | \n\n\nMeanAbsoluteError: 0.0623960494995117 | Loss: 0.0076754165287033 | Epoch: 1357 | \n\n\nMeanAbsoluteError: 0.0579704865813255 | Loss: 0.0062934564885048 | Epoch: 1358 | \n\n\nMeanAbsoluteError: 0.0580323673784733 | Loss: 0.0066176986267116 | Epoch: 1359 | \n\n\nMeanAbsoluteError: 0.0603172034025192 | Loss: 0.0070527732018794 | Epoch: 1360 | \n\n\nMeanAbsoluteError: 0.0595178268849850 | Loss: 0.0068137397707809 | Epoch: 1361 | \n\n\nMeanAbsoluteError: 0.0578610934317112 | Loss: 0.0060816108078507 | Epoch: 1362 | \n\n\nMeanAbsoluteError: 0.0583778880536556 | Loss: 0.0067611638918364 | Epoch: 1363 | \n\n\nMeanAbsoluteError: 0.0596525371074677 | Loss: 0.0068535130712644 | Epoch: 1364 | \n\n\nMeanAbsoluteError: 0.0559104867279530 | Loss: 0.0058111705333674 | Epoch: 1365 | \n\n\nMeanAbsoluteError: 0.0601880252361298 | Loss: 0.0059277274716806 | Epoch: 1366 | \n\n\nMeanAbsoluteError: 0.0602724775671959 | Loss: 0.0067496870191826 | Epoch: 1367 | \n\n\nMeanAbsoluteError: 0.0616057515144348 | Loss: 0.0070057805495283 | Epoch: 1368 | \n\n\nMeanAbsoluteError: 0.0639656782150269 | Loss: 0.0074389386884123 | Epoch: 1369 | \n\n\nMeanAbsoluteError: 0.0590878799557686 | Loss: 0.0075507379388485 | Epoch: 1370 | \n\n\nMeanAbsoluteError: 0.0593984089791775 | Loss: 0.0066270784619250 | Epoch: 1371 | \n\n\nMeanAbsoluteError: 0.0600770190358162 | Loss: 0.0073270322577506 | Epoch: 1372 | \n\n\nMeanAbsoluteError: 0.0575873292982578 | Loss: 0.0060493746074402 | Epoch: 1373 | \n\n\nMeanAbsoluteError: 0.0611264593899250 | Loss: 0.0066616562008373 | Epoch: 1374 | \n\n\nMeanAbsoluteError: 0.0570595860481262 | Loss: 0.0061177108495031 | Epoch: 1375 | \n\n\nMeanAbsoluteError: 0.0590573251247406 | Loss: 0.0069289187466105 | Epoch: 1376 | \n\n\nMeanAbsoluteError: 0.0594652816653252 | Loss: 0.0067402777333435 | Epoch: 1377 | \n\n\nMeanAbsoluteError: 0.0568242780864239 | Loss: 0.0059960014817868 | Epoch: 1378 | \n\n\nMeanAbsoluteError: 0.0597791299223900 | Loss: 0.0068522613890188 | Epoch: 1379 | \n\n\nMeanAbsoluteError: 0.0582293048501015 | Loss: 0.0064122937783501 | Epoch: 1380 | \n\n\nMeanAbsoluteError: 0.0601521506905556 | Loss: 0.0064453515933807 | Epoch: 1381 | \n\n\nMeanAbsoluteError: 0.0561903454363346 | Loss: 0.0060621916408551 | Epoch: 1382 | \n\n\nMeanAbsoluteError: 0.0584788769483566 | Loss: 0.0064061350609518 | Epoch: 1383 | \n\n\nMeanAbsoluteError: 0.0577516108751297 | Loss: 0.0066056292869689 | Epoch: 1384 | \n\n\nMeanAbsoluteError: 0.0612967237830162 | Loss: 0.0067308303606114 | Epoch: 1385 | \n\n\nMeanAbsoluteError: 0.0579466819763184 | Loss: 0.0063529075566233 | Epoch: 1386 | \n\n\nMeanAbsoluteError: 0.0639848709106445 | Loss: 0.0070912594742307 | Epoch: 1387 | \n\n\nMeanAbsoluteError: 0.0587789267301559 | Loss: 0.0062040600233498 | Epoch: 1388 | \n\n\nMeanAbsoluteError: 0.0607269592583179 | Loss: 0.0067732133742902 | Epoch: 1389 | \n\n\nMeanAbsoluteError: 0.0613276921212673 | Loss: 0.0070115517686645 | Epoch: 1390 | \n\n\nMeanAbsoluteError: 0.0588996559381485 | Loss: 0.0068311178821993 | Epoch: 1391 | \n\n\nMeanAbsoluteError: 0.0577615797519684 | Loss: 0.0061380676289749 | Epoch: 1392 | \n\n\nMeanAbsoluteError: 0.0582601614296436 | Loss: 0.0064320448323269 | Epoch: 1393 | \n\n\nMeanAbsoluteError: 0.0658429414033890 | Loss: 0.0076372725332112 | Epoch: 1394 | \n\n\nMeanAbsoluteError: 0.0565693043172359 | Loss: 0.0058412261591820 | Epoch: 1395 | \n\n\nMeanAbsoluteError: 0.0569558329880238 | Loss: 0.0064749789136295 | Epoch: 1396 | \n\n\nMeanAbsoluteError: 0.0563307143747807 | Loss: 0.0060115725524095 | Epoch: 1397 | \n\n\nMeanAbsoluteError: 0.0563693158328533 | Loss: 0.0061697309390790 | Epoch: 1398 | \n\n\nMeanAbsoluteError: 0.0614904612302780 | Loss: 0.0064544608261713 | Epoch: 1399 | \n\n\nMeanAbsoluteError: 0.0548842884600163 | Loss: 0.0055805883152667 | Epoch: 1400 | \n\n\nMeanAbsoluteError: 0.0557563863694668 | Loss: 0.0056326612958886 | Epoch: 1401 | \n\n\nMeanAbsoluteError: 0.0624559335410595 | Loss: 0.0067359105225235 | Epoch: 1402 | \n\n\nMeanAbsoluteError: 0.0552742183208466 | Loss: 0.0062173305620248 | Epoch: 1403 | \n\n\nMeanAbsoluteError: 0.0623117238283157 | Loss: 0.0073411542934628 | Epoch: 1404 | \n\n\nMeanAbsoluteError: 0.0573842041194439 | Loss: 0.0057818155378482 | Epoch: 1405 | \n\n\nMeanAbsoluteError: 0.0559544488787651 | Loss: 0.0059102018125607 | Epoch: 1406 | \n\n\nMeanAbsoluteError: 0.0587244294583797 | Loss: 0.0065422553435443 | Epoch: 1407 | \n\n\nMeanAbsoluteError: 0.0600770823657513 | Loss: 0.0059424061224126 | Epoch: 1408 | \n\n\nMeanAbsoluteError: 0.0608702786266804 | Loss: 0.0072758367889643 | Epoch: 1409 | \n\n\nMeanAbsoluteError: 0.0586856380105019 | Loss: 0.0066306086830203 | Epoch: 1410 | \n\n\nMeanAbsoluteError: 0.0574161447584629 | Loss: 0.0060549706985694 | Epoch: 1411 | \n\n\nMeanAbsoluteError: 0.0583676956593990 | Loss: 0.0063128329048292 | Epoch: 1412 | \n\n\nMeanAbsoluteError: 0.0566170886158943 | Loss: 0.0059740128747217 | Epoch: 1413 | \n\n\nMeanAbsoluteError: 0.0528923086822033 | Loss: 0.0055720553557073 | Epoch: 1414 | \n\n\nMeanAbsoluteError: 0.0579725652933121 | Loss: 0.0065579826983837 | Epoch: 1415 | \n\n\nMeanAbsoluteError: 0.0557838045060635 | Loss: 0.0060128550286451 | Epoch: 1416 | \n\n\nMeanAbsoluteError: 0.0618123114109039 | Loss: 0.0078098540362771 | Epoch: 1417 | \n\n\nMeanAbsoluteError: 0.0574797429144382 | Loss: 0.0060527243328337 | Epoch: 1418 | \n\n\nMeanAbsoluteError: 0.0591564439237118 | Loss: 0.0069078163054292 | Epoch: 1419 | \n\n\nMeanAbsoluteError: 0.0563187673687935 | Loss: 0.0067976737817662 | Epoch: 1420 | \n\n\nMeanAbsoluteError: 0.0591088868677616 | Loss: 0.0065378680860946 | Epoch: 1421 | \n\n\nMeanAbsoluteError: 0.0564135685563087 | Loss: 0.0059805855708692 | Epoch: 1422 | \n\n\nMeanAbsoluteError: 0.0571763738989830 | Loss: 0.0061837889390396 | Epoch: 1423 | \n\n\nMeanAbsoluteError: 0.0582145899534225 | Loss: 0.0061869906513675 | Epoch: 1424 | \n\n\nMeanAbsoluteError: 0.0524145551025867 | Loss: 0.0057837775284133 | Epoch: 1425 | \n\n\nMeanAbsoluteError: 0.0559653416275978 | Loss: 0.0063784418028844 | Epoch: 1426 | \n\n\nMeanAbsoluteError: 0.0564562417566776 | Loss: 0.0062507339088734 | Epoch: 1427 | \n\n\nMeanAbsoluteError: 0.0562570504844189 | Loss: 0.0060353516241594 | Epoch: 1428 | \n\n\nMeanAbsoluteError: 0.0584495477378368 | Loss: 0.0066283909364514 | Epoch: 1429 | \n\n\nMeanAbsoluteError: 0.0598415993154049 | Loss: 0.0064357079134182 | Epoch: 1430 | \n\n\nMeanAbsoluteError: 0.0590827576816082 | Loss: 0.0069418430483832 | Epoch: 1431 | \n\n\nMeanAbsoluteError: 0.0519671812653542 | Loss: 0.0053607662739159 | Epoch: 1432 | \n\n\nMeanAbsoluteError: 0.0585345886647701 | Loss: 0.0069909224350765 | Epoch: 1433 | \n\n\nMeanAbsoluteError: 0.0623789578676224 | Loss: 0.0078136000643159 | Epoch: 1434 | \n\n\nMeanAbsoluteError: 0.0573706887662411 | Loss: 0.0063272417403156 | Epoch: 1435 | \n\n\nMeanAbsoluteError: 0.0552980490028858 | Loss: 0.0054508830875178 | Epoch: 1436 | \n\n\nMeanAbsoluteError: 0.0565602742135525 | Loss: 0.0059347634245205 | Epoch: 1437 | \n\n\nMeanAbsoluteError: 0.0601707585155964 | Loss: 0.0070364983431076 | Epoch: 1438 | \n\n\nMeanAbsoluteError: 0.0586043857038021 | Loss: 0.0066380368627870 | Epoch: 1439 | \n\n\nMeanAbsoluteError: 0.0557993873953819 | Loss: 0.0063275659259822 | Epoch: 1440 | \n\n\nMeanAbsoluteError: 0.0584771856665611 | Loss: 0.0061750227016455 | Epoch: 1441 | \n\n\nMeanAbsoluteError: 0.0558768026530743 | Loss: 0.0058388078034629 | Epoch: 1442 | \n\n\nMeanAbsoluteError: 0.0602018088102341 | Loss: 0.0065983752051397 | Epoch: 1443 | \n\n\nMeanAbsoluteError: 0.0604710839688778 | Loss: 0.0068428725943947 | Epoch: 1444 | \n\n\nMeanAbsoluteError: 0.0585154667496681 | Loss: 0.0068361961480211 | Epoch: 1445 | \n\n\nMeanAbsoluteError: 0.0586277954280376 | Loss: 0.0064402937030294 | Epoch: 1446 | \n\n\nMeanAbsoluteError: 0.0596406571567059 | Loss: 0.0066237281124116 | Epoch: 1447 | \n\n\nMeanAbsoluteError: 0.0562896095216274 | Loss: 0.0065249161592025 | Epoch: 1448 | \n\n\nMeanAbsoluteError: 0.0565231181681156 | Loss: 0.0057698578926769 | Epoch: 1449 | \n\n\nMeanAbsoluteError: 0.0595677681267262 | Loss: 0.0070670291615049 | Epoch: 1450 | \n\n\nMeanAbsoluteError: 0.0566757060587406 | Loss: 0.0064075071495366 | Epoch: 1451 | \n\n\nMeanAbsoluteError: 0.0553364939987659 | Loss: 0.0060599146505653 | Epoch: 1452 | \n\n\nMeanAbsoluteError: 0.0541689358651638 | Loss: 0.0056800012578363 | Epoch: 1453 | \n\n\nMeanAbsoluteError: 0.0576780438423157 | Loss: 0.0062125273360531 | Epoch: 1454 | \n\n\nMeanAbsoluteError: 0.0583593435585499 | Loss: 0.0059080858032636 | Epoch: 1455 | \n\n\nMeanAbsoluteError: 0.0580403059720993 | Loss: 0.0062801733252369 | Epoch: 1456 | \n\n\nMeanAbsoluteError: 0.0542672164738178 | Loss: 0.0054260122053751 | Epoch: 1457 | \n\n\nMeanAbsoluteError: 0.0566761456429958 | Loss: 0.0053721861707163 | Epoch: 1458 | \n\n\nMeanAbsoluteError: 0.0600563809275627 | Loss: 0.0072668787061169 | Epoch: 1459 | \n\n\nMeanAbsoluteError: 0.0601928122341633 | Loss: 0.0066354076128603 | Epoch: 1460 | \n\n\nMeanAbsoluteError: 0.0615716874599457 | Loss: 0.0072449304795388 | Epoch: 1461 | \n\n\nMeanAbsoluteError: 0.0623099952936172 | Loss: 0.0071688099633502 | Epoch: 1462 | \n\n\nMeanAbsoluteError: 0.0587708987295628 | Loss: 0.0062015076691750 | Epoch: 1463 | \n\n\nMeanAbsoluteError: 0.0552529580891132 | Loss: 0.0051825371613813 | Epoch: 1464 | \n\n\nMeanAbsoluteError: 0.0548544265329838 | Loss: 0.0059621526295329 | Epoch: 1465 | \n\n\nMeanAbsoluteError: 0.0582481063902378 | Loss: 0.0062729384214375 | Epoch: 1466 | \n\n\nMeanAbsoluteError: 0.0540102384984493 | Loss: 0.0055912430056681 | Epoch: 1467 | \n\n\nMeanAbsoluteError: 0.0622882954776287 | Loss: 0.0075493527316454 | Epoch: 1468 | \n\n\nMeanAbsoluteError: 0.0575348027050495 | Loss: 0.0066178210571858 | Epoch: 1469 | \n\n\nMeanAbsoluteError: 0.0573052652180195 | Loss: 0.0067825304956811 | Epoch: 1470 | \n\n\nMeanAbsoluteError: 0.0569934137165546 | Loss: 0.0060027882429373 | Epoch: 1471 | \n\n\nMeanAbsoluteError: 0.0584323443472385 | Loss: 0.0064521284073029 | Epoch: 1472 | \n\n\nMeanAbsoluteError: 0.0580769143998623 | Loss: 0.0066684547921795 | Epoch: 1473 | \n\n\nMeanAbsoluteError: 0.0551889874041080 | Loss: 0.0058412185238558 | Epoch: 1474 | \n\n\nMeanAbsoluteError: 0.0520878881216049 | Loss: 0.0056936428788564 | Epoch: 1475 | \n\n\nMeanAbsoluteError: 0.0621255300939083 | Loss: 0.0079296191722460 | Epoch: 1476 | \n\n\nMeanAbsoluteError: 0.0540063343942165 | Loss: 0.0054856804448415 | Epoch: 1477 | \n\n\nMeanAbsoluteError: 0.0582624301314354 | Loss: 0.0072453686078128 | Epoch: 1478 | \n\n\nMeanAbsoluteError: 0.0582592338323593 | Loss: 0.0060820765321720 | Epoch: 1479 | \n\n\nMeanAbsoluteError: 0.0589326173067093 | Loss: 0.0064547484678769 | Epoch: 1480 | \n\n\nMeanAbsoluteError: 0.0584228076040745 | Loss: 0.0064737026568825 | Epoch: 1481 | \n\n\nMeanAbsoluteError: 0.0592902749776840 | Loss: 0.0067171421772218 | Early stopping at epoch 1480\nReturned to Spot: Validation loss: 0.006717142177221831\n\nconfig: {'_L_in': 10, '_L_out': 1, 'l1': 16, 'dropout_prob': 0.1773189149831582, 'lr_mult': 9.06715620679689, 'batch_size': 4, 'epochs': 4, 'k_folds': 1, 'patience': 8, 'optimizer': 'Adamax', 'sgd_momentum': 0.22706194978124503}\nEpoch: 1 | MeanAbsoluteError: 0.1381864845752716 | Loss: 0.0297331442420060 | Epoch: 2 | \n\n\nMeanAbsoluteError: 0.1159845590591431 | Loss: 0.0210684445997079 | Epoch: 3 | MeanAbsoluteError: 0.1160452365875244 | Loss: 0.0212142537068576 | Epoch: 4 | \n\n\nMeanAbsoluteError: 0.1114576458930969 | Loss: 0.0190360272970671 | Returned to Spot: Validation loss: 0.019036027297067146\n\nconfig: {'_L_in': 10, '_L_out': 1, 'l1': 32, 'dropout_prob': 0.3840970624671163, 'lr_mult': 4.593111165984917, 'batch_size': 8, 'epochs': 256, 'k_folds': 1, 'patience': 64, 'optimizer': 'Adam', 'sgd_momentum': 0.8945915831939406}\nEpoch: 1 | MeanAbsoluteError: 0.1367287337779999 | Loss: 0.0290687176104831 | Epoch: 2 | MeanAbsoluteError: 0.1259801238775253 | Loss: 0.0249685674146014 | Epoch: 3 | MeanAbsoluteError: 0.1244917139410973 | Loss: 0.0237616484641637 | Epoch: 4 | \n\n\nMeanAbsoluteError: 0.1225666180253029 | Loss: 0.0229102625560604 | Epoch: 5 | MeanAbsoluteError: 0.0983595475554466 | Loss: 0.0152016369821994 | Epoch: 6 | MeanAbsoluteError: 0.1012638658285141 | Loss: 0.0163994073794272 | Epoch: 7 | MeanAbsoluteError: 0.1008819043636322 | Loss: 0.0156029170244246 | Epoch: 8 | \n\n\nMeanAbsoluteError: 0.0898438915610313 | Loss: 0.0128116580339051 | Epoch: 9 | MeanAbsoluteError: 0.0833219662308693 | Loss: 0.0105152710120341 | Epoch: 10 | MeanAbsoluteError: 0.0846344903111458 | Loss: 0.0115213508190783 | Epoch: 11 | MeanAbsoluteError: 0.0785620138049126 | Loss: 0.0105242014764563 | Epoch: 12 | \n\n\nMeanAbsoluteError: 0.0725310593843460 | Loss: 0.0082105176100556 | Epoch: 13 | MeanAbsoluteError: 0.0768526941537857 | Loss: 0.0098556312609856 | Epoch: 14 | MeanAbsoluteError: 0.0649687424302101 | Loss: 0.0075180405891795 | Epoch: 15 | MeanAbsoluteError: 0.0714496076107025 | Loss: 0.0081526298094296 | Epoch: 16 | \n\n\nMeanAbsoluteError: 0.0666156485676765 | Loss: 0.0078232451280775 | Epoch: 17 | MeanAbsoluteError: 0.0639944300055504 | Loss: 0.0072961616051065 | Epoch: 18 | MeanAbsoluteError: 0.0713141337037086 | Loss: 0.0088125942091114 | Epoch: 19 | MeanAbsoluteError: 0.0730975046753883 | Loss: 0.0090542598351787 | Epoch: 20 | \n\n\nMeanAbsoluteError: 0.0646980032324791 | Loss: 0.0073157171044793 | Epoch: 21 | MeanAbsoluteError: 0.0672253146767616 | Loss: 0.0078984906829550 | Epoch: 22 | MeanAbsoluteError: 0.0568662695586681 | Loss: 0.0057325467075172 | Epoch: 23 | MeanAbsoluteError: 0.0676896497607231 | Loss: 0.0076013721868788 | Epoch: 24 | \n\n\nMeanAbsoluteError: 0.0629585757851601 | Loss: 0.0066645811710164 | Epoch: 25 | MeanAbsoluteError: 0.0628982931375504 | Loss: 0.0071594645943199 | Epoch: 26 | MeanAbsoluteError: 0.0588145144283772 | Loss: 0.0064130426142487 | Epoch: 27 | \n\n\nMeanAbsoluteError: 0.0643735900521278 | Loss: 0.0066883668462795 | Epoch: 28 | MeanAbsoluteError: 0.0623006559908390 | Loss: 0.0068946850767947 | Epoch: 29 | MeanAbsoluteError: 0.0644125342369080 | Loss: 0.0068537936435620 | Epoch: 30 | MeanAbsoluteError: 0.0620048977434635 | Loss: 0.0064293940974350 | Epoch: 31 | \n\n\nMeanAbsoluteError: 0.0563510134816170 | Loss: 0.0054817110955666 | Epoch: 32 | MeanAbsoluteError: 0.0541640855371952 | Loss: 0.0054238190580355 | Epoch: 33 | MeanAbsoluteError: 0.0554178804159164 | Loss: 0.0058718559326065 | Epoch: 34 | MeanAbsoluteError: 0.0536763779819012 | Loss: 0.0044348455757197 | Epoch: 35 | \n\n\nMeanAbsoluteError: 0.0620102696120739 | Loss: 0.0068847409290213 | Epoch: 36 | MeanAbsoluteError: 0.0601697154343128 | Loss: 0.0064660886602819 | Epoch: 37 | MeanAbsoluteError: 0.0540896542370319 | Loss: 0.0049975185844998 | Epoch: 38 | MeanAbsoluteError: 0.0628583505749702 | Loss: 0.0080273249554203 | Epoch: 39 | \n\n\nMeanAbsoluteError: 0.0563287734985352 | Loss: 0.0056473667224820 | Epoch: 40 | MeanAbsoluteError: 0.0590554885566235 | Loss: 0.0067543984485766 | Epoch: 41 | MeanAbsoluteError: 0.0638937354087830 | Loss: 0.0076363018505569 | Epoch: 42 | MeanAbsoluteError: 0.0579698123037815 | Loss: 0.0069268529983482 | Epoch: 43 | \n\n\nMeanAbsoluteError: 0.0578466467559338 | Loss: 0.0062805863425111 | Epoch: 44 | MeanAbsoluteError: 0.0641067400574684 | Loss: 0.0073892042549376 | Epoch: 45 | MeanAbsoluteError: 0.0518079549074173 | Loss: 0.0048954987938295 | Epoch: 46 | MeanAbsoluteError: 0.0503163449466228 | Loss: 0.0051259728237423 | Epoch: 47 | \n\n\nMeanAbsoluteError: 0.0511813722550869 | Loss: 0.0052415561022874 | Epoch: 48 | MeanAbsoluteError: 0.0546074658632278 | Loss: 0.0053263859774329 | Epoch: 49 | MeanAbsoluteError: 0.0514329001307487 | Loss: 0.0048348851315064 | Epoch: 50 | MeanAbsoluteError: 0.0560775361955166 | Loss: 0.0056822850785561 | Epoch: 51 | \n\n\nMeanAbsoluteError: 0.0491376481950283 | Loss: 0.0045534768371573 | Epoch: 52 | MeanAbsoluteError: 0.0514286756515503 | Loss: 0.0051956659927351 | Epoch: 53 | MeanAbsoluteError: 0.0707381442189217 | Loss: 0.0080786086741443 | Epoch: 54 | MeanAbsoluteError: 0.0535416975617409 | Loss: 0.0051124632652653 | Epoch: 55 | \n\n\nMeanAbsoluteError: 0.0560877807438374 | Loss: 0.0053623238498786 | Epoch: 56 | MeanAbsoluteError: 0.0680474862456322 | Loss: 0.0077096539132885 | Epoch: 57 | MeanAbsoluteError: 0.0634890049695969 | Loss: 0.0075894465614845 | Epoch: 58 | MeanAbsoluteError: 0.0538508147001266 | Loss: 0.0051713026592839 | Epoch: 59 | \n\n\nMeanAbsoluteError: 0.0533880852162838 | Loss: 0.0051999232573986 | Epoch: 60 | MeanAbsoluteError: 0.0571823939681053 | Loss: 0.0062568328055357 | Epoch: 61 | MeanAbsoluteError: 0.0547717176377773 | Loss: 0.0055355410747181 | Epoch: 62 | MeanAbsoluteError: 0.0630423128604889 | Loss: 0.0066528442119689 | Epoch: 63 | \n\n\nMeanAbsoluteError: 0.0542029887437820 | Loss: 0.0051952790113558 | Epoch: 64 | MeanAbsoluteError: 0.0524552017450333 | Loss: 0.0051679399253580 | Epoch: 65 | MeanAbsoluteError: 0.0595495291054249 | Loss: 0.0063223883227788 | Epoch: 66 | MeanAbsoluteError: 0.0605428554117680 | Loss: 0.0059999938361886 | Epoch: 67 | \n\n\nMeanAbsoluteError: 0.0604771412909031 | Loss: 0.0059012059830007 | Epoch: 68 | MeanAbsoluteError: 0.0520688518881798 | Loss: 0.0049734828475936 | Epoch: 69 | MeanAbsoluteError: 0.0497259870171547 | Loss: 0.0047130969852381 | Epoch: 70 | MeanAbsoluteError: 0.0503780171275139 | Loss: 0.0057410109239802 | Epoch: 71 | \n\n\nMeanAbsoluteError: 0.0533940196037292 | Loss: 0.0047218548348419 | Epoch: 72 | MeanAbsoluteError: 0.0587881840765476 | Loss: 0.0057495791238341 | Epoch: 73 | MeanAbsoluteError: 0.0542731285095215 | Loss: 0.0055826458602065 | Epoch: 74 | MeanAbsoluteError: 0.0508222766220570 | Loss: 0.0049763083546790 | Epoch: 75 | \n\n\nMeanAbsoluteError: 0.0478166267275810 | Loss: 0.0041767671385682 | Epoch: 76 | MeanAbsoluteError: 0.0713439807295799 | Loss: 0.0077906880055946 | Epoch: 77 | MeanAbsoluteError: 0.0548217259347439 | Loss: 0.0057669209414407 | Epoch: 78 | MeanAbsoluteError: 0.0519948042929173 | Loss: 0.0049195504352132 | Epoch: 79 | \n\n\nMeanAbsoluteError: 0.0507967621088028 | Loss: 0.0050012943990480 | Epoch: 80 | MeanAbsoluteError: 0.0581576153635979 | Loss: 0.0060965828107376 | Epoch: 81 | MeanAbsoluteError: 0.0500195659697056 | Loss: 0.0051155700378953 | Epoch: 82 | MeanAbsoluteError: 0.0584947317838669 | Loss: 0.0059314732084443 | Epoch: 83 | \n\n\nMeanAbsoluteError: 0.0496803484857082 | Loss: 0.0045010412072052 | Epoch: 84 | MeanAbsoluteError: 0.0586543157696724 | Loss: 0.0054211143624822 | Epoch: 85 | MeanAbsoluteError: 0.0515358150005341 | Loss: 0.0041499671106545 | Epoch: 86 | MeanAbsoluteError: 0.0490731187164783 | Loss: 0.0047594601852133 | Epoch: 87 | \n\n\nMeanAbsoluteError: 0.0488664358854294 | Loss: 0.0038823238910960 | Epoch: 88 | MeanAbsoluteError: 0.0500534586608410 | Loss: 0.0048268302971816 | Epoch: 89 | MeanAbsoluteError: 0.0607672818005085 | Loss: 0.0063695129141898 | Epoch: 90 | MeanAbsoluteError: 0.0428543426096439 | Loss: 0.0036700186365603 | Epoch: 91 | \n\n\nMeanAbsoluteError: 0.0489945039153099 | Loss: 0.0045739252236672 | Epoch: 92 | MeanAbsoluteError: 0.0520430393517017 | Loss: 0.0047456365764925 | Epoch: 93 | MeanAbsoluteError: 0.0543636642396450 | Loss: 0.0048432723177891 | Epoch: 94 | MeanAbsoluteError: 0.0530404150485992 | Loss: 0.0045820627404426 | Epoch: 95 | \n\n\nMeanAbsoluteError: 0.0580774620175362 | Loss: 0.0075225431462872 | Epoch: 96 | MeanAbsoluteError: 0.0577180087566376 | Loss: 0.0058256526750292 | Epoch: 97 | MeanAbsoluteError: 0.0548297166824341 | Loss: 0.0050166448008416 | Epoch: 98 | MeanAbsoluteError: 0.0510147586464882 | Loss: 0.0043236548678435 | Epoch: 99 | \n\n\nMeanAbsoluteError: 0.0489062331616879 | Loss: 0.0049819172372257 | Epoch: 100 | MeanAbsoluteError: 0.0548061318695545 | Loss: 0.0052323131132748 | Epoch: 101 | MeanAbsoluteError: 0.0488793328404427 | Loss: 0.0049164316044066 | Epoch: 102 | MeanAbsoluteError: 0.0488803721964359 | Loss: 0.0046381750251289 | Epoch: 103 | \n\n\nMeanAbsoluteError: 0.0509681552648544 | Loss: 0.0048525189340580 | Epoch: 104 | MeanAbsoluteError: 0.0491908341646194 | Loss: 0.0052498484636951 | Epoch: 105 | MeanAbsoluteError: 0.0425129868090153 | Loss: 0.0035697827238197 | Epoch: 106 | MeanAbsoluteError: 0.0436878465116024 | Loss: 0.0039610523281705 | Epoch: 107 | \n\n\nMeanAbsoluteError: 0.0485272705554962 | Loss: 0.0046347123999639 | Epoch: 108 | MeanAbsoluteError: 0.0554202981293201 | Loss: 0.0058226880929923 | Epoch: 109 | MeanAbsoluteError: 0.0496334806084633 | Loss: 0.0041041335207410 | Epoch: 110 | MeanAbsoluteError: 0.0453495830297470 | Loss: 0.0038953279083791 | Epoch: 111 | \n\n\nMeanAbsoluteError: 0.0618671551346779 | Loss: 0.0070297461015319 | Epoch: 112 | MeanAbsoluteError: 0.0542057938873768 | Loss: 0.0050549143772131 | Epoch: 113 | MeanAbsoluteError: 0.0492808520793915 | Loss: 0.0043026664812044 | Epoch: 114 | MeanAbsoluteError: 0.0484163425862789 | Loss: 0.0047312997921836 | Epoch: 115 | \n\n\nMeanAbsoluteError: 0.0516265779733658 | Loss: 0.0047109486431030 | Epoch: 116 | MeanAbsoluteError: 0.0554279536008835 | Loss: 0.0051839629856036 | Epoch: 117 | MeanAbsoluteError: 0.0505538955330849 | Loss: 0.0044117799920251 | Epoch: 118 | MeanAbsoluteError: 0.0594808459281921 | Loss: 0.0066723095476750 | Epoch: 119 | \n\n\nMeanAbsoluteError: 0.0599228926002979 | Loss: 0.0057428399695231 | Epoch: 120 | MeanAbsoluteError: 0.0562699325382710 | Loss: 0.0057977399249610 | Epoch: 121 | MeanAbsoluteError: 0.0478807128965855 | Loss: 0.0042656366338059 | Epoch: 122 | MeanAbsoluteError: 0.0586617775261402 | Loss: 0.0055336583816250 | Epoch: 123 | \n\n\nMeanAbsoluteError: 0.0511167757213116 | Loss: 0.0049591601372844 | Epoch: 124 | MeanAbsoluteError: 0.0521170832216740 | Loss: 0.0058747629166311 | Epoch: 125 | MeanAbsoluteError: 0.0510618127882481 | Loss: 0.0054301748781367 | Epoch: 126 | MeanAbsoluteError: 0.0506604351103306 | Loss: 0.0055878796035693 | Epoch: 127 | \n\n\nMeanAbsoluteError: 0.0459920614957809 | Loss: 0.0044727184890929 | Epoch: 128 | MeanAbsoluteError: 0.0547601245343685 | Loss: 0.0052383679430932 | Epoch: 129 | MeanAbsoluteError: 0.0491955019533634 | Loss: 0.0049548119484251 | Epoch: 130 | MeanAbsoluteError: 0.0438412912189960 | Loss: 0.0038714492739497 | Epoch: 131 | \n\n\nMeanAbsoluteError: 0.0474081598222256 | Loss: 0.0043321530584332 | Epoch: 132 | MeanAbsoluteError: 0.0512751340866089 | Loss: 0.0053074758999221 | Epoch: 133 | MeanAbsoluteError: 0.0506840944290161 | Loss: 0.0049041046816120 | Epoch: 134 | MeanAbsoluteError: 0.0503975600004196 | Loss: 0.0046255082829463 | Epoch: 135 | \n\n\nMeanAbsoluteError: 0.0514578670263290 | Loss: 0.0046365413827037 | Epoch: 136 | MeanAbsoluteError: 0.0429868102073669 | Loss: 0.0038907637690978 | Epoch: 137 | MeanAbsoluteError: 0.0517872311174870 | Loss: 0.0052856638672222 | Epoch: 138 | MeanAbsoluteError: 0.0490264147520065 | Loss: 0.0055678513308521 | Epoch: 139 | \n\n\nMeanAbsoluteError: 0.0468524545431137 | Loss: 0.0044361190996010 | Epoch: 140 | MeanAbsoluteError: 0.0439177379012108 | Loss: 0.0035369486339684 | Epoch: 141 | MeanAbsoluteError: 0.0429758094251156 | Loss: 0.0041910637473369 | Epoch: 142 | MeanAbsoluteError: 0.0474017336964607 | Loss: 0.0044765033495710 | Epoch: 143 | \n\n\nMeanAbsoluteError: 0.0468146316707134 | Loss: 0.0045256495949089 | Epoch: 144 | MeanAbsoluteError: 0.0450309887528419 | Loss: 0.0040496404935287 | Epoch: 145 | MeanAbsoluteError: 0.0531271509826183 | Loss: 0.0053307719001743 | Epoch: 146 | MeanAbsoluteError: 0.0545204356312752 | Loss: 0.0051992138185980 | Epoch: 147 | \n\n\nMeanAbsoluteError: 0.0518081746995449 | Loss: 0.0049699235563534 | Epoch: 148 | MeanAbsoluteError: 0.0483873113989830 | Loss: 0.0048898270148416 | Epoch: 149 | MeanAbsoluteError: 0.0497963503003120 | Loss: 0.0047151859662814 | Epoch: 150 | MeanAbsoluteError: 0.0496476590633392 | Loss: 0.0040573689590306 | Epoch: 151 | \n\n\nMeanAbsoluteError: 0.0524070486426353 | Loss: 0.0054542568947287 | Epoch: 152 | MeanAbsoluteError: 0.0505332611501217 | Loss: 0.0048935819895154 | Epoch: 153 | MeanAbsoluteError: 0.0507277175784111 | Loss: 0.0047233196857728 | Epoch: 154 | MeanAbsoluteError: 0.0589441992342472 | Loss: 0.0060576029569156 | Epoch: 155 | \n\n\nMeanAbsoluteError: 0.0493478477001190 | Loss: 0.0050585214860468 | Epoch: 156 | MeanAbsoluteError: 0.0452038049697876 | Loss: 0.0039320529513612 | Epoch: 157 | MeanAbsoluteError: 0.0542941726744175 | Loss: 0.0061444614456329 | Epoch: 158 | MeanAbsoluteError: 0.0519544743001461 | Loss: 0.0042957149868782 | Epoch: 159 | \n\n\nMeanAbsoluteError: 0.0478351339697838 | Loss: 0.0044496219151800 | Epoch: 160 | MeanAbsoluteError: 0.0506627932190895 | Loss: 0.0046664074057174 | Epoch: 161 | MeanAbsoluteError: 0.0595928654074669 | Loss: 0.0060352605528590 | Epoch: 162 | MeanAbsoluteError: 0.0485134012997150 | Loss: 0.0045875538520417 | Epoch: 163 | \n\n\nMeanAbsoluteError: 0.0478660501539707 | Loss: 0.0050134028102835 | Epoch: 164 | MeanAbsoluteError: 0.0431748777627945 | Loss: 0.0044437562342194 | Epoch: 165 | MeanAbsoluteError: 0.0508107058703899 | Loss: 0.0049127247000701 | Epoch: 166 | MeanAbsoluteError: 0.0444596372544765 | Loss: 0.0036638728542082 | Epoch: 167 | \n\n\nMeanAbsoluteError: 0.0607872270047665 | Loss: 0.0063403996418377 | Epoch: 168 | MeanAbsoluteError: 0.0453608371317387 | Loss: 0.0039731377803132 | Epoch: 169 | MeanAbsoluteError: 0.0529519580304623 | Loss: 0.0055553546484780 | Epoch: 170 | MeanAbsoluteError: 0.0549007542431355 | Loss: 0.0048428522576088 | Epoch: 171 | \n\n\nMeanAbsoluteError: 0.0537488944828510 | Loss: 0.0053144181361667 | Epoch: 172 | MeanAbsoluteError: 0.0455558821558952 | Loss: 0.0042871075259571 | Epoch: 173 | MeanAbsoluteError: 0.0492472946643829 | Loss: 0.0046557970345020 | Epoch: 174 | MeanAbsoluteError: 0.0547079406678677 | Loss: 0.0058127329562252 | Epoch: 175 | \n\n\nMeanAbsoluteError: 0.0525230020284653 | Loss: 0.0053306434328031 | Epoch: 176 | MeanAbsoluteError: 0.0546562559902668 | Loss: 0.0057274464266620 | Epoch: 177 | MeanAbsoluteError: 0.0501013584434986 | Loss: 0.0045049431194600 | Epoch: 178 | MeanAbsoluteError: 0.0558300763368607 | Loss: 0.0068474685019617 | Epoch: 179 | \n\n\nMeanAbsoluteError: 0.0521060526371002 | Loss: 0.0049656669664393 | Epoch: 180 | MeanAbsoluteError: 0.0508404523134232 | Loss: 0.0052835445170977 | Epoch: 181 | MeanAbsoluteError: 0.0538774542510509 | Loss: 0.0055624233990736 | Epoch: 182 | MeanAbsoluteError: 0.0559035427868366 | Loss: 0.0059318734381936 | \n\n\nEpoch: 183 | MeanAbsoluteError: 0.0557606443762779 | Loss: 0.0051081028527972 | Epoch: 184 | MeanAbsoluteError: 0.0463708415627480 | Loss: 0.0044224821498287 | Epoch: 185 | MeanAbsoluteError: 0.0526744425296783 | Loss: 0.0057336210509100 | Epoch: 186 | \n\n\nMeanAbsoluteError: 0.0501622892916203 | Loss: 0.0045316611726058 | Epoch: 187 | MeanAbsoluteError: 0.0611898042261600 | Loss: 0.0058761916650263 | Epoch: 188 | MeanAbsoluteError: 0.0636456534266472 | Loss: 0.0070122339683095 | Epoch: 189 | MeanAbsoluteError: 0.0552155748009682 | Loss: 0.0061342076553142 | Epoch: 190 | \n\n\nMeanAbsoluteError: 0.0575042106211185 | Loss: 0.0062321281798895 | Epoch: 191 | MeanAbsoluteError: 0.0633357688784599 | Loss: 0.0066737483966311 | Epoch: 192 | MeanAbsoluteError: 0.0526954010128975 | Loss: 0.0048711087239146 | Epoch: 193 | \n\n\nMeanAbsoluteError: 0.0534703508019447 | Loss: 0.0061190333462467 | Epoch: 194 | MeanAbsoluteError: 0.0434292070567608 | Loss: 0.0037385614169149 | Epoch: 195 | MeanAbsoluteError: 0.0527493730187416 | Loss: 0.0050137670722937 | Epoch: 196 | MeanAbsoluteError: 0.0511577390134335 | Loss: 0.0055822811861473 | Epoch: 197 | \n\n\nMeanAbsoluteError: 0.0461829006671906 | Loss: 0.0041071279847529 | Epoch: 198 | MeanAbsoluteError: 0.0441893897950649 | Loss: 0.0041920666837158 | Epoch: 199 | MeanAbsoluteError: 0.0424262396991253 | Loss: 0.0038943349975039 | Epoch: 200 | MeanAbsoluteError: 0.0599287971854210 | Loss: 0.0065689984338334 | Epoch: 201 | \n\n\nMeanAbsoluteError: 0.0564301051199436 | Loss: 0.0053871131814575 | Epoch: 202 | MeanAbsoluteError: 0.0521859116852283 | Loss: 0.0052646369210714 | Epoch: 203 | MeanAbsoluteError: 0.0509782694280148 | Loss: 0.0051318406231554 | Epoch: 204 | MeanAbsoluteError: 0.0482540242373943 | Loss: 0.0052256613845729 | Early stopping at epoch 203\nReturned to Spot: Validation loss: 0.0052256613845728635\n\n\n\nconfig: {'_L_in': 10, '_L_out': 1, 'l1': 32, 'dropout_prob': 0.19558603900286908, 'lr_mult': 7.448008656603053, 'batch_size': 16, 'epochs': 2048, 'k_folds': 1, 'patience': 32, 'optimizer': 'Adadelta', 'sgd_momentum': 0.2026605518977484}\nEpoch: 1 | MeanAbsoluteError: 0.1576537489891052 | Loss: 0.0371241024450252 | Epoch: 2 | MeanAbsoluteError: 0.1471570283174515 | Loss: 0.0325738389633204 | Epoch: 3 | MeanAbsoluteError: 0.1492935568094254 | Loss: 0.0329533073266870 | Epoch: 4 | MeanAbsoluteError: 0.1501051336526871 | Loss: 0.0332149744622017 | Epoch: 5 | MeanAbsoluteError: 0.1239315047860146 | Loss: 0.0231538510048076 | Epoch: 6 | MeanAbsoluteError: 0.1269563585519791 | Loss: 0.0240062994784430 | Epoch: 7 | \n\n\nMeanAbsoluteError: 0.1274782866239548 | Loss: 0.0240387253365234 | Epoch: 8 | MeanAbsoluteError: 0.0920177921652794 | Loss: 0.0141485493973290 | Epoch: 9 | MeanAbsoluteError: 0.1368053257465363 | Loss: 0.0272907239237898 | Epoch: 10 | MeanAbsoluteError: 0.1077526733279228 | Loss: 0.0178965055628827 | Epoch: 11 | MeanAbsoluteError: 0.1315215378999710 | Loss: 0.0250200458655232 | Epoch: 12 | MeanAbsoluteError: 0.1343497782945633 | Loss: 0.0243506257079150 | Epoch: 13 | \n\n\nMeanAbsoluteError: 0.1047645881772041 | Loss: 0.0159218440714635 | Epoch: 14 | MeanAbsoluteError: 0.0796423628926277 | Loss: 0.0098755388814760 | Epoch: 15 | MeanAbsoluteError: 0.1257768571376801 | Loss: 0.0232023755578618 | Epoch: 16 | MeanAbsoluteError: 0.1160022765398026 | Loss: 0.0193196493446043 | Epoch: 17 | MeanAbsoluteError: 0.1055991798639297 | Loss: 0.0166633820504342 | Epoch: 18 | MeanAbsoluteError: 0.0647322982549667 | Loss: 0.0070547177211234 | Epoch: 19 | MeanAbsoluteError: 0.0877254679799080 | Loss: 0.0118277318481552 | Epoch: 20 | \n\n\nMeanAbsoluteError: 0.0680278241634369 | Loss: 0.0075104305226552 | Epoch: 21 | MeanAbsoluteError: 0.0869466066360474 | Loss: 0.0107279598810955 | Epoch: 22 | MeanAbsoluteError: 0.0515963397920132 | Loss: 0.0044496981243260 | Epoch: 23 | MeanAbsoluteError: 0.1082045584917068 | Loss: 0.0156988123137700 | Epoch: 24 | MeanAbsoluteError: 0.0948655977845192 | Loss: 0.0148853029761659 | Epoch: 25 | MeanAbsoluteError: 0.0914654955267906 | Loss: 0.0113117591183829 | Epoch: 26 | MeanAbsoluteError: 0.1070964336395264 | Loss: 0.0162888841311398 | Epoch: 27 | \n\n\nMeanAbsoluteError: 0.1275680959224701 | Loss: 0.0205569811851570 | Epoch: 28 | MeanAbsoluteError: 0.1066668704152107 | Loss: 0.0164664581810173 | Epoch: 29 | MeanAbsoluteError: 0.0915611088275909 | Loss: 0.0121749116254872 | Epoch: 30 | MeanAbsoluteError: 0.1468640714883804 | Loss: 0.0253135073733957 | Epoch: 31 | MeanAbsoluteError: 0.0894179567694664 | Loss: 0.0112113211500017 | Epoch: 32 | MeanAbsoluteError: 0.1215740442276001 | Loss: 0.0203687704511379 | Epoch: 33 | MeanAbsoluteError: 0.0825090259313583 | Loss: 0.0098643455850451 | Epoch: 34 | \n\n\nMeanAbsoluteError: 0.1420194953680038 | Loss: 0.0242505659790416 | Epoch: 35 | MeanAbsoluteError: 0.1187702715396881 | Loss: 0.0179499383819731 | Epoch: 36 | MeanAbsoluteError: 0.0694108381867409 | Loss: 0.0078946906632107 | Epoch: 37 | MeanAbsoluteError: 0.2029510438442230 | Loss: 0.0467401168456203 | Epoch: 38 | MeanAbsoluteError: 0.1284051388502121 | Loss: 0.0194381534268982 | Epoch: 39 | MeanAbsoluteError: 0.0699532106518745 | Loss: 0.0073772401818515 | Epoch: 40 | MeanAbsoluteError: 0.0822278559207916 | Loss: 0.0103401182170369 | Epoch: 41 | \n\n\nMeanAbsoluteError: 0.1275567263364792 | Loss: 0.0202132698246523 | Epoch: 42 | MeanAbsoluteError: 0.0822138637304306 | Loss: 0.0095945177844873 | Epoch: 43 | MeanAbsoluteError: 0.0949029996991158 | Loss: 0.0117541412136665 | Epoch: 44 | MeanAbsoluteError: 0.1071104034781456 | Loss: 0.0147900009331735 | Epoch: 45 | MeanAbsoluteError: 0.0533463172614574 | Loss: 0.0048009353248697 | Epoch: 46 | MeanAbsoluteError: 0.0854016840457916 | Loss: 0.0096584585201191 | Epoch: 47 | MeanAbsoluteError: 0.1756445020437241 | Loss: 0.0348618976575764 | Epoch: 48 | \n\n\nMeanAbsoluteError: 0.1411600857973099 | Loss: 0.0231789311296061 | Epoch: 49 | MeanAbsoluteError: 0.1830604523420334 | Loss: 0.0377721063988773 | Epoch: 50 | MeanAbsoluteError: 0.0447322987020016 | Loss: 0.0037836054413530 | Epoch: 51 | MeanAbsoluteError: 0.0662365108728409 | Loss: 0.0068458562079621 | Epoch: 52 | MeanAbsoluteError: 0.0728638619184494 | Loss: 0.0084670631362027 | Epoch: 53 | MeanAbsoluteError: 0.0451635122299194 | Loss: 0.0035227882908657 | Epoch: 54 | MeanAbsoluteError: 0.1325897276401520 | Loss: 0.0208423241580787 | Epoch: 55 | \n\n\nMeanAbsoluteError: 0.0425529330968857 | Loss: 0.0029730352229978 | Epoch: 56 | MeanAbsoluteError: 0.0665653720498085 | Loss: 0.0066926432650928 | Epoch: 57 | MeanAbsoluteError: 0.0648057833313942 | Loss: 0.0065936142407162 | Epoch: 58 | MeanAbsoluteError: 0.0764665976166725 | Loss: 0.0087257562156178 | Epoch: 59 | MeanAbsoluteError: 0.0647575855255127 | Loss: 0.0068094634549006 | Epoch: 60 | MeanAbsoluteError: 0.1141515970230103 | Loss: 0.0153538074442431 | Epoch: 61 | MeanAbsoluteError: 0.0621096976101398 | Loss: 0.0058136796333680 | Epoch: 62 | \n\n\nMeanAbsoluteError: 0.0917228683829308 | Loss: 0.0116327084404858 | Epoch: 63 | MeanAbsoluteError: 0.0398471243679523 | Loss: 0.0030277344937387 | Epoch: 64 | MeanAbsoluteError: 0.0483802109956741 | Loss: 0.0037164699996969 | Epoch: 65 | MeanAbsoluteError: 0.0566176660358906 | Loss: 0.0056012707431556 | Epoch: 66 | MeanAbsoluteError: 0.0924349948763847 | Loss: 0.0120169794628103 | Epoch: 67 | MeanAbsoluteError: 0.1201274618506432 | Loss: 0.0175358587385792 | Epoch: 68 | MeanAbsoluteError: 0.0584267303347588 | Loss: 0.0052532542276343 | Epoch: 69 | \n\n\nMeanAbsoluteError: 0.0945024043321609 | Loss: 0.0114184025871126 | Epoch: 70 | MeanAbsoluteError: 0.0656167343258858 | Loss: 0.0073606126059435 | Epoch: 71 | MeanAbsoluteError: 0.0455515421926975 | Loss: 0.0035209118474373 | Epoch: 72 | MeanAbsoluteError: 0.0780214518308640 | Loss: 0.0086096337212152 | Epoch: 73 | MeanAbsoluteError: 0.0909908413887024 | Loss: 0.0125607886645747 | Epoch: 74 | MeanAbsoluteError: 0.1064788997173309 | Loss: 0.0145660996633141 | Epoch: 75 | MeanAbsoluteError: 0.0474500954151154 | Loss: 0.0037225035301067 | \n\n\nEpoch: 76 | MeanAbsoluteError: 0.0450612939894199 | Loss: 0.0036978027078715 | Epoch: 77 | MeanAbsoluteError: 0.0656636655330658 | Loss: 0.0061879804186327 | Epoch: 78 | MeanAbsoluteError: 0.0954613089561462 | Loss: 0.0136571459864315 | Epoch: 79 | MeanAbsoluteError: 0.0975570902228355 | Loss: 0.0117609786653989 | Epoch: 80 | MeanAbsoluteError: 0.0919706895947456 | Loss: 0.0103534069402437 | Epoch: 81 | MeanAbsoluteError: 0.1014891713857651 | Loss: 0.0138107162753218 | Epoch: 82 | \n\n\nMeanAbsoluteError: 0.0416049137711525 | Loss: 0.0029494661935850 | Epoch: 83 | MeanAbsoluteError: 0.0613561868667603 | Loss: 0.0056663459951156 | Epoch: 84 | MeanAbsoluteError: 0.0763662010431290 | Loss: 0.0083116293688746 | Epoch: 85 | MeanAbsoluteError: 0.0417902097105980 | Loss: 0.0037397252744995 | Epoch: 86 | MeanAbsoluteError: 0.0334540791809559 | Loss: 0.0024299689470545 | Epoch: 87 | MeanAbsoluteError: 0.0332052484154701 | Loss: 0.0022006698908578 | Epoch: 88 | MeanAbsoluteError: 0.1122358292341232 | Loss: 0.0149577136494611 | \n\n\nEpoch: 89 | MeanAbsoluteError: 0.1020331755280495 | Loss: 0.0126010056241955 | Epoch: 90 | MeanAbsoluteError: 0.0396909527480602 | Loss: 0.0030961804900711 | Epoch: 91 | MeanAbsoluteError: 0.1081202477216721 | Loss: 0.0138301801328596 | Epoch: 92 | MeanAbsoluteError: 0.0674472749233246 | Loss: 0.0070134538814033 | Epoch: 93 | MeanAbsoluteError: 0.0580549500882626 | Loss: 0.0058899535797536 | Epoch: 94 | MeanAbsoluteError: 0.0749015584588051 | Loss: 0.0076906123737756 | Epoch: 95 | \n\n\nMeanAbsoluteError: 0.0617745481431484 | Loss: 0.0054860806558281 | Epoch: 96 | MeanAbsoluteError: 0.0387640483677387 | Loss: 0.0025077120425474 | Epoch: 97 | MeanAbsoluteError: 0.0398495160043240 | Loss: 0.0025881833311072 | Epoch: 98 | MeanAbsoluteError: 0.0641623586416245 | Loss: 0.0061485287243206 | Epoch: 99 | MeanAbsoluteError: 0.0481731966137886 | Loss: 0.0037534644851755 | Epoch: 100 | MeanAbsoluteError: 0.0834775790572166 | Loss: 0.0101221051116131 | Epoch: 101 | MeanAbsoluteError: 0.0494153425097466 | Loss: 0.0037208378719362 | Epoch: 102 | \n\n\nMeanAbsoluteError: 0.0643165335059166 | Loss: 0.0070793805031204 | Epoch: 103 | MeanAbsoluteError: 0.0336097702383995 | Loss: 0.0027760651259757 | Epoch: 104 | MeanAbsoluteError: 0.0892196074128151 | Loss: 0.0110575409459048 | Epoch: 105 | MeanAbsoluteError: 0.0867274925112724 | Loss: 0.0103284524459588 | Epoch: 106 | MeanAbsoluteError: 0.0610234625637531 | Loss: 0.0063360634039303 | Epoch: 107 | MeanAbsoluteError: 0.0748942419886589 | Loss: 0.0071669835107107 | Epoch: 108 | MeanAbsoluteError: 0.0323297381401062 | Loss: 0.0020163563986946 | Epoch: 109 | \n\n\nMeanAbsoluteError: 0.0509131066501141 | Loss: 0.0042308698114204 | Epoch: 110 | MeanAbsoluteError: 0.0554416738450527 | Loss: 0.0041554260900930 | Epoch: 111 | MeanAbsoluteError: 0.0896003693342209 | Loss: 0.0123715768568218 | Epoch: 112 | MeanAbsoluteError: 0.0528755113482475 | Loss: 0.0043795672306595 | Epoch: 113 | MeanAbsoluteError: 0.0375675633549690 | Loss: 0.0022228274028748 | Epoch: 114 | MeanAbsoluteError: 0.0377793684601784 | Loss: 0.0025471264257488 | Epoch: 115 | MeanAbsoluteError: 0.0929443687200546 | Loss: 0.0110290685276452 | Epoch: 116 | \n\n\nMeanAbsoluteError: 0.0676704570651054 | Loss: 0.0077043650426755 | Epoch: 117 | MeanAbsoluteError: 0.0437710434198380 | Loss: 0.0030783187708278 | Epoch: 118 | MeanAbsoluteError: 0.0900241881608963 | Loss: 0.0121118107957667 | Epoch: 119 | MeanAbsoluteError: 0.0480575002729893 | Loss: 0.0033555762401145 | Epoch: 120 | MeanAbsoluteError: 0.0444488637149334 | Loss: 0.0030485767209412 | Epoch: 121 | MeanAbsoluteError: 0.0383355952799320 | Loss: 0.0029661963834721 | Epoch: 122 | MeanAbsoluteError: 0.0302641522139311 | Loss: 0.0017723058760901 | Epoch: 123 | \n\n\nMeanAbsoluteError: 0.0851379558444023 | Loss: 0.0089884101364173 | Epoch: 124 | MeanAbsoluteError: 0.0345459207892418 | Loss: 0.0026770742291487 | Epoch: 125 | MeanAbsoluteError: 0.0559882931411266 | Loss: 0.0054141532899322 | Epoch: 126 | MeanAbsoluteError: 0.1069112494587898 | Loss: 0.0150831753731166 | Epoch: 127 | MeanAbsoluteError: 0.0583681166172028 | Loss: 0.0056309016715539 | Epoch: 128 | MeanAbsoluteError: 0.0445699132978916 | Loss: 0.0032556749586212 | Epoch: 129 | \n\n\nMeanAbsoluteError: 0.0385826490819454 | Loss: 0.0027404263444049 | Epoch: 130 | MeanAbsoluteError: 0.0448647737503052 | Loss: 0.0034524563601927 | Epoch: 131 | MeanAbsoluteError: 0.1035506054759026 | Loss: 0.0145944684841915 | Epoch: 132 | MeanAbsoluteError: 0.1147233843803406 | Loss: 0.0157100716115613 | Epoch: 133 | MeanAbsoluteError: 0.0363160148262978 | Loss: 0.0030762090923657 | Epoch: 134 | MeanAbsoluteError: 0.0323437564074993 | Loss: 0.0019925239642984 | Epoch: 135 | MeanAbsoluteError: 0.0739214271306992 | Loss: 0.0080497873162753 | Epoch: 136 | \n\n\nMeanAbsoluteError: 0.0411022827029228 | Loss: 0.0028896050858556 | Epoch: 137 | MeanAbsoluteError: 0.0412372425198555 | Loss: 0.0034573169878537 | Epoch: 138 | MeanAbsoluteError: 0.0618519671261311 | Loss: 0.0058549801255331 | Epoch: 139 | MeanAbsoluteError: 0.1049729064106941 | Loss: 0.0150201167225053 | Epoch: 140 | MeanAbsoluteError: 0.0797232463955879 | Loss: 0.0076377691799089 | Epoch: 141 | MeanAbsoluteError: 0.0625488013029099 | Loss: 0.0061527529706884 | Epoch: 142 | MeanAbsoluteError: 0.0906795486807823 | Loss: 0.0096524439899153 | Epoch: 143 | \n\n\nMeanAbsoluteError: 0.0528330951929092 | Loss: 0.0047645299744449 | Epoch: 144 | MeanAbsoluteError: 0.0792476907372475 | Loss: 0.0088629078267044 | Epoch: 145 | MeanAbsoluteError: 0.0496252775192261 | Loss: 0.0042281732159226 | Epoch: 146 | MeanAbsoluteError: 0.0675916597247124 | Loss: 0.0076860514910598 | Epoch: 147 | MeanAbsoluteError: 0.0787084251642227 | Loss: 0.0078451158723941 | Epoch: 148 | MeanAbsoluteError: 0.0551900789141655 | Loss: 0.0047364975938475 | Epoch: 149 | MeanAbsoluteError: 0.0457645766437054 | Loss: 0.0032280414414249 | Epoch: 150 | \n\n\nMeanAbsoluteError: 0.0541663281619549 | Loss: 0.0049092210706716 | Epoch: 151 | MeanAbsoluteError: 0.0864453464746475 | Loss: 0.0095365917016017 | Epoch: 152 | MeanAbsoluteError: 0.0583800114691257 | Loss: 0.0054500419769044 | Epoch: 153 | MeanAbsoluteError: 0.0333236381411552 | Loss: 0.0020449859316853 | Epoch: 154 | MeanAbsoluteError: 0.0875927582383156 | Loss: 0.0114209121828409 | Early stopping at epoch 153\nReturned to Spot: Validation loss: 0.011420912182840862\n\n\nspotPython tuning: 0.0016865455361671354 [#---------] 9.97% \n\n\n\nconfig: {'_L_in': 10, '_L_out': 1, 'l1': 32, 'dropout_prob': 0.20293466636782523, 'lr_mult': 7.331342800164574, 'batch_size': 16, 'epochs': 2048, 'k_folds': 1, 'patience': 32, 'optimizer': 'Adadelta', 'sgd_momentum': 0.07385999410782093}\nEpoch: 1 | MeanAbsoluteError: 0.1481190621852875 | Loss: 0.0351861426116605 | Epoch: 2 | MeanAbsoluteError: 0.2296435236930847 | Loss: 0.0734963628806566 | Epoch: 3 | MeanAbsoluteError: 0.1444450914859772 | Loss: 0.0323482019532668 | Epoch: 4 | MeanAbsoluteError: 0.1341279894113541 | Loss: 0.0273765427991748 | Epoch: 5 | MeanAbsoluteError: 0.1876977533102036 | Loss: 0.0500323460682442 | Epoch: 6 | MeanAbsoluteError: 0.1284587234258652 | Loss: 0.0260072121592729 | Epoch: 7 | \n\n\nMeanAbsoluteError: 0.1082618460059166 | Loss: 0.0190536104828904 | Epoch: 8 | MeanAbsoluteError: 0.1435684114694595 | Loss: 0.0307440780789444 | Epoch: 9 | MeanAbsoluteError: 0.1095892339944839 | Loss: 0.0190283575242287 | Epoch: 10 | MeanAbsoluteError: 0.1321545988321304 | Loss: 0.0257497121040758 | Epoch: 11 | MeanAbsoluteError: 0.1560886055231094 | Loss: 0.0349246550743517 | Epoch: 12 | MeanAbsoluteError: 0.1256589442491531 | Loss: 0.0231270027395926 | Epoch: 13 | MeanAbsoluteError: 0.0800815448164940 | Loss: 0.0110155394251801 | Epoch: 14 | \n\n\nMeanAbsoluteError: 0.1274072229862213 | Loss: 0.0233194364823009 | Epoch: 15 | MeanAbsoluteError: 0.1206636652350426 | Loss: 0.0213027470990231 | Epoch: 16 | MeanAbsoluteError: 0.1268581002950668 | Loss: 0.0221626165470010 | Epoch: 17 | MeanAbsoluteError: 0.0873751938343048 | Loss: 0.0125727030007463 | Epoch: 18 | MeanAbsoluteError: 0.1269076168537140 | Loss: 0.0210259428836013 | Epoch: 19 | MeanAbsoluteError: 0.1651039272546768 | Loss: 0.0348334485959066 | Epoch: 20 | MeanAbsoluteError: 0.1611952632665634 | Loss: 0.0323765680782105 | Epoch: 21 | \n\n\nMeanAbsoluteError: 0.0808896347880363 | Loss: 0.0113541026550688 | Epoch: 22 | MeanAbsoluteError: 0.1088504940271378 | Loss: 0.0167615907756906 | Epoch: 23 | MeanAbsoluteError: 0.1086405590176582 | Loss: 0.0174419982358813 | Epoch: 24 | MeanAbsoluteError: 0.0746236294507980 | Loss: 0.0090405947626813 | Epoch: 25 | MeanAbsoluteError: 0.1475295275449753 | Loss: 0.0270385210843463 | Epoch: 26 | MeanAbsoluteError: 0.0979473814368248 | Loss: 0.0142573277515016 | Epoch: 27 | MeanAbsoluteError: 0.1282038539648056 | Loss: 0.0220263218507171 | Epoch: 28 | \n\n\nMeanAbsoluteError: 0.1415963172912598 | Loss: 0.0241755500043693 | Epoch: 29 | MeanAbsoluteError: 0.0660176500678062 | Loss: 0.0073338131738925 | Epoch: 30 | MeanAbsoluteError: 0.1480638384819031 | Loss: 0.0272101940293061 | Epoch: 31 | MeanAbsoluteError: 0.0611344017088413 | Loss: 0.0066793774695773 | Epoch: 32 | MeanAbsoluteError: 0.0902462005615234 | Loss: 0.0114521482273152 | Epoch: 33 | MeanAbsoluteError: 0.0760840103030205 | Loss: 0.0086295364032450 | Epoch: 34 | \n\n\nMeanAbsoluteError: 0.1102590709924698 | Loss: 0.0169183374627640 | Epoch: 35 | MeanAbsoluteError: 0.0789994671940804 | Loss: 0.0094542671730252 | Epoch: 36 | MeanAbsoluteError: 0.0467006415128708 | Loss: 0.0039529639761895 | Epoch: 37 | MeanAbsoluteError: 0.0483433902263641 | Loss: 0.0046784447285494 | Epoch: 38 | MeanAbsoluteError: 0.1078801602125168 | Loss: 0.0179967784175747 | Epoch: 39 | MeanAbsoluteError: 0.0616567730903625 | Loss: 0.0064066827395245 | Epoch: 40 | MeanAbsoluteError: 0.0755830928683281 | Loss: 0.0093122180061121 | Epoch: 41 | \n\n\nMeanAbsoluteError: 0.0729920640587807 | Loss: 0.0088524674187954 | Epoch: 42 | MeanAbsoluteError: 0.0696488469839096 | Loss: 0.0074459726456553 | Epoch: 43 | MeanAbsoluteError: 0.0644034221768379 | Loss: 0.0062645287498047 | Epoch: 44 | MeanAbsoluteError: 0.0459934920072556 | Loss: 0.0038433927601497 | Epoch: 45 | MeanAbsoluteError: 0.0632072985172272 | Loss: 0.0062141059040043 | Epoch: 46 | MeanAbsoluteError: 0.0568670332431793 | Loss: 0.0052832348982951 | Epoch: 47 | MeanAbsoluteError: 0.1483700126409531 | Loss: 0.0273461933002660 | Epoch: 48 | \n\n\nMeanAbsoluteError: 0.1641799360513687 | Loss: 0.0306064282592974 | Epoch: 49 | MeanAbsoluteError: 0.0556607060134411 | Loss: 0.0054449436352833 | Epoch: 50 | MeanAbsoluteError: 0.0599934943020344 | Loss: 0.0061060821416935 | Epoch: 51 | MeanAbsoluteError: 0.0708895623683929 | Loss: 0.0071078496740053 | Epoch: 52 | MeanAbsoluteError: 0.0860849395394325 | Loss: 0.0101291497090929 | Epoch: 53 | MeanAbsoluteError: 0.0756759420037270 | Loss: 0.0080445469602158 | Epoch: 54 | MeanAbsoluteError: 0.0419364310801029 | Loss: 0.0025509907557678 | \n\n\nEpoch: 55 | MeanAbsoluteError: 0.0941273868083954 | Loss: 0.0146793393222125 | Epoch: 56 | MeanAbsoluteError: 0.0719385221600533 | Loss: 0.0079206199581294 | Epoch: 57 | MeanAbsoluteError: 0.0573008395731449 | Loss: 0.0059069342617142 | Epoch: 58 | MeanAbsoluteError: 0.0366118066012859 | Loss: 0.0031193618043816 | Epoch: 59 | MeanAbsoluteError: 0.0481633096933365 | Loss: 0.0051094932408121 | Epoch: 60 | MeanAbsoluteError: 0.0432921573519707 | Loss: 0.0031951448978170 | Epoch: 61 | \n\n\nMeanAbsoluteError: 0.0987340062856674 | Loss: 0.0130418953975957 | Epoch: 62 | MeanAbsoluteError: 0.0488846600055695 | Loss: 0.0045877398775989 | Epoch: 63 | MeanAbsoluteError: 0.0439203083515167 | Loss: 0.0040492112533876 | Epoch: 64 | MeanAbsoluteError: 0.0865890011191368 | Loss: 0.0102151406095608 | Epoch: 65 | MeanAbsoluteError: 0.0579838491976261 | Loss: 0.0054967170152323 | Epoch: 66 | MeanAbsoluteError: 0.0494345240294933 | Loss: 0.0046315880761923 | Epoch: 67 | \n\n\nMeanAbsoluteError: 0.0750915333628654 | Loss: 0.0078714436998493 | Epoch: 68 | MeanAbsoluteError: 0.0500153936445713 | Loss: 0.0045422815999604 | Epoch: 69 | MeanAbsoluteError: 0.0552171319723129 | Loss: 0.0053961106306432 | Epoch: 70 | MeanAbsoluteError: 0.0433135218918324 | Loss: 0.0035646185309528 | Epoch: 71 | MeanAbsoluteError: 0.0342347994446754 | Loss: 0.0020871621519817 | Epoch: 72 | MeanAbsoluteError: 0.0768425613641739 | Loss: 0.0075823354877924 | Epoch: 73 | \n\n\nMeanAbsoluteError: 0.0406748615205288 | Loss: 0.0029606488594589 | Epoch: 74 | MeanAbsoluteError: 0.0398087874054909 | Loss: 0.0033795871728982 | Epoch: 75 | MeanAbsoluteError: 0.0358989015221596 | Loss: 0.0027715965989046 | Epoch: 76 | MeanAbsoluteError: 0.0643030107021332 | Loss: 0.0067213039330550 | Epoch: 77 | MeanAbsoluteError: 0.1265082806348801 | Loss: 0.0195160851764836 | Epoch: 78 | MeanAbsoluteError: 0.0565533749759197 | Loss: 0.0057808661000117 | Epoch: 79 | MeanAbsoluteError: 0.0484305955469608 | Loss: 0.0040960964428163 | Epoch: 80 | \n\n\nMeanAbsoluteError: 0.0525996014475822 | Loss: 0.0046421496050530 | Epoch: 81 | MeanAbsoluteError: 0.0586946308612823 | Loss: 0.0055326864638023 | Epoch: 82 | MeanAbsoluteError: 0.0676841139793396 | Loss: 0.0069681631744300 | Epoch: 83 | MeanAbsoluteError: 0.0543542802333832 | Loss: 0.0049179383234954 | Epoch: 84 | MeanAbsoluteError: 0.0412385798990726 | Loss: 0.0032702302437668 | Epoch: 85 | MeanAbsoluteError: 0.0463594868779182 | Loss: 0.0044245045252242 | Epoch: 86 | \n\n\nMeanAbsoluteError: 0.0499199889600277 | Loss: 0.0042035687886375 | Epoch: 87 | MeanAbsoluteError: 0.0877544432878494 | Loss: 0.0095016691637667 | Epoch: 88 | MeanAbsoluteError: 0.0680326968431473 | Loss: 0.0063553116480379 | Epoch: 89 | MeanAbsoluteError: 0.0574696101248264 | Loss: 0.0054286075143242 | Epoch: 90 | MeanAbsoluteError: 0.0559617988765240 | Loss: 0.0060383668169379 | Epoch: 91 | MeanAbsoluteError: 0.0354569964110851 | Loss: 0.0023289478941526 | Epoch: 92 | \n\n\nMeanAbsoluteError: 0.0633278563618660 | Loss: 0.0054519355150038 | Epoch: 93 | MeanAbsoluteError: 0.0343352742493153 | Loss: 0.0021643228200877 | Epoch: 94 | MeanAbsoluteError: 0.0583045817911625 | Loss: 0.0050673272436191 | Epoch: 95 | MeanAbsoluteError: 0.0342233069241047 | Loss: 0.0025239704041987 | Epoch: 96 | MeanAbsoluteError: 0.0324185937643051 | Loss: 0.0018319249379841 | Epoch: 97 | MeanAbsoluteError: 0.0388868004083633 | Loss: 0.0028020055033267 | Epoch: 98 | MeanAbsoluteError: 0.0590264834463596 | Loss: 0.0054105004344724 | Epoch: 99 | \n\n\nMeanAbsoluteError: 0.0488727502524853 | Loss: 0.0050522936385517 | Epoch: 100 | MeanAbsoluteError: 0.0395724549889565 | Loss: 0.0028538861079141 | Epoch: 101 | MeanAbsoluteError: 0.0539633296430111 | Loss: 0.0049963399375740 | Epoch: 102 | MeanAbsoluteError: 0.0661612898111343 | Loss: 0.0073537388081221 | Epoch: 103 | MeanAbsoluteError: 0.0377688966691494 | Loss: 0.0034127391363175 | Epoch: 104 | MeanAbsoluteError: 0.0406253263354301 | Loss: 0.0030880064188846 | Epoch: 105 | \n\n\nMeanAbsoluteError: 0.0519772320985794 | Loss: 0.0045116723784687 | Epoch: 106 | MeanAbsoluteError: 0.0593646317720413 | Loss: 0.0054692994974750 | Epoch: 107 | MeanAbsoluteError: 0.0565544515848160 | Loss: 0.0048185733122457 | Epoch: 108 | MeanAbsoluteError: 0.0330779217183590 | Loss: 0.0024780322901758 | Epoch: 109 | MeanAbsoluteError: 0.0797168910503387 | Loss: 0.0099280166537746 | Epoch: 110 | MeanAbsoluteError: 0.0415970720350742 | Loss: 0.0031937708048836 | Epoch: 111 | MeanAbsoluteError: 0.0399437546730042 | Loss: 0.0026601927207881 | Epoch: 112 | \n\n\nMeanAbsoluteError: 0.0321070514619350 | Loss: 0.0023903332093093 | Epoch: 113 | MeanAbsoluteError: 0.0348392240703106 | Loss: 0.0026369688505503 | Epoch: 114 | MeanAbsoluteError: 0.0482833944261074 | Loss: 0.0035892588601105 | Epoch: 115 | MeanAbsoluteError: 0.0337658151984215 | Loss: 0.0023644521287152 | Epoch: 116 | MeanAbsoluteError: 0.0361211858689785 | Loss: 0.0026008575958641 | Epoch: 117 | MeanAbsoluteError: 0.0479185767471790 | Loss: 0.0036706814150277 | Epoch: 118 | MeanAbsoluteError: 0.0308922696858644 | Loss: 0.0020325092911279 | Epoch: 119 | \n\n\nMeanAbsoluteError: 0.0357330180704594 | Loss: 0.0025906358634146 | Epoch: 120 | MeanAbsoluteError: 0.0496012829244137 | Loss: 0.0033790164896728 | Epoch: 121 | MeanAbsoluteError: 0.0388898327946663 | Loss: 0.0027859953636500 | Epoch: 122 | MeanAbsoluteError: 0.0522147864103317 | Loss: 0.0045562184072639 | Epoch: 123 | MeanAbsoluteError: 0.0423006042838097 | Loss: 0.0029173759670046 | Epoch: 124 | MeanAbsoluteError: 0.0633006989955902 | Loss: 0.0061865827362788 | Epoch: 125 | \n\n\nMeanAbsoluteError: 0.0545157045125961 | Loss: 0.0045204942702855 | Epoch: 126 | MeanAbsoluteError: 0.0527162849903107 | Loss: 0.0040186530861415 | Epoch: 127 | MeanAbsoluteError: 0.0341289006173611 | Loss: 0.0024458148461570 | Epoch: 128 | MeanAbsoluteError: 0.0599071681499481 | Loss: 0.0055913199106918 | Early stopping at epoch 127\nReturned to Spot: Validation loss: 0.005591319910691757\n\n\nspotPython tuning: 0.0016865455361671354 [##--------] 18.79% \n\n\n\nconfig: {'_L_in': 10, '_L_out': 1, 'l1': 32, 'dropout_prob': 0.25510864074110584, 'lr_mult': 6.682745556929787, 'batch_size': 16, 'epochs': 512, 'k_folds': 1, 'patience': 32, 'optimizer': 'Adadelta', 'sgd_momentum': 0.0737933434711498}\nEpoch: 1 | MeanAbsoluteError: 0.1411451846361160 | Loss: 0.0329482532841595 | Epoch: 2 | MeanAbsoluteError: 0.1301981657743454 | Loss: 0.0275649635219260 | Epoch: 3 | MeanAbsoluteError: 0.1686934679746628 | Loss: 0.0414238211355711 | Epoch: 4 | MeanAbsoluteError: 0.1127321496605873 | Loss: 0.0206676844605490 | Epoch: 5 | MeanAbsoluteError: 0.1000201106071472 | Loss: 0.0156618065788950 | Epoch: 6 | MeanAbsoluteError: 0.1532903909683228 | Loss: 0.0341786000093347 | Epoch: 7 | \n\n\nMeanAbsoluteError: 0.1021260544657707 | Loss: 0.0164125133060703 | Epoch: 8 | MeanAbsoluteError: 0.1037562564015388 | Loss: 0.0170796997600088 | Epoch: 9 | MeanAbsoluteError: 0.0899926871061325 | Loss: 0.0129961904481445 | Epoch: 10 | MeanAbsoluteError: 0.0879220739006996 | Loss: 0.0127490211866404 | Epoch: 11 | MeanAbsoluteError: 0.0836207717657089 | Loss: 0.0112634660970224 | Epoch: 12 | MeanAbsoluteError: 0.0898287743330002 | Loss: 0.0127140685033641 | Epoch: 13 | MeanAbsoluteError: 0.2529143989086151 | Loss: 0.0805570451836837 | Epoch: 14 | \n\n\nMeanAbsoluteError: 0.0879751890897751 | Loss: 0.0122884641107368 | Epoch: 15 | MeanAbsoluteError: 0.0883802846074104 | Loss: 0.0120937815916381 | Epoch: 16 | MeanAbsoluteError: 0.0863505452871323 | Loss: 0.0111356058501099 | Epoch: 17 | MeanAbsoluteError: 0.1188684105873108 | Loss: 0.0193066983728817 | Epoch: 18 | MeanAbsoluteError: 0.0919379442930222 | Loss: 0.0124192708416989 | Epoch: 19 | MeanAbsoluteError: 0.1411439180374146 | Loss: 0.0259680619561359 | Epoch: 20 | MeanAbsoluteError: 0.1026713848114014 | Loss: 0.0166507925053960 | Epoch: 21 | \n\n\nMeanAbsoluteError: 0.0703604221343994 | Loss: 0.0077717269427682 | Epoch: 22 | MeanAbsoluteError: 0.1078173592686653 | Loss: 0.0154909842010391 | Epoch: 23 | MeanAbsoluteError: 0.0720687210559845 | Loss: 0.0085032128630892 | Epoch: 24 | MeanAbsoluteError: 0.0697471946477890 | Loss: 0.0081570624055243 | Epoch: 25 | MeanAbsoluteError: 0.0705946087837219 | Loss: 0.0085952782782873 | Epoch: 26 | MeanAbsoluteError: 0.1518678367137909 | Loss: 0.0295024505375247 | Epoch: 27 | MeanAbsoluteError: 0.0527811795473099 | Loss: 0.0046927543651117 | Epoch: 28 | \n\n\nMeanAbsoluteError: 0.0551533252000809 | Loss: 0.0051696838590464 | Epoch: 29 | MeanAbsoluteError: 0.1320069730281830 | Loss: 0.0226200205813113 | Epoch: 30 | MeanAbsoluteError: 0.0545597448945045 | Loss: 0.0048334990309453 | Epoch: 31 | MeanAbsoluteError: 0.1024013683199883 | Loss: 0.0136948108280960 | Epoch: 32 | MeanAbsoluteError: 0.1106904596090317 | Loss: 0.0158800520002842 | Epoch: 33 | MeanAbsoluteError: 0.1337603181600571 | Loss: 0.0223250721434229 | Epoch: 34 | \n\n\nMeanAbsoluteError: 0.0754746794700623 | Loss: 0.0082022045175300 | Epoch: 35 | MeanAbsoluteError: 0.0931829065084457 | Loss: 0.0130392550980966 | Epoch: 36 | MeanAbsoluteError: 0.0562764108181000 | Loss: 0.0050317424619080 | Epoch: 37 | MeanAbsoluteError: 0.0552414506673813 | Loss: 0.0053756044086951 | Epoch: 38 | MeanAbsoluteError: 0.1409416049718857 | Loss: 0.0252038111027918 | Epoch: 39 | MeanAbsoluteError: 0.0954449996352196 | Loss: 0.0119333239762407 | Epoch: 40 | \n\n\nMeanAbsoluteError: 0.0514725483953953 | Loss: 0.0045575683103188 | Epoch: 41 | MeanAbsoluteError: 0.0958909392356873 | Loss: 0.0124702872463355 | Epoch: 42 | MeanAbsoluteError: 0.0770309120416641 | Loss: 0.0087097864352951 | Epoch: 43 | MeanAbsoluteError: 0.0765042081475258 | Loss: 0.0101482915005794 | Epoch: 44 | MeanAbsoluteError: 0.0833160877227783 | Loss: 0.0102958265741013 | Epoch: 45 | MeanAbsoluteError: 0.0528903901576996 | Loss: 0.0042680738138427 | Epoch: 46 | \n\n\nMeanAbsoluteError: 0.0547968558967113 | Loss: 0.0053453613930431 | Epoch: 47 | MeanAbsoluteError: 0.0741902366280556 | Loss: 0.0073892613872886 | Epoch: 48 | MeanAbsoluteError: 0.0535256564617157 | Loss: 0.0048782779026384 | Epoch: 49 | MeanAbsoluteError: 0.0526989065110683 | Loss: 0.0044621617141131 | Epoch: 50 | MeanAbsoluteError: 0.0616895742714405 | Loss: 0.0059887516238776 | Epoch: 51 | MeanAbsoluteError: 0.0520833581686020 | Loss: 0.0045518596215468 | Epoch: 52 | \n\n\nMeanAbsoluteError: 0.0903702154755592 | Loss: 0.0107357079947465 | Epoch: 53 | MeanAbsoluteError: 0.0782530754804611 | Loss: 0.0082242356515244 | Epoch: 54 | MeanAbsoluteError: 0.0468942373991013 | Loss: 0.0042067127314543 | Epoch: 55 | MeanAbsoluteError: 0.0898789018392563 | Loss: 0.0107523226669352 | Epoch: 56 | MeanAbsoluteError: 0.1399024128913879 | Loss: 0.0225276336269943 | Epoch: 57 | MeanAbsoluteError: 0.0503925941884518 | Loss: 0.0045925923561873 | Epoch: 58 | \n\n\nMeanAbsoluteError: 0.1171971485018730 | Loss: 0.0174134025644315 | Epoch: 59 | MeanAbsoluteError: 0.0639824271202087 | Loss: 0.0068032881857729 | Epoch: 60 | MeanAbsoluteError: 0.0825405269861221 | Loss: 0.0110480672630825 | Epoch: 61 | MeanAbsoluteError: 0.0666983798146248 | Loss: 0.0060825400348557 | Epoch: 62 | MeanAbsoluteError: 0.0484755225479603 | Loss: 0.0041521097239303 | Epoch: 63 | MeanAbsoluteError: 0.0608979538083076 | Loss: 0.0059298083284184 | Epoch: 64 | \n\n\nMeanAbsoluteError: 0.0662580728530884 | Loss: 0.0066928394432915 | Epoch: 65 | MeanAbsoluteError: 0.0652610361576080 | Loss: 0.0067459356015254 | Epoch: 66 | MeanAbsoluteError: 0.0894910991191864 | Loss: 0.0110750209147993 | Epoch: 67 | MeanAbsoluteError: 0.0524198636412621 | Loss: 0.0047757453775327 | Epoch: 68 | MeanAbsoluteError: 0.0576754137873650 | Loss: 0.0056425264889472 | Epoch: 69 | MeanAbsoluteError: 0.0584304444491863 | Loss: 0.0056640702471333 | Epoch: 70 | \n\n\nMeanAbsoluteError: 0.1284833252429962 | Loss: 0.0205715942245565 | Epoch: 71 | MeanAbsoluteError: 0.1024889349937439 | Loss: 0.0122400700408769 | Epoch: 72 | MeanAbsoluteError: 0.0857445672154427 | Loss: 0.0108983097352872 | Epoch: 73 | MeanAbsoluteError: 0.0841549634933472 | Loss: 0.0095226800706434 | Epoch: 74 | MeanAbsoluteError: 0.0533630102872849 | Loss: 0.0044629295650674 | Epoch: 75 | MeanAbsoluteError: 0.0714913979172707 | Loss: 0.0070237300456747 | Epoch: 76 | \n\n\nMeanAbsoluteError: 0.0715184062719345 | Loss: 0.0067278028122689 | Epoch: 77 | MeanAbsoluteError: 0.1102884560823441 | Loss: 0.0149558259076194 | Epoch: 78 | MeanAbsoluteError: 0.0441016070544720 | Loss: 0.0032488156024269 | Epoch: 79 | MeanAbsoluteError: 0.0971882343292236 | Loss: 0.0121626948545638 | Epoch: 80 | MeanAbsoluteError: 0.0468503907322884 | Loss: 0.0039996565380869 | Epoch: 81 | MeanAbsoluteError: 0.0785930603742599 | Loss: 0.0094328568513064 | Epoch: 82 | \n\n\nMeanAbsoluteError: 0.0538606308400631 | Loss: 0.0043563526491389 | Epoch: 83 | MeanAbsoluteError: 0.0990554988384247 | Loss: 0.0132584149802202 | Epoch: 84 | MeanAbsoluteError: 0.0580057129263878 | Loss: 0.0055092051625252 | Epoch: 85 | MeanAbsoluteError: 0.0564382299780846 | Loss: 0.0050563034478967 | Epoch: 86 | MeanAbsoluteError: 0.0387417525053024 | Loss: 0.0028376284508819 | Epoch: 87 | MeanAbsoluteError: 0.0593950077891350 | Loss: 0.0054922234634624 | Epoch: 88 | \n\n\nMeanAbsoluteError: 0.0761637017130852 | Loss: 0.0086712877290617 | Epoch: 89 | MeanAbsoluteError: 0.0772276818752289 | Loss: 0.0085821399024050 | Epoch: 90 | MeanAbsoluteError: 0.0913972035050392 | Loss: 0.0101495818480065 | Epoch: 91 | MeanAbsoluteError: 0.0406248085200787 | Loss: 0.0032002333318815 | Epoch: 92 | MeanAbsoluteError: 0.0967370346188545 | Loss: 0.0115715295909659 | Epoch: 93 | MeanAbsoluteError: 0.0424547493457794 | Loss: 0.0031125962574917 | Epoch: 94 | \n\n\nMeanAbsoluteError: 0.0777878612279892 | Loss: 0.0084601583351430 | Epoch: 95 | MeanAbsoluteError: 0.0632546395063400 | Loss: 0.0056258926633745 | Epoch: 96 | MeanAbsoluteError: 0.0686591789126396 | Loss: 0.0065108695386076 | Epoch: 97 | MeanAbsoluteError: 0.0441911742091179 | Loss: 0.0038042973212310 | Epoch: 98 | MeanAbsoluteError: 0.0685882717370987 | Loss: 0.0073102913233206 | Epoch: 99 | MeanAbsoluteError: 0.0592508427798748 | Loss: 0.0048387749243136 | Epoch: 100 | \n\n\nMeanAbsoluteError: 0.0568911917507648 | Loss: 0.0054090532449711 | Epoch: 101 | MeanAbsoluteError: 0.0718745812773705 | Loss: 0.0075704037996107 | Epoch: 102 | MeanAbsoluteError: 0.0800816714763641 | Loss: 0.0094338507195444 | Epoch: 103 | MeanAbsoluteError: 0.0619429908692837 | Loss: 0.0059410754321633 | Epoch: 104 | MeanAbsoluteError: 0.0568243153393269 | Loss: 0.0054730290890132 | Epoch: 105 | MeanAbsoluteError: 0.0428995303809643 | Loss: 0.0030854248662332 | Epoch: 106 | \n\n\nMeanAbsoluteError: 0.0441084317862988 | Loss: 0.0032554059932744 | Epoch: 107 | MeanAbsoluteError: 0.0532350167632103 | Loss: 0.0044108330223121 | Epoch: 108 | MeanAbsoluteError: 0.0739809796214104 | Loss: 0.0078968603752161 | Epoch: 109 | MeanAbsoluteError: 0.0772759020328522 | Loss: 0.0091110019405421 | Epoch: 110 | MeanAbsoluteError: 0.0570787042379379 | Loss: 0.0052170622848759 | Epoch: 111 | MeanAbsoluteError: 0.0845476686954498 | Loss: 0.0090088255605415 | Epoch: 112 | \n\n\nMeanAbsoluteError: 0.0880574733018875 | Loss: 0.0096076822496558 | Epoch: 113 | MeanAbsoluteError: 0.0542082153260708 | Loss: 0.0049846280415199 | Epoch: 114 | MeanAbsoluteError: 0.0408620312809944 | Loss: 0.0033501064662184 | Epoch: 115 | MeanAbsoluteError: 0.0480766445398331 | Loss: 0.0042038702859396 | Epoch: 116 | MeanAbsoluteError: 0.0482040159404278 | Loss: 0.0043074043136776 | Epoch: 117 | MeanAbsoluteError: 0.0855235829949379 | Loss: 0.0103288693353534 | Epoch: 118 | \n\n\nMeanAbsoluteError: 0.0708552524447441 | Loss: 0.0074186609861882 | Early stopping at epoch 117\nReturned to Spot: Validation loss: 0.007418660986188211\n\n\nspotPython tuning: 0.0016865455361671354 [###-------] 27.21% \n\n\n\nconfig: {'_L_in': 10, '_L_out': 1, 'l1': 32, 'dropout_prob': 0.18210053285731978, 'lr_mult': 4.145645903441473, 'batch_size': 16, 'epochs': 4096, 'k_folds': 1, 'patience': 32, 'optimizer': 'Adadelta', 'sgd_momentum': 0.07389588052209951}\nEpoch: 1 | MeanAbsoluteError: 0.1510715037584305 | Loss: 0.0348600451099245 | Epoch: 2 | MeanAbsoluteError: 0.1677903831005096 | Loss: 0.0402877731738906 | Epoch: 3 | MeanAbsoluteError: 0.1649329215288162 | Loss: 0.0411432138399074 | Epoch: 4 | MeanAbsoluteError: 0.1227035000920296 | Loss: 0.0226395169371053 | Epoch: 5 | MeanAbsoluteError: 0.1237877905368805 | Loss: 0.0225847010059576 | Epoch: 6 | \n\n\nMeanAbsoluteError: 0.1228028833866119 | Loss: 0.0230636332478178 | Epoch: 7 | MeanAbsoluteError: 0.1011502668261528 | Loss: 0.0170266857664836 | Epoch: 8 | MeanAbsoluteError: 0.1126715093851089 | Loss: 0.0185367420903946 | Epoch: 9 | MeanAbsoluteError: 0.1053979545831680 | Loss: 0.0164926255023793 | Epoch: 10 | MeanAbsoluteError: 0.0881671905517578 | Loss: 0.0122470555238818 | Epoch: 11 | MeanAbsoluteError: 0.1026106104254723 | Loss: 0.0157625036510198 | Epoch: 12 | \n\n\nMeanAbsoluteError: 0.0949876680970192 | Loss: 0.0133393215456683 | Epoch: 13 | MeanAbsoluteError: 0.1006518676877022 | Loss: 0.0147040106454178 | Epoch: 14 | MeanAbsoluteError: 0.0868162065744400 | Loss: 0.0129225310673447 | Epoch: 15 | MeanAbsoluteError: 0.1102227643132210 | Loss: 0.0174189978524258 | Epoch: 16 | MeanAbsoluteError: 0.0993279218673706 | Loss: 0.0138373526891595 | Epoch: 17 | MeanAbsoluteError: 0.0985213071107864 | Loss: 0.0141461504329192 | Epoch: 18 | \n\n\nMeanAbsoluteError: 0.1038579493761063 | Loss: 0.0153038649280605 | Epoch: 19 | MeanAbsoluteError: 0.0738792493939400 | Loss: 0.0090230030840949 | Epoch: 20 | MeanAbsoluteError: 0.0835223272442818 | Loss: 0.0109227882747195 | Epoch: 21 | MeanAbsoluteError: 0.0700853243470192 | Loss: 0.0084208809942203 | Epoch: 22 | MeanAbsoluteError: 0.1197453960776329 | Loss: 0.0184383869269177 | Epoch: 23 | MeanAbsoluteError: 0.0684595555067062 | Loss: 0.0072747760109211 | Epoch: 24 | \n\n\nMeanAbsoluteError: 0.0593805685639381 | Loss: 0.0057427459764049 | Epoch: 25 | MeanAbsoluteError: 0.0721145123243332 | Loss: 0.0079667599822738 | Epoch: 26 | MeanAbsoluteError: 0.1053508594632149 | Loss: 0.0154605424521785 | Epoch: 27 | MeanAbsoluteError: 0.0578169748187065 | Loss: 0.0055258690109967 | Epoch: 28 | MeanAbsoluteError: 0.0556134842336178 | Loss: 0.0052058747356856 | Epoch: 29 | MeanAbsoluteError: 0.0625869110226631 | Loss: 0.0068291512587549 | Epoch: 30 | \n\n\nMeanAbsoluteError: 0.0554748661816120 | Loss: 0.0053333045522633 | Epoch: 31 | MeanAbsoluteError: 0.0528598278760910 | Loss: 0.0049620144265263 | Epoch: 32 | MeanAbsoluteError: 0.0582905374467373 | Loss: 0.0053232845262085 | Epoch: 33 | MeanAbsoluteError: 0.0443428382277489 | Loss: 0.0034380854891711 | Epoch: 34 | MeanAbsoluteError: 0.0675997361540794 | Loss: 0.0064084766261084 | Epoch: 35 | MeanAbsoluteError: 0.0813370421528816 | Loss: 0.0105080436670074 | Epoch: 36 | \n\n\nMeanAbsoluteError: 0.0535647906363010 | Loss: 0.0046465418816201 | Epoch: 37 | MeanAbsoluteError: 0.0836703032255173 | Loss: 0.0101584730865924 | Epoch: 38 | MeanAbsoluteError: 0.1146064475178719 | Loss: 0.0173246430625257 | Epoch: 39 | MeanAbsoluteError: 0.0476101562380791 | Loss: 0.0042397529560778 | Epoch: 40 | MeanAbsoluteError: 0.0473390370607376 | Loss: 0.0037047677477332 | Epoch: 41 | MeanAbsoluteError: 0.0441756211221218 | Loss: 0.0039710398383537 | Epoch: 42 | \n\n\nMeanAbsoluteError: 0.0809314846992493 | Loss: 0.0092284079935206 | Epoch: 43 | MeanAbsoluteError: 0.0889466628432274 | Loss: 0.0104182550536567 | Epoch: 44 | MeanAbsoluteError: 0.0466123819351196 | Loss: 0.0041841014570213 | Epoch: 45 | MeanAbsoluteError: 0.1251759380102158 | Loss: 0.0189066705735106 | Epoch: 46 | MeanAbsoluteError: 0.0441707447171211 | Loss: 0.0033637277757455 | Epoch: 47 | MeanAbsoluteError: 0.0481294207274914 | Loss: 0.0037117171481154 | Epoch: 48 | \n\n\nMeanAbsoluteError: 0.0463805235922337 | Loss: 0.0037776903482154 | Epoch: 49 | MeanAbsoluteError: 0.1094159409403801 | Loss: 0.0143276859859103 | Epoch: 50 | MeanAbsoluteError: 0.0437755808234215 | Loss: 0.0033916201332192 | Epoch: 51 | MeanAbsoluteError: 0.0420886985957623 | Loss: 0.0033417411981837 | Epoch: 52 | MeanAbsoluteError: 0.0663302689790726 | Loss: 0.0061594995326902 | Epoch: 53 | MeanAbsoluteError: 0.0935564935207367 | Loss: 0.0111547258780583 | Epoch: 54 | \n\n\nMeanAbsoluteError: 0.1056240573525429 | Loss: 0.0132143862153354 | Epoch: 55 | MeanAbsoluteError: 0.0467321686446667 | Loss: 0.0035520005775125 | Epoch: 56 | MeanAbsoluteError: 0.0464514419436455 | Loss: 0.0036388483805288 | Epoch: 57 | MeanAbsoluteError: 0.0444678105413914 | Loss: 0.0035916111052134 | Epoch: 58 | MeanAbsoluteError: 0.0423909649252892 | Loss: 0.0036235663941816 | Epoch: 59 | MeanAbsoluteError: 0.0456958375871181 | Loss: 0.0034156885721084 | Epoch: 60 | \n\n\nMeanAbsoluteError: 0.0419648997485638 | Loss: 0.0033961875290659 | Epoch: 61 | MeanAbsoluteError: 0.0814950838685036 | Loss: 0.0090624820931177 | Epoch: 62 | MeanAbsoluteError: 0.0379744768142700 | Loss: 0.0031438570555398 | Epoch: 63 | MeanAbsoluteError: 0.0512192770838737 | Loss: 0.0047978065528074 | Epoch: 64 | MeanAbsoluteError: 0.0365622229874134 | Loss: 0.0026761091890206 | Epoch: 65 | MeanAbsoluteError: 0.0822122022509575 | Loss: 0.0087449053351424 | Epoch: 66 | \n\n\nMeanAbsoluteError: 0.0358048081398010 | Loss: 0.0020942501723766 | Epoch: 67 | MeanAbsoluteError: 0.0472905598580837 | Loss: 0.0036121838860900 | Epoch: 68 | MeanAbsoluteError: 0.0404467023909092 | Loss: 0.0031013682815491 | Epoch: 69 | MeanAbsoluteError: 0.0761424750089645 | Loss: 0.0079381991864035 | Epoch: 70 | MeanAbsoluteError: 0.0635052025318146 | Loss: 0.0056275470108774 | Epoch: 71 | MeanAbsoluteError: 0.0873593911528587 | Loss: 0.0098655101549076 | Epoch: 72 | \n\n\nMeanAbsoluteError: 0.0528490282595158 | Loss: 0.0043591684416721 | Epoch: 73 | MeanAbsoluteError: 0.0475092418491840 | Loss: 0.0034328331178250 | Epoch: 74 | MeanAbsoluteError: 0.0421996675431728 | Loss: 0.0029436163971887 | Epoch: 75 | MeanAbsoluteError: 0.0508451126515865 | Loss: 0.0042869513180401 | Epoch: 76 | MeanAbsoluteError: 0.0698316991329193 | Loss: 0.0080046646640097 | Epoch: 77 | MeanAbsoluteError: 0.0633583515882492 | Loss: 0.0062113911967332 | Epoch: 78 | \n\n\nMeanAbsoluteError: 0.0367655195295811 | Loss: 0.0024710077865932 | Epoch: 79 | MeanAbsoluteError: 0.0352463312447071 | Loss: 0.0025052661995256 | Epoch: 80 | MeanAbsoluteError: 0.0402095206081867 | Loss: 0.0029730100527798 | Epoch: 81 | MeanAbsoluteError: 0.0682507902383804 | Loss: 0.0059525306875768 | Epoch: 82 | MeanAbsoluteError: 0.0637520104646683 | Loss: 0.0058518801448180 | Epoch: 83 | MeanAbsoluteError: 0.0347662940621376 | Loss: 0.0024452330850947 | Epoch: 84 | \n\n\nMeanAbsoluteError: 0.0442682057619095 | Loss: 0.0036167056716390 | Epoch: 85 | MeanAbsoluteError: 0.0566255897283554 | Loss: 0.0046928002204942 | Epoch: 86 | MeanAbsoluteError: 0.0391930006444454 | Loss: 0.0022738382624658 | Epoch: 87 | MeanAbsoluteError: 0.0575834326446056 | Loss: 0.0053594850346838 | Epoch: 88 | MeanAbsoluteError: 0.0324719175696373 | Loss: 0.0020072248375264 | Epoch: 89 | MeanAbsoluteError: 0.0678680315613747 | Loss: 0.0059136913010949 | Epoch: 90 | \n\n\nMeanAbsoluteError: 0.0513483658432961 | Loss: 0.0044952854269037 | Epoch: 91 | MeanAbsoluteError: 0.0860264077782631 | Loss: 0.0091906950416926 | Epoch: 92 | MeanAbsoluteError: 0.0476998686790466 | Loss: 0.0039243623859396 | Epoch: 93 | MeanAbsoluteError: 0.0330855809152126 | Loss: 0.0018128274149556 | Epoch: 94 | MeanAbsoluteError: 0.0415225289762020 | Loss: 0.0036544070952866 | Epoch: 95 | MeanAbsoluteError: 0.0606722310185432 | Loss: 0.0059158924942542 | Epoch: 96 | \n\n\nMeanAbsoluteError: 0.0428741872310638 | Loss: 0.0034495269279241 | Epoch: 97 | MeanAbsoluteError: 0.0499206185340881 | Loss: 0.0034599816549177 | Epoch: 98 | MeanAbsoluteError: 0.0514412671327591 | Loss: 0.0046133454276347 | Epoch: 99 | MeanAbsoluteError: 0.0350880436599255 | Loss: 0.0022591002175192 | Epoch: 100 | MeanAbsoluteError: 0.0610078573226929 | Loss: 0.0048582576288793 | Epoch: 101 | MeanAbsoluteError: 0.0416010208427906 | Loss: 0.0025462933178795 | Epoch: 102 | \n\n\nMeanAbsoluteError: 0.0419684201478958 | Loss: 0.0032739848339636 | Epoch: 103 | MeanAbsoluteError: 0.1057098805904388 | Loss: 0.0137534981201354 | Epoch: 104 | MeanAbsoluteError: 0.0445479117333889 | Loss: 0.0032335897527733 | Epoch: 105 | MeanAbsoluteError: 0.0564788803458214 | Loss: 0.0046333655788514 | Epoch: 106 | MeanAbsoluteError: 0.0770518332719803 | Loss: 0.0089575763987867 | Epoch: 107 | MeanAbsoluteError: 0.0480571985244751 | Loss: 0.0037892409355233 | Epoch: 108 | \n\n\nMeanAbsoluteError: 0.0389656983315945 | Loss: 0.0024939042755010 | Epoch: 109 | MeanAbsoluteError: 0.0325474366545677 | Loss: 0.0022453106633437 | Epoch: 110 | MeanAbsoluteError: 0.0303068645298481 | Loss: 0.0020240312809811 | Epoch: 111 | MeanAbsoluteError: 0.0345090217888355 | Loss: 0.0021130870384360 | Epoch: 112 | MeanAbsoluteError: 0.0649151355028152 | Loss: 0.0057745679330669 | Epoch: 113 | MeanAbsoluteError: 0.0308011379092932 | Loss: 0.0019766327888264 | Epoch: 114 | \n\n\nMeanAbsoluteError: 0.0424479246139526 | Loss: 0.0034096448094045 | Epoch: 115 | MeanAbsoluteError: 0.1083185672760010 | Loss: 0.0138444200550255 | Epoch: 116 | MeanAbsoluteError: 0.0519213303923607 | Loss: 0.0036953989734971 | Epoch: 117 | MeanAbsoluteError: 0.0319641232490540 | Loss: 0.0019922055561390 | Epoch: 118 | MeanAbsoluteError: 0.0472927801311016 | Loss: 0.0036114323761706 | Epoch: 119 | MeanAbsoluteError: 0.0632354989647865 | Loss: 0.0057123310275768 | Epoch: 120 | \n\n\nMeanAbsoluteError: 0.0544564165174961 | Loss: 0.0046442420540476 | Epoch: 121 | MeanAbsoluteError: 0.0479065962135792 | Loss: 0.0042961893823782 | Epoch: 122 | MeanAbsoluteError: 0.0427553355693817 | Loss: 0.0026994696144309 | Epoch: 123 | MeanAbsoluteError: 0.0413568541407585 | Loss: 0.0031074657362249 | Epoch: 124 | MeanAbsoluteError: 0.0393105112016201 | Loss: 0.0025557625524111 | Epoch: 125 | MeanAbsoluteError: 0.0311317760497332 | Loss: 0.0020169751859564 | Early stopping at epoch 124\nReturned to Spot: Validation loss: 0.0020169751859564137\n\n\nspotPython tuning: 0.0016865455361671354 [####------] 36.77% \n\n\n\nconfig: {'_L_in': 10, '_L_out': 1, 'l1': 32, 'dropout_prob': 0.1655924245415988, 'lr_mult': 4.186124343189683, 'batch_size': 8, 'epochs': 4096, 'k_folds': 1, 'patience': 32, 'optimizer': 'Adadelta', 'sgd_momentum': 0.07400725452261472}\nEpoch: 1 | MeanAbsoluteError: 0.1433156728744507 | Loss: 0.0317698864168242 | Epoch: 2 | MeanAbsoluteError: 0.1077210754156113 | Loss: 0.0199597315789249 | Epoch: 3 | MeanAbsoluteError: 0.1358648240566254 | Loss: 0.0286035667982345 | Epoch: 4 | \n\n\nMeanAbsoluteError: 0.0936248227953911 | Loss: 0.0137669800897129 | Epoch: 5 | MeanAbsoluteError: 0.2011478245258331 | Loss: 0.0528701998195366 | Epoch: 6 | MeanAbsoluteError: 0.1253282278776169 | Loss: 0.0233725803340540 | Epoch: 7 | MeanAbsoluteError: 0.1103350445628166 | Loss: 0.0185727979497690 | Epoch: 8 | \n\n\nMeanAbsoluteError: 0.1494184434413910 | Loss: 0.0303587605441479 | Epoch: 9 | MeanAbsoluteError: 0.1199197545647621 | Loss: 0.0211458043195307 | Epoch: 10 | MeanAbsoluteError: 0.0853046551346779 | Loss: 0.0112305307258411 | Epoch: 11 | \n\n\nMeanAbsoluteError: 0.0867602825164795 | Loss: 0.0117865284770041 | Epoch: 12 | MeanAbsoluteError: 0.1464235931634903 | Loss: 0.0270001979201640 | Epoch: 13 | MeanAbsoluteError: 0.0632371902465820 | Loss: 0.0068117594468947 | Epoch: 14 | MeanAbsoluteError: 0.0591665394604206 | Loss: 0.0059866935909285 | Epoch: 15 | \n\n\nMeanAbsoluteError: 0.1551410853862762 | Loss: 0.0285145454108715 | Epoch: 16 | MeanAbsoluteError: 0.0796796903014183 | Loss: 0.0092711056227257 | Epoch: 17 | MeanAbsoluteError: 0.1647668182849884 | Loss: 0.0318275019526482 | Epoch: 18 | MeanAbsoluteError: 0.1273580789566040 | Loss: 0.0192090110902331 | Epoch: 19 | \n\n\nMeanAbsoluteError: 0.1583123207092285 | Loss: 0.0287323988189823 | Epoch: 20 | MeanAbsoluteError: 0.0889066904783249 | Loss: 0.0101355453462977 | Epoch: 21 | MeanAbsoluteError: 0.0402554906904697 | Loss: 0.0028584898575087 | Epoch: 22 | MeanAbsoluteError: 0.0548315383493900 | Loss: 0.0054480082900754 | Epoch: 23 | \n\n\nMeanAbsoluteError: 0.1301368325948715 | Loss: 0.0200042311151169 | Epoch: 24 | MeanAbsoluteError: 0.0638134703040123 | Loss: 0.0060557747247482 | Epoch: 25 | MeanAbsoluteError: 0.0492803230881691 | Loss: 0.0045492584697633 | Epoch: 26 | MeanAbsoluteError: 0.0757982134819031 | Loss: 0.0084610304513358 | Epoch: 27 | \n\n\nMeanAbsoluteError: 0.0568373873829842 | Loss: 0.0058499354329941 | Epoch: 28 | MeanAbsoluteError: 0.0509321652352810 | Loss: 0.0039346609708829 | Epoch: 29 | MeanAbsoluteError: 0.0939457044005394 | Loss: 0.0114728698666257 | Epoch: 30 | MeanAbsoluteError: 0.0918205603957176 | Loss: 0.0108464024348282 | Epoch: 31 | \n\n\nMeanAbsoluteError: 0.0348728448152542 | Loss: 0.0023071200565410 | Epoch: 32 | MeanAbsoluteError: 0.0892713665962219 | Loss: 0.0098597169179763 | Epoch: 33 | MeanAbsoluteError: 0.0982627198100090 | Loss: 0.0121003363808421 | Epoch: 34 | MeanAbsoluteError: 0.0749465152621269 | Loss: 0.0081167979913421 | Epoch: 35 | \n\n\nMeanAbsoluteError: 0.0544821433722973 | Loss: 0.0048271324378316 | Epoch: 36 | MeanAbsoluteError: 0.0469895265996456 | Loss: 0.0043270995504970 | Epoch: 37 | MeanAbsoluteError: 0.0580547600984573 | Loss: 0.0049637836912696 | Epoch: 38 | MeanAbsoluteError: 0.0492579899728298 | Loss: 0.0042126491990578 | Epoch: 39 | \n\n\nMeanAbsoluteError: 0.0465013608336449 | Loss: 0.0040810151718018 | Epoch: 40 | MeanAbsoluteError: 0.0379331782460213 | Loss: 0.0027486923193608 | Epoch: 41 | MeanAbsoluteError: 0.0435043498873711 | Loss: 0.0032878087766125 | Epoch: 42 | \n\n\nMeanAbsoluteError: 0.0777021050453186 | Loss: 0.0078760499845406 | Epoch: 43 | MeanAbsoluteError: 0.0473294816911221 | Loss: 0.0036540160163943 | Epoch: 44 | MeanAbsoluteError: 0.0589992664754391 | Loss: 0.0051829171072888 | Epoch: 45 | \n\n\nMeanAbsoluteError: 0.0707777962088585 | Loss: 0.0074570441165155 | Epoch: 46 | MeanAbsoluteError: 0.0432029701769352 | Loss: 0.0034410358042040 | Epoch: 47 | MeanAbsoluteError: 0.0445966459810734 | Loss: 0.0035259091160505 | Epoch: 48 | MeanAbsoluteError: 0.1084797680377960 | Loss: 0.0140293672386753 | Epoch: 49 | \n\n\nMeanAbsoluteError: 0.0549661256372929 | Loss: 0.0041594281853912 | Epoch: 50 | MeanAbsoluteError: 0.0747778043150902 | Loss: 0.0074303244841040 | Epoch: 51 | MeanAbsoluteError: 0.0945710018277168 | Loss: 0.0105414620085963 | Epoch: 52 | \n\n\nMeanAbsoluteError: 0.0762613490223885 | Loss: 0.0078675688342436 | Epoch: 53 | MeanAbsoluteError: 0.0493956133723259 | Loss: 0.0043000129226130 | Epoch: 54 | MeanAbsoluteError: 0.0555500164628029 | Loss: 0.0043365547776614 | Epoch: 55 | MeanAbsoluteError: 0.0598309263586998 | Loss: 0.0052468307365320 | Epoch: 56 | \n\n\nMeanAbsoluteError: 0.0329393930733204 | Loss: 0.0020734917090618 | Epoch: 57 | MeanAbsoluteError: 0.0404770001769066 | Loss: 0.0031077778824654 | Epoch: 58 | MeanAbsoluteError: 0.0555892698466778 | Loss: 0.0045445883297361 | Epoch: 59 | \n\n\nMeanAbsoluteError: 0.0468966774642467 | Loss: 0.0033414713980164 | Epoch: 60 | MeanAbsoluteError: 0.0563718341290951 | Loss: 0.0051860077747781 | Epoch: 61 | MeanAbsoluteError: 0.0424660667777061 | Loss: 0.0030413540692902 | Epoch: 62 | MeanAbsoluteError: 0.1158791109919548 | Loss: 0.0152969174822302 | Epoch: 63 | \n\n\nMeanAbsoluteError: 0.0663797110319138 | Loss: 0.0058999160384318 | Epoch: 64 | MeanAbsoluteError: 0.0392418503761292 | Loss: 0.0024691784867747 | Epoch: 65 | MeanAbsoluteError: 0.0544494502246380 | Loss: 0.0041672889140165 | Epoch: 66 | MeanAbsoluteError: 0.0401127897202969 | Loss: 0.0033251352096589 | Epoch: 67 | \n\n\nMeanAbsoluteError: 0.0417618378996849 | Loss: 0.0032784872830809 | Epoch: 68 | MeanAbsoluteError: 0.0399833060801029 | Loss: 0.0024777196399794 | Epoch: 69 | MeanAbsoluteError: 0.0496730692684650 | Loss: 0.0044523973269143 | Epoch: 70 | MeanAbsoluteError: 0.0393033884465694 | Loss: 0.0031038368898934 | Epoch: 71 | \n\n\nMeanAbsoluteError: 0.0409729778766632 | Loss: 0.0026980710221994 | Epoch: 72 | MeanAbsoluteError: 0.0515343993902206 | Loss: 0.0040403044534430 | Epoch: 73 | MeanAbsoluteError: 0.0723844394087791 | Loss: 0.0065969499685851 | Epoch: 74 | \n\n\nMeanAbsoluteError: 0.0442191176116467 | Loss: 0.0039995709161495 | Epoch: 75 | MeanAbsoluteError: 0.0310031156986952 | Loss: 0.0023022315412833 | Epoch: 76 | MeanAbsoluteError: 0.0406266339123249 | Loss: 0.0028260915561604 | Epoch: 77 | MeanAbsoluteError: 0.0432776920497417 | Loss: 0.0032250563457829 | Epoch: 78 | \n\n\nMeanAbsoluteError: 0.0298453234136105 | Loss: 0.0018974501788187 | Epoch: 79 | MeanAbsoluteError: 0.0314425006508827 | Loss: 0.0020496374276454 | Epoch: 80 | MeanAbsoluteError: 0.0335666313767433 | Loss: 0.0023995053795117 | Epoch: 81 | MeanAbsoluteError: 0.0344706960022449 | Loss: 0.0021623216376419 | Epoch: 82 | \n\n\nMeanAbsoluteError: 0.0415444262325764 | Loss: 0.0030644259547300 | Epoch: 83 | MeanAbsoluteError: 0.0692752450704575 | Loss: 0.0062767654767652 | Epoch: 84 | MeanAbsoluteError: 0.0311493333429098 | Loss: 0.0017555375601851 | Epoch: 85 | \n\n\nMeanAbsoluteError: 0.0355323888361454 | Loss: 0.0021747921235051 | Epoch: 86 | MeanAbsoluteError: 0.0422970950603485 | Loss: 0.0033907214835237 | Epoch: 87 | MeanAbsoluteError: 0.0385040752589703 | Loss: 0.0028096964984127 | Epoch: 88 | MeanAbsoluteError: 0.0273792371153831 | Loss: 0.0015120058861181 | Epoch: 89 | \n\n\nMeanAbsoluteError: 0.0287412777543068 | Loss: 0.0015610137591131 | Epoch: 90 | MeanAbsoluteError: 0.0659797191619873 | Loss: 0.0054557203915656 | Epoch: 91 | MeanAbsoluteError: 0.0503903962671757 | Loss: 0.0039288383130425 | Epoch: 92 | MeanAbsoluteError: 0.0581425800919533 | Loss: 0.0043326037212912 | Epoch: 93 | \n\n\nMeanAbsoluteError: 0.0596519671380520 | Loss: 0.0047509503661116 | Epoch: 94 | MeanAbsoluteError: 0.0790813490748405 | Loss: 0.0079904495321802 | Epoch: 95 | MeanAbsoluteError: 0.0281944368034601 | Loss: 0.0019260513447654 | Epoch: 96 | MeanAbsoluteError: 0.0574879199266434 | Loss: 0.0044915959955879 | Epoch: 97 | \n\n\nMeanAbsoluteError: 0.0494038276374340 | Loss: 0.0036898090145673 | Epoch: 98 | MeanAbsoluteError: 0.0390399396419525 | Loss: 0.0024527001369279 | Epoch: 99 | MeanAbsoluteError: 0.0381138995289803 | Loss: 0.0027087510159043 | Epoch: 100 | \n\n\nMeanAbsoluteError: 0.0349858999252319 | Loss: 0.0026118503125250 | Epoch: 101 | MeanAbsoluteError: 0.0267128460109234 | Loss: 0.0014775866446526 | Epoch: 102 | MeanAbsoluteError: 0.0758635997772217 | Loss: 0.0069290173950752 | Epoch: 103 | \n\n\nMeanAbsoluteError: 0.0866968184709549 | Loss: 0.0090268361872356 | Epoch: 104 | MeanAbsoluteError: 0.0525853559374809 | Loss: 0.0038558984310121 | Epoch: 105 | MeanAbsoluteError: 0.0395242646336555 | Loss: 0.0024938020092362 | Epoch: 106 | MeanAbsoluteError: 0.0361433550715446 | Loss: 0.0020884014600980 | Epoch: 107 | \n\n\nMeanAbsoluteError: 0.0371121279895306 | Loss: 0.0023102222522108 | Epoch: 108 | MeanAbsoluteError: 0.0432554148137569 | Loss: 0.0027490350399411 | Epoch: 109 | MeanAbsoluteError: 0.0958300530910492 | Loss: 0.0103212850977127 | Epoch: 110 | \n\n\nMeanAbsoluteError: 0.0346485376358032 | Loss: 0.0019383802244097 | Epoch: 111 | MeanAbsoluteError: 0.0483232475817204 | Loss: 0.0031274103614698 | Epoch: 112 | MeanAbsoluteError: 0.0380366258323193 | Loss: 0.0022880063701642 | Epoch: 113 | MeanAbsoluteError: 0.0361789427697659 | Loss: 0.0022067215759307 | Epoch: 114 | \n\n\nMeanAbsoluteError: 0.0422288700938225 | Loss: 0.0028567414648071 | Epoch: 115 | MeanAbsoluteError: 0.0332167409360409 | Loss: 0.0021350907581540 | Epoch: 116 | MeanAbsoluteError: 0.0461190082132816 | Loss: 0.0036727716628536 | Epoch: 117 | \n\n\nMeanAbsoluteError: 0.0297139585018158 | Loss: 0.0017428383396595 | Epoch: 118 | MeanAbsoluteError: 0.0319145731627941 | Loss: 0.0018224509013204 | Epoch: 119 | MeanAbsoluteError: 0.0523652657866478 | Loss: 0.0035953894104367 | Epoch: 120 | MeanAbsoluteError: 0.0308775193989277 | Loss: 0.0019727989577069 | Epoch: 121 | \n\n\nMeanAbsoluteError: 0.0380588546395302 | Loss: 0.0025029510740607 | Epoch: 122 | MeanAbsoluteError: 0.0521793328225613 | Loss: 0.0038856518696871 | Epoch: 123 | MeanAbsoluteError: 0.0521558262407780 | Loss: 0.0047132230400549 | Epoch: 124 | MeanAbsoluteError: 0.0342336818575859 | Loss: 0.0017670369538552 | Epoch: 125 | \n\n\nMeanAbsoluteError: 0.0514237023890018 | Loss: 0.0038471080387305 | Epoch: 126 | MeanAbsoluteError: 0.0337896011769772 | Loss: 0.0024018972203760 | Epoch: 127 | MeanAbsoluteError: 0.0575005859136581 | Loss: 0.0043675560400037 | Epoch: 128 | MeanAbsoluteError: 0.0307668652385473 | Loss: 0.0017569017662409 | Epoch: 129 | \n\n\nMeanAbsoluteError: 0.0546893440186977 | Loss: 0.0044947090056284 | Epoch: 130 | MeanAbsoluteError: 0.0545606799423695 | Loss: 0.0038167422202318 | Epoch: 131 | MeanAbsoluteError: 0.0481868050992489 | Loss: 0.0038378140490845 | Epoch: 132 | MeanAbsoluteError: 0.0511673726141453 | Loss: 0.0035002874792553 | Epoch: 133 | \n\n\nMeanAbsoluteError: 0.0263822227716446 | Loss: 0.0014845179156462 | Early stopping at epoch 132\nReturned to Spot: Validation loss: 0.0014845179156461534\n\n\nspotPython tuning: 0.0014845179156461534 [#####-----] 54.24% \n\n\n\nconfig: {'_L_in': 10, '_L_out': 1, 'l1': 32, 'dropout_prob': 0.3840969125323748, 'lr_mult': 5.222659248964803, 'batch_size': 8, 'epochs': 512, 'k_folds': 1, 'patience': 64, 'optimizer': 'ASGD', 'sgd_momentum': 0.8945915552616069}\nEpoch: 1 | MeanAbsoluteError: 0.1484626531600952 | Loss: 0.0347542677956976 | Epoch: 2 | \n\n\nMeanAbsoluteError: 0.1376029700040817 | Loss: 0.0296495529872022 | Epoch: 3 | MeanAbsoluteError: 0.1371929943561554 | Loss: 0.0296445256711817 | Epoch: 4 | \n\n\nMeanAbsoluteError: 0.1359080821275711 | Loss: 0.0294256364485543 | Epoch: 5 | MeanAbsoluteError: 0.1360796540975571 | Loss: 0.0287509211461599 | Epoch: 6 | \n\n\nMeanAbsoluteError: 0.1318965852260590 | Loss: 0.0281507429470749 | Epoch: 7 | MeanAbsoluteError: 0.1323259621858597 | Loss: 0.0287798682570850 | Epoch: 8 | \n\n\nMeanAbsoluteError: 0.1320481449365616 | Loss: 0.0284630910150315 | Epoch: 9 | MeanAbsoluteError: 0.1261648088693619 | Loss: 0.0265650699638124 | Epoch: 10 | \n\n\nMeanAbsoluteError: 0.1331644356250763 | Loss: 0.0284663193344482 | Epoch: 11 | MeanAbsoluteError: 0.1310403645038605 | Loss: 0.0281333864580742 | Epoch: 12 | \n\n\nMeanAbsoluteError: 0.1328123658895493 | Loss: 0.0286446425107945 | Epoch: 13 | MeanAbsoluteError: 0.1256147027015686 | Loss: 0.0261497390579040 | Epoch: 14 | \n\n\nMeanAbsoluteError: 0.1266266107559204 | Loss: 0.0262581179482176 | Epoch: 15 | MeanAbsoluteError: 0.1287048906087875 | Loss: 0.0263573711272329 | Epoch: 16 | \n\n\nMeanAbsoluteError: 0.1278899908065796 | Loss: 0.0271047620151780 | Epoch: 17 | MeanAbsoluteError: 0.1279558241367340 | Loss: 0.0270365220249483 | Epoch: 18 | \n\n\nMeanAbsoluteError: 0.1264368742704391 | Loss: 0.0259645239719631 | Epoch: 19 | MeanAbsoluteError: 0.1265907734632492 | Loss: 0.0249606126453727 | Epoch: 20 | \n\n\nMeanAbsoluteError: 0.1276822090148926 | Loss: 0.0258632998018967 | Epoch: 21 | \n\n\nMeanAbsoluteError: 0.1213972866535187 | Loss: 0.0239642008673400 | Epoch: 22 | MeanAbsoluteError: 0.1253378093242645 | Loss: 0.0249380984123012 | Epoch: 23 | MeanAbsoluteError: 0.1249600872397423 | Loss: 0.0241136999163581 | Epoch: 24 | \n\n\nMeanAbsoluteError: 0.1243551746010780 | Loss: 0.0252211378323600 | Epoch: 25 | \n\n\nMeanAbsoluteError: 0.1208659112453461 | Loss: 0.0234011679054483 | Epoch: 26 | MeanAbsoluteError: 0.1205481588840485 | Loss: 0.0245629931726542 | Epoch: 27 | MeanAbsoluteError: 0.1259896308183670 | Loss: 0.0249244584456870 | Epoch: 28 | \n\n\nMeanAbsoluteError: 0.1214140951633453 | Loss: 0.0248758095243063 | Epoch: 29 | \n\n\nMeanAbsoluteError: 0.1196177527308464 | Loss: 0.0233122700469961 | Epoch: 30 | MeanAbsoluteError: 0.1156355887651443 | Loss: 0.0233179663038371 | Epoch: 31 | MeanAbsoluteError: 0.1196913495659828 | Loss: 0.0227068110589722 | Epoch: 32 | \n\n\nMeanAbsoluteError: 0.1186462789773941 | Loss: 0.0231075846884204 | Epoch: 33 | \n\n\nMeanAbsoluteError: 0.1126268878579140 | Loss: 0.0219727296896867 | Epoch: 34 | MeanAbsoluteError: 0.1162924692034721 | Loss: 0.0217907584983071 | Epoch: 35 | MeanAbsoluteError: 0.1209706589579582 | Loss: 0.0230527088952888 | Epoch: 36 | \n\n\nMeanAbsoluteError: 0.1136435940861702 | Loss: 0.0200268344304181 | Epoch: 37 | \n\n\nMeanAbsoluteError: 0.1120243966579437 | Loss: 0.0205758406143439 | Epoch: 38 | MeanAbsoluteError: 0.1070275977253914 | Loss: 0.0191006068336336 | Epoch: 39 | MeanAbsoluteError: 0.1170909404754639 | Loss: 0.0223734691114116 | Epoch: 40 | \n\n\nMeanAbsoluteError: 0.1075686365365982 | Loss: 0.0198765659925381 | Epoch: 41 | \n\n\nMeanAbsoluteError: 0.1087775900959969 | Loss: 0.0194169298598641 | Epoch: 42 | MeanAbsoluteError: 0.1103932932019234 | Loss: 0.0200265646654818 | Epoch: 43 | MeanAbsoluteError: 0.1097161620855331 | Loss: 0.0205630945213335 | Epoch: 44 | \n\n\nMeanAbsoluteError: 0.1068583279848099 | Loss: 0.0180320290076595 | Epoch: 45 | \n\n\nMeanAbsoluteError: 0.1084680706262589 | Loss: 0.0202545437005986 | Epoch: 46 | MeanAbsoluteError: 0.1014720201492310 | Loss: 0.0174357497966603 | Epoch: 47 | MeanAbsoluteError: 0.1036062017083168 | Loss: 0.0174685240429091 | Epoch: 48 | \n\n\nMeanAbsoluteError: 0.1052749082446098 | Loss: 0.0182511263196111 | Epoch: 49 | \n\n\nMeanAbsoluteError: 0.0966863408684731 | Loss: 0.0153703196709485 | Epoch: 50 | MeanAbsoluteError: 0.1040564924478531 | Loss: 0.0176442014849990 | Epoch: 51 | \n\n\nMeanAbsoluteError: 0.1022606566548347 | Loss: 0.0163276261331415 | Epoch: 52 | MeanAbsoluteError: 0.0925017371773720 | Loss: 0.0144119317226700 | \n\n\nEpoch: 53 | MeanAbsoluteError: 0.0945189893245697 | Loss: 0.0151630184845999 | Epoch: 54 | MeanAbsoluteError: 0.0995326265692711 | Loss: 0.0157204835038436 | Epoch: 55 | \n\n\nMeanAbsoluteError: 0.0916156619787216 | Loss: 0.0142426734152985 | Epoch: 56 | \n\n\nMeanAbsoluteError: 0.0947979390621185 | Loss: 0.0148047510546779 | Epoch: 57 | MeanAbsoluteError: 0.0959380790591240 | Loss: 0.0157815617215084 | Epoch: 58 | MeanAbsoluteError: 0.0888242945075035 | Loss: 0.0128873252481418 | Epoch: 59 | \n\n\nMeanAbsoluteError: 0.0933695808053017 | Loss: 0.0134336640874512 | Epoch: 60 | \n\n\nMeanAbsoluteError: 0.0951983034610748 | Loss: 0.0152086828051037 | Epoch: 61 | MeanAbsoluteError: 0.0917086973786354 | Loss: 0.0133841572893097 | Epoch: 62 | MeanAbsoluteError: 0.0886269956827164 | Loss: 0.0128626695092718 | Epoch: 63 | \n\n\nMeanAbsoluteError: 0.0851012244820595 | Loss: 0.0115872545314855 | Epoch: 64 | \n\n\nMeanAbsoluteError: 0.0891181305050850 | Loss: 0.0128270530472755 | Epoch: 65 | MeanAbsoluteError: 0.0981935113668442 | Loss: 0.0146168097608576 | Epoch: 66 | MeanAbsoluteError: 0.0902533009648323 | Loss: 0.0131731714538642 | Epoch: 67 | \n\n\nMeanAbsoluteError: 0.0854485109448433 | Loss: 0.0128296477180955 | Epoch: 68 | \n\n\nMeanAbsoluteError: 0.0853529199957848 | Loss: 0.0123007992362162 | Epoch: 69 | MeanAbsoluteError: 0.1071798056364059 | Loss: 0.0171611276577766 | Epoch: 70 | MeanAbsoluteError: 0.0876831561326981 | Loss: 0.0131920555385908 | Epoch: 71 | \n\n\nMeanAbsoluteError: 0.0797162726521492 | Loss: 0.0110203995259087 | Epoch: 72 | \n\n\nMeanAbsoluteError: 0.0888556614518166 | Loss: 0.0121744081108390 | Epoch: 73 | MeanAbsoluteError: 0.0780879184603691 | Loss: 0.0104574859142303 | Epoch: 74 | MeanAbsoluteError: 0.0820376724004745 | Loss: 0.0112578649668170 | Epoch: 75 | \n\n\nMeanAbsoluteError: 0.0897957459092140 | Loss: 0.0125297880425167 | Epoch: 76 | \n\n\nMeanAbsoluteError: 0.0820805728435516 | Loss: 0.0116065514188162 | Epoch: 77 | MeanAbsoluteError: 0.0809870436787605 | Loss: 0.0113346505217793 | Epoch: 78 | MeanAbsoluteError: 0.0813824236392975 | Loss: 0.0119170993382699 | Epoch: 79 | \n\n\nMeanAbsoluteError: 0.0813125446438789 | Loss: 0.0118148176943099 | Epoch: 80 | \n\n\nMeanAbsoluteError: 0.0822135210037231 | Loss: 0.0117135195116709 | Epoch: 81 | MeanAbsoluteError: 0.0792344138026237 | Loss: 0.0109744592582023 | Epoch: 82 | MeanAbsoluteError: 0.0936757251620293 | Loss: 0.0143759323308538 | \n\n\nEpoch: 83 | MeanAbsoluteError: 0.0696745887398720 | Loss: 0.0080971515639440 | Epoch: 84 | \n\n\nMeanAbsoluteError: 0.0764572620391846 | Loss: 0.0096807446680032 | Epoch: 85 | MeanAbsoluteError: 0.0806878060102463 | Loss: 0.0108598050612368 | Epoch: 86 | \n\n\nMeanAbsoluteError: 0.0718123167753220 | Loss: 0.0090759093352397 | Epoch: 87 | MeanAbsoluteError: 0.0773670151829720 | Loss: 0.0104017688212671 | Epoch: 88 | \n\n\nMeanAbsoluteError: 0.0735909268260002 | Loss: 0.0105060545641831 | Epoch: 89 | MeanAbsoluteError: 0.0903312563896179 | Loss: 0.0119840141269378 | Epoch: 90 | \n\n\nMeanAbsoluteError: 0.0753822103142738 | Loss: 0.0096769084553479 | Epoch: 91 | MeanAbsoluteError: 0.0756677687168121 | Loss: 0.0103687396959255 | Epoch: 92 | \n\n\nMeanAbsoluteError: 0.0734286531805992 | Loss: 0.0094129407294340 | Epoch: 93 | MeanAbsoluteError: 0.0823372304439545 | Loss: 0.0105715934064631 | Epoch: 94 | \n\n\nMeanAbsoluteError: 0.0782692506909370 | Loss: 0.0112351490411368 | Epoch: 95 | MeanAbsoluteError: 0.0735914334654808 | Loss: 0.0096990607930102 | Epoch: 96 | \n\n\nMeanAbsoluteError: 0.0776935964822769 | Loss: 0.0101845112175828 | Epoch: 97 | MeanAbsoluteError: 0.0913263037800789 | Loss: 0.0131962554112665 | Epoch: 98 | \n\n\nMeanAbsoluteError: 0.0721559301018715 | Loss: 0.0088397628646099 | Epoch: 99 | MeanAbsoluteError: 0.0676499456167221 | Loss: 0.0078814220063290 | Epoch: 100 | \n\n\nMeanAbsoluteError: 0.0749300047755241 | Loss: 0.0094689225876018 | Epoch: 101 | MeanAbsoluteError: 0.0727406665682793 | Loss: 0.0098496531932860 | Epoch: 102 | \n\n\nMeanAbsoluteError: 0.0701709911227226 | Loss: 0.0088093907474295 | Epoch: 103 | MeanAbsoluteError: 0.0841309428215027 | Loss: 0.0109406359444715 | Epoch: 104 | \n\n\nMeanAbsoluteError: 0.0707982033491135 | Loss: 0.0088555532336039 | Epoch: 105 | MeanAbsoluteError: 0.0761038959026337 | Loss: 0.0099360932455104 | Epoch: 106 | \n\n\nMeanAbsoluteError: 0.0733223631978035 | Loss: 0.0096679325766959 | Epoch: 107 | MeanAbsoluteError: 0.0728358998894691 | Loss: 0.0091220776697523 | Epoch: 108 | \n\n\nMeanAbsoluteError: 0.0678948163986206 | Loss: 0.0080376295066488 | Epoch: 109 | MeanAbsoluteError: 0.0998151823878288 | Loss: 0.0150744385196288 | Epoch: 110 | \n\n\nMeanAbsoluteError: 0.0639514625072479 | Loss: 0.0071893201185096 | Epoch: 111 | MeanAbsoluteError: 0.0645435824990273 | Loss: 0.0076520513669637 | Epoch: 112 | \n\n\nMeanAbsoluteError: 0.0664180219173431 | Loss: 0.0076895217552144 | Epoch: 113 | MeanAbsoluteError: 0.0685925632715225 | Loss: 0.0080108378437887 | Epoch: 114 | \n\n\nMeanAbsoluteError: 0.0694915726780891 | Loss: 0.0073349445470070 | Epoch: 115 | MeanAbsoluteError: 0.0610979795455933 | Loss: 0.0068046733687975 | Epoch: 116 | \n\n\nMeanAbsoluteError: 0.0612682551145554 | Loss: 0.0065525298383651 | Epoch: 117 | MeanAbsoluteError: 0.0760220363736153 | Loss: 0.0087528145798531 | Epoch: 118 | \n\n\nMeanAbsoluteError: 0.0758399739861488 | Loss: 0.0096607358121362 | Epoch: 119 | \n\n\nMeanAbsoluteError: 0.0641864612698555 | Loss: 0.0076051390895277 | Epoch: 120 | MeanAbsoluteError: 0.0692536160349846 | Loss: 0.0087750128433598 | Epoch: 121 | \n\n\nMeanAbsoluteError: 0.0631876885890961 | Loss: 0.0075474095494045 | Epoch: 122 | \n\n\nMeanAbsoluteError: 0.0593885853886604 | Loss: 0.0064107698792788 | Epoch: 123 | MeanAbsoluteError: 0.0699779912829399 | Loss: 0.0079353427220332 | Epoch: 124 | \n\n\nMeanAbsoluteError: 0.0632705017924309 | Loss: 0.0070930818573719 | Epoch: 125 | \n\n\nMeanAbsoluteError: 0.0687699541449547 | Loss: 0.0087150927253166 | Epoch: 126 | MeanAbsoluteError: 0.0644011870026588 | Loss: 0.0081850338610820 | Epoch: 127 | \n\n\nMeanAbsoluteError: 0.0613687336444855 | Loss: 0.0065821571502295 | Epoch: 128 | \n\n\nMeanAbsoluteError: 0.0675194710493088 | Loss: 0.0078604066082718 | Epoch: 129 | MeanAbsoluteError: 0.0647462010383606 | Loss: 0.0075825554729243 | Epoch: 130 | MeanAbsoluteError: 0.0604964047670364 | Loss: 0.0065711106320745 | Epoch: 131 | \n\n\nMeanAbsoluteError: 0.0606276839971542 | Loss: 0.0061835079104640 | Epoch: 132 | \n\n\nMeanAbsoluteError: 0.0649345144629478 | Loss: 0.0067558406980855 | Epoch: 133 | MeanAbsoluteError: 0.0700250715017319 | Loss: 0.0087997192014499 | Epoch: 134 | MeanAbsoluteError: 0.0658221319317818 | Loss: 0.0082103622017281 | Epoch: 135 | \n\n\nMeanAbsoluteError: 0.0623395331203938 | Loss: 0.0072638231642103 | Epoch: 136 | \n\n\nMeanAbsoluteError: 0.0692525729537010 | Loss: 0.0083139725305189 | Epoch: 137 | MeanAbsoluteError: 0.0615884028375149 | Loss: 0.0064281543692280 | Epoch: 138 | MeanAbsoluteError: 0.0639452263712883 | Loss: 0.0079015905227463 | Epoch: 139 | \n\n\nMeanAbsoluteError: 0.0638834983110428 | Loss: 0.0071687649898721 | Epoch: 140 | \n\n\nMeanAbsoluteError: 0.0683363378047943 | Loss: 0.0084703465016853 | Epoch: 141 | MeanAbsoluteError: 0.0623353198170662 | Loss: 0.0065750344702361 | Epoch: 142 | MeanAbsoluteError: 0.0615076385438442 | Loss: 0.0065451042763399 | \n\n\nEpoch: 143 | \n\n\nMeanAbsoluteError: 0.0600095167756081 | Loss: 0.0065730983777413 | Epoch: 144 | MeanAbsoluteError: 0.0652786418795586 | Loss: 0.0077757252821405 | Epoch: 145 | MeanAbsoluteError: 0.0589739307761192 | Loss: 0.0061458142161810 | Epoch: 146 | \n\n\nMeanAbsoluteError: 0.0575554482638836 | Loss: 0.0060203835616305 | Epoch: 147 | \n\n\nMeanAbsoluteError: 0.0681682005524635 | Loss: 0.0087332997017687 | Epoch: 148 | MeanAbsoluteError: 0.0622477009892464 | Loss: 0.0069021634806536 | Epoch: 149 | MeanAbsoluteError: 0.0607391856610775 | Loss: 0.0066279198263625 | Epoch: 150 | \n\n\nMeanAbsoluteError: 0.0619794391095638 | Loss: 0.0073528092578176 | Epoch: 151 | \n\n\nMeanAbsoluteError: 0.0532309301197529 | Loss: 0.0048935368448790 | Epoch: 152 | MeanAbsoluteError: 0.0597691610455513 | Loss: 0.0068328659422389 | Epoch: 153 | MeanAbsoluteError: 0.0574103668332100 | Loss: 0.0061347114602349 | Epoch: 154 | \n\n\nMeanAbsoluteError: 0.0578564777970314 | Loss: 0.0069699554189451 | Epoch: 155 | \n\n\nMeanAbsoluteError: 0.0561916343867779 | Loss: 0.0058546636075909 | Epoch: 156 | MeanAbsoluteError: 0.0720038339495659 | Loss: 0.0086964950100274 | Epoch: 157 | MeanAbsoluteError: 0.0548319183290005 | Loss: 0.0055787420079516 | Epoch: 158 | \n\n\nMeanAbsoluteError: 0.0610565952956676 | Loss: 0.0064982056133694 | Epoch: 159 | \n\n\nMeanAbsoluteError: 0.0637579485774040 | Loss: 0.0070806923690007 | Epoch: 160 | MeanAbsoluteError: 0.0696950033307076 | Loss: 0.0083177802704373 | Epoch: 161 | MeanAbsoluteError: 0.0531266741454601 | Loss: 0.0051785726192113 | Epoch: 162 | \n\n\nMeanAbsoluteError: 0.0628887116909027 | Loss: 0.0075323162569762 | Epoch: 163 | \n\n\nMeanAbsoluteError: 0.0630517601966858 | Loss: 0.0068249780084252 | Epoch: 164 | MeanAbsoluteError: 0.0617038905620575 | Loss: 0.0069494730805194 | Epoch: 165 | MeanAbsoluteError: 0.0612441636621952 | Loss: 0.0070910700198606 | Epoch: 166 | \n\n\nMeanAbsoluteError: 0.0585346594452858 | Loss: 0.0058759608502059 | Epoch: 167 | \n\n\nMeanAbsoluteError: 0.0592509731650352 | Loss: 0.0069091836247887 | Epoch: 168 | MeanAbsoluteError: 0.0634653046727180 | Loss: 0.0072934784448559 | Epoch: 169 | MeanAbsoluteError: 0.0594917610287666 | Loss: 0.0067763689562286 | Epoch: 170 | \n\n\nMeanAbsoluteError: 0.0579071678221226 | Loss: 0.0066468201372405 | Epoch: 171 | \n\n\nMeanAbsoluteError: 0.0689772665500641 | Loss: 0.0085507652991892 | Epoch: 172 | MeanAbsoluteError: 0.0743187740445137 | Loss: 0.0091092717178215 | Epoch: 173 | \n\n\nMeanAbsoluteError: 0.0593688599765301 | Loss: 0.0068718268670828 | Epoch: 174 | MeanAbsoluteError: 0.0573926866054535 | Loss: 0.0059074133406332 | Epoch: 175 | \n\n\nMeanAbsoluteError: 0.0588221028447151 | Loss: 0.0060330975040989 | Epoch: 176 | MeanAbsoluteError: 0.0579331219196320 | Loss: 0.0069481165096237 | \n\n\nEpoch: 177 | MeanAbsoluteError: 0.0524351485073566 | Loss: 0.0054050463950261 | Epoch: 178 | MeanAbsoluteError: 0.0591617822647095 | Loss: 0.0056288513036347 | Epoch: 179 | \n\n\nMeanAbsoluteError: 0.0524825863540173 | Loss: 0.0049967125110255 | Epoch: 180 | \n\n\nMeanAbsoluteError: 0.0724572986364365 | Loss: 0.0088172616424823 | Epoch: 181 | MeanAbsoluteError: 0.0654797554016113 | Loss: 0.0071294626985419 | Epoch: 182 | MeanAbsoluteError: 0.0518214553594589 | Loss: 0.0047711538285703 | Epoch: 183 | \n\n\nMeanAbsoluteError: 0.0559534393250942 | Loss: 0.0060798674316366 | Epoch: 184 | \n\n\nMeanAbsoluteError: 0.0511371530592442 | Loss: 0.0049053175822145 | Epoch: 185 | MeanAbsoluteError: 0.0518407262861729 | Loss: 0.0050929289090594 | Epoch: 186 | MeanAbsoluteError: 0.0560934767127037 | Loss: 0.0056336540790079 | Epoch: 187 | \n\n\nMeanAbsoluteError: 0.0635787472128868 | Loss: 0.0065772981431923 | Epoch: 188 | \n\n\nMeanAbsoluteError: 0.0650602206587791 | Loss: 0.0074197149369866 | Epoch: 189 | MeanAbsoluteError: 0.0578531958162785 | Loss: 0.0059215082376460 | Epoch: 190 | \n\n\nMeanAbsoluteError: 0.0494736246764660 | Loss: 0.0042421762543534 | Epoch: 191 | MeanAbsoluteError: 0.0724660307168961 | Loss: 0.0087837962200865 | Epoch: 192 | \n\n\nMeanAbsoluteError: 0.0550707168877125 | Loss: 0.0059105275891182 | Epoch: 193 | MeanAbsoluteError: 0.0595854520797729 | Loss: 0.0058037282127005 | Epoch: 194 | \n\n\nMeanAbsoluteError: 0.0583632215857506 | Loss: 0.0055343655066712 | Epoch: 195 | MeanAbsoluteError: 0.0724096521735191 | Loss: 0.0080128156175641 | Epoch: 196 | \n\n\nMeanAbsoluteError: 0.0519710183143616 | Loss: 0.0052383702668043 | Epoch: 197 | MeanAbsoluteError: 0.0583337135612965 | Loss: 0.0068106379415105 | Epoch: 198 | \n\n\nMeanAbsoluteError: 0.0547879673540592 | Loss: 0.0060135620633924 | Epoch: 199 | MeanAbsoluteError: 0.0529088973999023 | Loss: 0.0049747918919342 | Epoch: 200 | \n\n\nMeanAbsoluteError: 0.0632351413369179 | Loss: 0.0070556181507479 | Epoch: 201 | MeanAbsoluteError: 0.0568281859159470 | Loss: 0.0059673591228937 | Epoch: 202 | \n\n\nMeanAbsoluteError: 0.0524623803794384 | Loss: 0.0047075584098868 | Epoch: 203 | MeanAbsoluteError: 0.0590325854718685 | Loss: 0.0060032739374468 | \n\n\nEpoch: 204 | MeanAbsoluteError: 0.0592683143913746 | Loss: 0.0067987406846920 | Epoch: 205 | \n\n\nMeanAbsoluteError: 0.0506991632282734 | Loss: 0.0046032256933885 | Epoch: 206 | \n\n\nMeanAbsoluteError: 0.0576860681176186 | Loss: 0.0067315095925312 | Epoch: 207 | MeanAbsoluteError: 0.0530574135482311 | Loss: 0.0055777254203445 | Epoch: 208 | MeanAbsoluteError: 0.0489558130502701 | Loss: 0.0052356466323162 | Epoch: 209 | \n\n\nMeanAbsoluteError: 0.0556717105209827 | Loss: 0.0053919128258713 | Epoch: 210 | \n\n\nMeanAbsoluteError: 0.0547465123236179 | Loss: 0.0058934181885745 | Epoch: 211 | MeanAbsoluteError: 0.0548751465976238 | Loss: 0.0064806067384779 | Epoch: 212 | MeanAbsoluteError: 0.0552970394492149 | Loss: 0.0060856258466007 | Epoch: 213 | \n\n\nMeanAbsoluteError: 0.0578633546829224 | Loss: 0.0059569063075622 | Epoch: 214 | \n\n\nMeanAbsoluteError: 0.0551117844879627 | Loss: 0.0051995676813500 | Epoch: 215 | MeanAbsoluteError: 0.0571993589401245 | Loss: 0.0062214425890584 | Epoch: 216 | MeanAbsoluteError: 0.0556403659284115 | Loss: 0.0055973850447979 | Epoch: 217 | \n\n\nMeanAbsoluteError: 0.0499943383038044 | Loss: 0.0048046032438594 | Epoch: 218 | \n\n\nMeanAbsoluteError: 0.0572885498404503 | Loss: 0.0066044491587060 | Epoch: 219 | MeanAbsoluteError: 0.0643353238701820 | Loss: 0.0070885298743011 | Epoch: 220 | MeanAbsoluteError: 0.0500331409275532 | Loss: 0.0050221494978024 | Epoch: 221 | \n\n\nMeanAbsoluteError: 0.0514225251972675 | Loss: 0.0053879888421905 | Epoch: 222 | \n\n\nMeanAbsoluteError: 0.0574217289686203 | Loss: 0.0059297246993274 | Epoch: 223 | MeanAbsoluteError: 0.0512963533401489 | Loss: 0.0058342185925300 | Epoch: 224 | MeanAbsoluteError: 0.0549992173910141 | Loss: 0.0062409570060768 | Epoch: 225 | \n\n\nMeanAbsoluteError: 0.0604144744575024 | Loss: 0.0077674115707755 | Epoch: 226 | \n\n\nMeanAbsoluteError: 0.0616002082824707 | Loss: 0.0067100787755886 | Epoch: 227 | MeanAbsoluteError: 0.0538181066513062 | Loss: 0.0057959017515379 | Epoch: 228 | MeanAbsoluteError: 0.0522722937166691 | Loss: 0.0047962576599706 | Epoch: 229 | \n\n\nMeanAbsoluteError: 0.0535470396280289 | Loss: 0.0057346303028202 | Epoch: 230 | \n\n\nMeanAbsoluteError: 0.0679422765970230 | Loss: 0.0073958520569201 | Epoch: 231 | MeanAbsoluteError: 0.0511571504175663 | Loss: 0.0050448284907217 | Epoch: 232 | MeanAbsoluteError: 0.0478421598672867 | Loss: 0.0043366839343339 | Epoch: 233 | \n\n\nMeanAbsoluteError: 0.0483090095221996 | Loss: 0.0039749212936792 | Epoch: 234 | \n\n\nMeanAbsoluteError: 0.0495321415364742 | Loss: 0.0045163590586622 | Epoch: 235 | MeanAbsoluteError: 0.0508005209267139 | Loss: 0.0048518195674804 | Epoch: 236 | MeanAbsoluteError: 0.0506273731589317 | Loss: 0.0048551004989636 | Epoch: 237 | \n\n\nMeanAbsoluteError: 0.0615115240216255 | Loss: 0.0067278578820773 | Epoch: 238 | \n\n\nMeanAbsoluteError: 0.0518819950520992 | Loss: 0.0051837380068671 | Epoch: 239 | MeanAbsoluteError: 0.0550008825957775 | Loss: 0.0060088495635060 | Epoch: 240 | MeanAbsoluteError: 0.0495546758174896 | Loss: 0.0050656861643993 | Epoch: 241 | \n\n\nMeanAbsoluteError: 0.0499860458076000 | Loss: 0.0059339176177194 | Epoch: 242 | \n\n\nMeanAbsoluteError: 0.0561373531818390 | Loss: 0.0059761182791063 | Epoch: 243 | MeanAbsoluteError: 0.0534929521381855 | Loss: 0.0055593407826229 | Epoch: 244 | MeanAbsoluteError: 0.0624603889882565 | Loss: 0.0064177193470593 | Epoch: 245 | \n\n\nMeanAbsoluteError: 0.0504726357758045 | Loss: 0.0044595295116060 | Epoch: 246 | \n\n\nMeanAbsoluteError: 0.0540331527590752 | Loss: 0.0052537596784532 | Epoch: 247 | MeanAbsoluteError: 0.0492245890200138 | Loss: 0.0047357137556997 | Epoch: 248 | MeanAbsoluteError: 0.0509700886905193 | Loss: 0.0057799126156361 | Epoch: 249 | \n\n\nMeanAbsoluteError: 0.0499537512660027 | Loss: 0.0047341525481132 | Epoch: 250 | \n\n\nMeanAbsoluteError: 0.0473000556230545 | Loss: 0.0047825003857724 | Epoch: 251 | MeanAbsoluteError: 0.0493862368166447 | Loss: 0.0042680533370003 | Epoch: 252 | MeanAbsoluteError: 0.0557649023830891 | Loss: 0.0055984221919636 | Epoch: 253 | \n\n\nMeanAbsoluteError: 0.0485947132110596 | Loss: 0.0045380078625289 | Epoch: 254 | \n\n\nMeanAbsoluteError: 0.0472091883420944 | Loss: 0.0044437498620123 | Epoch: 255 | MeanAbsoluteError: 0.0439030602574348 | Loss: 0.0033929256023839 | Epoch: 256 | \n\n\nMeanAbsoluteError: 0.0511254072189331 | Loss: 0.0045950685499089 | Epoch: 257 | \n\n\nMeanAbsoluteError: 0.0512596219778061 | Loss: 0.0048584968631315 | Epoch: 258 | MeanAbsoluteError: 0.0530676916241646 | Loss: 0.0054226482683780 | Epoch: 259 | MeanAbsoluteError: 0.0466409064829350 | Loss: 0.0046651180370980 | Epoch: 260 | \n\n\nMeanAbsoluteError: 0.0559468008577824 | Loss: 0.0052178795725156 | Epoch: 261 | \n\n\nMeanAbsoluteError: 0.0556795001029968 | Loss: 0.0050892579602078 | Epoch: 262 | MeanAbsoluteError: 0.0540579855442047 | Loss: 0.0055207787449227 | Epoch: 263 | MeanAbsoluteError: 0.0483750700950623 | Loss: 0.0043740026885644 | Epoch: 264 | \n\n\nMeanAbsoluteError: 0.0546494945883751 | Loss: 0.0054079308205186 | Epoch: 265 | \n\n\nMeanAbsoluteError: 0.0483251325786114 | Loss: 0.0048091413290853 | Epoch: 266 | MeanAbsoluteError: 0.0539024993777275 | Loss: 0.0051196760553131 | Epoch: 267 | MeanAbsoluteError: 0.0479310862720013 | Loss: 0.0043954355044805 | Epoch: 268 | \n\n\nMeanAbsoluteError: 0.0540158599615097 | Loss: 0.0056552773029053 | Epoch: 269 | \n\n\nMeanAbsoluteError: 0.0489614866673946 | Loss: 0.0048781714255088 | Epoch: 270 | MeanAbsoluteError: 0.0471969135105610 | Loss: 0.0043652107982014 | Epoch: 271 | MeanAbsoluteError: 0.0520505569875240 | Loss: 0.0047598729908809 | Epoch: 272 | \n\n\nMeanAbsoluteError: 0.0458981022238731 | Loss: 0.0044028544430866 | Epoch: 273 | \n\n\nMeanAbsoluteError: 0.0503049008548260 | Loss: 0.0053065429245563 | Epoch: 274 | MeanAbsoluteError: 0.0485126972198486 | Loss: 0.0047815723090408 | Epoch: 275 | MeanAbsoluteError: 0.0448011681437492 | Loss: 0.0033408306373626 | Epoch: 276 | \n\n\nMeanAbsoluteError: 0.0464547649025917 | Loss: 0.0045896124333682 | Epoch: 277 | \n\n\nMeanAbsoluteError: 0.0492053516209126 | Loss: 0.0045981393027193 | Epoch: 278 | MeanAbsoluteError: 0.0486301183700562 | Loss: 0.0047406154412065 | Epoch: 279 | MeanAbsoluteError: 0.0541929677128792 | Loss: 0.0054536147952987 | Epoch: 280 | \n\n\nMeanAbsoluteError: 0.0498691461980343 | Loss: 0.0047164251430475 | Epoch: 281 | \n\n\nMeanAbsoluteError: 0.0503102168440819 | Loss: 0.0045307943395241 | Epoch: 282 | MeanAbsoluteError: 0.0503310821950436 | Loss: 0.0052635660042717 | Epoch: 283 | \n\n\nMeanAbsoluteError: 0.0496870093047619 | Loss: 0.0046522493020778 | Epoch: 284 | MeanAbsoluteError: 0.0492931529879570 | Loss: 0.0048070204410530 | \n\n\nEpoch: 285 | MeanAbsoluteError: 0.0614605024456978 | Loss: 0.0061016572075651 | Epoch: 286 | MeanAbsoluteError: 0.0493427217006683 | Loss: 0.0040915920215316 | Epoch: 287 | \n\n\nMeanAbsoluteError: 0.0451818257570267 | Loss: 0.0040305955182320 | Epoch: 288 | \n\n\nMeanAbsoluteError: 0.0492741465568542 | Loss: 0.0048880002654378 | Epoch: 289 | MeanAbsoluteError: 0.0507424548268318 | Loss: 0.0052648375950460 | Epoch: 290 | MeanAbsoluteError: 0.0515524111688137 | Loss: 0.0050615872023627 | Epoch: 291 | \n\n\nMeanAbsoluteError: 0.0518330000340939 | Loss: 0.0050014178260953 | Epoch: 292 | \n\n\nMeanAbsoluteError: 0.0476048551499844 | Loss: 0.0041292278941623 | Epoch: 293 | MeanAbsoluteError: 0.0523502565920353 | Loss: 0.0047984903381133 | Epoch: 294 | MeanAbsoluteError: 0.0501916520297527 | Loss: 0.0048103639473036 | Epoch: 295 | \n\n\nMeanAbsoluteError: 0.0462520867586136 | Loss: 0.0043836722294432 | Epoch: 296 | \n\n\nMeanAbsoluteError: 0.0458452068269253 | Loss: 0.0040243154201706 | Epoch: 297 | MeanAbsoluteError: 0.0487683154642582 | Loss: 0.0045953804954862 | Epoch: 298 | MeanAbsoluteError: 0.0435664989054203 | Loss: 0.0031693628636851 | Epoch: 299 | \n\n\nMeanAbsoluteError: 0.0473316907882690 | Loss: 0.0041108429722954 | Epoch: 300 | \n\n\nMeanAbsoluteError: 0.0472872965037823 | Loss: 0.0039366024782219 | Epoch: 301 | MeanAbsoluteError: 0.0447707884013653 | Loss: 0.0038182047520470 | Epoch: 302 | MeanAbsoluteError: 0.0497904904186726 | Loss: 0.0045722577947584 | Epoch: 303 | \n\n\nMeanAbsoluteError: 0.0457661263644695 | Loss: 0.0040411592038397 | Epoch: 304 | \n\n\nMeanAbsoluteError: 0.0470734611153603 | Loss: 0.0042264651703207 | Epoch: 305 | MeanAbsoluteError: 0.0439123995602131 | Loss: 0.0038358958370640 | Epoch: 306 | MeanAbsoluteError: 0.0470329262316227 | Loss: 0.0050604320904791 | \n\n\nEpoch: 307 | \n\n\nMeanAbsoluteError: 0.0469612441956997 | Loss: 0.0038333327147963 | Epoch: 308 | MeanAbsoluteError: 0.0479018203914165 | Loss: 0.0048072240391967 | Epoch: 309 | \n\n\nMeanAbsoluteError: 0.0432702787220478 | Loss: 0.0038489941829252 | Epoch: 310 | \n\n\nMeanAbsoluteError: 0.0447205603122711 | Loss: 0.0042268326306887 | Epoch: 311 | MeanAbsoluteError: 0.0464688763022423 | Loss: 0.0043599558779725 | Epoch: 312 | \n\n\nMeanAbsoluteError: 0.0459820255637169 | Loss: 0.0037818311048843 | Epoch: 313 | \n\n\nMeanAbsoluteError: 0.0475686341524124 | Loss: 0.0041141334567280 | Epoch: 314 | MeanAbsoluteError: 0.0461256243288517 | Loss: 0.0039698160284101 | Epoch: 315 | MeanAbsoluteError: 0.0540930032730103 | Loss: 0.0050925297546200 | Epoch: 316 | \n\n\nMeanAbsoluteError: 0.0538097955286503 | Loss: 0.0051410642918199 | Epoch: 317 | \n\n\nMeanAbsoluteError: 0.0484753772616386 | Loss: 0.0046070948194124 | Epoch: 318 | MeanAbsoluteError: 0.0443462319672108 | Loss: 0.0040630505567319 | Epoch: 319 | \n\n\nMeanAbsoluteError: 0.0487367324531078 | Loss: 0.0044706096492806 | Epoch: 320 | \n\n\nMeanAbsoluteError: 0.0460803173482418 | Loss: 0.0043025450477695 | Epoch: 321 | MeanAbsoluteError: 0.0486814230680466 | Loss: 0.0041445448219556 | Epoch: 322 | MeanAbsoluteError: 0.0511639229953289 | Loss: 0.0054869270074720 | Epoch: 323 | \n\n\nMeanAbsoluteError: 0.0506905317306519 | Loss: 0.0045728312474430 | Epoch: 324 | MeanAbsoluteError: 0.0468969196081161 | Loss: 0.0047997396583301 | Epoch: 325 | MeanAbsoluteError: 0.0474677644670010 | Loss: 0.0039598473568300 | Epoch: 326 | MeanAbsoluteError: 0.0469854697585106 | Loss: 0.0041551016612701 | Epoch: 327 | \n\n\nMeanAbsoluteError: 0.0487009063363075 | Loss: 0.0045138641266691 | Epoch: 328 | MeanAbsoluteError: 0.0457778498530388 | Loss: 0.0042384732284853 | Epoch: 329 | MeanAbsoluteError: 0.0477174147963524 | Loss: 0.0047562958421431 | Epoch: 330 | MeanAbsoluteError: 0.0486002862453461 | Loss: 0.0045494551764262 | Epoch: 331 | \n\n\nMeanAbsoluteError: 0.0427714996039867 | Loss: 0.0037145379710158 | Epoch: 332 | MeanAbsoluteError: 0.0527529083192348 | Loss: 0.0047984617321115 | Epoch: 333 | MeanAbsoluteError: 0.0479133911430836 | Loss: 0.0046101288209780 | Epoch: 334 | MeanAbsoluteError: 0.0541633367538452 | Loss: 0.0063094982025704 | Epoch: 335 | \n\n\nMeanAbsoluteError: 0.0694153755903244 | Loss: 0.0074997540060921 | Epoch: 336 | MeanAbsoluteError: 0.0425396077334881 | Loss: 0.0037189976673720 | Epoch: 337 | MeanAbsoluteError: 0.0435471124947071 | Loss: 0.0038632170663301 | Epoch: 338 | MeanAbsoluteError: 0.0472558438777924 | Loss: 0.0040682157153864 | Epoch: 339 | \n\n\nMeanAbsoluteError: 0.0509439855813980 | Loss: 0.0047217654983366 | Epoch: 340 | MeanAbsoluteError: 0.0456587076187134 | Loss: 0.0038851029561269 | Epoch: 341 | MeanAbsoluteError: 0.0456298328936100 | Loss: 0.0037321368581615 | Epoch: 342 | MeanAbsoluteError: 0.0447536259889603 | Loss: 0.0036915059042114 | Epoch: 343 | \n\n\nMeanAbsoluteError: 0.0503547452390194 | Loss: 0.0051857893704437 | Epoch: 344 | MeanAbsoluteError: 0.0472966581583023 | Loss: 0.0045352896666277 | Epoch: 345 | MeanAbsoluteError: 0.0444068722426891 | Loss: 0.0042510596686043 | Epoch: 346 | MeanAbsoluteError: 0.0594302378594875 | Loss: 0.0060798001573666 | Epoch: 347 | \n\n\nMeanAbsoluteError: 0.0442530103027821 | Loss: 0.0036052324997543 | Epoch: 348 | MeanAbsoluteError: 0.0552905388176441 | Loss: 0.0057069955203731 | Epoch: 349 | MeanAbsoluteError: 0.0448282659053802 | Loss: 0.0040668896912585 | Epoch: 350 | MeanAbsoluteError: 0.0456380136311054 | Loss: 0.0044634249536198 | Epoch: 351 | \n\n\nMeanAbsoluteError: 0.0456311851739883 | Loss: 0.0041069215880462 | Epoch: 352 | MeanAbsoluteError: 0.0410260260105133 | Loss: 0.0032362864294555 | Epoch: 353 | MeanAbsoluteError: 0.0469582229852676 | Loss: 0.0047763392140041 | Epoch: 354 | MeanAbsoluteError: 0.0453887432813644 | Loss: 0.0037095605466196 | Epoch: 355 | \n\n\nMeanAbsoluteError: 0.0429217405617237 | Loss: 0.0035599842253999 | Epoch: 356 | MeanAbsoluteError: 0.0417798534035683 | Loss: 0.0035519720848625 | Epoch: 357 | MeanAbsoluteError: 0.0488666817545891 | Loss: 0.0050569893102970 | Epoch: 358 | \n\n\nMeanAbsoluteError: 0.0443731583654881 | Loss: 0.0036934177685333 | Epoch: 359 | MeanAbsoluteError: 0.0455661676824093 | Loss: 0.0039853778235786 | Epoch: 360 | MeanAbsoluteError: 0.0454290173947811 | Loss: 0.0049067590367294 | Epoch: 361 | MeanAbsoluteError: 0.0428311899304390 | Loss: 0.0039591678972724 | Epoch: 362 | \n\n\nMeanAbsoluteError: 0.0459176413714886 | Loss: 0.0041223880222165 | Early stopping at epoch 361\nReturned to Spot: Validation loss: 0.0041223880222165275\n\n\nspotPython tuning: 0.0014845179156461534 [#########-] 94.72% \n\n\n\nconfig: {'_L_in': 10, '_L_out': 1, 'l1': 32, 'dropout_prob': 0.38417736466355884, 'lr_mult': 3.169391450838062, 'batch_size': 8, 'epochs': 64, 'k_folds': 1, 'patience': 32, 'optimizer': 'ASGD', 'sgd_momentum': 0.8945927266330584}\nEpoch: 1 | MeanAbsoluteError: 0.1585001647472382 | Loss: 0.0405805645216452 | Epoch: 2 | MeanAbsoluteError: 0.1578270047903061 | Loss: 0.0382436540124840 | Epoch: 3 | MeanAbsoluteError: 0.1428824365139008 | Loss: 0.0321536707495780 | Epoch: 4 | \n\n\nMeanAbsoluteError: 0.1407608687877655 | Loss: 0.0319244542624801 | Epoch: 5 | MeanAbsoluteError: 0.1416269093751907 | Loss: 0.0305134468515845 | Epoch: 6 | MeanAbsoluteError: 0.1395539045333862 | Loss: 0.0301287271523554 | Epoch: 7 | MeanAbsoluteError: 0.1364879757165909 | Loss: 0.0292286382939078 | Epoch: 8 | \n\n\nMeanAbsoluteError: 0.1369781494140625 | Loss: 0.0301595286858317 | Epoch: 9 | MeanAbsoluteError: 0.1392475366592407 | Loss: 0.0299852371313854 | Epoch: 10 | MeanAbsoluteError: 0.1365408897399902 | Loss: 0.0297113419878051 | Epoch: 11 | MeanAbsoluteError: 0.1345017105340958 | Loss: 0.0284792987115093 | Epoch: 12 | \n\n\nMeanAbsoluteError: 0.1372570246458054 | Loss: 0.0294479299336672 | Epoch: 13 | MeanAbsoluteError: 0.1331439763307571 | Loss: 0.0289367710877406 | Epoch: 14 | MeanAbsoluteError: 0.1386047303676605 | Loss: 0.0300451049360594 | Epoch: 15 | MeanAbsoluteError: 0.1357330530881882 | Loss: 0.0290226741130219 | Epoch: 16 | \n\n\nMeanAbsoluteError: 0.1320520639419556 | Loss: 0.0267325505295670 | Epoch: 17 | MeanAbsoluteError: 0.1345394998788834 | Loss: 0.0290141117906100 | Epoch: 18 | MeanAbsoluteError: 0.1356309056282043 | Loss: 0.0282241909176503 | Epoch: 19 | MeanAbsoluteError: 0.1363601535558701 | Loss: 0.0297506086920437 | Epoch: 20 | \n\n\nMeanAbsoluteError: 0.1299503296613693 | Loss: 0.0260085995970784 | Epoch: 21 | MeanAbsoluteError: 0.1342062503099442 | Loss: 0.0283630575224953 | Epoch: 22 | MeanAbsoluteError: 0.1304711848497391 | Loss: 0.0272065787208512 | Epoch: 23 | MeanAbsoluteError: 0.1314798593521118 | Loss: 0.0271379749878849 | Epoch: 24 | \n\n\nMeanAbsoluteError: 0.1315853148698807 | Loss: 0.0275095645338297 | Epoch: 25 | MeanAbsoluteError: 0.1287586688995361 | Loss: 0.0269135665025954 | Epoch: 26 | MeanAbsoluteError: 0.1281345933675766 | Loss: 0.0265756048335645 | Epoch: 27 | MeanAbsoluteError: 0.1325922906398773 | Loss: 0.0274063126968318 | Epoch: 28 | \n\n\nMeanAbsoluteError: 0.1372847855091095 | Loss: 0.0294226328352172 | Epoch: 29 | MeanAbsoluteError: 0.1287570744752884 | Loss: 0.0267353513474135 | Epoch: 30 | MeanAbsoluteError: 0.1284257322549820 | Loss: 0.0257873945428353 | Epoch: 31 | MeanAbsoluteError: 0.1262739747762680 | Loss: 0.0249822424773715 | Epoch: 32 | \n\n\nMeanAbsoluteError: 0.1306410729885101 | Loss: 0.0264191410112146 | Epoch: 33 | MeanAbsoluteError: 0.1314244419336319 | Loss: 0.0271287925639435 | Epoch: 34 | MeanAbsoluteError: 0.1295363903045654 | Loss: 0.0259337107601919 | Epoch: 35 | MeanAbsoluteError: 0.1311121582984924 | Loss: 0.0272267039767221 | Epoch: 36 | \n\n\nMeanAbsoluteError: 0.1275248080492020 | Loss: 0.0262124702628506 | Epoch: 37 | MeanAbsoluteError: 0.1291990578174591 | Loss: 0.0253255722468327 | Epoch: 38 | MeanAbsoluteError: 0.1310543268918991 | Loss: 0.0267823826350076 | Epoch: 39 | MeanAbsoluteError: 0.1268945038318634 | Loss: 0.0255983623577968 | \n\n\nEpoch: 40 | MeanAbsoluteError: 0.1313838213682175 | Loss: 0.0268957358784974 | Epoch: 41 | MeanAbsoluteError: 0.1285571306943893 | Loss: 0.0266549859171439 | Epoch: 42 | MeanAbsoluteError: 0.1217050552368164 | Loss: 0.0235584019193132 | Epoch: 43 | \n\n\nMeanAbsoluteError: 0.1304609179496765 | Loss: 0.0268348508244871 | Epoch: 44 | MeanAbsoluteError: 0.1249709948897362 | Loss: 0.0257774698670561 | Epoch: 45 | MeanAbsoluteError: 0.1253469139337540 | Loss: 0.0249895656628436 | Epoch: 46 | \n\n\nMeanAbsoluteError: 0.1269769817590714 | Loss: 0.0251346409541408 | Epoch: 47 | MeanAbsoluteError: 0.1308682709932327 | Loss: 0.0264744837768376 | Epoch: 48 | MeanAbsoluteError: 0.1212792992591858 | Loss: 0.0238714892123091 | Epoch: 49 | MeanAbsoluteError: 0.1203782632946968 | Loss: 0.0240090171880040 | Epoch: 50 | \n\n\nMeanAbsoluteError: 0.1216805651783943 | Loss: 0.0232146932792507 | Epoch: 51 | MeanAbsoluteError: 0.1219237744808197 | Loss: 0.0237753141524368 | Epoch: 52 | MeanAbsoluteError: 0.1205148175358772 | Loss: 0.0233872304670513 | Epoch: 53 | MeanAbsoluteError: 0.1219332888722420 | Loss: 0.0235888884574371 | Epoch: 54 | \n\n\nMeanAbsoluteError: 0.1223147809505463 | Loss: 0.0236224806377370 | Epoch: 55 | MeanAbsoluteError: 0.1196036413311958 | Loss: 0.0228681574073179 | Epoch: 56 | MeanAbsoluteError: 0.1156745627522469 | Loss: 0.0212055349869556 | Epoch: 57 | MeanAbsoluteError: 0.1215284764766693 | Loss: 0.0243003902662742 | Epoch: 58 | \n\n\nMeanAbsoluteError: 0.1178852245211601 | Loss: 0.0223038498998473 | Epoch: 59 | MeanAbsoluteError: 0.1184795647859573 | Loss: 0.0227552560084548 | Epoch: 60 | MeanAbsoluteError: 0.1213038787245750 | Loss: 0.0232084330514466 | Epoch: 61 | \n\n\nMeanAbsoluteError: 0.1145102456212044 | Loss: 0.0219273658616370 | Epoch: 62 | MeanAbsoluteError: 0.1150166094303131 | Loss: 0.0214327334205767 | Epoch: 63 | MeanAbsoluteError: 0.1104280054569244 | Loss: 0.0192062534747253 | Epoch: 64 | MeanAbsoluteError: 0.1202467978000641 | Loss: 0.0240537151326670 | Returned to Spot: Validation loss: 0.024053715132667047\n\n\nspotPython tuning: 0.0014845179156461534 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x185c5e530&gt;"
  },
  {
    "objectID": "24_spot_torch_regression.html#sec-tensorboard-24",
    "href": "24_spot_torch_regression.html#sec-tensorboard-24",
    "title": "19  HPT PyTorch: Regression",
    "section": "19.9 Step 9: Tensorboard",
    "text": "19.9 Step 9: Tensorboard\nThe textual output shown in the console (or code cell) can be visualized with Tensorboard as described in Section 14.9, see also the description in the documentation: Tensorboard."
  },
  {
    "objectID": "24_spot_torch_regression.html#sec-results-tuning-24",
    "href": "24_spot_torch_regression.html#sec-results-tuning-24",
    "title": "19  HPT PyTorch: Regression",
    "section": "19.10 Step 10: Results",
    "text": "19.10 Step 10: Results\nAfter the hyperparameter tuning run is finished, the results can be analyzed as described in Section 14.10.\n\nspot_tuner.plot_progress(log_y=False,\n    filename=\"./figures/\" + experiment_name+\"_progress.png\")\n\n\n\n\nProgress plot. Black dots denote results from the initial design. Red dots illustrate the improvement found by the surrogate model based optimization.\n\n\n\n\n\nprint(gen_design_table(fun_control=fun_control, spot=spot_tuner))\n\n| name         | type   | default   |   lower |   upper |               tuned | transform             |   importance | stars   |\n|--------------|--------|-----------|---------|---------|---------------------|-----------------------|--------------|---------|\n| _L_in        | int    | 10        |    10.0 |    10.0 |                10.0 | None                  |         0.00 |         |\n| _L_out       | int    | 1         |     1.0 |     1.0 |                 1.0 | None                  |         0.00 |         |\n| l1           | int    | 3         |     3.0 |     8.0 |                 5.0 | transform_power_2_int |        27.63 | *       |\n| dropout_prob | float  | 0.01      |     0.0 |     0.9 |  0.1655924245415988 | None                  |         1.78 | *       |\n| lr_mult      | float  | 1.0       |     0.1 |    10.0 |   4.186124343189683 | None                  |         0.00 |         |\n| batch_size   | int    | 4         |     1.0 |     4.0 |                 3.0 | transform_power_2_int |         0.00 |         |\n| epochs       | int    | 4         |     2.0 |    16.0 |                12.0 | transform_power_2_int |         0.00 |         |\n| k_folds      | int    | 1         |     1.0 |     1.0 |                 1.0 | None                  |         0.00 |         |\n| patience     | int    | 2         |     3.0 |     7.0 |                 5.0 | transform_power_2_int |       100.00 | ***     |\n| optimizer    | factor | SGD       |     0.0 |     6.0 |                 0.0 | None                  |         0.00 |         |\n| sgd_momentum | float  | 0.0       |     0.0 |     1.0 | 0.07400725452261472 | None                  |       100.00 | ***     |\n\n\n\nspot_tuner.plot_importance(threshold=0.025,\n    filename=\"./figures/\" + experiment_name+\"_importance.png\")\n\n\n\n\nVariable importance plot, threshold 0.025.\n\n\n\n\n\n19.10.1 Get the Tuned Architecture (SPOT Results)\n\nfrom spotPython.hyperparameters.values import get_one_core_model_from_X\nX = spot_tuner.to_all_dim(spot_tuner.min_X.reshape(1,-1))\nmodel_spot = get_one_core_model_from_X(X, fun_control)\nmodel_spot\n\nNet_lin_reg(\n  (fc1): Linear(in_features=10, out_features=32, bias=True)\n  (fc2): Linear(in_features=32, out_features=16, bias=True)\n  (fc3): Linear(in_features=16, out_features=1, bias=True)\n  (relu): ReLU()\n  (softmax): Softmax(dim=1)\n  (dropout1): Dropout(p=0.1655924245415988, inplace=False)\n  (dropout2): Dropout(p=0.0827962122707994, inplace=False)\n)\n\n\n\n\n19.10.2 Evaluation of the Tuned Architecture\n\nfrom spotPython.torch.traintest import (\n    train_tuned,\n    test_tuned,\n    )\n\n\ntrain_tuned(net=model_spot, train_dataset=train,\n        loss_function=fun_control[\"loss_function\"],\n        metric=fun_control[\"metric_torch\"],\n        shuffle=True,\n        device = fun_control[\"device\"],\n        path=None,\n        task=fun_control[\"task\"],)\n\nEpoch: 1 | MeanAbsoluteError: 0.1678686439990997 | Loss: 0.0415245869049900 | Epoch: 2 | MeanAbsoluteError: 0.2018080651760101 | Loss: 0.0556347076045839 | Epoch: 3 | \n\n\nMeanAbsoluteError: 0.1642994284629822 | Loss: 0.0387321374084997 | Epoch: 4 | MeanAbsoluteError: 0.1346424818038940 | Loss: 0.0288674441950494 | Epoch: 5 | MeanAbsoluteError: 0.0992065966129303 | Loss: 0.0164879764228030 | Epoch: 6 | MeanAbsoluteError: 0.0922971665859222 | Loss: 0.0146343178287345 | Epoch: 7 | \n\n\nMeanAbsoluteError: 0.1301292032003403 | Loss: 0.0248359673117336 | Epoch: 8 | MeanAbsoluteError: 0.0920179784297943 | Loss: 0.0133763144687308 | Epoch: 9 | MeanAbsoluteError: 0.1702187657356262 | Loss: 0.0372787415246038 | Epoch: 10 | MeanAbsoluteError: 0.0864455699920654 | Loss: 0.0109137440664007 | Epoch: 11 | \n\n\nMeanAbsoluteError: 0.0618227720260620 | Loss: 0.0063364888529146 | Epoch: 12 | MeanAbsoluteError: 0.0740733444690704 | Loss: 0.0089116764812436 | Epoch: 13 | MeanAbsoluteError: 0.0781511515378952 | Loss: 0.0098323904921448 | Epoch: 14 | MeanAbsoluteError: 0.1336168795824051 | Loss: 0.0214700098884733 | Epoch: 15 | \n\n\nMeanAbsoluteError: 0.0972406193614006 | Loss: 0.0127034277875761 | Epoch: 16 | MeanAbsoluteError: 0.1216661483049393 | Loss: 0.0185365356308849 | Epoch: 17 | MeanAbsoluteError: 0.1235914602875710 | Loss: 0.0182898343834830 | Epoch: 18 | MeanAbsoluteError: 0.0641001611948013 | Loss: 0.0064767005770639 | Epoch: 19 | \n\n\nMeanAbsoluteError: 0.1034787893295288 | Loss: 0.0135908842478928 | Epoch: 20 | MeanAbsoluteError: 0.1171517297625542 | Loss: 0.0178285199340041 | Epoch: 21 | MeanAbsoluteError: 0.0469146370887756 | Loss: 0.0039287728309558 | Epoch: 22 | MeanAbsoluteError: 0.0652711391448975 | Loss: 0.0062761867210563 | Epoch: 23 | \n\n\nMeanAbsoluteError: 0.0584483332931995 | Loss: 0.0053154195223837 | Epoch: 24 | MeanAbsoluteError: 0.0616878718137741 | Loss: 0.0063272681467137 | Epoch: 25 | MeanAbsoluteError: 0.0761990919709206 | Loss: 0.0077292629529869 | Epoch: 26 | MeanAbsoluteError: 0.1596315205097198 | Loss: 0.0292793917959850 | Epoch: 27 | \n\n\nMeanAbsoluteError: 0.0687899366021156 | Loss: 0.0063495487464886 | Epoch: 28 | MeanAbsoluteError: 0.0584662519395351 | Loss: 0.0053630514670850 | Epoch: 29 | MeanAbsoluteError: 0.0660423934459686 | Loss: 0.0068905997001198 | Epoch: 30 | MeanAbsoluteError: 0.1544043421745300 | Loss: 0.0277340222444189 | Epoch: 31 | \n\n\nMeanAbsoluteError: 0.0557027310132980 | Loss: 0.0054981975362783 | Epoch: 32 | MeanAbsoluteError: 0.0597739778459072 | Loss: 0.0047285030105788 | Epoch: 33 | MeanAbsoluteError: 0.0788968205451965 | Loss: 0.0080578588071818 | Epoch: 34 | \n\n\nMeanAbsoluteError: 0.0780604854226112 | Loss: 0.0080844750198977 | Epoch: 35 | MeanAbsoluteError: 0.0499155372381210 | Loss: 0.0037250397451173 | Epoch: 36 | MeanAbsoluteError: 0.0381345413625240 | Loss: 0.0021513511080564 | Epoch: 37 | MeanAbsoluteError: 0.0432948693633080 | Loss: 0.0030143020236497 | Epoch: 38 | \n\n\nMeanAbsoluteError: 0.0486651435494423 | Loss: 0.0042370011766539 | Epoch: 39 | MeanAbsoluteError: 0.0963760092854500 | Loss: 0.0112078578799571 | Epoch: 40 | MeanAbsoluteError: 0.0856875330209732 | Loss: 0.0096293318967678 | Epoch: 41 | MeanAbsoluteError: 0.0349216461181641 | Loss: 0.0024065763174899 | Epoch: 42 | \n\n\nMeanAbsoluteError: 0.0813871771097183 | Loss: 0.0083017653761137 | Epoch: 43 | MeanAbsoluteError: 0.0707879289984703 | Loss: 0.0069443789237228 | Epoch: 44 | MeanAbsoluteError: 0.0366703495383263 | Loss: 0.0026067191172747 | Epoch: 45 | MeanAbsoluteError: 0.0431893505156040 | Loss: 0.0029295591949975 | Epoch: 46 | \n\n\nMeanAbsoluteError: 0.0353074669837952 | Loss: 0.0023966342230683 | Epoch: 47 | MeanAbsoluteError: 0.0790981501340866 | Loss: 0.0077035885095890 | Epoch: 48 | MeanAbsoluteError: 0.0388236008584499 | Loss: 0.0027053273645977 | Epoch: 49 | MeanAbsoluteError: 0.0338908210396767 | Loss: 0.0022864458220092 | Epoch: 50 | \n\n\nMeanAbsoluteError: 0.0859320834279060 | Loss: 0.0089933298846805 | Epoch: 51 | MeanAbsoluteError: 0.0459516160190105 | Loss: 0.0030370979312513 | Epoch: 52 | MeanAbsoluteError: 0.0691199377179146 | Loss: 0.0060503205750138 | Epoch: 53 | MeanAbsoluteError: 0.0618400312960148 | Loss: 0.0055092778485759 | Epoch: 54 | \n\n\nMeanAbsoluteError: 0.0805207639932632 | Loss: 0.0079827956107788 | Epoch: 55 | MeanAbsoluteError: 0.0629020035266876 | Loss: 0.0055336537648385 | Epoch: 56 | MeanAbsoluteError: 0.0525086075067520 | Loss: 0.0041749019904895 | Epoch: 57 | MeanAbsoluteError: 0.0765953063964844 | Loss: 0.0083759495502914 | Epoch: 58 | \n\n\nMeanAbsoluteError: 0.0560604855418205 | Loss: 0.0046339860725168 | Epoch: 59 | MeanAbsoluteError: 0.0591124966740608 | Loss: 0.0050711241201498 | Epoch: 60 | MeanAbsoluteError: 0.0464487448334694 | Loss: 0.0033754461665491 | Epoch: 61 | MeanAbsoluteError: 0.0616556033492088 | Loss: 0.0050701380915646 | Epoch: 62 | \n\n\nMeanAbsoluteError: 0.0319836065173149 | Loss: 0.0017065389294753 | Epoch: 63 | MeanAbsoluteError: 0.0457256846129894 | Loss: 0.0035619183189211 | Epoch: 64 | MeanAbsoluteError: 0.0632246732711792 | Loss: 0.0061981225245338 | Epoch: 65 | MeanAbsoluteError: 0.0628468841314316 | Loss: 0.0063809089999842 | Epoch: 66 | \n\n\nMeanAbsoluteError: 0.0926478281617165 | Loss: 0.0105614383263808 | Epoch: 67 | MeanAbsoluteError: 0.0652354210615158 | Loss: 0.0055359265534207 | Epoch: 68 | MeanAbsoluteError: 0.0358318462967873 | Loss: 0.0023979616265646 | Epoch: 69 | MeanAbsoluteError: 0.0369929261505604 | Loss: 0.0025769700763416 | Epoch: 70 | \n\n\nMeanAbsoluteError: 0.0569209344685078 | Loss: 0.0049989201591081 | Epoch: 71 | MeanAbsoluteError: 0.0693854615092278 | Loss: 0.0069586352053049 | Epoch: 72 | MeanAbsoluteError: 0.1012104153633118 | Loss: 0.0115599578467051 | Epoch: 73 | MeanAbsoluteError: 0.0640594139695168 | Loss: 0.0060198672213837 | Epoch: 74 | \n\n\nMeanAbsoluteError: 0.0441990233957767 | Loss: 0.0030880957125000 | Epoch: 75 | MeanAbsoluteError: 0.0316720530390739 | Loss: 0.0021496313167613 | Epoch: 76 | MeanAbsoluteError: 0.0285287126898766 | Loss: 0.0015454786947598 | Epoch: 77 | MeanAbsoluteError: 0.0534472540020943 | Loss: 0.0045489685787623 | Epoch: 78 | \n\n\nMeanAbsoluteError: 0.0440044514834881 | Loss: 0.0028492274991310 | Epoch: 79 | MeanAbsoluteError: 0.0318125225603580 | Loss: 0.0022441958893691 | Epoch: 80 | MeanAbsoluteError: 0.0384223051369190 | Loss: 0.0027008446034559 | Epoch: 81 | MeanAbsoluteError: 0.0705695599317551 | Loss: 0.0067415590410268 | Epoch: 82 | \n\n\nMeanAbsoluteError: 0.0447182692587376 | Loss: 0.0032265477286848 | Epoch: 83 | MeanAbsoluteError: 0.0383287332952023 | Loss: 0.0023734707562988 | Epoch: 84 | MeanAbsoluteError: 0.0811735540628433 | Loss: 0.0079978436819817 | Epoch: 85 | MeanAbsoluteError: 0.0492363348603249 | Loss: 0.0036681449319555 | Epoch: 86 | \n\n\nMeanAbsoluteError: 0.0399366281926632 | Loss: 0.0024037688884786 | Epoch: 87 | MeanAbsoluteError: 0.0413369759917259 | Loss: 0.0029510575971615 | Epoch: 88 | MeanAbsoluteError: 0.0582383461296558 | Loss: 0.0041568922062748 | Epoch: 89 | MeanAbsoluteError: 0.0561642013490200 | Loss: 0.0043097041504409 | Epoch: 90 | \n\n\nMeanAbsoluteError: 0.0356510058045387 | Loss: 0.0024450175804209 | Epoch: 91 | MeanAbsoluteError: 0.0407227911055088 | Loss: 0.0024868458981234 | Epoch: 92 | MeanAbsoluteError: 0.0317498296499252 | Loss: 0.0020718688166725 | Epoch: 93 | MeanAbsoluteError: 0.0326390191912651 | Loss: 0.0020079248191139 | Epoch: 94 | \n\n\nMeanAbsoluteError: 0.0493461266160011 | Loss: 0.0040166056577092 | Epoch: 95 | MeanAbsoluteError: 0.0825998783111572 | Loss: 0.0083545166754017 | Epoch: 96 | MeanAbsoluteError: 0.0667102113366127 | Loss: 0.0057614839476484 | Epoch: 97 | MeanAbsoluteError: 0.0772523358464241 | Loss: 0.0073698044411446 | Epoch: 98 | \n\n\nMeanAbsoluteError: 0.0319283008575439 | Loss: 0.0018072337131200 | Epoch: 99 | MeanAbsoluteError: 0.0816550105810165 | Loss: 0.0086567116913533 | Epoch: 100 | MeanAbsoluteError: 0.0253611523658037 | Loss: 0.0013047145082390 | Epoch: 101 | MeanAbsoluteError: 0.0785370245575905 | Loss: 0.0076281747498893 | Epoch: 102 | \n\n\nMeanAbsoluteError: 0.0253805406391621 | Loss: 0.0015186642822779 | Epoch: 103 | MeanAbsoluteError: 0.0613956116139889 | Loss: 0.0057200843339639 | Epoch: 104 | MeanAbsoluteError: 0.0938466861844063 | Loss: 0.0098868786406360 | Epoch: 105 | \n\n\nMeanAbsoluteError: 0.0556458160281181 | Loss: 0.0044113906363859 | Epoch: 106 | MeanAbsoluteError: 0.0352439619600773 | Loss: 0.0023212766996278 | Epoch: 107 | MeanAbsoluteError: 0.0315434597432613 | Loss: 0.0019621336893914 | Epoch: 108 | MeanAbsoluteError: 0.0457984097301960 | Loss: 0.0035203659101267 | Epoch: 109 | \n\n\nMeanAbsoluteError: 0.0330135263502598 | Loss: 0.0017260538297705 | Epoch: 110 | MeanAbsoluteError: 0.0308540053665638 | Loss: 0.0018586280677578 | Epoch: 111 | MeanAbsoluteError: 0.0316943787038326 | Loss: 0.0021485443476673 | Epoch: 112 | MeanAbsoluteError: 0.0391510799527168 | Loss: 0.0029566771914496 | Epoch: 113 | \n\n\nMeanAbsoluteError: 0.0282119661569595 | Loss: 0.0014895923810208 | Epoch: 114 | MeanAbsoluteError: 0.0298472754657269 | Loss: 0.0016312472840869 | Epoch: 115 | MeanAbsoluteError: 0.0495871528983116 | Loss: 0.0032455842991016 | Epoch: 116 | MeanAbsoluteError: 0.0328770391643047 | Loss: 0.0021653914522367 | Epoch: 117 | \n\n\nMeanAbsoluteError: 0.0378827340900898 | Loss: 0.0030827897924035 | Epoch: 118 | MeanAbsoluteError: 0.0720904916524887 | Loss: 0.0073881856974606 | Epoch: 119 | MeanAbsoluteError: 0.0302197840064764 | Loss: 0.0013594284253869 | Epoch: 120 | MeanAbsoluteError: 0.0275334510952234 | Loss: 0.0014433852216155 | Epoch: 121 | \n\n\nMeanAbsoluteError: 0.0542115345597267 | Loss: 0.0036980819667837 | Epoch: 122 | MeanAbsoluteError: 0.0496502183377743 | Loss: 0.0032673369982819 | Epoch: 123 | MeanAbsoluteError: 0.0294468402862549 | Loss: 0.0015348586825176 | Epoch: 124 | MeanAbsoluteError: 0.0491634830832481 | Loss: 0.0037221840497008 | Epoch: 125 | \n\n\nMeanAbsoluteError: 0.0589740760624409 | Loss: 0.0058027939766792 | Epoch: 126 | MeanAbsoluteError: 0.0293857604265213 | Loss: 0.0015178054347512 | Epoch: 127 | MeanAbsoluteError: 0.0623869001865387 | Loss: 0.0047659733773846 | Epoch: 128 | MeanAbsoluteError: 0.0329865291714668 | Loss: 0.0018144440170880 | Epoch: 129 | \n\n\nMeanAbsoluteError: 0.0284435153007507 | Loss: 0.0015525735086014 | Epoch: 130 | MeanAbsoluteError: 0.0283574797213078 | Loss: 0.0014997565081821 | Epoch: 131 | MeanAbsoluteError: 0.0785648897290230 | Loss: 0.0075077092777447 | Epoch: 132 | MeanAbsoluteError: 0.0347967259585857 | Loss: 0.0018465771718184 | Early stopping at epoch 131\nReturned to Spot: Validation loss: 0.0018465771718183532\n\n\nIf path is set to a filename, e.g., path = \"model_spot_trained.pt\", the weights of the trained model will be loaded from this file.\n\ntest_tuned(net=model_spot, test_dataset=test,\n            shuffle=False,\n            loss_function=fun_control[\"loss_function\"],\n            metric=fun_control[\"metric_torch\"],\n            device = fun_control[\"device\"],\n            task=fun_control[\"task\"],)\n\nMeanAbsoluteError: 0.0362048856914043 | Loss: 0.0019534178973117 | Final evaluation: Validation loss: 0.0019534178973117378\nFinal evaluation: Validation metric: 0.03620488569140434\n----------------------------------------------\n\n\n(0.0019534178973117378, nan, tensor(0.0362))\n\n\n\n\n19.10.3 Cross-validated Evaluations\n\nThis is the evaluation that will be used in the comparison (evaluatecv has to be updated before, to get metric vlaues!):\n\n\nfrom spotPython.torch.traintest import evaluate_cv\n# modify k-kolds:\nsetattr(model_spot, \"k_folds\",  10)\ndf_eval, df_preds, df_metrics = evaluate_cv(net=model_spot,\n            dataset=fun_control[\"data\"],\n            loss_function=fun_control[\"loss_function\"],\n            metric=fun_control[\"metric_torch\"],\n            task=fun_control[\"task\"],\n            writer=fun_control[\"writer\"],\n            writerId=\"model_spot_cv\",\n            device = fun_control[\"device\"])\n\nFold: 1\nEpoch: 1 | MeanAbsoluteError: 0.1618047505617142 | Loss: 0.0394422174789585 | Epoch: 2 | \n\n\nMeanAbsoluteError: 0.0948168635368347 | Loss: 0.0141746504590488 | Epoch: 3 | MeanAbsoluteError: 0.0821267440915108 | Loss: 0.0107249320269777 | Epoch: 4 | \n\n\nMeanAbsoluteError: 0.0913791954517365 | Loss: 0.0127206999235428 | Epoch: 5 | MeanAbsoluteError: 0.0598355084657669 | Loss: 0.0056427746760444 | Epoch: 6 | \n\n\nMeanAbsoluteError: 0.0670675933361053 | Loss: 0.0079651997388842 | Epoch: 7 | MeanAbsoluteError: 0.1292499303817749 | Loss: 0.0211380985207283 | Epoch: 8 | \n\n\nMeanAbsoluteError: 0.1018431410193443 | Loss: 0.0132685123512951 | Epoch: 9 | MeanAbsoluteError: 0.0542722977697849 | Loss: 0.0051638167441035 | Epoch: 10 | \n\n\nMeanAbsoluteError: 0.0775565877556801 | Loss: 0.0098437746592726 | Epoch: 11 | MeanAbsoluteError: 0.0937005728483200 | Loss: 0.0114590499478464 | Epoch: 12 | \n\n\nMeanAbsoluteError: 0.0553506389260292 | Loss: 0.0042343608802184 | Epoch: 13 | MeanAbsoluteError: 0.1231693550944328 | Loss: 0.0178886598262649 | Epoch: 14 | \n\n\nMeanAbsoluteError: 0.0724197700619698 | Loss: 0.0086849843724989 | Epoch: 15 | MeanAbsoluteError: 0.0601353347301483 | Loss: 0.0058145349433359 | Epoch: 16 | \n\n\nMeanAbsoluteError: 0.0443972237408161 | Loss: 0.0034246930870442 | Epoch: 17 | MeanAbsoluteError: 0.0525197349488735 | Loss: 0.0043401776884611 | Epoch: 18 | \n\n\nMeanAbsoluteError: 0.0570652782917023 | Loss: 0.0047597716060969 | Epoch: 19 | MeanAbsoluteError: 0.0543795153498650 | Loss: 0.0054893779765385 | Epoch: 20 | \n\n\nMeanAbsoluteError: 0.0432649999856949 | Loss: 0.0029426976644362 | Epoch: 21 | MeanAbsoluteError: 0.0361913293600082 | Loss: 0.0027457713149488 | Epoch: 22 | \n\n\nMeanAbsoluteError: 0.0645979940891266 | Loss: 0.0059385592153726 | Epoch: 23 | MeanAbsoluteError: 0.0960647761821747 | Loss: 0.0117363586412886 | Epoch: 24 | \n\n\nMeanAbsoluteError: 0.0365579873323441 | Loss: 0.0024502074005655 | Epoch: 25 | MeanAbsoluteError: 0.0616183169186115 | Loss: 0.0054446791047947 | Epoch: 26 | \n\n\nMeanAbsoluteError: 0.0322105512022972 | Loss: 0.0017122150479386 | Epoch: 27 | MeanAbsoluteError: 0.0895606502890587 | Loss: 0.0105132291523310 | Epoch: 28 | \n\n\nMeanAbsoluteError: 0.0573455579578876 | Loss: 0.0051780047002607 | Epoch: 29 | MeanAbsoluteError: 0.0312262102961540 | Loss: 0.0017386589964959 | Epoch: 30 | \n\n\nMeanAbsoluteError: 0.0529483743011951 | Loss: 0.0053945709861672 | Epoch: 31 | MeanAbsoluteError: 0.0695150643587112 | Loss: 0.0059437921557289 | Epoch: 32 | \n\n\nMeanAbsoluteError: 0.0374334193766117 | Loss: 0.0026350526649577 | Epoch: 33 | MeanAbsoluteError: 0.0425673685967922 | Loss: 0.0026405658662462 | Epoch: 34 | \n\n\nMeanAbsoluteError: 0.0649197697639465 | Loss: 0.0066424999744273 | Epoch: 35 | MeanAbsoluteError: 0.0320014618337154 | Loss: 0.0017401188043340 | Epoch: 36 | \n\n\nMeanAbsoluteError: 0.0379110276699066 | Loss: 0.0021584174604728 | Epoch: 37 | MeanAbsoluteError: 0.0313809663057327 | Loss: 0.0017957171971480 | Epoch: 38 | \n\n\nMeanAbsoluteError: 0.0689054951071739 | Loss: 0.0069304433328888 | Epoch: 39 | MeanAbsoluteError: 0.0712393447756767 | Loss: 0.0070008190277104 | Epoch: 40 | \n\n\nMeanAbsoluteError: 0.0774688571691513 | Loss: 0.0082886646358440 | Epoch: 41 | MeanAbsoluteError: 0.0474285706877708 | Loss: 0.0032272364747209 | Epoch: 42 | \n\n\nMeanAbsoluteError: 0.0803026407957077 | Loss: 0.0073229097761214 | Epoch: 43 | MeanAbsoluteError: 0.0363925658166409 | Loss: 0.0020434111714936 | Epoch: 44 | \n\n\nMeanAbsoluteError: 0.0545536242425442 | Loss: 0.0049339817353309 | Epoch: 45 | MeanAbsoluteError: 0.0352949351072311 | Loss: 0.0025646976831083 | Epoch: 46 | \n\n\nMeanAbsoluteError: 0.0491816811263561 | Loss: 0.0031038886562993 | Epoch: 47 | MeanAbsoluteError: 0.0633549764752388 | Loss: 0.0051773153782751 | Epoch: 48 | \n\n\nMeanAbsoluteError: 0.0338786877691746 | Loss: 0.0020380532480955 | Epoch: 49 | MeanAbsoluteError: 0.0579497329890728 | Loss: 0.0041638990828338 | Epoch: 50 | \n\n\nMeanAbsoluteError: 0.0299410913139582 | Loss: 0.0017625350290193 | Epoch: 51 | MeanAbsoluteError: 0.0759929493069649 | Loss: 0.0072865994611325 | Epoch: 52 | \n\n\nMeanAbsoluteError: 0.0308872535824776 | Loss: 0.0018491343989109 | Epoch: 53 | MeanAbsoluteError: 0.0891566649079323 | Loss: 0.0102489839952726 | Epoch: 54 | \n\n\nMeanAbsoluteError: 0.0261515323072672 | Loss: 0.0012303415927678 | Epoch: 55 | MeanAbsoluteError: 0.0560870207846165 | Loss: 0.0042396391598651 | Epoch: 56 | \n\n\nMeanAbsoluteError: 0.0305423717945814 | Loss: 0.0020965277318073 | Epoch: 57 | MeanAbsoluteError: 0.1082722842693329 | Loss: 0.0148260296107485 | Epoch: 58 | \n\n\nMeanAbsoluteError: 0.0310138911008835 | Loss: 0.0021432984324817 | Epoch: 59 | MeanAbsoluteError: 0.0362440459430218 | Loss: 0.0022657999741988 | Epoch: 60 | \n\n\nMeanAbsoluteError: 0.0278909578919411 | Loss: 0.0016212499109455 | Epoch: 61 | MeanAbsoluteError: 0.0307350065559149 | Loss: 0.0012876898623430 | Epoch: 62 | \n\n\nMeanAbsoluteError: 0.0358627326786518 | Loss: 0.0019277437464692 | Epoch: 63 | MeanAbsoluteError: 0.0280392076820135 | Loss: 0.0014673817114761 | Epoch: 64 | \n\n\nMeanAbsoluteError: 0.0428690947592258 | Loss: 0.0028987330778574 | Epoch: 65 | MeanAbsoluteError: 0.0576479397714138 | Loss: 0.0051042788859027 | Epoch: 66 | \n\n\nMeanAbsoluteError: 0.0324590206146240 | Loss: 0.0020066216820851 | Epoch: 67 | MeanAbsoluteError: 0.0551687255501747 | Loss: 0.0039030958074503 | Epoch: 68 | \n\n\nMeanAbsoluteError: 0.0372074879705906 | Loss: 0.0019988693887941 | Epoch: 69 | MeanAbsoluteError: 0.0325563065707684 | Loss: 0.0018911197996483 | Epoch: 70 | \n\n\nMeanAbsoluteError: 0.0469849854707718 | Loss: 0.0033260236064402 | Epoch: 71 | MeanAbsoluteError: 0.0240812972187996 | Loss: 0.0014303888243516 | Epoch: 72 | \n\n\nMeanAbsoluteError: 0.0613652132451534 | Loss: 0.0043922790791839 | Epoch: 73 | MeanAbsoluteError: 0.0335457883775234 | Loss: 0.0018916126371970 | Epoch: 74 | \n\n\nMeanAbsoluteError: 0.0326935388147831 | Loss: 0.0021480596534765 | Epoch: 75 | MeanAbsoluteError: 0.0328181087970734 | Loss: 0.0015986603371298 | Epoch: 76 | \n\n\nMeanAbsoluteError: 0.0729192495346069 | Loss: 0.0069603923564920 | Epoch: 77 | MeanAbsoluteError: 0.0478911027312279 | Loss: 0.0033632888404939 | Epoch: 78 | \n\n\nMeanAbsoluteError: 0.0352767892181873 | Loss: 0.0017835934682248 | Epoch: 79 | MeanAbsoluteError: 0.0862318500876427 | Loss: 0.0085684736975684 | Epoch: 80 | \n\n\nMeanAbsoluteError: 0.0846154689788818 | Loss: 0.0088662661146373 | Epoch: 81 | MeanAbsoluteError: 0.0463497154414654 | Loss: 0.0031633907123111 | Epoch: 82 | \n\n\nMeanAbsoluteError: 0.0338572300970554 | Loss: 0.0017945189230466 | Epoch: 83 | MeanAbsoluteError: 0.0370304137468338 | Loss: 0.0023098792567348 | Epoch: 84 | \n\n\nMeanAbsoluteError: 0.0377095714211464 | Loss: 0.0023885265064354 | Epoch: 85 | MeanAbsoluteError: 0.0347837135195732 | Loss: 0.0024837391728607 | Epoch: 86 | \n\n\nMeanAbsoluteError: 0.0580969750881195 | Loss: 0.0039928689724408 | Early stopping at epoch 85\nFold: 2\nEpoch: 1 | MeanAbsoluteError: 0.1210427284240723 | Loss: 0.0232378422425917 | Epoch: 2 | \n\n\nMeanAbsoluteError: 0.0971136540174484 | Loss: 0.0145270234117141 | Epoch: 3 | MeanAbsoluteError: 0.1082396730780602 | Loss: 0.0167163557086426 | Epoch: 4 | \n\n\nMeanAbsoluteError: 0.0941592678427696 | Loss: 0.0136342877880312 | Epoch: 5 | MeanAbsoluteError: 0.1127286031842232 | Loss: 0.0175349722043253 | Epoch: 6 | \n\n\nMeanAbsoluteError: 0.0576534420251846 | Loss: 0.0057649175242449 | Epoch: 7 | MeanAbsoluteError: 0.0717851445078850 | Loss: 0.0073035650600034 | Epoch: 8 | \n\n\nMeanAbsoluteError: 0.0551515594124794 | Loss: 0.0052624709832554 | Epoch: 9 | MeanAbsoluteError: 0.0639993399381638 | Loss: 0.0063609613571316 | Epoch: 10 | \n\n\nMeanAbsoluteError: 0.0574899241328239 | Loss: 0.0052092311939654 | Epoch: 11 | MeanAbsoluteError: 0.0511795468628407 | Loss: 0.0044416818731966 | Epoch: 12 | \n\n\nMeanAbsoluteError: 0.0916891843080521 | Loss: 0.0108246649973668 | Epoch: 13 | MeanAbsoluteError: 0.0635578036308289 | Loss: 0.0055400849355815 | Epoch: 14 | \n\n\nMeanAbsoluteError: 0.0474723912775517 | Loss: 0.0032757236264073 | Epoch: 15 | MeanAbsoluteError: 0.0455380119383335 | Loss: 0.0042995981684026 | Epoch: 16 | \n\n\nMeanAbsoluteError: 0.0662908628582954 | Loss: 0.0076314375485079 | Epoch: 17 | MeanAbsoluteError: 0.0895552560687065 | Loss: 0.0099806159089964 | Epoch: 18 | \n\n\nMeanAbsoluteError: 0.0578889809548855 | Loss: 0.0054974844947887 | Epoch: 19 | MeanAbsoluteError: 0.0413420200347900 | Loss: 0.0035049886568091 | Epoch: 20 | \n\n\nMeanAbsoluteError: 0.0409970618784428 | Loss: 0.0031804373093809 | Epoch: 21 | MeanAbsoluteError: 0.0565304942429066 | Loss: 0.0051717226429341 | Epoch: 22 | \n\n\nMeanAbsoluteError: 0.0581042952835560 | Loss: 0.0053307732674651 | Epoch: 23 | MeanAbsoluteError: 0.0562559217214584 | Loss: 0.0043826545230471 | Epoch: 24 | \n\n\nMeanAbsoluteError: 0.0790787190198898 | Loss: 0.0077061902803297 | Epoch: 25 | MeanAbsoluteError: 0.0663733556866646 | Loss: 0.0067779881736407 | Epoch: 26 | \n\n\nMeanAbsoluteError: 0.0446581616997719 | Loss: 0.0027957009241128 | Epoch: 27 | MeanAbsoluteError: 0.0651144385337830 | Loss: 0.0062882552245775 | Epoch: 28 | \n\n\nMeanAbsoluteError: 0.0584244057536125 | Loss: 0.0042952514038636 | Epoch: 29 | MeanAbsoluteError: 0.0362142883241177 | Loss: 0.0030877480569940 | Epoch: 30 | \n\n\nMeanAbsoluteError: 0.0634226948022842 | Loss: 0.0053216522165502 | Epoch: 31 | MeanAbsoluteError: 0.0558205507695675 | Loss: 0.0040538682279965 | Epoch: 32 | \n\n\nMeanAbsoluteError: 0.0327978432178497 | Loss: 0.0021329234766129 | Epoch: 33 | MeanAbsoluteError: 0.0594015568494797 | Loss: 0.0055378245350976 | Epoch: 34 | \n\n\nMeanAbsoluteError: 0.0735566541552544 | Loss: 0.0066518652825975 | Epoch: 35 | MeanAbsoluteError: 0.0628775656223297 | Loss: 0.0068512232884621 | Epoch: 36 | \n\n\nMeanAbsoluteError: 0.0507698543369770 | Loss: 0.0044060353762828 | Epoch: 37 | MeanAbsoluteError: 0.0471728667616844 | Loss: 0.0041673505374302 | Epoch: 38 | \n\n\nMeanAbsoluteError: 0.0340292416512966 | Loss: 0.0019375911125770 | Epoch: 39 | MeanAbsoluteError: 0.0503892265260220 | Loss: 0.0041683715087577 | Epoch: 40 | \n\n\nMeanAbsoluteError: 0.0952877774834633 | Loss: 0.0101471229169804 | Epoch: 41 | MeanAbsoluteError: 0.0386420190334320 | Loss: 0.0025232952141848 | Epoch: 42 | \n\n\nMeanAbsoluteError: 0.0570842325687408 | Loss: 0.0045551993490125 | Epoch: 43 | MeanAbsoluteError: 0.1012826561927795 | Loss: 0.0111592142627789 | Epoch: 44 | \n\n\nMeanAbsoluteError: 0.0544559583067894 | Loss: 0.0043733635057624 | Epoch: 45 | MeanAbsoluteError: 0.0253615472465754 | Loss: 0.0014648897743497 | Epoch: 46 | \n\n\nMeanAbsoluteError: 0.0533788762986660 | Loss: 0.0041271784150292 | Epoch: 47 | MeanAbsoluteError: 0.0447540134191513 | Loss: 0.0033322268237288 | Epoch: 48 | \n\n\nMeanAbsoluteError: 0.0498334281146526 | Loss: 0.0033228628677674 | Epoch: 49 | MeanAbsoluteError: 0.0661871507763863 | Loss: 0.0066973534054481 | Epoch: 50 | \n\n\nMeanAbsoluteError: 0.1092068180441856 | Loss: 0.0138584222071446 | Epoch: 51 | MeanAbsoluteError: 0.0472214035689831 | Loss: 0.0032750072333818 | Epoch: 52 | \n\n\nMeanAbsoluteError: 0.0257588960230350 | Loss: 0.0013870140201806 | Epoch: 53 | MeanAbsoluteError: 0.0462865680456161 | Loss: 0.0035545551934494 | Epoch: 54 | \n\n\nMeanAbsoluteError: 0.0330822132527828 | Loss: 0.0016881228478339 | Epoch: 55 | MeanAbsoluteError: 0.0646588876843452 | Loss: 0.0052432517449443 | Epoch: 56 | \n\n\nMeanAbsoluteError: 0.0334593765437603 | Loss: 0.0021068099259327 | Epoch: 57 | MeanAbsoluteError: 0.0272022839635611 | Loss: 0.0013308256188443 | Epoch: 58 | \n\n\nMeanAbsoluteError: 0.0374362431466579 | Loss: 0.0028740897541866 | Epoch: 59 | MeanAbsoluteError: 0.0386285670101643 | Loss: 0.0025590753379779 | Epoch: 60 | \n\n\nMeanAbsoluteError: 0.0476181395351887 | Loss: 0.0032054041422760 | Epoch: 61 | MeanAbsoluteError: 0.0559419728815556 | Loss: 0.0044539202398692 | Epoch: 62 | \n\n\nMeanAbsoluteError: 0.0221635792404413 | Loss: 0.0015338865274456 | Epoch: 63 | MeanAbsoluteError: 0.0278351996093988 | Loss: 0.0018524339628549 | Epoch: 64 | \n\n\nMeanAbsoluteError: 0.0344574041664600 | Loss: 0.0022858139217043 | Epoch: 65 | MeanAbsoluteError: 0.0418969430029392 | Loss: 0.0030333722287861 | Epoch: 66 | \n\n\nMeanAbsoluteError: 0.0327552743256092 | Loss: 0.0020217526448855 | Epoch: 67 | MeanAbsoluteError: 0.0496373213827610 | Loss: 0.0033627718579597 | Epoch: 68 | \n\n\nMeanAbsoluteError: 0.0421554371714592 | Loss: 0.0023812933986147 | Epoch: 69 | MeanAbsoluteError: 0.0243937131017447 | Loss: 0.0014644278260396 | Epoch: 70 | \n\n\nMeanAbsoluteError: 0.0337637700140476 | Loss: 0.0027833441003727 | Epoch: 71 | MeanAbsoluteError: 0.0318746082484722 | Loss: 0.0021676858931852 | Epoch: 72 | \n\n\nMeanAbsoluteError: 0.0341422557830811 | Loss: 0.0019972750675291 | Epoch: 73 | MeanAbsoluteError: 0.0472048744559288 | Loss: 0.0038978335752080 | Epoch: 74 | \n\n\nMeanAbsoluteError: 0.0273774806410074 | Loss: 0.0013954009135397 | Epoch: 75 | MeanAbsoluteError: 0.0201969463378191 | Loss: 0.0008769651131633 | Epoch: 76 | \n\n\nMeanAbsoluteError: 0.0364593453705311 | Loss: 0.0023139983129043 | Epoch: 77 | MeanAbsoluteError: 0.0677185878157616 | Loss: 0.0054784645505536 | Epoch: 78 | \n\n\nMeanAbsoluteError: 0.0466333962976933 | Loss: 0.0025956316743619 | Epoch: 79 | MeanAbsoluteError: 0.0608448646962643 | Loss: 0.0046451351282975 | Epoch: 80 | \n\n\nMeanAbsoluteError: 0.0425164140760899 | Loss: 0.0032064071632563 | Epoch: 81 | MeanAbsoluteError: 0.0440618991851807 | Loss: 0.0027699935196254 | Epoch: 82 | \n\n\nMeanAbsoluteError: 0.0778444558382034 | Loss: 0.0071815219886888 | Epoch: 83 | MeanAbsoluteError: 0.0308453440666199 | Loss: 0.0016489740877520 | Epoch: 84 | \n\n\nMeanAbsoluteError: 0.0302984956651926 | Loss: 0.0017717327886763 | Epoch: 85 | MeanAbsoluteError: 0.0279617309570312 | Loss: 0.0014760369443908 | Epoch: 86 | \n\n\nMeanAbsoluteError: 0.0493060834705830 | Loss: 0.0034059206417833 | Epoch: 87 | MeanAbsoluteError: 0.0304992459714413 | Loss: 0.0020885650659553 | Epoch: 88 | \n\n\nMeanAbsoluteError: 0.0381759330630302 | Loss: 0.0022709620176241 | Epoch: 89 | MeanAbsoluteError: 0.0434022992849350 | Loss: 0.0045287668293055 | Epoch: 90 | \n\n\nMeanAbsoluteError: 0.0505503304302692 | Loss: 0.0033935281770447 | Epoch: 91 | MeanAbsoluteError: 0.0354275815188885 | Loss: 0.0021154315819821 | Epoch: 92 | \n\n\nMeanAbsoluteError: 0.0356516614556313 | Loss: 0.0020675322963283 | Epoch: 93 | MeanAbsoluteError: 0.0399623215198517 | Loss: 0.0023545790821887 | Epoch: 94 | \n\n\nMeanAbsoluteError: 0.0703497678041458 | Loss: 0.0053893277027573 | Epoch: 95 | MeanAbsoluteError: 0.0316573493182659 | Loss: 0.0016984358953778 | Epoch: 96 | \n\n\nMeanAbsoluteError: 0.0345632173120975 | Loss: 0.0026033959696248 | Epoch: 97 | MeanAbsoluteError: 0.0486009232699871 | Loss: 0.0030947438835238 | Epoch: 98 | \n\n\nMeanAbsoluteError: 0.0295199174433947 | Loss: 0.0016001898822231 | Epoch: 99 | MeanAbsoluteError: 0.0240722522139549 | Loss: 0.0012215821927664 | Epoch: 100 | \n\n\nMeanAbsoluteError: 0.0251525696367025 | Loss: 0.0010048355347513 | Epoch: 101 | MeanAbsoluteError: 0.0320860780775547 | Loss: 0.0015870903309685 | Epoch: 102 | \n\n\nMeanAbsoluteError: 0.0552912652492523 | Loss: 0.0045466636164257 | Epoch: 103 | MeanAbsoluteError: 0.0280942562967539 | Loss: 0.0016389358676791 | Epoch: 104 | \n\n\nMeanAbsoluteError: 0.0369178503751755 | Loss: 0.0022814114748214 | Epoch: 105 | MeanAbsoluteError: 0.0380741730332375 | Loss: 0.0026458789361641 | Epoch: 106 | \n\n\nMeanAbsoluteError: 0.0337572507560253 | Loss: 0.0018191981138303 | Epoch: 107 | MeanAbsoluteError: 0.0501131974160671 | Loss: 0.0031544054195715 | Early stopping at epoch 106\nFold: 3\nEpoch: 1 | \n\n\nMeanAbsoluteError: 0.1106576845049858 | Loss: 0.0189367327480935 | Epoch: 2 | MeanAbsoluteError: 0.0824960693717003 | Loss: 0.0101787202740805 | Epoch: 3 | \n\n\nMeanAbsoluteError: 0.0982738807797432 | Loss: 0.0140791730238841 | Epoch: 4 | MeanAbsoluteError: 0.1074456945061684 | Loss: 0.0150275832185378 | Epoch: 5 | \n\n\nMeanAbsoluteError: 0.1125353351235390 | Loss: 0.0161447196554106 | Epoch: 6 | MeanAbsoluteError: 0.0472255498170853 | Loss: 0.0035851755931687 | Epoch: 7 | MeanAbsoluteError: 0.0799888148903847 | Loss: 0.0081726278966436 | \n\n\nEpoch: 8 | MeanAbsoluteError: 0.0505995228886604 | Loss: 0.0037156348519672 | Epoch: 9 | \n\n\nMeanAbsoluteError: 0.0800606906414032 | Loss: 0.0099723924560329 | Epoch: 10 | MeanAbsoluteError: 0.0406498722732067 | Loss: 0.0032811103155836 | Epoch: 11 | \n\n\nMeanAbsoluteError: 0.0613486431539059 | Loss: 0.0054539138128838 | Epoch: 12 | MeanAbsoluteError: 0.0524198114871979 | Loss: 0.0035905207220752 | Epoch: 13 | \n\n\nMeanAbsoluteError: 0.0422636717557907 | Loss: 0.0034522012664148 | Epoch: 14 | MeanAbsoluteError: 0.0485951006412506 | Loss: 0.0039898190611544 | Epoch: 15 | \n\n\nMeanAbsoluteError: 0.0377292856574059 | Loss: 0.0022977507413508 | Epoch: 16 | MeanAbsoluteError: 0.1248728334903717 | Loss: 0.0170691285568934 | Epoch: 17 | \n\n\nMeanAbsoluteError: 0.0457675121724606 | Loss: 0.0028961827315820 | Epoch: 18 | MeanAbsoluteError: 0.0840506330132484 | Loss: 0.0093123354375936 | Epoch: 19 | \n\n\nMeanAbsoluteError: 0.0386841967701912 | Loss: 0.0023773076917188 | Epoch: 20 | MeanAbsoluteError: 0.0948448777198792 | Loss: 0.0103700400258486 | Epoch: 21 | \n\n\nMeanAbsoluteError: 0.0304872654378414 | Loss: 0.0021557314657212 | Epoch: 22 | MeanAbsoluteError: 0.0444978997111320 | Loss: 0.0038369042942157 | Epoch: 23 | \n\n\nMeanAbsoluteError: 0.0281046796590090 | Loss: 0.0012135672687481 | Epoch: 24 | MeanAbsoluteError: 0.0381292551755905 | Loss: 0.0023152525402391 | Epoch: 25 | \n\n\nMeanAbsoluteError: 0.0270831491798162 | Loss: 0.0012781705378214 | Epoch: 26 | MeanAbsoluteError: 0.0407160185277462 | Loss: 0.0025233460608153 | Epoch: 27 | \n\n\nMeanAbsoluteError: 0.0480317361652851 | Loss: 0.0031511885955786 | Epoch: 28 | MeanAbsoluteError: 0.0253189783543348 | Loss: 0.0009912751198639 | Epoch: 29 | \n\n\nMeanAbsoluteError: 0.0572737306356430 | Loss: 0.0043721814604046 | Epoch: 30 | MeanAbsoluteError: 0.0371986590325832 | Loss: 0.0020167505673061 | Epoch: 31 | \n\n\nMeanAbsoluteError: 0.0357491485774517 | Loss: 0.0022889177601498 | Epoch: 32 | MeanAbsoluteError: 0.0812306106090546 | Loss: 0.0079719146641974 | Epoch: 33 | \n\n\nMeanAbsoluteError: 0.0668872967362404 | Loss: 0.0066449732448046 | Epoch: 34 | MeanAbsoluteError: 0.0282367523759604 | Loss: 0.0017532258375118 | Epoch: 35 | \n\n\nMeanAbsoluteError: 0.0974341705441475 | Loss: 0.0113310729368375 | Epoch: 36 | MeanAbsoluteError: 0.0418497622013092 | Loss: 0.0027155633747148 | Epoch: 37 | \n\n\nMeanAbsoluteError: 0.0921027287840843 | Loss: 0.0098722960370091 | Epoch: 38 | MeanAbsoluteError: 0.0444820486009121 | Loss: 0.0032841981916975 | Epoch: 39 | \n\n\nMeanAbsoluteError: 0.0267196223139763 | Loss: 0.0020752533365829 | Epoch: 40 | MeanAbsoluteError: 0.0520577244460583 | Loss: 0.0035231751210701 | Epoch: 41 | \n\n\nMeanAbsoluteError: 0.0286450237035751 | Loss: 0.0013095136651268 | Epoch: 42 | MeanAbsoluteError: 0.0841861665248871 | Loss: 0.0078707832055023 | Epoch: 43 | \n\n\nMeanAbsoluteError: 0.0603476725518703 | Loss: 0.0055438662574698 | Epoch: 44 | MeanAbsoluteError: 0.0502706393599510 | Loss: 0.0042966067379054 | Epoch: 45 | \n\n\nMeanAbsoluteError: 0.0772638618946075 | Loss: 0.0071885076423104 | Epoch: 46 | MeanAbsoluteError: 0.0671011283993721 | Loss: 0.0052439364461372 | Epoch: 47 | \n\n\nMeanAbsoluteError: 0.0444660224020481 | Loss: 0.0026622511213645 | Epoch: 48 | MeanAbsoluteError: 0.0874466896057129 | Loss: 0.0098583904238274 | Epoch: 49 | \n\n\nMeanAbsoluteError: 0.0316732488572598 | Loss: 0.0020529174899611 | Epoch: 50 | MeanAbsoluteError: 0.0279488116502762 | Loss: 0.0013189636833536 | Epoch: 51 | \n\n\nMeanAbsoluteError: 0.1126269325613976 | Loss: 0.0149403880708493 | Epoch: 52 | MeanAbsoluteError: 0.0253227520734072 | Loss: 0.0012036828568223 | Epoch: 53 | \n\n\nMeanAbsoluteError: 0.0267635639756918 | Loss: 0.0016729601148444 | Epoch: 54 | MeanAbsoluteError: 0.0381686165928841 | Loss: 0.0025215701517971 | Epoch: 55 | \n\n\nMeanAbsoluteError: 0.0304826274514198 | Loss: 0.0020707782151966 | Epoch: 56 | MeanAbsoluteError: 0.0505411922931671 | Loss: 0.0032462998060510 | Epoch: 57 | \n\n\nMeanAbsoluteError: 0.0287924911826849 | Loss: 0.0020590132447139 | Epoch: 58 | MeanAbsoluteError: 0.0414799638092518 | Loss: 0.0023208344444776 | Epoch: 59 | \n\n\nMeanAbsoluteError: 0.0765146687626839 | Loss: 0.0071452638098540 | Epoch: 60 | MeanAbsoluteError: 0.0775769650936127 | Loss: 0.0073455982626631 | Early stopping at epoch 59\nFold: 4\nEpoch: 1 | \n\n\nMeanAbsoluteError: 0.1514385640621185 | Loss: 0.0357459982713828 | Epoch: 2 | MeanAbsoluteError: 0.1605004370212555 | Loss: 0.0361737743593179 | Epoch: 3 | \n\n\nMeanAbsoluteError: 0.0806147456169128 | Loss: 0.0108424092401177 | Epoch: 4 | MeanAbsoluteError: 0.1227970793843269 | Loss: 0.0203366774635819 | Epoch: 5 | \n\n\nMeanAbsoluteError: 0.0747844353318214 | Loss: 0.0094273441220419 | Epoch: 6 | MeanAbsoluteError: 0.0862156078219414 | Loss: 0.0095506514279315 | Epoch: 7 | \n\n\nMeanAbsoluteError: 0.0722914189100266 | Loss: 0.0086861469138127 | Epoch: 8 | MeanAbsoluteError: 0.0724989399313927 | Loss: 0.0079954230190756 | Epoch: 9 | \n\n\nMeanAbsoluteError: 0.0745676234364510 | Loss: 0.0077011100052354 | Epoch: 10 | MeanAbsoluteError: 0.0491537339985371 | Loss: 0.0039134459802881 | Epoch: 11 | \n\n\nMeanAbsoluteError: 0.0700660869479179 | Loss: 0.0077364158530075 | Epoch: 12 | MeanAbsoluteError: 0.0464042536914349 | Loss: 0.0036279122488430 | Epoch: 13 | \n\n\nMeanAbsoluteError: 0.0842755809426308 | Loss: 0.0093502603435459 | Epoch: 14 | MeanAbsoluteError: 0.0664646402001381 | Loss: 0.0066575635081300 | Epoch: 15 | \n\n\nMeanAbsoluteError: 0.0827620476484299 | Loss: 0.0099086636462464 | Epoch: 16 | MeanAbsoluteError: 0.0683882832527161 | Loss: 0.0064558467935198 | Epoch: 17 | \n\n\nMeanAbsoluteError: 0.0719112083315849 | Loss: 0.0065859162535232 | Epoch: 18 | MeanAbsoluteError: 0.0973545834422112 | Loss: 0.0116373905195640 | Epoch: 19 | \n\n\nMeanAbsoluteError: 0.0839462280273438 | Loss: 0.0106433534708161 | Epoch: 20 | MeanAbsoluteError: 0.0838665515184402 | Loss: 0.0085816286289348 | Epoch: 21 | \n\n\nMeanAbsoluteError: 0.0494406186044216 | Loss: 0.0042909547337331 | Epoch: 22 | MeanAbsoluteError: 0.0521163716912270 | Loss: 0.0042309163568112 | Epoch: 23 | \n\n\nMeanAbsoluteError: 0.0596068389713764 | Loss: 0.0046383107815368 | Epoch: 24 | MeanAbsoluteError: 0.0521014221012592 | Loss: 0.0041986252226007 | Epoch: 25 | \n\n\nMeanAbsoluteError: 0.0434372238814831 | Loss: 0.0040412821242801 | Epoch: 26 | MeanAbsoluteError: 0.0365696884691715 | Loss: 0.0026817987941635 | Epoch: 27 | \n\n\nMeanAbsoluteError: 0.0420030318200588 | Loss: 0.0033097558099633 | Epoch: 28 | MeanAbsoluteError: 0.0514625608921051 | Loss: 0.0043059411243750 | Epoch: 29 | \n\n\nMeanAbsoluteError: 0.0713812410831451 | Loss: 0.0067926097231416 | Epoch: 30 | MeanAbsoluteError: 0.0479836687445641 | Loss: 0.0035191340586887 | Epoch: 31 | \n\n\nMeanAbsoluteError: 0.0400275103747845 | Loss: 0.0031396552356175 | Epoch: 32 | MeanAbsoluteError: 0.0526493266224861 | Loss: 0.0044798342188677 | Epoch: 33 | \n\n\nMeanAbsoluteError: 0.0456048399209976 | Loss: 0.0029108393937349 | Epoch: 34 | MeanAbsoluteError: 0.0385325998067856 | Loss: 0.0024958368426619 | Epoch: 35 | \n\n\nMeanAbsoluteError: 0.0454170741140842 | Loss: 0.0033794439111191 | Epoch: 36 | MeanAbsoluteError: 0.0341375172138214 | Loss: 0.0028066968370695 | Epoch: 37 | \n\n\nMeanAbsoluteError: 0.0590975955128670 | Loss: 0.0050150440074503 | Epoch: 38 | MeanAbsoluteError: 0.0276094432920218 | Loss: 0.0021367075454551 | Epoch: 39 | \n\n\nMeanAbsoluteError: 0.0327249653637409 | Loss: 0.0020687592572918 | Epoch: 40 | MeanAbsoluteError: 0.0562841556966305 | Loss: 0.0039516744347146 | Epoch: 41 | \n\n\nMeanAbsoluteError: 0.0450308769941330 | Loss: 0.0037826731210001 | Epoch: 42 | MeanAbsoluteError: 0.0715281590819359 | Loss: 0.0079610900272830 | Epoch: 43 | \n\n\nMeanAbsoluteError: 0.0262169465422630 | Loss: 0.0015466173667497 | Epoch: 44 | MeanAbsoluteError: 0.0666737332940102 | Loss: 0.0065075833207140 | Epoch: 45 | \n\n\nMeanAbsoluteError: 0.0598567016422749 | Loss: 0.0047310979571193 | Epoch: 46 | MeanAbsoluteError: 0.0375489816069603 | Loss: 0.0026907791571620 | Epoch: 47 | \n\n\nMeanAbsoluteError: 0.0341865122318268 | Loss: 0.0020197276026011 | Epoch: 48 | MeanAbsoluteError: 0.0299750156700611 | Loss: 0.0015668082901706 | Epoch: 49 | \n\n\nMeanAbsoluteError: 0.0489186793565750 | Loss: 0.0039847489410581 | Epoch: 50 | MeanAbsoluteError: 0.0662066861987114 | Loss: 0.0063510939049033 | Epoch: 51 | \n\n\nMeanAbsoluteError: 0.0466285236179829 | Loss: 0.0036128816964964 | Epoch: 52 | MeanAbsoluteError: 0.0363123603165150 | Loss: 0.0019496765274268 | Epoch: 53 | \n\n\nMeanAbsoluteError: 0.0297894421964884 | Loss: 0.0019253837862589 | Epoch: 54 | MeanAbsoluteError: 0.0772207453846931 | Loss: 0.0074105618091730 | Epoch: 55 | \n\n\nMeanAbsoluteError: 0.0391364395618439 | Loss: 0.0027718948504816 | Epoch: 56 | MeanAbsoluteError: 0.0607472322881222 | Loss: 0.0058959815472078 | Epoch: 57 | \n\n\nMeanAbsoluteError: 0.0443273447453976 | Loss: 0.0029747906194713 | Epoch: 58 | MeanAbsoluteError: 0.0565614216029644 | Loss: 0.0051450308663054 | Epoch: 59 | \n\n\nMeanAbsoluteError: 0.0366040430963039 | Loss: 0.0023358557328510 | Epoch: 60 | MeanAbsoluteError: 0.0286666657775640 | Loss: 0.0018488362212128 | Epoch: 61 | \n\n\nMeanAbsoluteError: 0.0370644293725491 | Loss: 0.0034640602848063 | Epoch: 62 | MeanAbsoluteError: 0.0363792553544044 | Loss: 0.0024923449337411 | Epoch: 63 | \n\n\nMeanAbsoluteError: 0.0481804646551609 | Loss: 0.0034175076289102 | Epoch: 64 | MeanAbsoluteError: 0.0256719868630171 | Loss: 0.0012862814093331 | Epoch: 65 | \n\n\nMeanAbsoluteError: 0.0460330620408058 | Loss: 0.0036752702390703 | Epoch: 66 | MeanAbsoluteError: 0.0517075434327126 | Loss: 0.0038369793731433 | Epoch: 67 | \n\n\nMeanAbsoluteError: 0.0241170693188906 | Loss: 0.0014083647334841 | Epoch: 68 | MeanAbsoluteError: 0.0476483926177025 | Loss: 0.0038018013493946 | Epoch: 69 | \n\n\nMeanAbsoluteError: 0.0578094273805618 | Loss: 0.0043261012671372 | Epoch: 70 | MeanAbsoluteError: 0.0354970656335354 | Loss: 0.0021817542325992 | Epoch: 71 | \n\n\nMeanAbsoluteError: 0.0277659706771374 | Loss: 0.0014435418774016 | Epoch: 72 | MeanAbsoluteError: 0.0342580229043961 | Loss: 0.0021925798903864 | Epoch: 73 | \n\n\nMeanAbsoluteError: 0.0506163984537125 | Loss: 0.0042302688727012 | Epoch: 74 | MeanAbsoluteError: 0.0263762734830379 | Loss: 0.0012236600517868 | Epoch: 75 | \n\n\nMeanAbsoluteError: 0.0327108353376389 | Loss: 0.0022147434400932 | Epoch: 76 | MeanAbsoluteError: 0.0401576422154903 | Loss: 0.0027690668715737 | Epoch: 77 | \n\n\nMeanAbsoluteError: 0.0376440733671188 | Loss: 0.0027790313358240 | Epoch: 78 | MeanAbsoluteError: 0.0352755859494209 | Loss: 0.0027781487420165 | Epoch: 79 | \n\n\nMeanAbsoluteError: 0.0539066120982170 | Loss: 0.0045657978715518 | Epoch: 80 | MeanAbsoluteError: 0.0371148027479649 | Loss: 0.0024883459778861 | Epoch: 81 | \n\n\nMeanAbsoluteError: 0.0229254085570574 | Loss: 0.0015004761315560 | Epoch: 82 | MeanAbsoluteError: 0.0263133216649294 | Loss: 0.0016597884801181 | Epoch: 83 | \n\n\nMeanAbsoluteError: 0.0466855205595493 | Loss: 0.0039504610064726 | Epoch: 84 | MeanAbsoluteError: 0.0343150645494461 | Loss: 0.0023751278819803 | Epoch: 85 | \n\n\nMeanAbsoluteError: 0.0330653153359890 | Loss: 0.0019100183003152 | Epoch: 86 | MeanAbsoluteError: 0.0297854598611593 | Loss: 0.0016291662961101 | Epoch: 87 | \n\n\nMeanAbsoluteError: 0.0244446750730276 | Loss: 0.0012023922754452 | Epoch: 88 | MeanAbsoluteError: 0.0307070203125477 | Loss: 0.0013540663416139 | Epoch: 89 | \n\n\nMeanAbsoluteError: 0.0284834727644920 | Loss: 0.0016851099790074 | Epoch: 90 | MeanAbsoluteError: 0.0327592641115189 | Loss: 0.0022194716371954 | Epoch: 91 | \n\n\nMeanAbsoluteError: 0.0294019300490618 | Loss: 0.0018419920592211 | Epoch: 92 | MeanAbsoluteError: 0.0467455349862576 | Loss: 0.0030609717449317 | Epoch: 93 | \n\n\nMeanAbsoluteError: 0.0390585213899612 | Loss: 0.0023200103493694 | Epoch: 94 | MeanAbsoluteError: 0.0290260910987854 | Loss: 0.0015629471454304 | Epoch: 95 | \n\n\nMeanAbsoluteError: 0.0312719047069550 | Loss: 0.0025763658766384 | Epoch: 96 | MeanAbsoluteError: 0.0435429662466049 | Loss: 0.0029812559682446 | Epoch: 97 | \n\n\nMeanAbsoluteError: 0.0457846671342850 | Loss: 0.0032055502435049 | Epoch: 98 | MeanAbsoluteError: 0.0325483568012714 | Loss: 0.0018701697453462 | Epoch: 99 | \n\n\nMeanAbsoluteError: 0.0523834042251110 | Loss: 0.0040996556725496 | Epoch: 100 | MeanAbsoluteError: 0.0305967908352613 | Loss: 0.0016787028110300 | Epoch: 101 | \n\n\nMeanAbsoluteError: 0.0297599583864212 | Loss: 0.0015300053346436 | Epoch: 102 | MeanAbsoluteError: 0.0409477725625038 | Loss: 0.0029761611054150 | Epoch: 103 | \n\n\nMeanAbsoluteError: 0.0243237614631653 | Loss: 0.0014045981448502 | Epoch: 104 | MeanAbsoluteError: 0.0391042716801167 | Loss: 0.0030777796771592 | Epoch: 105 | \n\n\nMeanAbsoluteError: 0.0477706827223301 | Loss: 0.0033327991124959 | Epoch: 106 | MeanAbsoluteError: 0.0324060283601284 | Loss: 0.0016559864251086 | Epoch: 107 | \n\n\nMeanAbsoluteError: 0.0733323544263840 | Loss: 0.0068320642010524 | Epoch: 108 | MeanAbsoluteError: 0.0350386202335358 | Loss: 0.0021443626297136 | Epoch: 109 | \n\n\nMeanAbsoluteError: 0.0290016178041697 | Loss: 0.0013661358209972 | Epoch: 110 | MeanAbsoluteError: 0.0419034771621227 | Loss: 0.0026097416865433 | Epoch: 111 | \n\n\nMeanAbsoluteError: 0.0356074534356594 | Loss: 0.0025239702797710 | Epoch: 112 | MeanAbsoluteError: 0.0194163918495178 | Loss: 0.0009662528707570 | Epoch: 113 | \n\n\nMeanAbsoluteError: 0.0463360361754894 | Loss: 0.0040385628459402 | Epoch: 114 | MeanAbsoluteError: 0.0366642847657204 | Loss: 0.0022223678041393 | Epoch: 115 | \n\n\nMeanAbsoluteError: 0.0302158910781145 | Loss: 0.0027975914249859 | Epoch: 116 | MeanAbsoluteError: 0.0387972220778465 | Loss: 0.0021083403172759 | Epoch: 117 | \n\n\nMeanAbsoluteError: 0.0242009498178959 | Loss: 0.0009381682835878 | Epoch: 118 | MeanAbsoluteError: 0.0250363666564226 | Loss: 0.0011959396976566 | Epoch: 119 | \n\n\nMeanAbsoluteError: 0.0245595909655094 | Loss: 0.0011050662478038 | Epoch: 120 | MeanAbsoluteError: 0.0520405136048794 | Loss: 0.0044582203532068 | Epoch: 121 | \n\n\nMeanAbsoluteError: 0.0564197860658169 | Loss: 0.0042377294112857 | Epoch: 122 | MeanAbsoluteError: 0.0584289021790028 | Loss: 0.0040966762552181 | Epoch: 123 | \n\n\nMeanAbsoluteError: 0.0505269616842270 | Loss: 0.0032138569513336 | Epoch: 124 | MeanAbsoluteError: 0.0541839972138405 | Loss: 0.0038546169928920 | Epoch: 125 | \n\n\nMeanAbsoluteError: 0.0314659327268600 | Loss: 0.0032592798804846 | Epoch: 126 | MeanAbsoluteError: 0.0309383794665337 | Loss: 0.0017616296469126 | Epoch: 127 | \n\n\nMeanAbsoluteError: 0.0259263254702091 | Loss: 0.0012428166715276 | Epoch: 128 | MeanAbsoluteError: 0.0460400804877281 | Loss: 0.0037656780869628 | Epoch: 129 | \n\n\nMeanAbsoluteError: 0.0411160886287689 | Loss: 0.0024717622436583 | Epoch: 130 | MeanAbsoluteError: 0.0312079004943371 | Loss: 0.0016355594808164 | Epoch: 131 | \n\n\nMeanAbsoluteError: 0.0355005376040936 | Loss: 0.0029493122128770 | Epoch: 132 | MeanAbsoluteError: 0.0256740115582943 | Loss: 0.0012963211316114 | Epoch: 133 | \n\n\nMeanAbsoluteError: 0.0404820293188095 | Loss: 0.0022524095838889 | Epoch: 134 | MeanAbsoluteError: 0.0336085520684719 | Loss: 0.0016871277878706 | Epoch: 135 | \n\n\nMeanAbsoluteError: 0.0268746186047792 | Loss: 0.0014845404791861 | Epoch: 136 | MeanAbsoluteError: 0.0366922877728939 | Loss: 0.0023676717179254 | Epoch: 137 | \n\n\nMeanAbsoluteError: 0.0379302836954594 | Loss: 0.0027087222372826 | Epoch: 138 | MeanAbsoluteError: 0.0320591889321804 | Loss: 0.0017812311416492 | Epoch: 139 | \n\n\nMeanAbsoluteError: 0.0403431206941605 | Loss: 0.0028926679750349 | Epoch: 140 | MeanAbsoluteError: 0.0306163113564253 | Loss: 0.0021392983247866 | Epoch: 141 | \n\n\nMeanAbsoluteError: 0.0430852472782135 | Loss: 0.0028004427798665 | Epoch: 142 | MeanAbsoluteError: 0.0596091113984585 | Loss: 0.0046385931603324 | Epoch: 143 | \n\n\nMeanAbsoluteError: 0.0348816476762295 | Loss: 0.0017921975455605 | Epoch: 144 | MeanAbsoluteError: 0.0265861600637436 | Loss: 0.0013725084852642 | Epoch: 145 | \n\n\nMeanAbsoluteError: 0.0267718117684126 | Loss: 0.0011947644569983 | Epoch: 146 | MeanAbsoluteError: 0.0274367071688175 | Loss: 0.0011865112240999 | Epoch: 147 | \n\n\nMeanAbsoluteError: 0.0327492803335190 | Loss: 0.0020140875623418 | Epoch: 148 | MeanAbsoluteError: 0.0362480804324150 | Loss: 0.0022873677740930 | Epoch: 149 | \n\n\nMeanAbsoluteError: 0.0313147753477097 | Loss: 0.0014512072420285 | Early stopping at epoch 148\nFold: 5\nEpoch: 1 | MeanAbsoluteError: 0.1940964311361313 | Loss: 0.0529680634633853 | Epoch: 2 | \n\n\nMeanAbsoluteError: 0.1037736386060715 | Loss: 0.0151608680518201 | Epoch: 3 | MeanAbsoluteError: 0.1024381071329117 | Loss: 0.0154673360431424 | Epoch: 4 | \n\n\nMeanAbsoluteError: 0.0883397012948990 | Loss: 0.0112916637713519 | Epoch: 5 | MeanAbsoluteError: 0.0680453702807426 | Loss: 0.0067569168212895 | Epoch: 6 | \n\n\nMeanAbsoluteError: 0.0911471396684647 | Loss: 0.0121865520755259 | Epoch: 7 | MeanAbsoluteError: 0.1721939146518707 | Loss: 0.0397345061199023 | Epoch: 8 | \n\n\nMeanAbsoluteError: 0.1259443312883377 | Loss: 0.0199666316262805 | Epoch: 9 | MeanAbsoluteError: 0.0925381109118462 | Loss: 0.0129636928009299 | Epoch: 10 | \n\n\nMeanAbsoluteError: 0.0907426178455353 | Loss: 0.0101297019192806 | Epoch: 11 | MeanAbsoluteError: 0.0601799376308918 | Loss: 0.0049524624437953 | Epoch: 12 | \n\n\nMeanAbsoluteError: 0.1286324560642242 | Loss: 0.0217508662921878 | Epoch: 13 | MeanAbsoluteError: 0.0932965502142906 | Loss: 0.0108293710419765 | Epoch: 14 | \n\n\nMeanAbsoluteError: 0.0450498312711716 | Loss: 0.0035154006014077 | Epoch: 15 | MeanAbsoluteError: 0.0713797658681870 | Loss: 0.0070702599791380 | Epoch: 16 | \n\n\nMeanAbsoluteError: 0.1086339652538300 | Loss: 0.0142873059958220 | Epoch: 17 | MeanAbsoluteError: 0.0609544739127159 | Loss: 0.0046950522989321 | Epoch: 18 | \n\n\nMeanAbsoluteError: 0.0664475932717323 | Loss: 0.0057559199452114 | Epoch: 19 | MeanAbsoluteError: 0.0841013416647911 | Loss: 0.0088164334257062 | Epoch: 20 | \n\n\nMeanAbsoluteError: 0.0537449233233929 | Loss: 0.0045036757543970 | Epoch: 21 | MeanAbsoluteError: 0.0596281811594963 | Loss: 0.0054884293125584 | Epoch: 22 | \n\n\nMeanAbsoluteError: 0.1098860353231430 | Loss: 0.0169710179146093 | Epoch: 23 | MeanAbsoluteError: 0.0455439053475857 | Loss: 0.0031112148963775 | Epoch: 24 | \n\n\nMeanAbsoluteError: 0.0625247731804848 | Loss: 0.0053505155419071 | Epoch: 25 | MeanAbsoluteError: 0.0468878075480461 | Loss: 0.0034016058153401 | Epoch: 26 | \n\n\nMeanAbsoluteError: 0.0708045139908791 | Loss: 0.0078202823284440 | Epoch: 27 | MeanAbsoluteError: 0.0439370870590210 | Loss: 0.0030981164801723 | Epoch: 28 | \n\n\nMeanAbsoluteError: 0.0740147307515144 | Loss: 0.0073594601753239 | Epoch: 29 | MeanAbsoluteError: 0.0774781480431557 | Loss: 0.0073728546715127 | Epoch: 30 | \n\n\nMeanAbsoluteError: 0.0415130034089088 | Loss: 0.0035930987528095 | Epoch: 31 | MeanAbsoluteError: 0.0401997119188309 | Loss: 0.0032763489468310 | Epoch: 32 | \n\n\nMeanAbsoluteError: 0.0427530556917191 | Loss: 0.0042804747533340 | Epoch: 33 | MeanAbsoluteError: 0.0492745824158192 | Loss: 0.0031553881708533 | Epoch: 34 | \n\n\nMeanAbsoluteError: 0.0303096286952496 | Loss: 0.0016219085037637 | Epoch: 35 | MeanAbsoluteError: 0.0859863311052322 | Loss: 0.0111991691474731 | Epoch: 36 | \n\n\nMeanAbsoluteError: 0.0342826209962368 | Loss: 0.0020417858434554 | Epoch: 37 | MeanAbsoluteError: 0.0534961894154549 | Loss: 0.0048779838969215 | Epoch: 38 | \n\n\nMeanAbsoluteError: 0.0819529369473457 | Loss: 0.0085897359352272 | Epoch: 39 | MeanAbsoluteError: 0.0246742181479931 | Loss: 0.0013767497372240 | Epoch: 40 | \n\n\nMeanAbsoluteError: 0.0411276705563068 | Loss: 0.0033256742798795 | Epoch: 41 | MeanAbsoluteError: 0.0993355959653854 | Loss: 0.0113503547170414 | Epoch: 42 | \n\n\nMeanAbsoluteError: 0.0454586856067181 | Loss: 0.0035414176348310 | Epoch: 43 | MeanAbsoluteError: 0.0261768456548452 | Loss: 0.0014484697211838 | Epoch: 44 | \n\n\nMeanAbsoluteError: 0.0417152270674706 | Loss: 0.0031107160388134 | Epoch: 45 | MeanAbsoluteError: 0.0344084613025188 | Loss: 0.0018070030715675 | Epoch: 46 | \n\n\nMeanAbsoluteError: 0.0276019889861345 | Loss: 0.0021961276988105 | Epoch: 47 | MeanAbsoluteError: 0.0328064598143101 | Loss: 0.0016252908569116 | Epoch: 48 | \n\n\nMeanAbsoluteError: 0.0443143174052238 | Loss: 0.0029611022910103 | Epoch: 49 | MeanAbsoluteError: 0.0415125563740730 | Loss: 0.0023983201558272 | Epoch: 50 | \n\n\nMeanAbsoluteError: 0.0462977215647697 | Loss: 0.0032892203442036 | Epoch: 51 | MeanAbsoluteError: 0.0663610398769379 | Loss: 0.0065803276733137 | Epoch: 52 | \n\n\nMeanAbsoluteError: 0.0283489897847176 | Loss: 0.0016895886040472 | Epoch: 53 | MeanAbsoluteError: 0.0465280637145042 | Loss: 0.0039929317829844 | Epoch: 54 | \n\n\nMeanAbsoluteError: 0.0611473359167576 | Loss: 0.0051516056992114 | Epoch: 55 | MeanAbsoluteError: 0.0268218237906694 | Loss: 0.0016489440738671 | Epoch: 56 | \n\n\nMeanAbsoluteError: 0.0874474719166756 | Loss: 0.0087892629134540 | Epoch: 57 | MeanAbsoluteError: 0.0687697604298592 | Loss: 0.0057661175512924 | Epoch: 58 | \n\n\nMeanAbsoluteError: 0.0342605821788311 | Loss: 0.0027194319028730 | Epoch: 59 | MeanAbsoluteError: 0.0557247921824455 | Loss: 0.0042155644713113 | Epoch: 60 | \n\n\nMeanAbsoluteError: 0.0257919151335955 | Loss: 0.0012255321735910 | Epoch: 61 | MeanAbsoluteError: 0.0276594310998917 | Loss: 0.0015496385413616 | Epoch: 62 | \n\n\nMeanAbsoluteError: 0.0615654364228249 | Loss: 0.0045509674013234 | Epoch: 63 | MeanAbsoluteError: 0.0441809929907322 | Loss: 0.0035958632629795 | Epoch: 64 | \n\n\nMeanAbsoluteError: 0.0449857600033283 | Loss: 0.0041857361659193 | Epoch: 65 | MeanAbsoluteError: 0.0447483509778976 | Loss: 0.0030539053438518 | Epoch: 66 | \n\n\nMeanAbsoluteError: 0.0266420654952526 | Loss: 0.0012135091954126 | Epoch: 67 | MeanAbsoluteError: 0.0315947160124779 | Loss: 0.0018551998229948 | Epoch: 68 | \n\n\nMeanAbsoluteError: 0.0688930079340935 | Loss: 0.0073656662761305 | Epoch: 69 | MeanAbsoluteError: 0.0273813456296921 | Loss: 0.0023852646000495 | Epoch: 70 | \n\n\nMeanAbsoluteError: 0.0329585596919060 | Loss: 0.0021188824679344 | Epoch: 71 | MeanAbsoluteError: 0.0303115434944630 | Loss: 0.0013720564736734 | Epoch: 72 | \n\n\nMeanAbsoluteError: 0.0498217679560184 | Loss: 0.0039318983371441 | Epoch: 73 | MeanAbsoluteError: 0.0257346369326115 | Loss: 0.0015555420283748 | Epoch: 74 | \n\n\nMeanAbsoluteError: 0.0312236174941063 | Loss: 0.0022571678318155 | Epoch: 75 | MeanAbsoluteError: 0.0393389575183392 | Loss: 0.0024816477402615 | Epoch: 76 | \n\n\nMeanAbsoluteError: 0.0359724126756191 | Loss: 0.0028056018726112 | Epoch: 77 | MeanAbsoluteError: 0.0314324982464314 | Loss: 0.0016929625820082 | Epoch: 78 | \n\n\nMeanAbsoluteError: 0.0335180014371872 | Loss: 0.0030893175146328 | Epoch: 79 | MeanAbsoluteError: 0.0297219734638929 | Loss: 0.0016205535122516 | Epoch: 80 | \n\n\nMeanAbsoluteError: 0.0293328072875738 | Loss: 0.0018226521105344 | Epoch: 81 | MeanAbsoluteError: 0.0293821450322866 | Loss: 0.0016776093521352 | Epoch: 82 | \n\n\nMeanAbsoluteError: 0.0255958512425423 | Loss: 0.0021173147621224 | Epoch: 83 | MeanAbsoluteError: 0.0250193979591131 | Loss: 0.0011375471904802 | Epoch: 84 | \n\n\nMeanAbsoluteError: 0.0278031583875418 | Loss: 0.0014556702002525 | Epoch: 85 | MeanAbsoluteError: 0.0485100522637367 | Loss: 0.0038420466410641 | Epoch: 86 | \n\n\nMeanAbsoluteError: 0.0231483560055494 | Loss: 0.0013799175749927 | Epoch: 87 | MeanAbsoluteError: 0.0594229884445667 | Loss: 0.0052324445165980 | Epoch: 88 | \n\n\nMeanAbsoluteError: 0.0420096628367901 | Loss: 0.0028526257105673 | Epoch: 89 | MeanAbsoluteError: 0.0304953996092081 | Loss: 0.0019655581944300 | Epoch: 90 | \n\n\nMeanAbsoluteError: 0.0194805413484573 | Loss: 0.0006444030486119 | Epoch: 91 | MeanAbsoluteError: 0.0262201353907585 | Loss: 0.0013431029622622 | Epoch: 92 | \n\n\nMeanAbsoluteError: 0.0275841187685728 | Loss: 0.0016856150446424 | Epoch: 93 | MeanAbsoluteError: 0.0243037994951010 | Loss: 0.0009297275593361 | Epoch: 94 | \n\n\nMeanAbsoluteError: 0.0282230041921139 | Loss: 0.0014793445365145 | Epoch: 95 | MeanAbsoluteError: 0.0289127826690674 | Loss: 0.0013967997085554 | Epoch: 96 | \n\n\nMeanAbsoluteError: 0.0555804073810577 | Loss: 0.0041483210292287 | Epoch: 97 | MeanAbsoluteError: 0.0374896377325058 | Loss: 0.0025486974314285 | Epoch: 98 | \n\n\nMeanAbsoluteError: 0.0342480652034283 | Loss: 0.0020118495158385 | Epoch: 99 | MeanAbsoluteError: 0.0355798751115799 | Loss: 0.0033515990384890 | Epoch: 100 | \n\n\nMeanAbsoluteError: 0.0288295391947031 | Loss: 0.0014184577493534 | Epoch: 101 | MeanAbsoluteError: 0.0475284010171890 | Loss: 0.0031602265707289 | Epoch: 102 | \n\n\nMeanAbsoluteError: 0.0339241400361061 | Loss: 0.0029046865798031 | Epoch: 103 | MeanAbsoluteError: 0.0291924960911274 | Loss: 0.0019352338545454 | Epoch: 104 | \n\n\nMeanAbsoluteError: 0.0508102923631668 | Loss: 0.0035383596729774 | Epoch: 105 | MeanAbsoluteError: 0.0380007065832615 | Loss: 0.0022487461750503 | Epoch: 106 | \n\n\nMeanAbsoluteError: 0.0505762770771980 | Loss: 0.0044018738509084 | Epoch: 107 | MeanAbsoluteError: 0.0358751714229584 | Loss: 0.0019559680681246 | Epoch: 108 | \n\n\nMeanAbsoluteError: 0.0291441138833761 | Loss: 0.0015848892149874 | Epoch: 109 | MeanAbsoluteError: 0.0406509526073933 | Loss: 0.0026180989270170 | Epoch: 110 | \n\n\nMeanAbsoluteError: 0.0226606409996748 | Loss: 0.0009156773851898 | Epoch: 111 | MeanAbsoluteError: 0.0298017971217632 | Loss: 0.0018288045097366 | Epoch: 112 | \n\n\nMeanAbsoluteError: 0.0711091011762619 | Loss: 0.0067013068876874 | Epoch: 113 | MeanAbsoluteError: 0.0249262191355228 | Loss: 0.0012476877163863 | Epoch: 114 | \n\n\nMeanAbsoluteError: 0.0554409921169281 | Loss: 0.0040316201316623 | Epoch: 115 | MeanAbsoluteError: 0.0285650901496410 | Loss: 0.0013543635857506 | Epoch: 116 | \n\n\nMeanAbsoluteError: 0.0249174181371927 | Loss: 0.0009794597773669 | Epoch: 117 | MeanAbsoluteError: 0.0236152820289135 | Loss: 0.0012136874317478 | Epoch: 118 | \n\n\nMeanAbsoluteError: 0.0242767669260502 | Loss: 0.0012442641555726 | Epoch: 119 | MeanAbsoluteError: 0.0743736624717712 | Loss: 0.0077060943541045 | Epoch: 120 | \n\n\nMeanAbsoluteError: 0.0318383015692234 | Loss: 0.0017043124579896 | Epoch: 121 | MeanAbsoluteError: 0.0327102579176426 | Loss: 0.0017322592208914 | Epoch: 122 | \n\n\nMeanAbsoluteError: 0.0233708266168833 | Loss: 0.0011399339642734 | Early stopping at epoch 121\nFold: 6\nEpoch: 1 | MeanAbsoluteError: 0.1773740351200104 | Loss: 0.0439214139030530 | Epoch: 2 | \n\n\nMeanAbsoluteError: 0.1051445677876472 | Loss: 0.0175915617997257 | Epoch: 3 | MeanAbsoluteError: 0.1234500408172607 | Loss: 0.0242155164910051 | Epoch: 4 | \n\n\nMeanAbsoluteError: 0.0926514565944672 | Loss: 0.0130429828109650 | Epoch: 5 | MeanAbsoluteError: 0.0761003866791725 | Loss: 0.0101591357961297 | Epoch: 6 | \n\n\nMeanAbsoluteError: 0.0905516147613525 | Loss: 0.0131743490122832 | Epoch: 7 | MeanAbsoluteError: 0.0866081267595291 | Loss: 0.0129577297036751 | Epoch: 8 | \n\n\nMeanAbsoluteError: 0.0819032266736031 | Loss: 0.0092078857661153 | Epoch: 9 | MeanAbsoluteError: 0.0539977028965950 | Loss: 0.0050384841787700 | Epoch: 10 | \n\n\nMeanAbsoluteError: 0.1006224155426025 | Loss: 0.0148330771435912 | Epoch: 11 | MeanAbsoluteError: 0.0531488284468651 | Loss: 0.0041864260028188 | Epoch: 12 | \n\n\nMeanAbsoluteError: 0.0456364862620831 | Loss: 0.0037095824149079 | Epoch: 13 | MeanAbsoluteError: 0.0384437926113605 | Loss: 0.0031080372730055 | Epoch: 14 | \n\n\nMeanAbsoluteError: 0.0558214485645294 | Loss: 0.0062420265838647 | Epoch: 15 | MeanAbsoluteError: 0.0437386184930801 | Loss: 0.0037367002223618 | Epoch: 16 | \n\n\nMeanAbsoluteError: 0.1123922765254974 | Loss: 0.0193174013581413 | Epoch: 17 | MeanAbsoluteError: 0.0388851687312126 | Loss: 0.0029144548551323 | Epoch: 18 | \n\n\nMeanAbsoluteError: 0.0535868406295776 | Loss: 0.0056025078251528 | Epoch: 19 | MeanAbsoluteError: 0.0564925819635391 | Loss: 0.0042102292287522 | Epoch: 20 | \n\n\nMeanAbsoluteError: 0.0710642561316490 | Loss: 0.0090181923005730 | Epoch: 21 | MeanAbsoluteError: 0.0710497573018074 | Loss: 0.0076552798273042 | Epoch: 22 | \n\n\nMeanAbsoluteError: 0.0518988929688931 | Loss: 0.0055474969782293 | Epoch: 23 | MeanAbsoluteError: 0.0559867918491364 | Loss: 0.0052847763021978 | Epoch: 24 | \n\n\nMeanAbsoluteError: 0.0375592298805714 | Loss: 0.0024737917925589 | Epoch: 25 | MeanAbsoluteError: 0.0413585081696510 | Loss: 0.0036574169509829 | Epoch: 26 | \n\n\nMeanAbsoluteError: 0.0309556368738413 | Loss: 0.0019542638104982 | Epoch: 27 | MeanAbsoluteError: 0.0613207370042801 | Loss: 0.0052778678050695 | Epoch: 28 | \n\n\nMeanAbsoluteError: 0.0402868539094925 | Loss: 0.0029716040097320 | Epoch: 29 | MeanAbsoluteError: 0.0369621887803078 | Loss: 0.0032839939925067 | Epoch: 30 | \n\n\nMeanAbsoluteError: 0.0567086786031723 | Loss: 0.0046753195481590 | Epoch: 31 | MeanAbsoluteError: 0.0419683158397675 | Loss: 0.0028773455414921 | Epoch: 32 | \n\n\nMeanAbsoluteError: 0.1180953085422516 | Loss: 0.0171120016334149 | Epoch: 33 | MeanAbsoluteError: 0.0586405023932457 | Loss: 0.0054926153388806 | Epoch: 34 | \n\n\nMeanAbsoluteError: 0.0966121181845665 | Loss: 0.0127073350147559 | Epoch: 35 | MeanAbsoluteError: 0.0415692850947380 | Loss: 0.0043821644951374 | Epoch: 36 | \n\n\nMeanAbsoluteError: 0.0628375560045242 | Loss: 0.0059970660905282 | Epoch: 37 | MeanAbsoluteError: 0.0417812503874302 | Loss: 0.0027488718400351 | Epoch: 38 | \n\n\nMeanAbsoluteError: 0.0451613143086433 | Loss: 0.0030788400461181 | Epoch: 39 | MeanAbsoluteError: 0.0355466157197952 | Loss: 0.0023927502423668 | Epoch: 40 | \n\n\nMeanAbsoluteError: 0.0455550663173199 | Loss: 0.0032295483845071 | Epoch: 41 | MeanAbsoluteError: 0.0287611931562424 | Loss: 0.0018859374730919 | Epoch: 42 | \n\n\nMeanAbsoluteError: 0.0602814070880413 | Loss: 0.0056687516625971 | Epoch: 43 | MeanAbsoluteError: 0.0488346852362156 | Loss: 0.0036136473958882 | Epoch: 44 | \n\n\nMeanAbsoluteError: 0.0426491312682629 | Loss: 0.0029243143239560 | Epoch: 45 | MeanAbsoluteError: 0.0672030150890350 | Loss: 0.0065451492018138 | Epoch: 46 | \n\n\nMeanAbsoluteError: 0.0582808442413807 | Loss: 0.0042237151915637 | Epoch: 47 | MeanAbsoluteError: 0.0348503887653351 | Loss: 0.0017705052562703 | Epoch: 48 | \n\n\nMeanAbsoluteError: 0.0433768704533577 | Loss: 0.0034941920491222 | Epoch: 49 | MeanAbsoluteError: 0.0369308292865753 | Loss: 0.0027118885235933 | Epoch: 50 | \n\n\nMeanAbsoluteError: 0.0419469252228737 | Loss: 0.0027373476500193 | Epoch: 51 | MeanAbsoluteError: 0.0388978123664856 | Loss: 0.0027305435237045 | Epoch: 52 | \n\n\nMeanAbsoluteError: 0.0795767754316330 | Loss: 0.0082582135040026 | Epoch: 53 | MeanAbsoluteError: 0.0290689822286367 | Loss: 0.0015348304027262 | Epoch: 54 | \n\n\nMeanAbsoluteError: 0.0735091120004654 | Loss: 0.0075749174440996 | Epoch: 55 | MeanAbsoluteError: 0.0594896189868450 | Loss: 0.0046399123966694 | Epoch: 56 | \n\n\nMeanAbsoluteError: 0.0441880561411381 | Loss: 0.0034758094698191 | Epoch: 57 | MeanAbsoluteError: 0.0337444171309471 | Loss: 0.0023495497970054 | Epoch: 58 | \n\n\nMeanAbsoluteError: 0.0750773921608925 | Loss: 0.0064214364840434 | Epoch: 59 | MeanAbsoluteError: 0.0462127178907394 | Loss: 0.0036622549478824 | Epoch: 60 | \n\n\nMeanAbsoluteError: 0.0521817691624165 | Loss: 0.0050249007136489 | Epoch: 61 | MeanAbsoluteError: 0.0702246576547623 | Loss: 0.0064261247260639 | Epoch: 62 | \n\n\nMeanAbsoluteError: 0.0561900287866592 | Loss: 0.0050264165306894 | Epoch: 63 | MeanAbsoluteError: 0.0417803041636944 | Loss: 0.0027869487933528 | Epoch: 64 | \n\n\nMeanAbsoluteError: 0.0467034578323364 | Loss: 0.0033031822218058 | Epoch: 65 | MeanAbsoluteError: 0.0987203121185303 | Loss: 0.0120486315841285 | Epoch: 66 | \n\n\nMeanAbsoluteError: 0.0334020406007767 | Loss: 0.0020290773525351 | Epoch: 67 | MeanAbsoluteError: 0.0384381487965584 | Loss: 0.0021805807930202 | Epoch: 68 | \n\n\nMeanAbsoluteError: 0.0319847911596298 | Loss: 0.0021565292767124 | Epoch: 69 | MeanAbsoluteError: 0.0505523793399334 | Loss: 0.0037706843935526 | Epoch: 70 | \n\n\nMeanAbsoluteError: 0.0428840592503548 | Loss: 0.0029401911865884 | Epoch: 71 | MeanAbsoluteError: 0.0396988950669765 | Loss: 0.0026069047027984 | Epoch: 72 | \n\n\nMeanAbsoluteError: 0.0272354967892170 | Loss: 0.0015840791871037 | Epoch: 73 | MeanAbsoluteError: 0.0524217411875725 | Loss: 0.0042650405801116 | Epoch: 74 | \n\n\nMeanAbsoluteError: 0.0336233936250210 | Loss: 0.0019344711024762 | Epoch: 75 | MeanAbsoluteError: 0.0322909913957119 | Loss: 0.0027461643442691 | Epoch: 76 | \n\n\nMeanAbsoluteError: 0.0311421751976013 | Loss: 0.0017377148391321 | Epoch: 77 | MeanAbsoluteError: 0.0399336703121662 | Loss: 0.0023065828270494 | Epoch: 78 | \n\n\nMeanAbsoluteError: 0.0717094242572784 | Loss: 0.0061883135304715 | Epoch: 79 | MeanAbsoluteError: 0.0418188795447350 | Loss: 0.0028479689633689 | Epoch: 80 | \n\n\nMeanAbsoluteError: 0.0873696133494377 | Loss: 0.0100450945946460 | Epoch: 81 | MeanAbsoluteError: 0.0315829925239086 | Loss: 0.0022852277884690 | Epoch: 82 | \n\n\nMeanAbsoluteError: 0.0337243117392063 | Loss: 0.0020317407839824 | Epoch: 83 | MeanAbsoluteError: 0.0586292035877705 | Loss: 0.0055795020979041 | Epoch: 84 | \n\n\nMeanAbsoluteError: 0.0357621125876904 | Loss: 0.0020573903983369 | Epoch: 85 | MeanAbsoluteError: 0.0501384064555168 | Loss: 0.0042150775194526 | Early stopping at epoch 84\nFold: 7\nEpoch: 1 | \n\n\nMeanAbsoluteError: 0.1181101053953171 | Loss: 0.0207998535524194 | Epoch: 2 | MeanAbsoluteError: 0.1153534948825836 | Loss: 0.0208732955730878 | Epoch: 3 | \n\n\nMeanAbsoluteError: 0.1253294646739960 | Loss: 0.0225796740358839 | Epoch: 4 | MeanAbsoluteError: 0.0700437575578690 | Loss: 0.0077568123546930 | Epoch: 5 | \n\n\nMeanAbsoluteError: 0.0905140936374664 | Loss: 0.0132385202182027 | Epoch: 6 | MeanAbsoluteError: 0.0529728308320045 | Loss: 0.0045573539190138 | Epoch: 7 | \n\n\nMeanAbsoluteError: 0.0688776522874832 | Loss: 0.0072345151028668 | Epoch: 8 | MeanAbsoluteError: 0.0744774863123894 | Loss: 0.0089734583161771 | Epoch: 9 | \n\n\nMeanAbsoluteError: 0.0736842602491379 | Loss: 0.0072026569933559 | Epoch: 10 | MeanAbsoluteError: 0.0389936976134777 | Loss: 0.0026266262015829 | Epoch: 11 | \n\n\nMeanAbsoluteError: 0.0782508105039597 | Loss: 0.0082479237507169 | Epoch: 12 | MeanAbsoluteError: 0.0801834687590599 | Loss: 0.0083413417451084 | Epoch: 13 | \n\n\nMeanAbsoluteError: 0.0621398575603962 | Loss: 0.0054982596148665 | Epoch: 14 | MeanAbsoluteError: 0.0660902336239815 | Loss: 0.0063000959165108 | Epoch: 15 | \n\n\nMeanAbsoluteError: 0.0335745848715305 | Loss: 0.0021558927384411 | Epoch: 16 | MeanAbsoluteError: 0.0430635735392570 | Loss: 0.0030361398553046 | Epoch: 17 | \n\n\nMeanAbsoluteError: 0.0458005107939243 | Loss: 0.0042439127484193 | Epoch: 18 | MeanAbsoluteError: 0.0410297922790051 | Loss: 0.0029347268237661 | Epoch: 19 | \n\n\nMeanAbsoluteError: 0.0441776514053345 | Loss: 0.0027292787921257 | Epoch: 20 | MeanAbsoluteError: 0.0984501615166664 | Loss: 0.0122051638049575 | Epoch: 21 | \n\n\nMeanAbsoluteError: 0.0359511263668537 | Loss: 0.0021718123282951 | Epoch: 22 | MeanAbsoluteError: 0.0881988406181335 | Loss: 0.0109550640560113 | Epoch: 23 | \n\n\nMeanAbsoluteError: 0.0367610566318035 | Loss: 0.0028986775992402 | Epoch: 24 | MeanAbsoluteError: 0.0333069488406181 | Loss: 0.0017260737255968 | Epoch: 25 | \n\n\nMeanAbsoluteError: 0.0441513620316982 | Loss: 0.0028870862711651 | Epoch: 26 | MeanAbsoluteError: 0.0437800548970699 | Loss: 0.0028337441617623 | Epoch: 27 | \n\n\nMeanAbsoluteError: 0.0543140992522240 | Loss: 0.0040151120091860 | Epoch: 28 | MeanAbsoluteError: 0.0991411581635475 | Loss: 0.0118068777597868 | Epoch: 29 | \n\n\nMeanAbsoluteError: 0.0288309101015329 | Loss: 0.0014520277461718 | Epoch: 30 | MeanAbsoluteError: 0.0253664236515760 | Loss: 0.0012729741462793 | Epoch: 31 | \n\n\nMeanAbsoluteError: 0.0259126964956522 | Loss: 0.0012397431978920 | Epoch: 32 | MeanAbsoluteError: 0.0281384959816933 | Loss: 0.0015126011466446 | Epoch: 33 | \n\n\nMeanAbsoluteError: 0.0317005664110184 | Loss: 0.0014227875452399 | Epoch: 34 | MeanAbsoluteError: 0.0312511511147022 | Loss: 0.0015726857102261 | Epoch: 35 | \n\n\nMeanAbsoluteError: 0.0665730759501457 | Loss: 0.0057888871703583 | Epoch: 36 | MeanAbsoluteError: 0.0470962636172771 | Loss: 0.0026848312610617 | Epoch: 37 | \n\n\nMeanAbsoluteError: 0.0275910180062056 | Loss: 0.0014056670389926 | Epoch: 38 | MeanAbsoluteError: 0.0225949715822935 | Loss: 0.0009237668329241 | Epoch: 39 | \n\n\nMeanAbsoluteError: 0.0249668676406145 | Loss: 0.0011471343190911 | Epoch: 40 | MeanAbsoluteError: 0.0252728704363108 | Loss: 0.0013049602969729 | Epoch: 41 | \n\n\nMeanAbsoluteError: 0.0731166526675224 | Loss: 0.0063893144878630 | Epoch: 42 | MeanAbsoluteError: 0.0364318937063217 | Loss: 0.0020803860209596 | Epoch: 43 | \n\n\nMeanAbsoluteError: 0.0641200914978981 | Loss: 0.0059991085257095 | Epoch: 44 | MeanAbsoluteError: 0.0402345769107342 | Loss: 0.0027360056500094 | Epoch: 45 | \n\n\nMeanAbsoluteError: 0.0999278351664543 | Loss: 0.0135999687660772 | Epoch: 46 | MeanAbsoluteError: 0.0353898741304874 | Loss: 0.0017384161115982 | Epoch: 47 | \n\n\nMeanAbsoluteError: 0.0250954087823629 | Loss: 0.0011521725956789 | Epoch: 48 | MeanAbsoluteError: 0.0306360535323620 | Loss: 0.0015543243767192 | Epoch: 49 | \n\n\nMeanAbsoluteError: 0.0545343905687332 | Loss: 0.0040793491151327 | Epoch: 50 | MeanAbsoluteError: 0.0540192797780037 | Loss: 0.0037610104414993 | Epoch: 51 | \n\n\nMeanAbsoluteError: 0.0466722473502159 | Loss: 0.0031522543151648 | Epoch: 52 | MeanAbsoluteError: 0.0296292826533318 | Loss: 0.0016569966795102 | Epoch: 53 | \n\n\nMeanAbsoluteError: 0.0592239722609520 | Loss: 0.0044626619648905 | Epoch: 54 | MeanAbsoluteError: 0.0574457496404648 | Loss: 0.0045362501673830 | Epoch: 55 | \n\n\nMeanAbsoluteError: 0.0551084093749523 | Loss: 0.0043240901476775 | Epoch: 56 | MeanAbsoluteError: 0.0469177626073360 | Loss: 0.0039049181639432 | Epoch: 57 | \n\n\nMeanAbsoluteError: 0.0525187142193317 | Loss: 0.0034824634382788 | Epoch: 58 | MeanAbsoluteError: 0.0262475796043873 | Loss: 0.0012162955737529 | Epoch: 59 | \n\n\nMeanAbsoluteError: 0.0404592081904411 | Loss: 0.0035595883516810 | Epoch: 60 | MeanAbsoluteError: 0.0738216787576675 | Loss: 0.0063488618291628 | Epoch: 61 | \n\n\nMeanAbsoluteError: 0.0207434110343456 | Loss: 0.0008147807429151 | Epoch: 62 | MeanAbsoluteError: 0.0747889131307602 | Loss: 0.0063467595654611 | Epoch: 63 | \n\n\nMeanAbsoluteError: 0.0857309922575951 | Loss: 0.0086719789900459 | Epoch: 64 | MeanAbsoluteError: 0.0217770058661699 | Loss: 0.0007570192952139 | Epoch: 65 | \n\n\nMeanAbsoluteError: 0.0422223806381226 | Loss: 0.0025495063388147 | Epoch: 66 | MeanAbsoluteError: 0.0258751586079597 | Loss: 0.0012570427430686 | Epoch: 67 | \n\n\nMeanAbsoluteError: 0.0204244144260883 | Loss: 0.0009361278644064 | Epoch: 68 | MeanAbsoluteError: 0.0335008427500725 | Loss: 0.0020614913754308 | Epoch: 69 | \n\n\nMeanAbsoluteError: 0.0493414290249348 | Loss: 0.0029193841440317 | Epoch: 70 | MeanAbsoluteError: 0.0528689920902252 | Loss: 0.0039249445902757 | Epoch: 71 | \n\n\nMeanAbsoluteError: 0.0239349585026503 | Loss: 0.0011352377645940 | Epoch: 72 | MeanAbsoluteError: 0.0381822362542152 | Loss: 0.0019076018092724 | Epoch: 73 | \n\n\nMeanAbsoluteError: 0.0302163250744343 | Loss: 0.0017691476163096 | Epoch: 74 | MeanAbsoluteError: 0.0226002819836140 | Loss: 0.0012321534427778 | Epoch: 75 | \n\n\nMeanAbsoluteError: 0.0696694478392601 | Loss: 0.0059372557756992 | Epoch: 76 | MeanAbsoluteError: 0.0233580525964499 | Loss: 0.0013044937603319 | Epoch: 77 | \n\n\nMeanAbsoluteError: 0.0349907167255878 | Loss: 0.0017468114114868 | Epoch: 78 | MeanAbsoluteError: 0.0436283685266972 | Loss: 0.0030336518897317 | Epoch: 79 | \n\n\nMeanAbsoluteError: 0.0210644751787186 | Loss: 0.0008677685014286 | Epoch: 80 | MeanAbsoluteError: 0.0756637826561928 | Loss: 0.0071904012718453 | Epoch: 81 | \n\n\nMeanAbsoluteError: 0.0225141961127520 | Loss: 0.0009310801945573 | Epoch: 82 | MeanAbsoluteError: 0.0373008884489536 | Loss: 0.0020972181541415 | Epoch: 83 | \n\n\nMeanAbsoluteError: 0.0223175119608641 | Loss: 0.0012254775501788 | Epoch: 84 | MeanAbsoluteError: 0.0304762106388807 | Loss: 0.0019173311571089 | Epoch: 85 | \n\n\nMeanAbsoluteError: 0.0253804940730333 | Loss: 0.0012278735890644 | Epoch: 86 | MeanAbsoluteError: 0.0448698997497559 | Loss: 0.0025643626174245 | Epoch: 87 | \n\n\nMeanAbsoluteError: 0.0273349545896053 | Loss: 0.0017297964659519 | Epoch: 88 | MeanAbsoluteError: 0.0240903813391924 | Loss: 0.0009489376165080 | Epoch: 89 | \n\n\nMeanAbsoluteError: 0.0310506895184517 | Loss: 0.0017849312951932 | Epoch: 90 | MeanAbsoluteError: 0.0280214548110962 | Loss: 0.0014390910733849 | Epoch: 91 | \n\n\nMeanAbsoluteError: 0.0250516384840012 | Loss: 0.0009422168693093 | Epoch: 92 | MeanAbsoluteError: 0.0515293888747692 | Loss: 0.0032855225547862 | Epoch: 93 | \n\n\nMeanAbsoluteError: 0.0422587841749191 | Loss: 0.0023549312295822 | Epoch: 94 | MeanAbsoluteError: 0.0211135335266590 | Loss: 0.0010021254767288 | Epoch: 95 | \n\n\nMeanAbsoluteError: 0.0238582175225019 | Loss: 0.0022915812095072 | Epoch: 96 | MeanAbsoluteError: 0.0298856254667044 | Loss: 0.0013761315494776 | Early stopping at epoch 95\nFold: 8\nEpoch: 1 | \n\n\nMeanAbsoluteError: 0.1431737393140793 | Loss: 0.0297155630273315 | Epoch: 2 | MeanAbsoluteError: 0.0979822054505348 | Loss: 0.0149032766572558 | Epoch: 3 | \n\n\nMeanAbsoluteError: 0.1129568964242935 | Loss: 0.0186832501696279 | Epoch: 4 | MeanAbsoluteError: 0.0943659320473671 | Loss: 0.0125634294056978 | Epoch: 5 | \n\n\nMeanAbsoluteError: 0.0553855448961258 | Loss: 0.0045964737297394 | Epoch: 6 | MeanAbsoluteError: 0.1556160897016525 | Loss: 0.0288750012047016 | Epoch: 7 | \n\n\nMeanAbsoluteError: 0.0534265078604221 | Loss: 0.0055840972345322 | Epoch: 8 | MeanAbsoluteError: 0.0493400245904922 | Loss: 0.0042354307997112 | Epoch: 9 | \n\n\nMeanAbsoluteError: 0.0946155488491058 | Loss: 0.0114883354936655 | Epoch: 10 | MeanAbsoluteError: 0.0423538126051426 | Loss: 0.0027401172466433 | Epoch: 11 | \n\n\nMeanAbsoluteError: 0.0351461879909039 | Loss: 0.0020505198761104 | Epoch: 12 | MeanAbsoluteError: 0.0480113923549652 | Loss: 0.0040886364877224 | Epoch: 13 | \n\n\nMeanAbsoluteError: 0.0439841262996197 | Loss: 0.0038868219573767 | Epoch: 14 | MeanAbsoluteError: 0.0638391748070717 | Loss: 0.0054950068095842 | Epoch: 15 | \n\n\nMeanAbsoluteError: 0.1192435994744301 | Loss: 0.0159111410522690 | Epoch: 16 | MeanAbsoluteError: 0.0589677467942238 | Loss: 0.0052910261124802 | Epoch: 17 | \n\n\nMeanAbsoluteError: 0.0729183182120323 | Loss: 0.0082608756358520 | Epoch: 18 | MeanAbsoluteError: 0.1073377057909966 | Loss: 0.0140280528710439 | Epoch: 19 | \n\n\nMeanAbsoluteError: 0.0503072515130043 | Loss: 0.0031655384585834 | Epoch: 20 | MeanAbsoluteError: 0.0477770604193211 | Loss: 0.0032537641057458 | Epoch: 21 | \n\n\nMeanAbsoluteError: 0.0945181250572205 | Loss: 0.0103931006115790 | Epoch: 22 | MeanAbsoluteError: 0.1071113124489784 | Loss: 0.0133012296775213 | Epoch: 23 | \n\n\nMeanAbsoluteError: 0.1143421381711960 | Loss: 0.0153395225867056 | Epoch: 24 | MeanAbsoluteError: 0.0863622650504112 | Loss: 0.0086360396100925 | Epoch: 25 | \n\n\nMeanAbsoluteError: 0.0397533327341080 | Loss: 0.0027962174857608 | Epoch: 26 | MeanAbsoluteError: 0.0846616327762604 | Loss: 0.0085669091831033 | Epoch: 27 | \n\n\nMeanAbsoluteError: 0.0651302039623260 | Loss: 0.0055486265247544 | Epoch: 28 | MeanAbsoluteError: 0.0617596469819546 | Loss: 0.0051428441388103 | Epoch: 29 | \n\n\nMeanAbsoluteError: 0.0416619293391705 | Loss: 0.0028471509173799 | Epoch: 30 | MeanAbsoluteError: 0.0667578577995300 | Loss: 0.0072206025047658 | Epoch: 31 | \n\n\nMeanAbsoluteError: 0.0665900632739067 | Loss: 0.0057332516970256 | Epoch: 32 | MeanAbsoluteError: 0.0492728725075722 | Loss: 0.0039361229461904 | Epoch: 33 | \n\n\nMeanAbsoluteError: 0.0287870652973652 | Loss: 0.0014105396201977 | Epoch: 34 | MeanAbsoluteError: 0.0765824392437935 | Loss: 0.0078775890064068 | Epoch: 35 | \n\n\nMeanAbsoluteError: 0.0240901187062263 | Loss: 0.0012200706024977 | Epoch: 36 | MeanAbsoluteError: 0.0312281101942062 | Loss: 0.0015832204864217 | Epoch: 37 | \n\n\nMeanAbsoluteError: 0.0459063164889812 | Loss: 0.0026319806840127 | Epoch: 38 | MeanAbsoluteError: 0.0482817403972149 | Loss: 0.0033260556743838 | Epoch: 39 | \n\n\nMeanAbsoluteError: 0.0221337098628283 | Loss: 0.0010073897898949 | Epoch: 40 | MeanAbsoluteError: 0.0266560502350330 | Loss: 0.0012543881535888 | Epoch: 41 | \n\n\nMeanAbsoluteError: 0.0456602275371552 | Loss: 0.0031009974638717 | Epoch: 42 | MeanAbsoluteError: 0.0508091226220131 | Loss: 0.0034397990048791 | Epoch: 43 | \n\n\nMeanAbsoluteError: 0.0592089258134365 | Loss: 0.0048350690228220 | Epoch: 44 | MeanAbsoluteError: 0.1064393594861031 | Loss: 0.0138514584933336 | Epoch: 45 | \n\n\nMeanAbsoluteError: 0.0305355302989483 | Loss: 0.0014669969274949 | Epoch: 46 | MeanAbsoluteError: 0.1018797606229782 | Loss: 0.0115100211965350 | Epoch: 47 | \n\n\nMeanAbsoluteError: 0.0365908853709698 | Loss: 0.0018272739700758 | Epoch: 48 | MeanAbsoluteError: 0.0455583520233631 | Loss: 0.0027226381666528 | Epoch: 49 | \n\n\nMeanAbsoluteError: 0.0324256122112274 | Loss: 0.0017734024485645 | Epoch: 50 | MeanAbsoluteError: 0.0700961798429489 | Loss: 0.0063161553922468 | Epoch: 51 | \n\n\nMeanAbsoluteError: 0.0339218154549599 | Loss: 0.0018092689570040 | Epoch: 52 | MeanAbsoluteError: 0.0395412147045135 | Loss: 0.0031876995792398 | Epoch: 53 | \n\n\nMeanAbsoluteError: 0.0467526912689209 | Loss: 0.0033993757007500 | Epoch: 54 | MeanAbsoluteError: 0.0657270252704620 | Loss: 0.0050424695229874 | Epoch: 55 | \n\n\nMeanAbsoluteError: 0.0267228260636330 | Loss: 0.0012468975417925 | Epoch: 56 | MeanAbsoluteError: 0.0888774991035461 | Loss: 0.0104726223776547 | Epoch: 57 | \n\n\nMeanAbsoluteError: 0.0554147996008396 | Loss: 0.0036517197731882 | Epoch: 58 | MeanAbsoluteError: 0.0862249732017517 | Loss: 0.0086900711847612 | Epoch: 59 | \n\n\nMeanAbsoluteError: 0.0930708870291710 | Loss: 0.0117698269896209 | Epoch: 60 | MeanAbsoluteError: 0.0540821738541126 | Loss: 0.0039154727083559 | Epoch: 61 | \n\n\nMeanAbsoluteError: 0.0537774898111820 | Loss: 0.0038655340814820 | Epoch: 62 | MeanAbsoluteError: 0.0358793921768665 | Loss: 0.0019586821883702 | Epoch: 63 | \n\n\nMeanAbsoluteError: 0.0589980781078339 | Loss: 0.0045726656501826 | Epoch: 64 | MeanAbsoluteError: 0.0345667302608490 | Loss: 0.0017900427024310 | Epoch: 65 | \n\n\nMeanAbsoluteError: 0.0501065701246262 | Loss: 0.0042323238292458 | Epoch: 66 | MeanAbsoluteError: 0.0297361034899950 | Loss: 0.0014620681736582 | Epoch: 67 | \n\n\nMeanAbsoluteError: 0.0429092869162560 | Loss: 0.0024519963548161 | Epoch: 68 | MeanAbsoluteError: 0.0476307719945908 | Loss: 0.0035094571783422 | Epoch: 69 | \n\n\nMeanAbsoluteError: 0.0951257795095444 | Loss: 0.0117127123073890 | Epoch: 70 | MeanAbsoluteError: 0.0943414121866226 | Loss: 0.0099429420482081 | Epoch: 71 | \n\n\nMeanAbsoluteError: 0.0720366686582565 | Loss: 0.0061199199408293 | Early stopping at epoch 70\nFold: 9\nEpoch: 1 | MeanAbsoluteError: 0.1086572632193565 | Loss: 0.0201941847156447 | Epoch: 2 | \n\n\nMeanAbsoluteError: 0.0934930890798569 | Loss: 0.0132137790967066 | Epoch: 3 | MeanAbsoluteError: 0.0819859951734543 | Loss: 0.0120301532308356 | Epoch: 4 | \n\n\nMeanAbsoluteError: 0.1148278936743736 | Loss: 0.0181591486415038 | Epoch: 5 | MeanAbsoluteError: 0.0935956314206123 | Loss: 0.0131809331763249 | Epoch: 6 | \n\n\nMeanAbsoluteError: 0.0536819882690907 | Loss: 0.0049353318038182 | Epoch: 7 | MeanAbsoluteError: 0.0684894397854805 | Loss: 0.0075561053728541 | Epoch: 8 | \n\n\nMeanAbsoluteError: 0.0468758679926395 | Loss: 0.0042865142369500 | Epoch: 9 | MeanAbsoluteError: 0.1544614732265472 | Loss: 0.0271111378589502 | Epoch: 10 | MeanAbsoluteError: 0.0847063735127449 | Loss: 0.0097189633390651 | \n\n\nEpoch: 11 | MeanAbsoluteError: 0.0736495330929756 | Loss: 0.0074686508339185 | Epoch: 12 | \n\n\nMeanAbsoluteError: 0.0432135835289955 | Loss: 0.0031628017851080 | Epoch: 13 | MeanAbsoluteError: 0.1651920378208160 | Loss: 0.0308150535879227 | Epoch: 14 | \n\n\nMeanAbsoluteError: 0.0511817075312138 | Loss: 0.0040703032147856 | Epoch: 15 | MeanAbsoluteError: 0.0866676270961761 | Loss: 0.0099664122725909 | Epoch: 16 | \n\n\nMeanAbsoluteError: 0.0734004080295563 | Loss: 0.0079386382399557 | Epoch: 17 | MeanAbsoluteError: 0.0390841849148273 | Loss: 0.0031982973674670 | Epoch: 18 | \n\n\nMeanAbsoluteError: 0.0533525831997395 | Loss: 0.0053185556652562 | Epoch: 19 | MeanAbsoluteError: 0.0935209915041924 | Loss: 0.0104045784100890 | Epoch: 20 | \n\n\nMeanAbsoluteError: 0.0363047607243061 | Loss: 0.0024912555538601 | Epoch: 21 | MeanAbsoluteError: 0.0479883439838886 | Loss: 0.0043351766653359 | Epoch: 22 | \n\n\nMeanAbsoluteError: 0.0610373467206955 | Loss: 0.0052513868297235 | Epoch: 23 | MeanAbsoluteError: 0.0976396948099136 | Loss: 0.0114679692599636 | Epoch: 24 | \n\n\nMeanAbsoluteError: 0.0613874159753323 | Loss: 0.0052542760610007 | Epoch: 25 | MeanAbsoluteError: 0.0984010919928551 | Loss: 0.0114450192508789 | Epoch: 26 | \n\n\nMeanAbsoluteError: 0.0693091303110123 | Loss: 0.0061025300528854 | Epoch: 27 | MeanAbsoluteError: 0.0398853309452534 | Loss: 0.0028328646260958 | Epoch: 28 | \n\n\nMeanAbsoluteError: 0.0648953393101692 | Loss: 0.0056319030431601 | Epoch: 29 | MeanAbsoluteError: 0.0658134296536446 | Loss: 0.0058128746011509 | Epoch: 30 | \n\n\nMeanAbsoluteError: 0.0419357866048813 | Loss: 0.0025325226284062 | Epoch: 31 | MeanAbsoluteError: 0.0540123097598553 | Loss: 0.0047163527208165 | Epoch: 32 | \n\n\nMeanAbsoluteError: 0.1496698707342148 | Loss: 0.0284518737059373 | Epoch: 33 | MeanAbsoluteError: 0.0338962376117706 | Loss: 0.0020971461154449 | Epoch: 34 | \n\n\nMeanAbsoluteError: 0.0420939400792122 | Loss: 0.0029378762253775 | Epoch: 35 | MeanAbsoluteError: 0.0465684644877911 | Loss: 0.0034515825637545 | Epoch: 36 | \n\n\nMeanAbsoluteError: 0.0472426787018776 | Loss: 0.0035645313865434 | Epoch: 37 | MeanAbsoluteError: 0.0555932484567165 | Loss: 0.0044940011038517 | Epoch: 38 | \n\n\nMeanAbsoluteError: 0.0334420390427113 | Loss: 0.0018805347678538 | Epoch: 39 | MeanAbsoluteError: 0.0620423182845116 | Loss: 0.0047945086844265 | Epoch: 40 | \n\n\nMeanAbsoluteError: 0.0577748380601406 | Loss: 0.0045770559853946 | Epoch: 41 | MeanAbsoluteError: 0.0485756210982800 | Loss: 0.0030834896830269 | Epoch: 42 | \n\n\nMeanAbsoluteError: 0.0622712858021259 | Loss: 0.0048845905201653 | Epoch: 43 | MeanAbsoluteError: 0.0626275464892387 | Loss: 0.0051192051301209 | Epoch: 44 | \n\n\nMeanAbsoluteError: 0.0280416067689657 | Loss: 0.0012979594545099 | Epoch: 45 | MeanAbsoluteError: 0.0287515502423048 | Loss: 0.0015638152097101 | Epoch: 46 | \n\n\nMeanAbsoluteError: 0.0370311625301838 | Loss: 0.0021517566817168 | Epoch: 47 | MeanAbsoluteError: 0.0365834720432758 | Loss: 0.0019869502195014 | Epoch: 48 | \n\n\nMeanAbsoluteError: 0.0498456619679928 | Loss: 0.0033377350415461 | Epoch: 49 | MeanAbsoluteError: 0.0550659671425819 | Loss: 0.0044816960759747 | Epoch: 50 | \n\n\nMeanAbsoluteError: 0.0342269428074360 | Loss: 0.0024432269274257 | Epoch: 51 | MeanAbsoluteError: 0.0326109901070595 | Loss: 0.0016954553541906 | Epoch: 52 | \n\n\nMeanAbsoluteError: 0.0275215916335583 | Loss: 0.0017103685397440 | Epoch: 53 | MeanAbsoluteError: 0.0352741926908493 | Loss: 0.0023544918580088 | Epoch: 54 | \n\n\nMeanAbsoluteError: 0.0475216731429100 | Loss: 0.0033263715449721 | Epoch: 55 | MeanAbsoluteError: 0.0550783835351467 | Loss: 0.0048227261286229 | Epoch: 56 | \n\n\nMeanAbsoluteError: 0.0269825179129839 | Loss: 0.0015262023214466 | Epoch: 57 | MeanAbsoluteError: 0.1286444514989853 | Loss: 0.0193954112294775 | Epoch: 58 | \n\n\nMeanAbsoluteError: 0.0481035858392715 | Loss: 0.0030576877492981 | Epoch: 59 | MeanAbsoluteError: 0.0701488852500916 | Loss: 0.0062899007282865 | Epoch: 60 | \n\n\nMeanAbsoluteError: 0.0348006188869476 | Loss: 0.0021571580168361 | Epoch: 61 | MeanAbsoluteError: 0.0402648746967316 | Loss: 0.0023749786241052 | Epoch: 62 | \n\n\nMeanAbsoluteError: 0.0433100834488869 | Loss: 0.0030014084320730 | Epoch: 63 | MeanAbsoluteError: 0.0829662904143333 | Loss: 0.0083932152662713 | Epoch: 64 | MeanAbsoluteError: 0.0368292331695557 | Loss: 0.0022006317314943 | \n\n\nEpoch: 65 | MeanAbsoluteError: 0.0455167181789875 | Loss: 0.0028438735484647 | Epoch: 66 | \n\n\nMeanAbsoluteError: 0.0346639454364777 | Loss: 0.0026473766237569 | Epoch: 67 | MeanAbsoluteError: 0.0280375294387341 | Loss: 0.0023740698547604 | Epoch: 68 | \n\n\nMeanAbsoluteError: 0.0393413081765175 | Loss: 0.0024064552674715 | Epoch: 69 | MeanAbsoluteError: 0.0856825336813927 | Loss: 0.0088412939714125 | Epoch: 70 | \n\n\nMeanAbsoluteError: 0.0429924204945564 | Loss: 0.0036360692734329 | Epoch: 71 | MeanAbsoluteError: 0.0370028130710125 | Loss: 0.0019261342150947 | Epoch: 72 | \n\n\nMeanAbsoluteError: 0.0283342413604259 | Loss: 0.0014326131987708 | Epoch: 73 | MeanAbsoluteError: 0.0426306538283825 | Loss: 0.0027582993923436 | Epoch: 74 | \n\n\nMeanAbsoluteError: 0.0248284824192524 | Loss: 0.0011423179440988 | Epoch: 75 | MeanAbsoluteError: 0.0842589363455772 | Loss: 0.0081789739644871 | Epoch: 76 | \n\n\nMeanAbsoluteError: 0.0541838854551315 | Loss: 0.0036633575979907 | Epoch: 77 | MeanAbsoluteError: 0.0229559559375048 | Loss: 0.0018114411118754 | Epoch: 78 | \n\n\nMeanAbsoluteError: 0.0337822660803795 | Loss: 0.0022683073050128 | Epoch: 79 | MeanAbsoluteError: 0.0265091247856617 | Loss: 0.0016316230198404 | Epoch: 80 | \n\n\nMeanAbsoluteError: 0.0424452647566795 | Loss: 0.0025676231777582 | Epoch: 81 | MeanAbsoluteError: 0.0303706694394350 | Loss: 0.0018454023632400 | Epoch: 82 | \n\n\nMeanAbsoluteError: 0.0406265556812286 | Loss: 0.0028339416290132 | Epoch: 83 | MeanAbsoluteError: 0.0215833280235529 | Loss: 0.0010552232639524 | Epoch: 84 | \n\n\nMeanAbsoluteError: 0.0894842147827148 | Loss: 0.0091304753620464 | Epoch: 85 | MeanAbsoluteError: 0.0944845750927925 | Loss: 0.0111624370687283 | Epoch: 86 | \n\n\nMeanAbsoluteError: 0.0290435925126076 | Loss: 0.0014850749284960 | Epoch: 87 | MeanAbsoluteError: 0.0415287464857101 | Loss: 0.0024133880551045 | Epoch: 88 | \n\n\nMeanAbsoluteError: 0.0618923716247082 | Loss: 0.0047182171748808 | Epoch: 89 | MeanAbsoluteError: 0.0388554185628891 | Loss: 0.0021036934877674 | Epoch: 90 | \n\n\nMeanAbsoluteError: 0.0302210804075003 | Loss: 0.0014596949868764 | Epoch: 91 | MeanAbsoluteError: 0.0506407916545868 | Loss: 0.0040071159243011 | Epoch: 92 | \n\n\nMeanAbsoluteError: 0.0830024927854538 | Loss: 0.0094769958478327 | Epoch: 93 | MeanAbsoluteError: 0.0343385227024555 | Loss: 0.0021392405503250 | Epoch: 94 | \n\n\nMeanAbsoluteError: 0.0241335630416870 | Loss: 0.0013569568803247 | Epoch: 95 | MeanAbsoluteError: 0.0242911409586668 | Loss: 0.0009741493267938 | Epoch: 96 | \n\n\nMeanAbsoluteError: 0.0336342975497246 | Loss: 0.0016523559640448 | Epoch: 97 | MeanAbsoluteError: 0.0313345417380333 | Loss: 0.0020297960346887 | Epoch: 98 | \n\n\nMeanAbsoluteError: 0.0257233269512653 | Loss: 0.0010881706100638 | Epoch: 99 | MeanAbsoluteError: 0.0198325999081135 | Loss: 0.0008587495551463 | Epoch: 100 | \n\n\nMeanAbsoluteError: 0.0739192664623260 | Loss: 0.0075177455571695 | Epoch: 101 | MeanAbsoluteError: 0.0733011737465858 | Loss: 0.0070328450618455 | Epoch: 102 | \n\n\nMeanAbsoluteError: 0.0277944896370173 | Loss: 0.0014599524751807 | Epoch: 103 | MeanAbsoluteError: 0.0258369632065296 | Loss: 0.0009560288274840 | Epoch: 104 | \n\n\nMeanAbsoluteError: 0.0678363814949989 | Loss: 0.0059429356971612 | Epoch: 105 | MeanAbsoluteError: 0.0697866082191467 | Loss: 0.0057467751455708 | Epoch: 106 | \n\n\nMeanAbsoluteError: 0.0383042171597481 | Loss: 0.0021507579412383 | Epoch: 107 | MeanAbsoluteError: 0.0477462634444237 | Loss: 0.0030369138828694 | Epoch: 108 | \n\n\nMeanAbsoluteError: 0.0220116600394249 | Loss: 0.0009775411912974 | Epoch: 109 | MeanAbsoluteError: 0.0345799624919891 | Loss: 0.0017890198483096 | Epoch: 110 | \n\n\nMeanAbsoluteError: 0.0365606099367142 | Loss: 0.0032283642839712 | Epoch: 111 | MeanAbsoluteError: 0.0220957621932030 | Loss: 0.0010646011886330 | Epoch: 112 | \n\n\nMeanAbsoluteError: 0.0753240957856178 | Loss: 0.0066646417387976 | Epoch: 113 | MeanAbsoluteError: 0.0539340972900391 | Loss: 0.0041204620994484 | Epoch: 114 | \n\n\nMeanAbsoluteError: 0.0637192800641060 | Loss: 0.0065724830268524 | Epoch: 115 | MeanAbsoluteError: 0.0402858294546604 | Loss: 0.0023573138124238 | Epoch: 116 | \n\n\nMeanAbsoluteError: 0.0314157530665398 | Loss: 0.0017951420382955 | Epoch: 117 | MeanAbsoluteError: 0.0276656318455935 | Loss: 0.0013175439940264 | Epoch: 118 | \n\n\nMeanAbsoluteError: 0.0851664245128632 | Loss: 0.0089700542605267 | Epoch: 119 | MeanAbsoluteError: 0.0351515971124172 | Loss: 0.0016271283697838 | Epoch: 120 | \n\n\nMeanAbsoluteError: 0.0247977878898382 | Loss: 0.0009182052319654 | Epoch: 121 | MeanAbsoluteError: 0.0274488739669323 | Loss: 0.0015607886385764 | Epoch: 122 | \n\n\nMeanAbsoluteError: 0.0235399100929499 | Loss: 0.0013098884978367 | Epoch: 123 | MeanAbsoluteError: 0.0184919293969870 | Loss: 0.0006245385582308 | Epoch: 124 | \n\n\nMeanAbsoluteError: 0.0518441386520863 | Loss: 0.0032232807985005 | Epoch: 125 | MeanAbsoluteError: 0.0244523119181395 | Loss: 0.0009476635784197 | Epoch: 126 | \n\n\nMeanAbsoluteError: 0.0464971512556076 | Loss: 0.0034786808559707 | Epoch: 127 | MeanAbsoluteError: 0.0278015658259392 | Loss: 0.0013277271243099 | Epoch: 128 | \n\n\nMeanAbsoluteError: 0.0365378223359585 | Loss: 0.0024416067261392 | Epoch: 129 | MeanAbsoluteError: 0.0276989787817001 | Loss: 0.0014137154100284 | Epoch: 130 | \n\n\nMeanAbsoluteError: 0.0659212321043015 | Loss: 0.0057641606455526 | Epoch: 131 | MeanAbsoluteError: 0.0229704063385725 | Loss: 0.0011556179849252 | Epoch: 132 | \n\n\nMeanAbsoluteError: 0.0267138648778200 | Loss: 0.0011322076562255 | Epoch: 133 | MeanAbsoluteError: 0.0414249338209629 | Loss: 0.0022467267072688 | Epoch: 134 | \n\n\nMeanAbsoluteError: 0.0194982569664717 | Loss: 0.0008207166695054 | Epoch: 135 | MeanAbsoluteError: 0.0369211584329605 | Loss: 0.0024925308893077 | Epoch: 136 | \n\n\nMeanAbsoluteError: 0.0203929059207439 | Loss: 0.0008401474232624 | Epoch: 137 | MeanAbsoluteError: 0.0270500369369984 | Loss: 0.0012536924052536 | Epoch: 138 | \n\n\nMeanAbsoluteError: 0.0290005300194025 | Loss: 0.0020525477593765 | Epoch: 139 | MeanAbsoluteError: 0.0378109216690063 | Loss: 0.0022417347197636 | Epoch: 140 | \n\n\nMeanAbsoluteError: 0.0212643630802631 | Loss: 0.0009807098764353 | Epoch: 141 | MeanAbsoluteError: 0.0309840496629477 | Loss: 0.0018699676102887 | Epoch: 142 | \n\n\nMeanAbsoluteError: 0.0380935892462730 | Loss: 0.0030575540373460 | Epoch: 143 | MeanAbsoluteError: 0.0340284518897533 | Loss: 0.0018660727386864 | Epoch: 144 | \n\n\nMeanAbsoluteError: 0.0246555376797915 | Loss: 0.0012899119935285 | Epoch: 145 | MeanAbsoluteError: 0.0276781823486090 | Loss: 0.0016606970127144 | Epoch: 146 | \n\n\nMeanAbsoluteError: 0.0267183519899845 | Loss: 0.0010897133929225 | Epoch: 147 | MeanAbsoluteError: 0.0255724135786295 | Loss: 0.0014532874920405 | Epoch: 148 | \n\n\nMeanAbsoluteError: 0.0276903063058853 | Loss: 0.0013129490947064 | Epoch: 149 | MeanAbsoluteError: 0.0435062833130360 | Loss: 0.0034787699293632 | Epoch: 150 | \n\n\nMeanAbsoluteError: 0.0238710194826126 | Loss: 0.0012850386410719 | Epoch: 151 | MeanAbsoluteError: 0.0258780866861343 | Loss: 0.0017287841541334 | Epoch: 152 | \n\n\nMeanAbsoluteError: 0.0294004250317812 | Loss: 0.0022103867309992 | Epoch: 153 | MeanAbsoluteError: 0.0572487078607082 | Loss: 0.0041400556846593 | Epoch: 154 | \n\n\nMeanAbsoluteError: 0.0548454187810421 | Loss: 0.0041622592566105 | Epoch: 155 | MeanAbsoluteError: 0.0319565646350384 | Loss: 0.0013163556174662 | Early stopping at epoch 154\nFold: 10\nEpoch: 1 | \n\n\nMeanAbsoluteError: 0.1298855543136597 | Loss: 0.0263818235924611 | Epoch: 2 | MeanAbsoluteError: 0.1006979197263718 | Loss: 0.0164990963844153 | Epoch: 3 | \n\n\nMeanAbsoluteError: 0.0947440266609192 | Loss: 0.0143637438662923 | Epoch: 4 | MeanAbsoluteError: 0.0845037847757339 | Loss: 0.0110044010485021 | Epoch: 5 | \n\n\nMeanAbsoluteError: 0.0692565664649010 | Loss: 0.0074513300787657 | Epoch: 6 | MeanAbsoluteError: 0.0825363472104073 | Loss: 0.0105282823698452 | Epoch: 7 | \n\n\nMeanAbsoluteError: 0.1221913397312164 | Loss: 0.0183285454717966 | Epoch: 8 | MeanAbsoluteError: 0.0906313732266426 | Loss: 0.0107881666805882 | Epoch: 9 | \n\n\nMeanAbsoluteError: 0.1449716538190842 | Loss: 0.0252413770470482 | Epoch: 10 | MeanAbsoluteError: 0.0650191977620125 | Loss: 0.0067279472445639 | Epoch: 11 | \n\n\nMeanAbsoluteError: 0.0473446361720562 | Loss: 0.0040090646944009 | Epoch: 12 | MeanAbsoluteError: 0.0387143865227699 | Loss: 0.0029206710325805 | Epoch: 13 | \n\n\nMeanAbsoluteError: 0.0866038575768471 | Loss: 0.0099503193408824 | Epoch: 14 | MeanAbsoluteError: 0.0368491634726524 | Loss: 0.0032107793376781 | Epoch: 15 | \n\n\nMeanAbsoluteError: 0.0804207250475883 | Loss: 0.0082785071661839 | Epoch: 16 | MeanAbsoluteError: 0.1123353689908981 | Loss: 0.0148329573611800 | Epoch: 17 | \n\n\nMeanAbsoluteError: 0.0837126076221466 | Loss: 0.0093902690479389 | Epoch: 18 | MeanAbsoluteError: 0.0488279387354851 | Loss: 0.0035847164332294 | Epoch: 19 | \n\n\nMeanAbsoluteError: 0.0722173899412155 | Loss: 0.0071606196713849 | Epoch: 20 | MeanAbsoluteError: 0.0719034373760223 | Loss: 0.0081924320771717 | Epoch: 21 | MeanAbsoluteError: 0.0372259654104710 | Loss: 0.0027907052393018 | \n\n\nEpoch: 22 | MeanAbsoluteError: 0.0371300242841244 | Loss: 0.0030595183891889 | Epoch: 23 | \n\n\nMeanAbsoluteError: 0.0658265277743340 | Loss: 0.0060779051317905 | Epoch: 24 | MeanAbsoluteError: 0.0453501604497433 | Loss: 0.0042699152836576 | Epoch: 25 | \n\n\nMeanAbsoluteError: 0.0313848294317722 | Loss: 0.0022687793254870 | Epoch: 26 | MeanAbsoluteError: 0.1155247911810875 | Loss: 0.0150866333681803 | Epoch: 27 | \n\n\nMeanAbsoluteError: 0.0325903594493866 | Loss: 0.0020944223909352 | Epoch: 28 | MeanAbsoluteError: 0.0390313304960728 | Loss: 0.0024280944680168 | Epoch: 29 | \n\n\nMeanAbsoluteError: 0.0982777997851372 | Loss: 0.0123194160226446 | Epoch: 30 | MeanAbsoluteError: 0.0956231653690338 | Loss: 0.0103951519928299 | Epoch: 31 | \n\n\nMeanAbsoluteError: 0.0377881303429604 | Loss: 0.0025416025891900 | Epoch: 32 | MeanAbsoluteError: 0.0561117269098759 | Loss: 0.0044860119143358 | Epoch: 33 | \n\n\nMeanAbsoluteError: 0.0579385906457901 | Loss: 0.0046820755188282 | Epoch: 34 | MeanAbsoluteError: 0.0396880395710468 | Loss: 0.0027096026997942 | Epoch: 35 | \n\n\nMeanAbsoluteError: 0.0394270606338978 | Loss: 0.0027102856547572 | Epoch: 36 | MeanAbsoluteError: 0.0410319194197655 | Loss: 0.0027786897911798 | Epoch: 37 | \n\n\nMeanAbsoluteError: 0.0363821312785149 | Loss: 0.0022981364074020 | Epoch: 38 | MeanAbsoluteError: 0.0548508353531361 | Loss: 0.0042668302865842 | Epoch: 39 | \n\n\nMeanAbsoluteError: 0.0532912127673626 | Loss: 0.0047393800296749 | Epoch: 40 | MeanAbsoluteError: 0.0364252813160419 | Loss: 0.0021469615659533 | Epoch: 41 | \n\n\nMeanAbsoluteError: 0.0214278642088175 | Loss: 0.0011383185371345 | Epoch: 42 | MeanAbsoluteError: 0.0272402409464121 | Loss: 0.0013241021280499 | Epoch: 43 | \n\n\nMeanAbsoluteError: 0.0313934646546841 | Loss: 0.0020190687814298 | Epoch: 44 | MeanAbsoluteError: 0.0607849061489105 | Loss: 0.0045544666667970 | Epoch: 45 | \n\n\nMeanAbsoluteError: 0.0743075385689735 | Loss: 0.0081483257862811 | Epoch: 46 | MeanAbsoluteError: 0.0319666974246502 | Loss: 0.0014114201006193 | Epoch: 47 | \n\n\nMeanAbsoluteError: 0.0981889143586159 | Loss: 0.0110198168370586 | Epoch: 48 | MeanAbsoluteError: 0.0778534114360809 | Loss: 0.0087452791810322 | Epoch: 49 | \n\n\nMeanAbsoluteError: 0.0811061263084412 | Loss: 0.0075183138251305 | Epoch: 50 | MeanAbsoluteError: 0.0445853359997272 | Loss: 0.0028506851790903 | Epoch: 51 | \n\n\nMeanAbsoluteError: 0.0375275202095509 | Loss: 0.0021379338084863 | Epoch: 52 | MeanAbsoluteError: 0.0451876670122147 | Loss: 0.0027235224395274 | Epoch: 53 | \n\n\nMeanAbsoluteError: 0.0990672484040260 | Loss: 0.0117675217871483 | Epoch: 54 | MeanAbsoluteError: 0.0380116030573845 | Loss: 0.0029481473902706 | Epoch: 55 | \n\n\nMeanAbsoluteError: 0.0561995692551136 | Loss: 0.0047397884728315 | Epoch: 56 | MeanAbsoluteError: 0.0228690821677446 | Loss: 0.0010424943421430 | Epoch: 57 | \n\n\nMeanAbsoluteError: 0.0282295607030392 | Loss: 0.0016251633194490 | Epoch: 58 | MeanAbsoluteError: 0.0772883147001266 | Loss: 0.0072104589153941 | Epoch: 59 | \n\n\nMeanAbsoluteError: 0.0829904749989510 | Loss: 0.0086207497291840 | Epoch: 60 | MeanAbsoluteError: 0.0436802767217159 | Loss: 0.0029007975334445 | Epoch: 61 | \n\n\nMeanAbsoluteError: 0.0556950345635414 | Loss: 0.0039507038533114 | Epoch: 62 | MeanAbsoluteError: 0.0502556860446930 | Loss: 0.0038230503873470 | Epoch: 63 | \n\n\nMeanAbsoluteError: 0.0315789058804512 | Loss: 0.0016308134744087 | Epoch: 64 | MeanAbsoluteError: 0.0458189137279987 | Loss: 0.0030114870840827 | Epoch: 65 | \n\n\nMeanAbsoluteError: 0.0536704771220684 | Loss: 0.0042195228429941 | Epoch: 66 | MeanAbsoluteError: 0.0405249930918217 | Loss: 0.0023841386069902 | Epoch: 67 | \n\n\nMeanAbsoluteError: 0.0705133751034737 | Loss: 0.0060252818064048 | Epoch: 68 | MeanAbsoluteError: 0.0440801009535789 | Loss: 0.0028524114302574 | Epoch: 69 | \n\n\nMeanAbsoluteError: 0.0287140551954508 | Loss: 0.0021043367951979 | Epoch: 70 | MeanAbsoluteError: 0.0570090860128403 | Loss: 0.0045036475997991 | Epoch: 71 | \n\n\nMeanAbsoluteError: 0.0285404343158007 | Loss: 0.0019902293480789 | Epoch: 72 | MeanAbsoluteError: 0.0296363979578018 | Loss: 0.0017921072083901 | Epoch: 73 | \n\n\nMeanAbsoluteError: 0.0591405294835567 | Loss: 0.0053762215941858 | Epoch: 74 | MeanAbsoluteError: 0.0351884216070175 | Loss: 0.0017670480077728 | Epoch: 75 | \n\n\nMeanAbsoluteError: 0.0273822695016861 | Loss: 0.0019253477624331 | Epoch: 76 | MeanAbsoluteError: 0.0598349869251251 | Loss: 0.0043782356123512 | Epoch: 77 | \n\n\nMeanAbsoluteError: 0.0327594466507435 | Loss: 0.0016105747065292 | Epoch: 78 | MeanAbsoluteError: 0.0295947287231684 | Loss: 0.0014898010457938 | Epoch: 79 | \n\n\nMeanAbsoluteError: 0.0355377048254013 | Loss: 0.0020530053432314 | Epoch: 80 | MeanAbsoluteError: 0.0313123911619186 | Loss: 0.0015581379680393 | Epoch: 81 | \n\n\nMeanAbsoluteError: 0.0298162456601858 | Loss: 0.0019593062147928 | Epoch: 82 | MeanAbsoluteError: 0.0249803122133017 | Loss: 0.0013179845140817 | Epoch: 83 | \n\n\nMeanAbsoluteError: 0.0273981206119061 | Loss: 0.0022060886918692 | Epoch: 84 | MeanAbsoluteError: 0.0194702968001366 | Loss: 0.0007577899808754 | Epoch: 85 | \n\n\nMeanAbsoluteError: 0.0415325723588467 | Loss: 0.0027466045710473 | Epoch: 86 | MeanAbsoluteError: 0.0358040556311607 | Loss: 0.0023915735118163 | Epoch: 87 | \n\n\nMeanAbsoluteError: 0.0498743727803230 | Loss: 0.0033780845920913 | Epoch: 88 | MeanAbsoluteError: 0.0675229430198669 | Loss: 0.0057847230480267 | Epoch: 89 | \n\n\nMeanAbsoluteError: 0.0505493879318237 | Loss: 0.0037510936829047 | Epoch: 90 | MeanAbsoluteError: 0.0232482813298702 | Loss: 0.0008837005992133 | Epoch: 91 | \n\n\nMeanAbsoluteError: 0.0594000481069088 | Loss: 0.0057154797250405 | Epoch: 92 | MeanAbsoluteError: 0.0519551932811737 | Loss: 0.0037155281841898 | Epoch: 93 | \n\n\nMeanAbsoluteError: 0.0266177486628294 | Loss: 0.0010481001092837 | Epoch: 94 | MeanAbsoluteError: 0.0462213568389416 | Loss: 0.0026863148041929 | Epoch: 95 | \n\n\nMeanAbsoluteError: 0.0721541568636894 | Loss: 0.0082577932626009 | Epoch: 96 | MeanAbsoluteError: 0.0287432316690683 | Loss: 0.0013269877459746 | Epoch: 97 | \n\n\nMeanAbsoluteError: 0.0319408662617207 | Loss: 0.0016206096266755 | Epoch: 98 | MeanAbsoluteError: 0.0474642030894756 | Loss: 0.0035635464950106 | Epoch: 99 | \n\n\nMeanAbsoluteError: 0.0378547757863998 | Loss: 0.0019473610714508 | Epoch: 100 | MeanAbsoluteError: 0.0209226962178946 | Loss: 0.0007051115121263 | Epoch: 101 | \n\n\nMeanAbsoluteError: 0.0233147051185369 | Loss: 0.0009550361383635 | Epoch: 102 | MeanAbsoluteError: 0.0242063216865063 | Loss: 0.0013649881886802 | Epoch: 103 | \n\n\nMeanAbsoluteError: 0.0690123811364174 | Loss: 0.0060489769272793 | Epoch: 104 | MeanAbsoluteError: 0.0415235869586468 | Loss: 0.0045246519596101 | Epoch: 105 | \n\n\nMeanAbsoluteError: 0.0497683100402355 | Loss: 0.0040739173463617 | Epoch: 106 | MeanAbsoluteError: 0.0534552782773972 | Loss: 0.0039743288563421 | Epoch: 107 | \n\n\nMeanAbsoluteError: 0.0403967760503292 | Loss: 0.0028004142939328 | Epoch: 108 | MeanAbsoluteError: 0.0324481874704361 | Loss: 0.0021324621338863 | Epoch: 109 | \n\n\nMeanAbsoluteError: 0.0341406017541885 | Loss: 0.0019116246481784 | Epoch: 110 | MeanAbsoluteError: 0.0325782932341099 | Loss: 0.0016893915778313 | Epoch: 111 | \n\n\nMeanAbsoluteError: 0.0351718701422215 | Loss: 0.0023971235070628 | Epoch: 112 | MeanAbsoluteError: 0.0227622631937265 | Loss: 0.0008714722688847 | Epoch: 113 | \n\n\nMeanAbsoluteError: 0.0333576686680317 | Loss: 0.0016479703167883 | Epoch: 114 | MeanAbsoluteError: 0.0247260164469481 | Loss: 0.0010437276796438 | Epoch: 115 | \n\n\nMeanAbsoluteError: 0.0325417406857014 | Loss: 0.0030681500211358 | Epoch: 116 | MeanAbsoluteError: 0.0280887968838215 | Loss: 0.0016879062213075 | Epoch: 117 | \n\n\nMeanAbsoluteError: 0.0319207087159157 | Loss: 0.0018371716007375 | Epoch: 118 | MeanAbsoluteError: 0.0374973267316818 | Loss: 0.0022781426221347 | Epoch: 119 | \n\n\nMeanAbsoluteError: 0.0367106497287750 | Loss: 0.0024588486188664 | Epoch: 120 | MeanAbsoluteError: 0.0185401961207390 | Loss: 0.0008175816922001 | Epoch: 121 | \n\n\nMeanAbsoluteError: 0.0657862722873688 | Loss: 0.0053892409822975 | Epoch: 122 | MeanAbsoluteError: 0.0446262173354626 | Loss: 0.0030999228609009 | Epoch: 123 | \n\n\nMeanAbsoluteError: 0.0246644727885723 | Loss: 0.0012081742841894 | Epoch: 124 | MeanAbsoluteError: 0.0369930528104305 | Loss: 0.0021203569217155 | Epoch: 125 | \n\n\nMeanAbsoluteError: 0.0386718511581421 | Loss: 0.0023610333804614 | Epoch: 126 | MeanAbsoluteError: 0.0537932552397251 | Loss: 0.0040968241205869 | Epoch: 127 | \n\n\nMeanAbsoluteError: 0.0514048673212528 | Loss: 0.0038026288026371 | Epoch: 128 | MeanAbsoluteError: 0.0530282296240330 | Loss: 0.0044881992059975 | Epoch: 129 | \n\n\nMeanAbsoluteError: 0.0554868355393410 | Loss: 0.0045269931075521 | Epoch: 130 | MeanAbsoluteError: 0.0439128912985325 | Loss: 0.0026564664529780 | Epoch: 131 | \n\n\nMeanAbsoluteError: 0.0612625405192375 | Loss: 0.0045806618335728 | Epoch: 132 | MeanAbsoluteError: 0.0534874349832535 | Loss: 0.0037240133119317 | Early stopping at epoch 131\n\n\n\nmetric_name = type(fun_control[\"metric_torch\"]).__name__\nprint(f\"loss: {df_eval}, Cross-validated {metric_name}: {df_metrics}\")\n\nloss: 0.0033835511800134554, Cross-validated MeanAbsoluteError: 0.04779773950576782\n\n\n\n\n19.10.4 Detailed Hyperparameter Plots\n\nfilename = \"./figures/\" + experiment_name\nspot_tuner.plot_important_hyperparameter_contour(filename=filename)\n\nl1:  27.625846168352734\ndropout_prob:  1.7781767444973497\npatience:  100.0\nsgd_momentum:  100.0\n\n\n\n\n\nContour plots.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n19.10.5 Parallel Coordinates Plot\n\nspot_tuner.parallel_plot()\n\n\n                                                \nParallel coordinates plots"
  },
  {
    "objectID": "24_spot_torch_regression.html#sec-summary-24",
    "href": "24_spot_torch_regression.html#sec-summary-24",
    "title": "19  HPT PyTorch: Regression",
    "section": "19.11 Summary and Outlook",
    "text": "19.11 Summary and Outlook\nThis tutorial presents the hyperparameter tuning open source software spotPython for PyTorch. Some of the advantages of spotPython are:\n\nNumerical and categorical hyperparameters.\nPowerful surrogate models.\nFlexible approach and easy to use.\nSimple JSON files for the specification of the hyperparameters.\nExtension of default and user specified network classes.\nNoise handling techniques.\nOnline visualization of the hyperparameter tuning process with tensorboard.\n\nCurrently, only rudimentary parallel and distributed neural network training is possible, but these capabilities will be extended in the future. The next version of spotPython will also include a more detailed documentation and more examples.\n\n\n\n\n\n\nImportant\n\n\n\nImportant: This tutorial does not present a complete benchmarking study (Bartz-Beielstein et al. 2020). The results are only preliminary and highly dependent on the local configuration (hard- and software). Our goal is to provide a first impression of the performance of the hyperparameter tuning package spotPython. The results should be interpreted with care.\n\n\n\n\n\n\nBartz-Beielstein, Thomas, Carola Doerr, Jakob Bossek, Sowmya Chandrasekaran, Tome Eftimov, Andreas Fischbach, Pascal Kerschke, et al. 2020. “Benchmarking in Optimization: Best Practice and Open Issues.” arXiv. https://arxiv.org/abs/2007.03488."
  },
  {
    "objectID": "25_spot_torch_vbdp.html#sec-setup-25",
    "href": "25_spot_torch_vbdp.html#sec-setup-25",
    "title": "20  HPT: PyTorch With VBDP",
    "section": "20.1 Step 1: Setup",
    "text": "20.1 Step 1: Setup\nBefore we consider the detailed experimental setup, we select the parameters that affect run time, initial design size and the device that is used.\n\n\n\n\n\n\nCaution: Run time and initial design size should be increased for real experiments\n\n\n\n\nMAX_TIME is set to one minute for demonstration purposes. For real experiments, this should be increased to at least 1 hour.\nINIT_SIZE is set to 5 for demonstration purposes. For real experiments, this should be increased to at least 10.\n\n\n\n\n\n\n\n\n\nNote: Device selection\n\n\n\n\nThe device can be selected by setting the variable DEVICE.\nSince we are using a simple neural net, the setting \"cpu\" is preferred (on Mac).\nIf you have a GPU, you can use \"cuda:0\" instead.\nIf DEVICE is set to None, spotPython will automatically select the device.\n\nThis might result in \"mps\" on Macs, which is not the best choice for simple neural nets.\n\n\n\n\n\nMAX_TIME = 1\nINIT_SIZE = 5\nDEVICE = None # \"cpu\" # \"cuda:0\"\n\n\nfrom spotPython.utils.device import getDevice\nDEVICE = getDevice(DEVICE)\nprint(DEVICE)\n\nmps\n\n\n\nimport os\nimport copy\nimport socket\nfrom datetime import datetime\nfrom dateutil.tz import tzlocal\nstart_time = datetime.now(tzlocal())\nHOSTNAME = socket.gethostname().split(\".\")[0]\nexperiment_name = '25-torch' + \"_\" + HOSTNAME + \"_\" + str(MAX_TIME) + \"min_\" + str(INIT_SIZE) + \"init_\" + str(start_time).split(\".\", 1)[0].replace(' ', '_')\nexperiment_name = experiment_name.replace(':', '-')\nprint(experiment_name)\nif not os.path.exists('./figures'):\n    os.makedirs('./figures')\n\n25-torch_maans03_1min_5init_2023-07-03_13-26-02"
  },
  {
    "objectID": "25_spot_torch_vbdp.html#step-2-initialization-of-the-fun_control-dictionary",
    "href": "25_spot_torch_vbdp.html#step-2-initialization-of-the-fun_control-dictionary",
    "title": "20  HPT: PyTorch With VBDP",
    "section": "20.2 Step 2: Initialization of the fun_control Dictionary",
    "text": "20.2 Step 2: Initialization of the fun_control Dictionary\n\n\n\n\n\n\nCaution: Tensorboard does not work under Windows\n\n\n\n\nSince tensorboard does not work under Windows, we recommend setting the parameter tensorboard_path to None if you are working under Windows.\n\n\n\nspotPython uses a Python dictionary for storing the information required for the hyperparameter tuning process, which was described in Section 14.2, see Initialization of the fun_control Dictionary in the documentation.\n\nfrom spotPython.utils.init import fun_control_init\nfun_control = fun_control_init(task=\"classification\",\n    tensorboard_path=\"runs/25_spot_torch_vbdp\",\n    device=DEVICE)"
  },
  {
    "objectID": "25_spot_torch_vbdp.html#sec-data-loading-25",
    "href": "25_spot_torch_vbdp.html#sec-data-loading-25",
    "title": "20  HPT: PyTorch With VBDP",
    "section": "20.3 Step 3: PyTorch Data Loading",
    "text": "20.3 Step 3: PyTorch Data Loading\n\n20.3.1 1. Load VBDP Data\n\nimport pandas as pd\nfrom sklearn.preprocessing import OrdinalEncoder\ntrain_df = pd.read_csv('./data/VBDP/train.csv')\n# remove the id column\ntrain_df = train_df.drop(columns=['id'])\nn_samples = train_df.shape[0]\nn_features = train_df.shape[1] - 1\ntarget_column = \"prognosis\"\n# Encode our prognosis labels as integers for easier decoding later\nenc = OrdinalEncoder()\ntrain_df[target_column] = enc.fit_transform(train_df[[target_column]])\n# convert all entries to int for faster processing\ntrain_df = train_df.astype(int)\n\n\nAdd logical combinations (AND, OR, XOR) of the features to the data set:\n\n\nfrom spotPython.utils.convert import add_logical_columns\ndf_new = train_df.copy()\n# save the target column using \"target_column\" as the column name\ntarget = train_df[target_column]\n# remove the target column\ndf_new = df_new.drop(columns=[target_column])\ntrain_df = add_logical_columns(df_new)\n# add the target column back\ntrain_df[target_column] = target\ntrain_df = train_df.astype(int)\n\n\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\n\nn_samples = train_df.shape[0]\nn_features = train_df.shape[1] - 1\ntrain_df.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\n\n\n\n20.3.2 Check content of the target column\n\ntrain_df[target_column].head()\n\n0     3\n1     7\n2     3\n3    10\n4     6\nName: prognosis, dtype: int64\n\n\n\nX_train, X_test, y_train, y_test = train_test_split(train_df.drop(target_column, axis=1), train_df[target_column],\n                                                    random_state=42,\n                                                    test_size=0.25,\n                                                    stratify=train_df[target_column])\ntrainset = pd.DataFrame(np.hstack((X_train, np.array(y_train).reshape(-1, 1))))\ntestset = pd.DataFrame(np.hstack((X_test, np.array(y_test).reshape(-1, 1))))\ntrainset.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\ntestset.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\nprint(train_df.shape)\nprint(trainset.shape)\nprint(testset.shape)\n\n(707, 6113)\n(530, 6113)\n(177, 6113)\n\n\n\nimport torch\nfrom sklearn.model_selection import train_test_split\nfrom spotPython.torch.dataframedataset import DataFrameDataset\ndtype_x = torch.float32\ndtype_y = torch.long\ntrain_df = DataFrameDataset(train_df, target_column=target_column, dtype_x=dtype_x, dtype_y=dtype_y)\ntrain = DataFrameDataset(trainset, target_column=target_column, dtype_x=dtype_x, dtype_y=dtype_y)\ntest = DataFrameDataset(testset, target_column=target_column, dtype_x=dtype_x, dtype_y=dtype_y)\nn_samples = len(train)\n\n\n# add the dataset to the fun_control\nfun_control.update({\"data\": train_df, # full dataset,\n               \"train\": train,\n               \"test\": test,\n               \"n_samples\": n_samples,\n               \"target_column\": target_column})"
  },
  {
    "objectID": "25_spot_torch_vbdp.html#sec-specification-of-preprocessing-model-25",
    "href": "25_spot_torch_vbdp.html#sec-specification-of-preprocessing-model-25",
    "title": "20  HPT: PyTorch With VBDP",
    "section": "20.4 Step 4: Specification of the Preprocessing Model",
    "text": "20.4 Step 4: Specification of the Preprocessing Model\nAfter the training and test data are specified and added to the fun_control dictionary, spotPython allows the specification of a data preprocessing pipeline, e.g., for the scaling of the data or for the one-hot encoding of categorical variables, see Section 14.4. This feature is not used here, so we do not change the default value (which is None)."
  },
  {
    "objectID": "25_spot_torch_vbdp.html#sec-selection-of-the-algorithm-25",
    "href": "25_spot_torch_vbdp.html#sec-selection-of-the-algorithm-25",
    "title": "20  HPT: PyTorch With VBDP",
    "section": "20.5 Step 5: Select algorithm and core_model_hyper_dict",
    "text": "20.5 Step 5: Select algorithm and core_model_hyper_dict\n\n20.5.1 Implementing a Configurable Neural Network With spotPython\nspotPython includes the Net_vbdp class which is implemented in the file netvbdp.py. The class is imported here.\nThis class inherits from the class Net_Core which is implemented in the file netcore.py, see Section 14.5.1.\n\n\n20.5.2 Add the NN Model to the fun_control Dictionary\n\nfrom spotPython.torch.netvbdp import Net_vbdp\nfrom spotPython.data.torch_hyper_dict import TorchHyperDict\nfrom spotPython.hyperparameters.values import add_core_model_to_fun_control\nfun_control = add_core_model_to_fun_control(core_model=Net_vbdp,\n                              fun_control=fun_control,\n                              hyper_dict=TorchHyperDict)\n\nThe corresponding entries for the core_model class are shown below.\n\nfun_control['core_model_hyper_dict']\n\n{'_L0': {'type': 'int',\n  'default': 64,\n  'transform': 'None',\n  'lower': 64,\n  'upper': 64},\n 'l1': {'type': 'int',\n  'default': 8,\n  'transform': 'transform_power_2_int',\n  'lower': 8,\n  'upper': 16},\n 'dropout_prob': {'type': 'float',\n  'default': 0.01,\n  'transform': 'None',\n  'lower': 0.0,\n  'upper': 0.9},\n 'lr_mult': {'type': 'float',\n  'default': 1.0,\n  'transform': 'None',\n  'lower': 0.1,\n  'upper': 10.0},\n 'batch_size': {'type': 'int',\n  'default': 4,\n  'transform': 'transform_power_2_int',\n  'lower': 1,\n  'upper': 4},\n 'epochs': {'type': 'int',\n  'default': 4,\n  'transform': 'transform_power_2_int',\n  'lower': 4,\n  'upper': 9},\n 'k_folds': {'type': 'int',\n  'default': 1,\n  'transform': 'None',\n  'lower': 1,\n  'upper': 1},\n 'patience': {'type': 'int',\n  'default': 2,\n  'transform': 'transform_power_2_int',\n  'lower': 1,\n  'upper': 5},\n 'optimizer': {'levels': ['Adadelta',\n   'Adagrad',\n   'Adam',\n   'AdamW',\n   'SparseAdam',\n   'Adamax',\n   'ASGD',\n   'NAdam',\n   'RAdam',\n   'RMSprop',\n   'Rprop',\n   'SGD'],\n  'type': 'factor',\n  'default': 'SGD',\n  'transform': 'None',\n  'class_name': 'torch.optim',\n  'core_model_parameter_type': 'str',\n  'lower': 0,\n  'upper': 12},\n 'sgd_momentum': {'type': 'float',\n  'default': 0.0,\n  'transform': 'None',\n  'lower': 0.0,\n  'upper': 1.0}}"
  },
  {
    "objectID": "25_spot_torch_vbdp.html#sec-modification-of-hyperparameters-25",
    "href": "25_spot_torch_vbdp.html#sec-modification-of-hyperparameters-25",
    "title": "20  HPT: PyTorch With VBDP",
    "section": "20.6 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model",
    "text": "20.6 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model\nspotPython provides functions for modifying the hyperparameters, their bounds and factors as well as for activating and de-activating hyperparameters without re-compilation of the Python source code. These functions were described in Section 14.6.\n\n\n\n\n\n\nCaution: Small number of epochs for demonstration purposes\n\n\n\n\nepochs and patience are set to small values for demonstration purposes. These values are too small for a real application.\nMore resonable values are, e.g.:\n\nfun_control = modify_hyper_parameter_bounds(fun_control, \"epochs\", bounds=[7, 9]) and\nfun_control = modify_hyper_parameter_bounds(fun_control, \"patience\", bounds=[2, 7])\n\n\n\n\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_bounds\n\nfun_control = modify_hyper_parameter_bounds(fun_control, \"_L0\", bounds=[n_features, n_features])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"l1\", bounds=[6, 13])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"epochs\", bounds=[2, 3])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"patience\", bounds=[2, 2])\n\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_levels\nfun_control = modify_hyper_parameter_levels(fun_control, \"optimizer\",[\"Adam\", \"AdamW\", \"Adamax\", \"NAdam\"])\n# fun_control = modify_hyper_parameter_levels(fun_control, \"optimizer\", [\"Adam\"])\n# fun_control[\"core_model_hyper_dict\"]\n\n\n20.6.1 Optimizers\nOptimizers are described in Section 14.6.1.\n\nfun_control = modify_hyper_parameter_bounds(fun_control,\n    \"lr_mult\", bounds=[1e-3, 1e-3])\nfun_control = modify_hyper_parameter_bounds(fun_control,\n    \"sgd_momentum\", bounds=[0.9, 0.9])"
  },
  {
    "objectID": "25_spot_torch_vbdp.html#step-7-selection-of-the-objective-loss-function",
    "href": "25_spot_torch_vbdp.html#step-7-selection-of-the-objective-loss-function",
    "title": "20  HPT: PyTorch With VBDP",
    "section": "20.7 Step 7: Selection of the Objective (Loss) Function",
    "text": "20.7 Step 7: Selection of the Objective (Loss) Function\n\n20.7.1 Evaluation\nThe evaluation procedure requires the specification of two elements:\n\nthe way how the data is split into a train and a test set (see Section 14.7.1)\nthe loss function (and a metric).\n\n\n\n20.7.2 Loss Functions and Metrics\nThe loss function is specified by the key \"loss_function\". We will use CrossEntropy loss for the multiclass-classification task.\n\nfrom torch.nn import CrossEntropyLoss\nloss_function = CrossEntropyLoss()\nfun_control.update({\"loss_function\": loss_function})\n\n\n\n20.7.3 Metric\n\nWe will use the MAP@k metric for the evaluation of the model. Here is an example how this metric is calculated.\n\n\nfrom spotPython.torch.mapk import MAPK\nimport torch\nmapk = MAPK(k=2)\ntarget = torch.tensor([0, 1, 2, 2])\npreds = torch.tensor(\n    [\n        [0.5, 0.2, 0.2],  # 0 is in top 2\n        [0.3, 0.4, 0.2],  # 1 is in top 2\n        [0.2, 0.4, 0.3],  # 2 is in top 2\n        [0.7, 0.2, 0.1],  # 2 isn't in top 2\n    ]\n)\nmapk.update(preds, target)\nprint(mapk.compute()) # tensor(0.6250)\n\ntensor(0.6250)\n\n\n\nfrom spotPython.torch.mapk import MAPK\nimport torchmetrics\nmetric_torch = MAPK(k=3)\nfun_control.update({\"metric_torch\": metric_torch})"
  },
  {
    "objectID": "25_spot_torch_vbdp.html#step-8-calling-the-spot-function",
    "href": "25_spot_torch_vbdp.html#step-8-calling-the-spot-function",
    "title": "20  HPT: PyTorch With VBDP",
    "section": "20.8 Step 8: Calling the SPOT Function",
    "text": "20.8 Step 8: Calling the SPOT Function\n\n20.8.1 Preparing the SPOT Call\nThe following code passes the information about the parameter ranges and bounds to spot.\n\n# extract the variable types, names, and bounds\nfrom spotPython.hyperparameters.values import (get_bound_values,\n    get_var_name,\n    get_var_type,)\nvar_type = get_var_type(fun_control)\nvar_name = get_var_name(fun_control)\nfun_control.update({\"var_type\": var_type,\n                    \"var_name\": var_name})\nlower = get_bound_values(fun_control, \"lower\")\nupper = get_bound_values(fun_control, \"upper\")\n\nNow, the dictionary fun_control contains all information needed for the hyperparameter tuning. Before the hyperparameter tuning is started, it is recommended to take a look at the experimental design. The method gen_design_table generates a design table as follows:\n\nfrom spotPython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control))\n\n| name         | type   | default   |    lower |    upper | transform             |\n|--------------|--------|-----------|----------|----------|-----------------------|\n| _L0          | int    | 64        | 6112     | 6112     | None                  |\n| l1           | int    | 8         |    6     |   13     | transform_power_2_int |\n| dropout_prob | float  | 0.01      |    0     |    0.9   | None                  |\n| lr_mult      | float  | 1.0       |    0.001 |    0.001 | None                  |\n| batch_size   | int    | 4         |    1     |    4     | transform_power_2_int |\n| epochs       | int    | 4         |    2     |    3     | transform_power_2_int |\n| k_folds      | int    | 1         |    1     |    1     | None                  |\n| patience     | int    | 2         |    2     |    2     | transform_power_2_int |\n| optimizer    | factor | SGD       |    0     |    3     | None                  |\n| sgd_momentum | float  | 0.0       |    0.9   |    0.9   | None                  |\n\n\nThis allows to check if all information is available and if the information is correct.\n\n\n20.8.2 The Objective Function fun_torch\nThe objective function fun_torch is selected next. It implements an interface from PyTorch’s training, validation, and testing methods to spotPython.\n\nfrom spotPython.fun.hypertorch import HyperTorch\nfun = HyperTorch().fun_torch\n\n\nfrom spotPython.hyperparameters.values import get_default_hyperparameters_as_array\nhyper_dict=TorchHyperDict().load()\nX_start = get_default_hyperparameters_as_array(fun_control, hyper_dict)\n\n\n\n20.8.3 Starting the Hyperparameter Tuning\nThe spotPython hyperparameter tuning is started by calling the Spot function as described in Section 14.8.4.\n\nimport numpy as np\nfrom spotPython.spot import spot\nfrom math import inf\nspot_tuner = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = inf,\n                   fun_repeats = 1,\n                   max_time = MAX_TIME,\n                   noise = False,\n                   tolerance_x = np.sqrt(np.spacing(1)),\n                   var_type = var_type,\n                   var_name = var_name,\n                   infill_criterion = \"y\",\n                   n_points = 1,\n                   seed=123,\n                   log_level = 50,\n                   show_models= False,\n                   show_progress= True,\n                   fun_control = fun_control,\n                   design_control={\"init_size\": INIT_SIZE,\n                                   \"repeats\": 1},\n                   surrogate_control={\"noise\": True,\n                                      \"cod_type\": \"norm\",\n                                      \"min_theta\": -4,\n                                      \"max_theta\": 3,\n                                      \"n_theta\": len(var_name),\n                                      \"model_fun_evals\": 10_000,\n                                      \"log_level\": 50\n                                      })\nspot_tuner.run(X_start=X_start)\n\n\nconfig: {'_L0': 6112, 'l1': 2048, 'dropout_prob': 0.17031221661559992, 'lr_mult': 0.001, 'batch_size': 16, 'epochs': 8, 'k_folds': 1, 'patience': 4, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMAPK: 0.1793154776096344 | Loss: 2.3979182073048184 | Acc: 0.1273584905660377.\nEpoch: 2 | \n\n\nMAPK: 0.1845238208770752 | Loss: 2.3979019778115407 | Acc: 0.1320754716981132.\nEpoch: 3 | \n\n\nMAPK: 0.2008928507566452 | Loss: 2.3978130817413330 | Acc: 0.1367924528301887.\nEpoch: 4 | \n\n\nMAPK: 0.1964285671710968 | Loss: 2.3978581598826816 | Acc: 0.1415094339622641.\nEpoch: 5 | \n\n\nMAPK: 0.2142857164144516 | Loss: 2.3978352035794939 | Acc: 0.1509433962264151.\nEpoch: 6 | \n\n\nMAPK: 0.2105654776096344 | Loss: 2.3977752923965454 | Acc: 0.1320754716981132.\nEpoch: 7 | \n\n\nMAPK: 0.2343750000000000 | Loss: 2.3977158580507552 | Acc: 0.1698113207547170.\nEpoch: 8 | \n\n\nMAPK: 0.2232142686843872 | Loss: 2.3976944174085344 | Acc: 0.1415094339622641.\nReturned to Spot: Validation loss: 2.3976944174085344\n\nconfig: {'_L0': 6112, 'l1': 256, 'dropout_prob': 0.19379790035512987, 'lr_mult': 0.001, 'batch_size': 8, 'epochs': 4, 'k_folds': 1, 'patience': 4, 'optimizer': 'Adamax', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMAPK: 0.1712962985038757 | Loss: 2.3980199672557689 | Acc: 0.0990566037735849.\nEpoch: 2 | \n\n\nMAPK: 0.1689814776182175 | Loss: 2.3979500134785972 | Acc: 0.0943396226415094.\nEpoch: 3 | \n\n\nMAPK: 0.1666666716337204 | Loss: 2.3979757538548223 | Acc: 0.0849056603773585.\nEpoch: 4 | \n\n\nMAPK: 0.1550925970077515 | Loss: 2.3980355969181768 | Acc: 0.0613207547169811.\nReturned to Spot: Validation loss: 2.398035596918177\n\nconfig: {'_L0': 6112, 'l1': 4096, 'dropout_prob': 0.6759063718076167, 'lr_mult': 0.001, 'batch_size': 2, 'epochs': 8, 'k_folds': 1, 'patience': 4, 'optimizer': 'NAdam', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMAPK: 0.1533019095659256 | Loss: 2.3977285038750127 | Acc: 0.0707547169811321.\nEpoch: 2 | \n\n\nMAPK: 0.1627358347177505 | Loss: 2.3976753702703513 | Acc: 0.0896226415094340.\nEpoch: 3 | \n\n\nMAPK: 0.1910377293825150 | Loss: 2.3973205426953874 | Acc: 0.1179245283018868.\nEpoch: 4 | \n\n\nMAPK: 0.1816037744283676 | Loss: 2.3971340116464868 | Acc: 0.0990566037735849.\nEpoch: 5 | \n\n\nMAPK: 0.2114779651165009 | Loss: 2.3967223572281173 | Acc: 0.1179245283018868.\nEpoch: 6 | \n\n\nMAPK: 0.1957547366619110 | Loss: 2.3965382081157758 | Acc: 0.0990566037735849.\nEpoch: 7 | \n\n\nMAPK: 0.2256288826465607 | Loss: 2.3956945887151755 | Acc: 0.1273584905660377.\nEpoch: 8 | \n\n\nMAPK: 0.2130502909421921 | Loss: 2.3951818313238755 | Acc: 0.1226415094339623.\nReturned to Spot: Validation loss: 2.3951818313238755\n\nconfig: {'_L0': 6112, 'l1': 128, 'dropout_prob': 0.37306669346546995, 'lr_mult': 0.001, 'batch_size': 4, 'epochs': 4, 'k_folds': 1, 'patience': 4, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMAPK: 0.1470125913619995 | Loss: 2.3993017583523155 | Acc: 0.0896226415094340.\nEpoch: 2 | \n\n\nMAPK: 0.1470125913619995 | Loss: 2.3992382625363908 | Acc: 0.0896226415094340.\nEpoch: 3 | \n\n\nMAPK: 0.1470125913619995 | Loss: 2.3992580557769201 | Acc: 0.0896226415094340.\nEpoch: 4 | \n\n\nMAPK: 0.1446540951728821 | Loss: 2.3991979338088125 | Acc: 0.0849056603773585.\nReturned to Spot: Validation loss: 2.3991979338088125\n\nconfig: {'_L0': 6112, 'l1': 1024, 'dropout_prob': 0.870137281216666, 'lr_mult': 0.001, 'batch_size': 8, 'epochs': 8, 'k_folds': 1, 'patience': 4, 'optimizer': 'Adam', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMAPK: 0.1288580447435379 | Loss: 2.3975733032932989 | Acc: 0.0424528301886792.\nEpoch: 2 | \n\n\nMAPK: 0.1682098656892776 | Loss: 2.3977194273913347 | Acc: 0.0943396226415094.\nEpoch: 3 | \n\n\nMAPK: 0.1743827015161514 | Loss: 2.3975409225181297 | Acc: 0.0707547169811321.\nEpoch: 4 | \n\n\nMAPK: 0.1712962985038757 | Loss: 2.3976151325084545 | Acc: 0.0990566037735849.\nEpoch: 5 | \n\n\nMAPK: 0.1797839254140854 | Loss: 2.3974891680258290 | Acc: 0.0896226415094340.\nEpoch: 6 | \n\n\nMAPK: 0.1628086417913437 | Loss: 2.3976068055188215 | Acc: 0.0849056603773585.\nEpoch: 7 | \n\n\nMAPK: 0.1658950597047806 | Loss: 2.3975864074848316 | Acc: 0.0896226415094340.\nEpoch: 8 | \n\n\nMAPK: 0.1604938358068466 | Loss: 2.3976810243394642 | Acc: 0.0801886792452830.\nReturned to Spot: Validation loss: 2.397681024339464\n\nconfig: {'_L0': 6112, 'l1': 4096, 'dropout_prob': 0.4132005099912892, 'lr_mult': 0.001, 'batch_size': 2, 'epochs': 8, 'k_folds': 1, 'patience': 4, 'optimizer': 'NAdam', 'sgd_momentum': 0.9}\n\n\nEpoch: 1 | \n\n\nMAPK: 0.2044024914503098 | Loss: 2.3973671445306741 | Acc: 0.1226415094339623.\nEpoch: 2 | \n\n\nMAPK: 0.2295597344636917 | Loss: 2.3970097910683110 | Acc: 0.1226415094339623.\nEpoch: 3 | \n\n\nMAPK: 0.2397798150777817 | Loss: 2.3966489625426957 | Acc: 0.1226415094339623.\nEpoch: 4 | \n\n\nMAPK: 0.2649370431900024 | Loss: 2.3960055427731208 | Acc: 0.1226415094339623.\nEpoch: 5 | \n\n\nMAPK: 0.2547169029712677 | Loss: 2.3953653956359289 | Acc: 0.1226415094339623.\nEpoch: 6 | \n\n\nMAPK: 0.2720125317573547 | Loss: 2.3940943771938108 | Acc: 0.1226415094339623.\nEpoch: 7 | \n\n\nMAPK: 0.2397798299789429 | Loss: 2.3928466540462567 | Acc: 0.1226415094339623.\nEpoch: 8 | \n\n\nMAPK: 0.2350628525018692 | Loss: 2.3911897168969207 | Acc: 0.1226415094339623.\nReturned to Spot: Validation loss: 2.3911897168969207\nspotPython tuning: 2.3911897168969207 [########--] 81.78% \n\n\n\nconfig: {'_L0': 6112, 'l1': 512, 'dropout_prob': 0.4054506390535282, 'lr_mult': 0.001, 'batch_size': 4, 'epochs': 8, 'k_folds': 1, 'patience': 4, 'optimizer': 'NAdam', 'sgd_momentum': 0.9}\nEpoch: 1 | \n\n\nMAPK: 0.1533019095659256 | Loss: 2.3983700455359691 | Acc: 0.0801886792452830.\nEpoch: 2 | \n\n\nMAPK: 0.1470126062631607 | Loss: 2.3983595596169525 | Acc: 0.0801886792452830.\nEpoch: 3 | \n\n\nMAPK: 0.1462264358997345 | Loss: 2.3983060413936399 | Acc: 0.0801886792452830.\nEpoch: 4 | \n\n\nMAPK: 0.1540880799293518 | Loss: 2.3982332292592750 | Acc: 0.0801886792452830.\nEpoch: 5 | \n\n\nMAPK: 0.1517295837402344 | Loss: 2.3982075970127896 | Acc: 0.0801886792452830.\nEpoch: 6 | \n\n\nMAPK: 0.1501572579145432 | Loss: 2.3981801293930918 | Acc: 0.0801886792452830.\nEpoch: 7 | \n\n\nMAPK: 0.1580188870429993 | Loss: 2.3981470701829442 | Acc: 0.0801886792452830.\nEpoch: 8 | \n\n\nMAPK: 0.1627358645200729 | Loss: 2.3980459537146226 | Acc: 0.0801886792452830.\nReturned to Spot: Validation loss: 2.3980459537146226\nspotPython tuning: 2.3911897168969207 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x1895ab2b0&gt;"
  },
  {
    "objectID": "25_spot_torch_vbdp.html#sec-tensorboard-25",
    "href": "25_spot_torch_vbdp.html#sec-tensorboard-25",
    "title": "20  HPT: PyTorch With VBDP",
    "section": "20.9 Step 9: Tensorboard",
    "text": "20.9 Step 9: Tensorboard\nThe textual output shown in the console (or code cell) can be visualized with Tensorboard as described in Section 14.9, see also the description in the documentation: Tensorboard."
  },
  {
    "objectID": "25_spot_torch_vbdp.html#sec-results-25",
    "href": "25_spot_torch_vbdp.html#sec-results-25",
    "title": "20  HPT: PyTorch With VBDP",
    "section": "20.10 Step 10: Results",
    "text": "20.10 Step 10: Results\nAfter the hyperparameter tuning run is finished, the results can be analyzed as described in Section 14.10.\n\nspot_tuner.plot_progress(log_y=False, \n    filename=\"./figures/\" + experiment_name+\"_progress.png\")\n\n\n\n\nProgress plot. Black dots denote results from the initial design. Red dots illustrate the improvement found by the surrogate model based optimization.\n\n\n\n\n\nfrom spotPython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control=fun_control, spot=spot_tuner))\n\n| name         | type   | default   |   lower |   upper |              tuned | transform             |   importance | stars   |\n|--------------|--------|-----------|---------|---------|--------------------|-----------------------|--------------|---------|\n| _L0          | int    | 64        |  6112.0 |  6112.0 |             6112.0 | None                  |         0.00 |         |\n| l1           | int    | 8         |     6.0 |    13.0 |               12.0 | transform_power_2_int |         0.00 |         |\n| dropout_prob | float  | 0.01      |     0.0 |     0.9 | 0.4132005099912892 | None                  |         0.73 | .       |\n| lr_mult      | float  | 1.0       |   0.001 |   0.001 |              0.001 | None                  |         0.00 |         |\n| batch_size   | int    | 4         |     1.0 |     4.0 |                1.0 | transform_power_2_int |       100.00 | ***     |\n| epochs       | int    | 4         |     2.0 |     3.0 |                3.0 | transform_power_2_int |         0.00 |         |\n| k_folds      | int    | 1         |     1.0 |     1.0 |                1.0 | None                  |         0.00 |         |\n| patience     | int    | 2         |     2.0 |     2.0 |                2.0 | transform_power_2_int |         0.00 |         |\n| optimizer    | factor | SGD       |     0.0 |     3.0 |                3.0 | None                  |         0.00 |         |\n| sgd_momentum | float  | 0.0       |     0.9 |     0.9 |                0.9 | None                  |         0.00 |         |\n\n\n\nspot_tuner.plot_importance(threshold=0.025,\n    filename=\"./figures/\" + experiment_name+\"_importance.png\")\n\n\n\n\nVariable importance plot, threshold 0.025.\n\n\n\n\n\n20.10.1 Get the Tuned Architecture\n\nfrom spotPython.hyperparameters.values import get_one_core_model_from_X\nX = spot_tuner.to_all_dim(spot_tuner.min_X.reshape(1,-1))\nmodel_spot = get_one_core_model_from_X(X, fun_control)\nmodel_spot\n\nNet_vbdp(\n  (fc1): Linear(in_features=6112, out_features=4096, bias=True)\n  (fc2): Linear(in_features=4096, out_features=2048, bias=True)\n  (fc3): Linear(in_features=2048, out_features=1024, bias=True)\n  (fc4): Linear(in_features=1024, out_features=512, bias=True)\n  (fc5): Linear(in_features=512, out_features=11, bias=True)\n  (relu): ReLU()\n  (softmax): Softmax(dim=1)\n  (dropout1): Dropout(p=0.4132005099912892, inplace=False)\n  (dropout2): Dropout(p=0.2066002549956446, inplace=False)\n)\n\n\n\n\n20.10.2 Evaluation of the Tuned Architecture\n\nfrom spotPython.torch.traintest import (\n    train_tuned,\n    test_tuned,\n    )\ntrain_tuned(net=model_spot, train_dataset=train,\n        loss_function=fun_control[\"loss_function\"],\n        metric=fun_control[\"metric_torch\"],\n        shuffle=True,\n        device = fun_control[\"device\"],\n        path=None,\n        task=fun_control[\"task\"],)\n\nEpoch: 1 | \n\n\nMAPK: 0.1776729971170425 | Loss: 2.3976604848537804 | Acc: 0.0707547169811321.\nEpoch: 2 | \n\n\nMAPK: 0.1658805310726166 | Loss: 2.3973652394312732 | Acc: 0.0660377358490566.\nEpoch: 3 | \n\n\nMAPK: 0.1721698343753815 | Loss: 2.3971810025988884 | Acc: 0.0849056603773585.\nEpoch: 4 | \n\n\nMAPK: 0.1933962255716324 | Loss: 2.3963526172458001 | Acc: 0.1132075471698113.\nEpoch: 5 | \n\n\nMAPK: 0.1878930777311325 | Loss: 2.3954812670653722 | Acc: 0.1132075471698113.\nEpoch: 6 | \n\n\nMAPK: 0.1902516037225723 | Loss: 2.3941759433386460 | Acc: 0.1084905660377359.\nEpoch: 7 | \n\n\nMAPK: 0.1878930926322937 | Loss: 2.3928982806655594 | Acc: 0.1084905660377359.\nEpoch: 8 | \n\n\nMAPK: 0.2012578696012497 | Loss: 2.3909529492540180 | Acc: 0.1179245283018868.\nReturned to Spot: Validation loss: 2.390952949254018\n\n\nIf path is set to a filename, e.g., path = \"model_spot_trained.pt\", the weights of the trained model will be loaded from this file.\n\ntest_tuned(net=model_spot, test_dataset=test,\n            shuffle=False,\n            loss_function=fun_control[\"loss_function\"],\n            metric=fun_control[\"metric_torch\"],\n            device = fun_control[\"device\"],\n            task=fun_control[\"task\"],)\n\nMAPK: 0.2331460714340210 | Loss: 2.3826623846975603 | Acc: 0.1299435028248588.\nFinal evaluation: Validation loss: 2.3826623846975603\nFinal evaluation: Validation metric: 0.233146071434021\n----------------------------------------------\n\n\n(2.3826623846975603, nan, tensor(0.2331))\n\n\n\n\n20.10.3 Cross-validated Evaluations\n\nThis is the evaluation that will be used in the comparison.\n\n\n\n\n\n\n\nCaution: Cross-validated Evaluations\n\n\n\n\nThe number of folds is set to 1 by default.\nHere it was changed to 3 for demonstration purposes.\nSet the number of folds to a reasonable value, e.g., 10.\nThis can be done by setting the k_folds attribute of the model as follows:\nsetattr(model_spot, \"k_folds\",  10)\n\n\n\n\nfrom spotPython.torch.traintest import evaluate_cv\n# modify k-kolds:\nsetattr(model_spot, \"k_folds\",  3)\ndf_eval, df_preds, df_metrics = evaluate_cv(net=model_spot,\n    dataset=fun_control[\"data\"],\n    loss_function=fun_control[\"loss_function\"],\n    metric=fun_control[\"metric_torch\"],\n    task=fun_control[\"task\"],\n    writer=fun_control[\"writer\"],\n    writerId=\"model_spot_cv\",\n    device = fun_control[\"device\"])\n\nFold: 1\nEpoch: 1 | \n\n\nMAPK: 0.1645480394363403 | Loss: 2.3976494235507513 | Acc: 0.1059322033898305.\nEpoch: 2 | \n\n\nMAPK: 0.1793785095214844 | Loss: 2.3972296149043713 | Acc: 0.1186440677966102.\nEpoch: 3 | \n\n\nMAPK: 0.2394067347049713 | Loss: 2.3964333251371222 | Acc: 0.1525423728813559.\nEpoch: 4 | \n\n\nMAPK: 0.2648304998874664 | Loss: 2.3949893369513044 | Acc: 0.1694915254237288.\nEpoch: 5 | \n\n\nMAPK: 0.2881355881690979 | Loss: 2.3928930355330644 | Acc: 0.1906779661016949.\nEpoch: 6 | \n\n\nMAPK: 0.3156779110431671 | Loss: 2.3891845072730113 | Acc: 0.2288135593220339.\nEpoch: 7 | \n\n\nMAPK: 0.3340395390987396 | Loss: 2.3839198573160978 | Acc: 0.2415254237288136.\nEpoch: 8 | \n\n\nMAPK: 0.3495762944221497 | Loss: 2.3775227857848344 | Acc: 0.2627118644067797.\nFold: 2\nEpoch: 1 | \n\n\nMAPK: 0.1913841664791107 | Loss: 2.3970539893134166 | Acc: 0.1186440677966102.\nEpoch: 2 | \n\n\nMAPK: 0.2231637984514236 | Loss: 2.3965012562476984 | Acc: 0.1186440677966102.\nEpoch: 3 | \n\n\nMAPK: 0.2499999552965164 | Loss: 2.3951188224857138 | Acc: 0.1186440677966102.\nEpoch: 4 | \n\n\nMAPK: 0.2344632297754288 | Loss: 2.3933223768816156 | Acc: 0.1186440677966102.\nEpoch: 5 | \n\n\nMAPK: 0.2182203084230423 | Loss: 2.3901682970887523 | Acc: 0.1186440677966102.\nEpoch: 6 | \n\n\nMAPK: 0.2083333283662796 | Loss: 2.3876159878100380 | Acc: 0.1186440677966102.\nEpoch: 7 | \n\n\nMAPK: 0.2252824753522873 | Loss: 2.3847315937785778 | Acc: 0.1186440677966102.\nEpoch: 8 | \n\n\nMAPK: 0.2492937594652176 | Loss: 2.3822026192131691 | Acc: 0.1186440677966102.\nFold: 3\nEpoch: 1 | \n\n\nMAPK: 0.1716101765632629 | Loss: 2.3976111533278126 | Acc: 0.0851063829787234.\nEpoch: 2 | \n\n\nMAPK: 0.1977400630712509 | Loss: 2.3969947241120417 | Acc: 0.1148936170212766.\nEpoch: 3 | \n\n\nMAPK: 0.2055084407329559 | Loss: 2.3959967362678656 | Acc: 0.1361702127659574.\nEpoch: 4 | \n\n\nMAPK: 0.1991525292396545 | Loss: 2.3944945173748469 | Acc: 0.1361702127659574.\nEpoch: 5 | \n\n\nMAPK: 0.1963276714086533 | Loss: 2.3925338862305980 | Acc: 0.1276595744680851.\nEpoch: 6 | \n\n\nMAPK: 0.1899717301130295 | Loss: 2.3886827089018743 | Acc: 0.1191489361702128.\nEpoch: 7 | \n\n\nMAPK: 0.1998587250709534 | Loss: 2.3855099698244513 | Acc: 0.1361702127659574.\nEpoch: 8 | \n\n\nMAPK: 0.2019773721694946 | Loss: 2.3827925758846735 | Acc: 0.1404255319148936.\n\n\n\nmetric_name = type(fun_control[\"metric_torch\"]).__name__\nprint(f\"loss: {df_eval}, Cross-validated {metric_name}: {df_metrics}\")\n\nloss: 2.3808393269608925, Cross-validated MAPK: 0.2669491469860077\n\n\n\n\n20.10.4 Detailed Hyperparameter Plots\n\nfilename = \"./figures/\" + experiment_name\nspot_tuner.plot_important_hyperparameter_contour(filename=filename)\n\ndropout_prob:  0.7261315500302485\nbatch_size:  100.0\n\n\n\n\n\nContour plots.\n\n\n\n\n\n\n20.10.5 Parallel Coordinates Plot\n\nspot_tuner.parallel_plot()\n\n\n                                                \nParallel coordinates plots\n\n\n\n# close tensorbaoard writer\nif fun_control[\"writer\"] is not None:\n    fun_control[\"writer\"].close()\n\n\n\n20.10.6 Plot all Combinations of Hyperparameters\n\nWarning: this may take a while.\n\n\nPLOT_ALL = False\nif PLOT_ALL:\n    n = spot_tuner.k\n    for i in range(n-1):\n        for j in range(i+1, n):\n            spot_tuner.plot_contour(i=i, j=j, min_z=min_z, max_z = max_z)"
  },
  {
    "objectID": "31_spot_lightning_csv.html",
    "href": "31_spot_lightning_csv.html",
    "title": "21  HPT PyTorch Lightning: VBDP",
    "section": "",
    "text": "22 Submission\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import OrdinalEncoder\nimport pandas as pd\nfrom sklearn.preprocessing import OrdinalEncoder\ntrain_df = pd.read_csv('./data/VBDP/train.csv', index_col=0)\n# remove the id column\n# train_df = train_df.drop(columns=['id'])\nn_samples = train_df.shape[0]\nn_features = train_df.shape[1] - 1\ntarget_column = \"prognosis\"\n# Encode our prognosis labels as integers for easier decoding later\nenc = OrdinalEncoder()\ny = enc.fit_transform(train_df[[target_column]])\ntest_df = pd.read_csv('./data/VBDP/test.csv', index_col=0)\ntest_df\n\n\n\n\n\n\n\n\nsudden_fever\nheadache\nmouth_bleed\nnose_bleed\nmuscle_pain\njoint_pain\nvomiting\nrash\ndiarrhea\nhypotension\n...\nlymph_swells\nbreathing_restriction\ntoe_inflammation\nfinger_inflammation\nlips_irritation\nitchiness\nulcers\ntoenail_loss\nspeech_problem\nbullseye_rash\n\n\nid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n707\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n708\n1.0\n1.0\n0.0\n1.0\n0.0\n1.0\n1.0\n1.0\n1.0\n1.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n709\n1.0\n1.0\n0.0\n1.0\n1.0\n1.0\n1.0\n0.0\n1.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n0.0\n0.0\n0.0\n0.0\n\n\n710\n0.0\n1.0\n0.0\n0.0\n0.0\n1.0\n1.0\n1.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n711\n0.0\n0.0\n1.0\n0.0\n1.0\n1.0\n0.0\n0.0\n1.0\n1.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1005\n0.0\n1.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n1006\n1.0\n0.0\n1.0\n0.0\n1.0\n1.0\n0.0\n1.0\n1.0\n1.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n1007\n1.0\n0.0\n0.0\n1.0\n1.0\n0.0\n1.0\n1.0\n1.0\n1.0\n...\n1.0\n1.0\n1.0\n1.0\n1.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n1008\n1.0\n0.0\n1.0\n1.0\n1.0\n0.0\n1.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n1.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n1009\n1.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n0.0\n1.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n\n\n303 rows × 64 columns\n# convert the test_df to a torch tensor\nX_tensor = torch.tensor(test_df.values, dtype=torch.float32)\nX_tensor.shape\n\ntorch.Size([303, 64])\nfun_control[\"device\"]\n\n'cpu'\ny = model_loaded(X_tensor.to(fun_control[\"device\"]))\ny.shape\n\ntorch.Size([303, 11])\n# convert the predictions to a numpy array\ny = y.cpu().detach().numpy()\ny\n\narray([[1.0339374e-03, 2.1091605e-02, 5.3262565e-02, ..., 4.0523899e-01,\n        2.5422257e-01, 5.0181095e-03],\n       [9.9639302e-01, 2.0018709e-03, 2.1086355e-06, ..., 3.3996358e-07,\n        3.5653440e-07, 3.2454190e-07],\n       [1.7835979e-05, 4.6545082e-07, 2.1162709e-04, ..., 7.9153629e-04,\n        1.5308069e-02, 2.5282228e-08],\n       ...,\n       [7.2369519e-14, 2.3624997e-04, 6.5417282e-08, ..., 4.6419292e-03,\n        4.0949080e-06, 4.2314281e-09],\n       [7.1186376e-05, 1.7185325e-02, 1.7605823e-03, ..., 9.6896887e-02,\n        1.5296279e-01, 8.8034321e-05],\n       [4.2483574e-08, 6.4948481e-04, 3.2100389e-03, ..., 9.1423398e-01,\n        8.9441258e-03, 1.3803144e-05]], dtype=float32)\ntest_sorted_prediction_ids = np.argsort(-y, axis=1)\ntest_top_3_prediction_ids = test_sorted_prediction_ids[:,:3]\noriginal_shape = test_top_3_prediction_ids.shape\ntest_top_3_prediction = enc.inverse_transform(test_top_3_prediction_ids.reshape(-1, 1))\ntest_top_3_prediction = test_top_3_prediction.reshape(original_shape)\ntest_df['prognosis'] = np.apply_along_axis(lambda x: np.array(' '.join(x), dtype=\"object\"), 1, test_top_3_prediction)\ntest_df['prognosis'].reset_index().to_csv('./data/VBDP/submission.csv', index=False)"
  },
  {
    "objectID": "31_spot_lightning_csv.html#sec-setup-31",
    "href": "31_spot_lightning_csv.html#sec-setup-31",
    "title": "21  HPT PyTorch Lightning: VBDP",
    "section": "21.1 Step 1: Setup",
    "text": "21.1 Step 1: Setup\nBefore we consider the detailed experimental setup, we select the parameters that affect run time, initial design size and the device that is used.\n\n\n\n\n\n\nCaution: Run time and initial design size should be increased for real experiments\n\n\n\n\nMAX_TIME is set to one minute for demonstration purposes. For real experiments, this should be increased to at least 1 hour.\nINIT_SIZE is set to 5 for demonstration purposes. For real experiments, this should be increased to at least 10.\nWORKERS is set to 0 for demonstration purposes. For real experiments, this should be increased. See the warnings that are printed when the number of workers is set to 0.\n\n\n\n\n\n\n\n\n\nNote: Device selection\n\n\n\n\nThe device can be selected by setting the variable DEVICE.\nSince we are using a simple neural net, the setting \"cpu\" is preferred (on Mac).\nIf you have a GPU, you can use \"cuda:0\" instead.\nIf DEVICE is set to \"auto\" or None, spotPython will automatically select the device.\n\nThis might result in \"mps\" on Macs, which is not the best choice for simple neural nets.\n\n\n\n\n\n\n\n\n\n\nNote: Prefix\n\n\n\n\nThe prefix PREFIX is used for the experiment name and the name of the log file.\n\n\n\n\nMAX_TIME = 1\nINIT_SIZE = 5\nDEVICE = \"cpu\" #\"cpu\" # \"cuda:0\"\nWORKERS = 0\nPREFIX=\"31\"\n\n\nfrom spotPython.utils.device import getDevice\nDEVICE = getDevice(DEVICE)\nprint(DEVICE)\n\ncpu\n\n\n\nimport os\nif not os.path.exists('./figures'):\n    os.makedirs('./figures')"
  },
  {
    "objectID": "31_spot_lightning_csv.html#step-2-initialization-of-the-fun_control-dictionary",
    "href": "31_spot_lightning_csv.html#step-2-initialization-of-the-fun_control-dictionary",
    "title": "21  HPT PyTorch Lightning: VBDP",
    "section": "21.2 Step 2: Initialization of the fun_control Dictionary",
    "text": "21.2 Step 2: Initialization of the fun_control Dictionary\n\n\n\n\n\n\nCaution: Tensorboard does not work under Windows\n\n\n\n\nSince tensorboard does not work under Windows, we recommend setting the parameter tensorboard_path to None if you are working under Windows.\n\n\n\nspotPython uses a Python dictionary for storing the information required for the hyperparameter tuning process, which was described in Section 14.2, see Initialization of the fun_control Dictionary in the documentation.\n\nfrom spotPython.utils.init import fun_control_init\nfrom spotPython.utils.file import get_experiment_name\nexperiment_name = get_experiment_name(prefix=PREFIX)\nfun_control = fun_control_init(\n    num_workers=WORKERS,\n    device=DEVICE,\n    _L_in=64,\n    _L_out=11)"
  },
  {
    "objectID": "31_spot_lightning_csv.html#sec-data-loading-31",
    "href": "31_spot_lightning_csv.html#sec-data-loading-31",
    "title": "21  HPT PyTorch Lightning: VBDP",
    "section": "21.3 Step 3: PyTorch Data Loading",
    "text": "21.3 Step 3: PyTorch Data Loading\n\n21.3.1 Lightning Dataset and DataModule\nThe data loading and preprocessing is handled by Lightning and PyTorch. It comprehends the following classes:\n\nCSVDataset: A class that loads the data from a CSV file. [SOURCE]\nCSVDataModule: A class that prepares the data for training and testing. [SOURCE]\n\n\n21.3.1.1 Taking a Look at the Data\n\nimport torch\nfrom spotPython.light.csvdataset import CSVDataset\nfrom torch.utils.data import DataLoader\nfrom torchvision.transforms import ToTensor\n\n# Create an instance of CSVDataset\ndataset = CSVDataset(csv_file=\"./data/VBDP/train.csv\", train=True)\n# show the dimensions of the input data\nprint(dataset[0][0].shape)\n# show the first element of the input data\nprint(dataset[0][0])\n# show the size of the dataset\nprint(f\"Dataset Size: {len(dataset)}\")\n\ntorch.Size([64])\ntensor([1., 1., 0., 1., 1., 1., 1., 0., 1., 1., 1., 1., 0., 0., 1., 1., 0., 0.,\n        1., 0., 1., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0.,\n        1., 0., 0., 0., 0., 0., 1., 0., 1., 0., 1., 0., 0., 0., 0., 1., 0., 1.,\n        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\nDataset Size: 707\n\n\n\n# Set batch size for DataLoader\nbatch_size = 3\n# Create DataLoader\ndataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True)\n\n# Iterate over the data in the DataLoader\nfor batch in dataloader:\n    inputs, targets = batch\n    print(f\"Batch Size: {inputs.size(0)}\")\n    print(\"---------------\")\n    print(f\"Inputs: {inputs}\")\n    print(f\"Targets: {targets}\")\n    break\n\nBatch Size: 3\n---------------\nInputs: tensor([[1., 1., 1., 1., 0., 1., 0., 1., 0., 1., 1., 0., 1., 0., 1., 0., 0., 0.,\n         0., 1., 1., 1., 1., 0., 1., 1., 1., 1., 0., 1., 0., 0., 0., 1., 1., 1.,\n         1., 1., 0., 1., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,\n         0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 0., 1., 1., 1., 1.,\n         1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [1., 0., 0., 1., 1., 0., 1., 1., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0.,\n         1., 0., 1., 1., 1., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])\nTargets: tensor([1, 4, 1])\n\n\n\n\n\n\n\n\nCaution: Data Loading in Lightning\n\n\n\n\nData loading is handled independently from the fun_control dictionary by Lightning and PyTorch.\nIn contrast to spotPython with torch, river and sklearn, the data sets are not added to the fun_control dictionary."
  },
  {
    "objectID": "31_spot_lightning_csv.html#sec-specification-of-preprocessing-model-31",
    "href": "31_spot_lightning_csv.html#sec-specification-of-preprocessing-model-31",
    "title": "21  HPT PyTorch Lightning: VBDP",
    "section": "21.4 Step 4: Specification of the Preprocessing Model",
    "text": "21.4 Step 4: Specification of the Preprocessing Model\nThe fun_control dictionary, the torch, sklearnand river versions of spotPython allow the specification of a data preprocessing pipeline, e.g., for the scaling of the data or for the one-hot encoding of categorical variables, see Section 14.4. This feature is not used in the Lightning version.\n\n\n\n\n\n\nCaution: Data preprocessing in Lightning\n\n\n\nLightning allows the data preprocessing to be specified in the LightningDataModule class. It is not considered here, because it should be computed at one location only."
  },
  {
    "objectID": "31_spot_lightning_csv.html#sec-selection-of-the-algorithm-31",
    "href": "31_spot_lightning_csv.html#sec-selection-of-the-algorithm-31",
    "title": "21  HPT PyTorch Lightning: VBDP",
    "section": "21.5 Step 5: Select the NN Model (algorithm) and core_model_hyper_dict",
    "text": "21.5 Step 5: Select the NN Model (algorithm) and core_model_hyper_dict\n\n21.5.1 Implementing a Configurable Neural Network With spotPython\nspotPython includes the NetLightBase class [SOURCE] for configurable neural networks. The class is imported here. It inherits from the class Lightning.LightningModule, which is the base class for all models in Lightning. Lightning.LightningModule is a subclass of torch.nn.Module and provides additional functionality for the training and testing of neural networks. The class Lightning.LightningModule is described in the Lightning documentation.\n\n\n21.5.2 Add the NN Model to the fun_control Dictionary\n\nfrom spotPython.light.netlightbase import NetLightBase \nfrom spotPython.data.light_hyper_dict import LightHyperDict\nfrom spotPython.hyperparameters.values import add_core_model_to_fun_control\nfun_control = add_core_model_to_fun_control(core_model=NetLightBase,\n                              fun_control=fun_control,\n                              hyper_dict= LightHyperDict)\n\nThe default entries for the core_model class are shown below.\n\nfun_control['core_model_hyper_dict']\n\n{'l1': {'type': 'int',\n  'default': 3,\n  'transform': 'transform_power_2_int',\n  'lower': 3,\n  'upper': 8},\n 'epochs': {'type': 'int',\n  'default': 4,\n  'transform': 'transform_power_2_int',\n  'lower': 4,\n  'upper': 9},\n 'batch_size': {'type': 'int',\n  'default': 4,\n  'transform': 'transform_power_2_int',\n  'lower': 1,\n  'upper': 4},\n 'act_fn': {'levels': ['Sigmoid', 'Tanh', 'ReLU', 'LeakyReLU', 'ELU', 'Swish'],\n  'type': 'factor',\n  'default': 'ReLU',\n  'transform': 'None',\n  'class_name': 'spotPython.torch.activation',\n  'core_model_parameter_type': 'instance()',\n  'lower': 0,\n  'upper': 5},\n 'optimizer': {'levels': ['Adadelta',\n   'Adagrad',\n   'Adam',\n   'AdamW',\n   'SparseAdam',\n   'Adamax',\n   'ASGD',\n   'NAdam',\n   'RAdam',\n   'RMSprop',\n   'Rprop',\n   'SGD'],\n  'type': 'factor',\n  'default': 'SGD',\n  'transform': 'None',\n  'class_name': 'torch.optim',\n  'core_model_parameter_type': 'str',\n  'lower': 0,\n  'upper': 11},\n 'dropout_prob': {'type': 'float',\n  'default': 0.01,\n  'transform': 'None',\n  'lower': 0.0,\n  'upper': 0.25},\n 'lr_mult': {'type': 'float',\n  'default': 1.0,\n  'transform': 'None',\n  'lower': 0.1,\n  'upper': 10.0},\n 'patience': {'type': 'int',\n  'default': 2,\n  'transform': 'transform_power_2_int',\n  'lower': 2,\n  'upper': 6},\n 'initialization': {'levels': ['Default', 'Kaiming', 'Xavier'],\n  'type': 'factor',\n  'default': 'Default',\n  'transform': 'None',\n  'core_model_parameter_type': 'str',\n  'lower': 0,\n  'upper': 2}}\n\n\nThe NetLightBase is a configurable neural network. The hyperparameters of the model are specified in the core_model_hyper_dict dictionary [SOURCE]."
  },
  {
    "objectID": "31_spot_lightning_csv.html#sec-modification-of-hyperparameters-31",
    "href": "31_spot_lightning_csv.html#sec-modification-of-hyperparameters-31",
    "title": "21  HPT PyTorch Lightning: VBDP",
    "section": "21.6 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model",
    "text": "21.6 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model\nspotPython provides functions for modifying the hyperparameters, their bounds and factors as well as for activating and de-activating hyperparameters without re-compilation of the Python source code. These functions were described in Section 14.6.\n\n\n\n\n\n\nCaution: Small number of epochs for demonstration purposes\n\n\n\n\nepochs and patience are set to small values for demonstration purposes. These values are too small for a real application.\nMore resonable values are, e.g.:\n\nfun_control = modify_hyper_parameter_bounds(fun_control, \"epochs\", bounds=[7, 9]) and\nfun_control = modify_hyper_parameter_bounds(fun_control, \"patience\", bounds=[2, 7])\n\n\n\n\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_bounds\n\nfun_control = modify_hyper_parameter_bounds(fun_control, \"l1\", bounds=[6,13])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"epochs\", bounds=[6,13])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"batch_size\", bounds=[2, 8])\n\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_levels\nfun_control = modify_hyper_parameter_levels(fun_control, \"optimizer\",[\"Adam\", \"AdamW\", \"Adamax\", \"NAdam\"])\n# fun_control = modify_hyper_parameter_levels(fun_control, \"optimizer\", [\"Adam\"])\n\nThe updated fun_control dictionary is shown below.\n\nfun_control[\"core_model_hyper_dict\"]\n\n{'l1': {'type': 'int',\n  'default': 3,\n  'transform': 'transform_power_2_int',\n  'lower': 6,\n  'upper': 13},\n 'epochs': {'type': 'int',\n  'default': 4,\n  'transform': 'transform_power_2_int',\n  'lower': 6,\n  'upper': 13},\n 'batch_size': {'type': 'int',\n  'default': 4,\n  'transform': 'transform_power_2_int',\n  'lower': 2,\n  'upper': 8},\n 'act_fn': {'levels': ['Sigmoid', 'Tanh', 'ReLU', 'LeakyReLU', 'ELU', 'Swish'],\n  'type': 'factor',\n  'default': 'ReLU',\n  'transform': 'None',\n  'class_name': 'spotPython.torch.activation',\n  'core_model_parameter_type': 'instance()',\n  'lower': 0,\n  'upper': 5},\n 'optimizer': {'levels': ['Adam', 'AdamW', 'Adamax', 'NAdam'],\n  'type': 'factor',\n  'default': 'SGD',\n  'transform': 'None',\n  'class_name': 'torch.optim',\n  'core_model_parameter_type': 'str',\n  'lower': 0,\n  'upper': 3},\n 'dropout_prob': {'type': 'float',\n  'default': 0.01,\n  'transform': 'None',\n  'lower': 0.0,\n  'upper': 0.25},\n 'lr_mult': {'type': 'float',\n  'default': 1.0,\n  'transform': 'None',\n  'lower': 0.1,\n  'upper': 10.0},\n 'patience': {'type': 'int',\n  'default': 2,\n  'transform': 'transform_power_2_int',\n  'lower': 2,\n  'upper': 6},\n 'initialization': {'levels': ['Default', 'Kaiming', 'Xavier'],\n  'type': 'factor',\n  'default': 'Default',\n  'transform': 'None',\n  'core_model_parameter_type': 'str',\n  'lower': 0,\n  'upper': 2}}"
  },
  {
    "objectID": "31_spot_lightning_csv.html#step-7-data-splitting-the-objective-loss-function-and-the-metric",
    "href": "31_spot_lightning_csv.html#step-7-data-splitting-the-objective-loss-function-and-the-metric",
    "title": "21  HPT PyTorch Lightning: VBDP",
    "section": "21.7 Step 7: Data Splitting, the Objective (Loss) Function and the Metric",
    "text": "21.7 Step 7: Data Splitting, the Objective (Loss) Function and the Metric\n\n21.7.1 Evaluation\nThe evaluation procedure requires the specification of two elements:\n\nthe way how the data is split into a train and a test set (see Section 14.7.1)\nthe loss function (and a metric).\n\n\n\n\n\n\n\nCaution: Data Splitting in Lightning\n\n\n\n\nThe data splitting is handled by Lightning.\n\n\n\n\n\n21.7.2 Loss Functions and Metrics\nThe loss function is specified in the configurable network class [SOURCE] We will use CrossEntropy loss for the multiclass-classification task.\n\n\n21.7.3 Metric\n\nWe will use the MAP@k metric [SOURCE] for the evaluation of the model. Here is an example how this metric is calculated.\n\n\nfrom spotPython.torch.mapk import MAPK\nimport torch\nmapk = MAPK(k=2)\ntarget = torch.tensor([0, 1, 2, 2])\npreds = torch.tensor(\n    [\n        [0.5, 0.2, 0.2],  # 0 is in top 2\n        [0.3, 0.4, 0.2],  # 1 is in top 2\n        [0.2, 0.4, 0.3],  # 2 is in top 2\n        [0.7, 0.2, 0.1],  # 2 isn't in top 2\n    ]\n)\nmapk.update(preds, target)\nprint(mapk.compute()) # tensor(0.6250)\n\ntensor(0.6250)\n\n\nSimilar to the loss function, the metric is specified in the configurable network class [SOURCE].\n\n\n\n\n\n\nCaution: Loss Function and Metric in Lightning\n\n\n\n\nThe loss function and the metric are not hyperparameters that can be tuned with spotPython.\nThey are handled by Lightning."
  },
  {
    "objectID": "31_spot_lightning_csv.html#step-8-calling-the-spot-function",
    "href": "31_spot_lightning_csv.html#step-8-calling-the-spot-function",
    "title": "21  HPT PyTorch Lightning: VBDP",
    "section": "21.8 Step 8: Calling the SPOT Function",
    "text": "21.8 Step 8: Calling the SPOT Function\n\n21.8.1 Preparing the SPOT Call\nThe following code passes the information about the parameter ranges and bounds to spot. It extracts the variable types, names, and bounds\n\nfrom spotPython.hyperparameters.values import (get_bound_values,\n    get_var_name,\n    get_var_type,)\nvar_type = get_var_type(fun_control)\nvar_name = get_var_name(fun_control)\nfun_control.update({\"var_type\": var_type,\n                    \"var_name\": var_name})\nlower = get_bound_values(fun_control, \"lower\")\nupper = get_bound_values(fun_control, \"upper\")\n\nNow, the dictionary fun_control contains all information needed for the hyperparameter tuning. Before the hyperparameter tuning is started, it is recommended to take a look at the experimental design. The method gen_design_table [SOURCE] generates a design table as follows:\n\nfrom spotPython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control))\n\n| name           | type   | default   |   lower |   upper | transform             |\n|----------------|--------|-----------|---------|---------|-----------------------|\n| l1             | int    | 3         |     6   |   13    | transform_power_2_int |\n| epochs         | int    | 4         |     6   |   13    | transform_power_2_int |\n| batch_size     | int    | 4         |     2   |    8    | transform_power_2_int |\n| act_fn         | factor | ReLU      |     0   |    5    | None                  |\n| optimizer      | factor | SGD       |     0   |    3    | None                  |\n| dropout_prob   | float  | 0.01      |     0   |    0.25 | None                  |\n| lr_mult        | float  | 1.0       |     0.1 |   10    | None                  |\n| patience       | int    | 2         |     2   |    6    | transform_power_2_int |\n| initialization | factor | Default   |     0   |    2    | None                  |\n\n\nThis allows to check if all information is available and if the information is correct.\n\n\n21.8.2 The Objective Function fun\nThe objective function fun from the class HyperLight [SOURCE] is selected next. It implements an interface from PyTorch’s training, validation, and testing methods to spotPython.\n\nfrom spotPython.light.hyperlight import HyperLight\nfun = HyperLight().fun\n\n\nfun_control\n\n{'CHECKPOINT_PATH': 'saved_models/',\n 'DATASET_PATH': 'data/',\n 'RESULTS_PATH': 'results/',\n 'TENSORBOARD_PATH': 'runs/',\n '_L_in': 64,\n '_L_out': 11,\n 'data': None,\n 'data_dir': './data',\n 'device': 'cpu',\n 'enable_progress_bar': False,\n 'eval': None,\n 'k_folds': None,\n 'loss_function': None,\n 'metric_river': None,\n 'metric_sklearn': None,\n 'metric_torch': None,\n 'metric_params': {},\n 'model_dict': {},\n 'n_samples': None,\n 'num_workers': 0,\n 'optimizer': None,\n 'path': None,\n 'prep_model': None,\n 'save_model': False,\n 'show_batch_interval': 1000000,\n 'shuffle': None,\n 'target_column': None,\n 'train': None,\n 'test': None,\n 'task': 'classification',\n 'tensorboard_path': None,\n 'weights': 1.0,\n 'writer': None,\n 'core_model': spotPython.light.netlightbase.NetLightBase,\n 'core_model_hyper_dict': {'l1': {'type': 'int',\n   'default': 3,\n   'transform': 'transform_power_2_int',\n   'lower': 6,\n   'upper': 13},\n  'epochs': {'type': 'int',\n   'default': 4,\n   'transform': 'transform_power_2_int',\n   'lower': 6,\n   'upper': 13},\n  'batch_size': {'type': 'int',\n   'default': 4,\n   'transform': 'transform_power_2_int',\n   'lower': 2,\n   'upper': 8},\n  'act_fn': {'levels': ['Sigmoid',\n    'Tanh',\n    'ReLU',\n    'LeakyReLU',\n    'ELU',\n    'Swish'],\n   'type': 'factor',\n   'default': 'ReLU',\n   'transform': 'None',\n   'class_name': 'spotPython.torch.activation',\n   'core_model_parameter_type': 'instance()',\n   'lower': 0,\n   'upper': 5},\n  'optimizer': {'levels': ['Adam', 'AdamW', 'Adamax', 'NAdam'],\n   'type': 'factor',\n   'default': 'SGD',\n   'transform': 'None',\n   'class_name': 'torch.optim',\n   'core_model_parameter_type': 'str',\n   'lower': 0,\n   'upper': 3},\n  'dropout_prob': {'type': 'float',\n   'default': 0.01,\n   'transform': 'None',\n   'lower': 0.0,\n   'upper': 0.25},\n  'lr_mult': {'type': 'float',\n   'default': 1.0,\n   'transform': 'None',\n   'lower': 0.1,\n   'upper': 10.0},\n  'patience': {'type': 'int',\n   'default': 2,\n   'transform': 'transform_power_2_int',\n   'lower': 2,\n   'upper': 6},\n  'initialization': {'levels': ['Default', 'Kaiming', 'Xavier'],\n   'type': 'factor',\n   'default': 'Default',\n   'transform': 'None',\n   'core_model_parameter_type': 'str',\n   'lower': 0,\n   'upper': 2}},\n 'var_type': ['int',\n  'int',\n  'int',\n  'factor',\n  'factor',\n  'float',\n  'float',\n  'int',\n  'factor'],\n 'var_name': ['l1',\n  'epochs',\n  'batch_size',\n  'act_fn',\n  'optimizer',\n  'dropout_prob',\n  'lr_mult',\n  'patience',\n  'initialization']}\n\n\n\n\n21.8.3 Starting the Hyperparameter Tuning\nThe spotPython hyperparameter tuning is started by calling the Spot function [SOURCE] as described in Section 14.8.4.\n\nimport numpy as np\nfrom spotPython.spot import spot\nfrom math import inf\nspot_tuner = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = inf,\n                   fun_repeats = 1,\n                   max_time = MAX_TIME,\n                   noise = False,\n                   tolerance_x = np.sqrt(np.spacing(1)),\n                   var_type = var_type,\n                   var_name = var_name,\n                   infill_criterion = \"y\",\n                   n_points = 1,\n                   seed=123,\n                   log_level = 50,\n                   show_models= False,\n                   show_progress= True,\n                   fun_control = fun_control,\n                   design_control={\"init_size\": INIT_SIZE,\n                                   \"repeats\": 1},\n                   surrogate_control={\"noise\": True,\n                                      \"cod_type\": \"norm\",\n                                      \"min_theta\": -4,\n                                      \"max_theta\": 3,\n                                      \"n_theta\": len(var_name),\n                                      \"model_fun_evals\": 10_000,\n                                      \"log_level\": 50\n                                      })\nspot_tuner.run()\n\n\nconfig: {'l1': 4096, 'epochs': 4096, 'batch_size': 32, 'act_fn': ReLU(), 'optimizer': 'AdamW', 'dropout_prob': 0.10939527466721133, 'lr_mult': 4.211776903906428, 'patience': 16, 'initialization': 'Default'}\n_L_in: 64\n_L_out: 11\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=4096, bias=True)\n    (1): ReLU()\n    (2): Dropout(p=0.10939527466721133, inplace=False)\n    (3): Linear(in_features=4096, out_features=2048, bias=True)\n    (4): ReLU()\n    (5): Dropout(p=0.10939527466721133, inplace=False)\n    (6): Linear(in_features=2048, out_features=2048, bias=True)\n    (7): ReLU()\n    (8): Dropout(p=0.10939527466721133, inplace=False)\n    (9): Linear(in_features=2048, out_features=1024, bias=True)\n    (10): ReLU()\n    (11): Dropout(p=0.10939527466721133, inplace=False)\n    (12): Linear(in_features=1024, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     2.433500051498413     │\n│          val_acc          │    0.10954063385725021    │\n│         val_loss          │     2.433500051498413     │\n│        valid_mapk         │    0.1800411492586136     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.1800411492586136, 'val_loss': 2.433500051498413, 'val_acc': 0.10954063385725021, 'hp_metric': 2.433500051498413}\n\nconfig: {'l1': 64, 'epochs': 128, 'batch_size': 256, 'act_fn': LeakyReLU(), 'optimizer': 'Adamax', 'dropout_prob': 0.012926647388264517, 'lr_mult': 0.832718394912432, 'patience': 8, 'initialization': 'Kaiming'}\n_L_in: 64\n_L_out: 11\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=64, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.012926647388264517, inplace=False)\n    (3): Linear(in_features=64, out_features=32, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.012926647388264517, inplace=False)\n    (6): Linear(in_features=32, out_features=32, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.012926647388264517, inplace=False)\n    (9): Linear(in_features=32, out_features=16, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.012926647388264517, inplace=False)\n    (12): Linear(in_features=16, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     2.238137722015381     │\n│          val_acc          │    0.2862190902233124     │\n│         val_loss          │     2.238137722015381     │\n│        valid_mapk         │    0.45666956901550293    │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.45666956901550293, 'val_loss': 2.238137722015381, 'val_acc': 0.2862190902233124, 'hp_metric': 2.238137722015381}\n\nconfig: {'l1': 1024, 'epochs': 256, 'batch_size': 8, 'act_fn': Swish(), 'optimizer': 'NAdam', 'dropout_prob': 0.22086376796923401, 'lr_mult': 7.65501078489161, 'patience': 64, 'initialization': 'Xavier'}\n_L_in: 64\n_L_out: 11\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=1024, bias=True)\n    (1): Swish()\n    (2): Dropout(p=0.22086376796923401, inplace=False)\n    (3): Linear(in_features=1024, out_features=512, bias=True)\n    (4): Swish()\n    (5): Dropout(p=0.22086376796923401, inplace=False)\n    (6): Linear(in_features=512, out_features=512, bias=True)\n    (7): Swish()\n    (8): Dropout(p=0.22086376796923401, inplace=False)\n    (9): Linear(in_features=512, out_features=256, bias=True)\n    (10): Swish()\n    (11): Dropout(p=0.22086376796923401, inplace=False)\n    (12): Linear(in_features=256, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │    2.4405665397644043     │\n│          val_acc          │    0.10247349739074707    │\n│         val_loss          │    2.4405665397644043     │\n│        valid_mapk         │    0.18518517911434174    │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.18518517911434174, 'val_loss': 2.4405665397644043, 'val_acc': 0.10247349739074707, 'hp_metric': 2.4405665397644043}\n\nconfig: {'l1': 512, 'epochs': 512, 'batch_size': 16, 'act_fn': Sigmoid(), 'optimizer': 'Adam', 'dropout_prob': 0.1890928563375006, 'lr_mult': 2.3450676871382794, 'patience': 32, 'initialization': 'Kaiming'}\n_L_in: 64\n_L_out: 11\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=512, bias=True)\n    (1): Sigmoid()\n    (2): Dropout(p=0.1890928563375006, inplace=False)\n    (3): Linear(in_features=512, out_features=256, bias=True)\n    (4): Sigmoid()\n    (5): Dropout(p=0.1890928563375006, inplace=False)\n    (6): Linear(in_features=256, out_features=256, bias=True)\n    (7): Sigmoid()\n    (8): Dropout(p=0.1890928563375006, inplace=False)\n    (9): Linear(in_features=256, out_features=128, bias=True)\n    (10): Sigmoid()\n    (11): Dropout(p=0.1890928563375006, inplace=False)\n    (12): Linear(in_features=128, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │    2.3434996604919434     │\n│          val_acc          │    0.19434629380702972    │\n│         val_loss          │    2.3434996604919434     │\n│        valid_mapk         │    0.2698337733745575     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.2698337733745575, 'val_loss': 2.3434996604919434, 'val_acc': 0.19434629380702972, 'hp_metric': 2.3434996604919434}\n\nconfig: {'l1': 256, 'epochs': 4096, 'batch_size': 64, 'act_fn': ReLU(), 'optimizer': 'Adamax', 'dropout_prob': 0.0708380794924471, 'lr_mult': 9.528945328733357, 'patience': 4, 'initialization': 'Xavier'}\n_L_in: 64\n_L_out: 11\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=256, bias=True)\n    (1): ReLU()\n    (2): Dropout(p=0.0708380794924471, inplace=False)\n    (3): Linear(in_features=256, out_features=128, bias=True)\n    (4): ReLU()\n    (5): Dropout(p=0.0708380794924471, inplace=False)\n    (6): Linear(in_features=128, out_features=128, bias=True)\n    (7): ReLU()\n    (8): Dropout(p=0.0708380794924471, inplace=False)\n    (9): Linear(in_features=128, out_features=64, bias=True)\n    (10): ReLU()\n    (11): Dropout(p=0.0708380794924471, inplace=False)\n    (12): Linear(in_features=64, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     2.292955160140991     │\n│          val_acc          │    0.2473498284816742     │\n│         val_loss          │     2.292955160140991     │\n│        valid_mapk         │    0.3427276313304901     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.3427276313304901, 'val_loss': 2.292955160140991, 'val_acc': 0.2473498284816742, 'hp_metric': 2.292955160140991}\n\n\n\nconfig: {'l1': 64, 'epochs': 64, 'batch_size': 256, 'act_fn': LeakyReLU(), 'optimizer': 'Adamax', 'dropout_prob': 0.006064053615858084, 'lr_mult': 0.4763979523955304, 'patience': 8, 'initialization': 'Xavier'}\n_L_in: 64\n_L_out: 11\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=64, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.006064053615858084, inplace=False)\n    (3): Linear(in_features=64, out_features=32, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.006064053615858084, inplace=False)\n    (6): Linear(in_features=32, out_features=32, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.006064053615858084, inplace=False)\n    (9): Linear(in_features=32, out_features=16, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.006064053615858084, inplace=False)\n    (12): Linear(in_features=16, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │    2.3466885089874268     │\n│          val_acc          │     0.208480566740036     │\n│         val_loss          │    2.3466885089874268     │\n│        valid_mapk         │    0.3177203834056854     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.3177203834056854, 'val_loss': 2.3466885089874268, 'val_acc': 0.208480566740036, 'hp_metric': 2.3466885089874268}\n\n\nspotPython tuning: 2.238137722015381 [----------] 3.16% \n\n\n\nconfig: {'l1': 64, 'epochs': 512, 'batch_size': 256, 'act_fn': Sigmoid(), 'optimizer': 'Adam', 'dropout_prob': 0.030100713594192443, 'lr_mult': 3.4214626523101765, 'patience': 4, 'initialization': 'Kaiming'}\n_L_in: 64\n_L_out: 11\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=64, bias=True)\n    (1): Sigmoid()\n    (2): Dropout(p=0.030100713594192443, inplace=False)\n    (3): Linear(in_features=64, out_features=32, bias=True)\n    (4): Sigmoid()\n    (5): Dropout(p=0.030100713594192443, inplace=False)\n    (6): Linear(in_features=32, out_features=32, bias=True)\n    (7): Sigmoid()\n    (8): Dropout(p=0.030100713594192443, inplace=False)\n    (9): Linear(in_features=32, out_features=16, bias=True)\n    (10): Sigmoid()\n    (11): Dropout(p=0.030100713594192443, inplace=False)\n    (12): Linear(in_features=16, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     2.298098564147949     │\n│          val_acc          │    0.22968198359012604    │\n│         val_loss          │     2.298098564147949     │\n│        valid_mapk         │    0.2535686790943146     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.2535686790943146, 'val_loss': 2.298098564147949, 'val_acc': 0.22968198359012604, 'hp_metric': 2.298098564147949}\n\n\nspotPython tuning: 2.238137722015381 [#---------] 7.64% \n\n\n\nconfig: {'l1': 64, 'epochs': 128, 'batch_size': 256, 'act_fn': ReLU(), 'optimizer': 'NAdam', 'dropout_prob': 0.03832172101534319, 'lr_mult': 3.9929180674070883, 'patience': 8, 'initialization': 'Kaiming'}\n_L_in: 64\n_L_out: 11\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=64, bias=True)\n    (1): ReLU()\n    (2): Dropout(p=0.03832172101534319, inplace=False)\n    (3): Linear(in_features=64, out_features=32, bias=True)\n    (4): ReLU()\n    (5): Dropout(p=0.03832172101534319, inplace=False)\n    (6): Linear(in_features=32, out_features=32, bias=True)\n    (7): ReLU()\n    (8): Dropout(p=0.03832172101534319, inplace=False)\n    (9): Linear(in_features=32, out_features=16, bias=True)\n    (10): ReLU()\n    (11): Dropout(p=0.03832172101534319, inplace=False)\n    (12): Linear(in_features=16, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     2.271381378173828     │\n│          val_acc          │    0.2614840865135193     │\n│         val_loss          │     2.271381378173828     │\n│        valid_mapk         │     0.402874231338501     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.402874231338501, 'val_loss': 2.271381378173828, 'val_acc': 0.2614840865135193, 'hp_metric': 2.271381378173828}\n\n\nspotPython tuning: 2.238137722015381 [#---------] 11.38% \n\n\n\nconfig: {'l1': 64, 'epochs': 128, 'batch_size': 128, 'act_fn': Swish(), 'optimizer': 'AdamW', 'dropout_prob': 0.03644107482722437, 'lr_mult': 1.1031464719981001, 'patience': 8, 'initialization': 'Kaiming'}\n_L_in: 64\n_L_out: 11\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=64, bias=True)\n    (1): Swish()\n    (2): Dropout(p=0.03644107482722437, inplace=False)\n    (3): Linear(in_features=64, out_features=32, bias=True)\n    (4): Swish()\n    (5): Dropout(p=0.03644107482722437, inplace=False)\n    (6): Linear(in_features=32, out_features=32, bias=True)\n    (7): Swish()\n    (8): Dropout(p=0.03644107482722437, inplace=False)\n    (9): Linear(in_features=32, out_features=16, bias=True)\n    (10): Swish()\n    (11): Dropout(p=0.03644107482722437, inplace=False)\n    (12): Linear(in_features=16, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     2.278205156326294     │\n│          val_acc          │    0.2473498284816742     │\n│         val_loss          │     2.278205156326294     │\n│        valid_mapk         │    0.3325938880443573     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.3325938880443573, 'val_loss': 2.278205156326294, 'val_acc': 0.2473498284816742, 'hp_metric': 2.278205156326294}\n\n\nspotPython tuning: 2.238137722015381 [##--------] 15.93% \n\n\n\nconfig: {'l1': 256, 'epochs': 256, 'batch_size': 8, 'act_fn': ReLU(), 'optimizer': 'Adam', 'dropout_prob': 0.07083807561978617, 'lr_mult': 7.5094994261143055, 'patience': 8, 'initialization': 'Xavier'}\n_L_in: 64\n_L_out: 11\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=256, bias=True)\n    (1): ReLU()\n    (2): Dropout(p=0.07083807561978617, inplace=False)\n    (3): Linear(in_features=256, out_features=128, bias=True)\n    (4): ReLU()\n    (5): Dropout(p=0.07083807561978617, inplace=False)\n    (6): Linear(in_features=128, out_features=128, bias=True)\n    (7): ReLU()\n    (8): Dropout(p=0.07083807561978617, inplace=False)\n    (9): Linear(in_features=128, out_features=64, bias=True)\n    (10): ReLU()\n    (11): Dropout(p=0.07083807561978617, inplace=False)\n    (12): Linear(in_features=64, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     2.394630193710327     │\n│          val_acc          │    0.1484098881483078     │\n│         val_loss          │     2.394630193710327     │\n│        valid_mapk         │    0.22974535822868347    │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.22974535822868347, 'val_loss': 2.394630193710327, 'val_acc': 0.1484098881483078, 'hp_metric': 2.394630193710327}\n\n\nspotPython tuning: 2.238137722015381 [##--------] 22.12% \n\n\n\nconfig: {'l1': 64, 'epochs': 64, 'batch_size': 256, 'act_fn': Tanh(), 'optimizer': 'Adamax', 'dropout_prob': 0.0, 'lr_mult': 4.728881422091566, 'patience': 64, 'initialization': 'Kaiming'}\n_L_in: 64\n_L_out: 11\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=64, bias=True)\n    (1): Tanh()\n    (2): Dropout(p=0.0, inplace=False)\n    (3): Linear(in_features=64, out_features=32, bias=True)\n    (4): Tanh()\n    (5): Dropout(p=0.0, inplace=False)\n    (6): Linear(in_features=32, out_features=32, bias=True)\n    (7): Tanh()\n    (8): Dropout(p=0.0, inplace=False)\n    (9): Linear(in_features=32, out_features=16, bias=True)\n    (10): Tanh()\n    (11): Dropout(p=0.0, inplace=False)\n    (12): Linear(in_features=16, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     2.258221387863159     │\n│          val_acc          │    0.2720848023891449     │\n│         val_loss          │     2.258221387863159     │\n│        valid_mapk         │    0.3440875709056854     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.3440875709056854, 'val_loss': 2.258221387863159, 'val_acc': 0.2720848023891449, 'hp_metric': 2.258221387863159}\n\n\nspotPython tuning: 2.238137722015381 [###-------] 27.55% \n\n\n\nconfig: {'l1': 64, 'epochs': 128, 'batch_size': 128, 'act_fn': LeakyReLU(), 'optimizer': 'Adamax', 'dropout_prob': 0.007097696158616737, 'lr_mult': 0.2005522500701167, 'patience': 16, 'initialization': 'Kaiming'}\n_L_in: 64\n_L_out: 11\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=64, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.007097696158616737, inplace=False)\n    (3): Linear(in_features=64, out_features=32, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.007097696158616737, inplace=False)\n    (6): Linear(in_features=32, out_features=32, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.007097696158616737, inplace=False)\n    (9): Linear(in_features=32, out_features=16, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.007097696158616737, inplace=False)\n    (12): Linear(in_features=16, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │    2.3103928565979004     │\n│          val_acc          │    0.22968198359012604    │\n│         val_loss          │    2.3103928565979004     │\n│        valid_mapk         │    0.2670235335826874     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.2670235335826874, 'val_loss': 2.3103928565979004, 'val_acc': 0.22968198359012604, 'hp_metric': 2.3103928565979004}\n\n\nspotPython tuning: 2.238137722015381 [####------] 35.06% \n\n\n\nconfig: {'l1': 128, 'epochs': 128, 'batch_size': 256, 'act_fn': ReLU(), 'optimizer': 'AdamW', 'dropout_prob': 0.16965823251206952, 'lr_mult': 4.550881246576569, 'patience': 8, 'initialization': 'Kaiming'}\n_L_in: 64\n_L_out: 11\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=128, bias=True)\n    (1): ReLU()\n    (2): Dropout(p=0.16965823251206952, inplace=False)\n    (3): Linear(in_features=128, out_features=64, bias=True)\n    (4): ReLU()\n    (5): Dropout(p=0.16965823251206952, inplace=False)\n    (6): Linear(in_features=64, out_features=64, bias=True)\n    (7): ReLU()\n    (8): Dropout(p=0.16965823251206952, inplace=False)\n    (9): Linear(in_features=64, out_features=32, bias=True)\n    (10): ReLU()\n    (11): Dropout(p=0.16965823251206952, inplace=False)\n    (12): Linear(in_features=32, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │    2.2878034114837646     │\n│          val_acc          │    0.24381625652313232    │\n│         val_loss          │    2.2878034114837646     │\n│        valid_mapk         │    0.3672960102558136     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.3672960102558136, 'val_loss': 2.2878034114837646, 'val_acc': 0.24381625652313232, 'hp_metric': 2.2878034114837646}\n\n\nspotPython tuning: 2.238137722015381 [####------] 37.93% \n\n\n\nconfig: {'l1': 128, 'epochs': 64, 'batch_size': 256, 'act_fn': LeakyReLU(), 'optimizer': 'AdamW', 'dropout_prob': 0.13070801331028198, 'lr_mult': 5.664792875702936, 'patience': 64, 'initialization': 'Kaiming'}\n_L_in: 64\n_L_out: 11\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=128, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.13070801331028198, inplace=False)\n    (3): Linear(in_features=128, out_features=64, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.13070801331028198, inplace=False)\n    (6): Linear(in_features=64, out_features=64, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.13070801331028198, inplace=False)\n    (9): Linear(in_features=64, out_features=32, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.13070801331028198, inplace=False)\n    (12): Linear(in_features=32, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     2.259943962097168     │\n│          val_acc          │    0.2826855182647705     │\n│         val_loss          │     2.259943962097168     │\n│        valid_mapk         │    0.39427807927131653    │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.39427807927131653, 'val_loss': 2.259943962097168, 'val_acc': 0.2826855182647705, 'hp_metric': 2.259943962097168}\n\n\nspotPython tuning: 2.238137722015381 [####------] 42.77% \n\n\n\nconfig: {'l1': 512, 'epochs': 64, 'batch_size': 256, 'act_fn': LeakyReLU(), 'optimizer': 'AdamW', 'dropout_prob': 0.0, 'lr_mult': 3.1952283197430966, 'patience': 8, 'initialization': 'Kaiming'}\n_L_in: 64\n_L_out: 11\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=512, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.0, inplace=False)\n    (3): Linear(in_features=512, out_features=256, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.0, inplace=False)\n    (6): Linear(in_features=256, out_features=256, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.0, inplace=False)\n    (9): Linear(in_features=256, out_features=128, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.0, inplace=False)\n    (12): Linear(in_features=128, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     2.246544599533081     │\n│          val_acc          │    0.28975266218185425    │\n│         val_loss          │     2.246544599533081     │\n│        valid_mapk         │    0.3566141128540039     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.3566141128540039, 'val_loss': 2.246544599533081, 'val_acc': 0.28975266218185425, 'hp_metric': 2.246544599533081}\n\n\nspotPython tuning: 2.238137722015381 [#####-----] 47.85% \n\n\n\nconfig: {'l1': 1024, 'epochs': 128, 'batch_size': 256, 'act_fn': LeakyReLU(), 'optimizer': 'Adam', 'dropout_prob': 0.0, 'lr_mult': 0.4729581593251257, 'patience': 4, 'initialization': 'Kaiming'}\n_L_in: 64\n_L_out: 11\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=1024, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.0, inplace=False)\n    (3): Linear(in_features=1024, out_features=512, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.0, inplace=False)\n    (6): Linear(in_features=512, out_features=512, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.0, inplace=False)\n    (9): Linear(in_features=512, out_features=256, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.0, inplace=False)\n    (12): Linear(in_features=256, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     2.267474889755249     │\n│          val_acc          │    0.2614840865135193     │\n│         val_loss          │     2.267474889755249     │\n│        valid_mapk         │    0.3885995149612427     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.3885995149612427, 'val_loss': 2.267474889755249, 'val_acc': 0.2614840865135193, 'hp_metric': 2.267474889755249}\n\n\nspotPython tuning: 2.238137722015381 [#####-----] 52.22% \n\n\n\nconfig: {'l1': 64, 'epochs': 128, 'batch_size': 256, 'act_fn': LeakyReLU(), 'optimizer': 'Adamax', 'dropout_prob': 0.0, 'lr_mult': 4.783514932131345, 'patience': 64, 'initialization': 'Kaiming'}\n\n\n\n_L_in: 64\n_L_out: 11\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=64, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.0, inplace=False)\n    (3): Linear(in_features=64, out_features=32, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.0, inplace=False)\n    (6): Linear(in_features=32, out_features=32, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.0, inplace=False)\n    (9): Linear(in_features=32, out_features=16, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.0, inplace=False)\n    (12): Linear(in_features=16, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │    2.2709927558898926     │\n│          val_acc          │    0.2579505443572998     │\n│         val_loss          │    2.2709927558898926     │\n│        valid_mapk         │    0.2964892089366913     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.2964892089366913, 'val_loss': 2.2709927558898926, 'val_acc': 0.2579505443572998, 'hp_metric': 2.2709927558898926}\n\n\nspotPython tuning: 2.238137722015381 [######----] 58.65% \n\n\n\nconfig: {'l1': 4096, 'epochs': 64, 'batch_size': 256, 'act_fn': LeakyReLU(), 'optimizer': 'Adamax', 'dropout_prob': 0.0, 'lr_mult': 1.8021236712633482, 'patience': 8, 'initialization': 'Kaiming'}\n_L_in: 64\n_L_out: 11\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=4096, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.0, inplace=False)\n    (3): Linear(in_features=4096, out_features=2048, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.0, inplace=False)\n    (6): Linear(in_features=2048, out_features=2048, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.0, inplace=False)\n    (9): Linear(in_features=2048, out_features=1024, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.0, inplace=False)\n    (12): Linear(in_features=1024, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     2.444101095199585     │\n│          val_acc          │    0.0989399328827858     │\n│         val_loss          │     2.444101095199585     │\n│        valid_mapk         │    0.16326677799224854    │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.16326677799224854, 'val_loss': 2.444101095199585, 'val_acc': 0.0989399328827858, 'hp_metric': 2.444101095199585}\n\n\nspotPython tuning: 2.238137722015381 [#######---] 68.52% \n\n\n\nconfig: {'l1': 512, 'epochs': 64, 'batch_size': 256, 'act_fn': Swish(), 'optimizer': 'AdamW', 'dropout_prob': 0.044591380506204724, 'lr_mult': 2.359124011031594, 'patience': 8, 'initialization': 'Kaiming'}\n_L_in: 64\n_L_out: 11\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=512, bias=True)\n    (1): Swish()\n    (2): Dropout(p=0.044591380506204724, inplace=False)\n    (3): Linear(in_features=512, out_features=256, bias=True)\n    (4): Swish()\n    (5): Dropout(p=0.044591380506204724, inplace=False)\n    (6): Linear(in_features=256, out_features=256, bias=True)\n    (7): Swish()\n    (8): Dropout(p=0.044591380506204724, inplace=False)\n    (9): Linear(in_features=256, out_features=128, bias=True)\n    (10): Swish()\n    (11): Dropout(p=0.044591380506204724, inplace=False)\n    (12): Linear(in_features=128, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │    2.2953412532806396     │\n│          val_acc          │    0.2332155406475067     │\n│         val_loss          │    2.2953412532806396     │\n│        valid_mapk         │    0.3596402406692505     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.3596402406692505, 'val_loss': 2.2953412532806396, 'val_acc': 0.2332155406475067, 'hp_metric': 2.2953412532806396}\n\n\nspotPython tuning: 2.238137722015381 [#######---] 72.69% \n\n\n\nconfig: {'l1': 512, 'epochs': 128, 'batch_size': 256, 'act_fn': LeakyReLU(), 'optimizer': 'Adam', 'dropout_prob': 0.004894161827505516, 'lr_mult': 2.1647113235226385, 'patience': 16, 'initialization': 'Kaiming'}\n_L_in: 64\n_L_out: 11\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=512, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.004894161827505516, inplace=False)\n    (3): Linear(in_features=512, out_features=256, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.004894161827505516, inplace=False)\n    (6): Linear(in_features=256, out_features=256, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.004894161827505516, inplace=False)\n    (9): Linear(in_features=256, out_features=128, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.004894161827505516, inplace=False)\n    (12): Linear(in_features=128, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     2.257730007171631     │\n│          val_acc          │    0.2720848023891449     │\n│         val_loss          │     2.257730007171631     │\n│        valid_mapk         │    0.3320794701576233     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.3320794701576233, 'val_loss': 2.257730007171631, 'val_acc': 0.2720848023891449, 'hp_metric': 2.257730007171631}\n\n\nspotPython tuning: 2.238137722015381 [########--] 78.25% \n\n\n\nconfig: {'l1': 512, 'epochs': 1024, 'batch_size': 256, 'act_fn': LeakyReLU(), 'optimizer': 'AdamW', 'dropout_prob': 0.0, 'lr_mult': 9.138772126270819, 'patience': 16, 'initialization': 'Kaiming'}\n_L_in: 64\n_L_out: 11\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=512, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.0, inplace=False)\n    (3): Linear(in_features=512, out_features=256, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.0, inplace=False)\n    (6): Linear(in_features=256, out_features=256, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.0, inplace=False)\n    (9): Linear(in_features=256, out_features=128, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.0, inplace=False)\n    (12): Linear(in_features=128, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │    2.3627161979675293     │\n│          val_acc          │    0.18021202087402344    │\n│         val_loss          │    2.3627161979675293     │\n│        valid_mapk         │    0.2588855028152466     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.2588855028152466, 'val_loss': 2.3627161979675293, 'val_acc': 0.18021202087402344, 'hp_metric': 2.3627161979675293}\n\n\nspotPython tuning: 2.238137722015381 [########--] 83.23% \n\n\n\nconfig: {'l1': 64, 'epochs': 64, 'batch_size': 128, 'act_fn': Swish(), 'optimizer': 'AdamW', 'dropout_prob': 0.09729428347287006, 'lr_mult': 0.6503127559977777, 'patience': 4, 'initialization': 'Kaiming'}\n_L_in: 64\n_L_out: 11\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=64, bias=True)\n    (1): Swish()\n    (2): Dropout(p=0.09729428347287006, inplace=False)\n    (3): Linear(in_features=64, out_features=32, bias=True)\n    (4): Swish()\n    (5): Dropout(p=0.09729428347287006, inplace=False)\n    (6): Linear(in_features=32, out_features=32, bias=True)\n    (7): Swish()\n    (8): Dropout(p=0.09729428347287006, inplace=False)\n    (9): Linear(in_features=32, out_features=16, bias=True)\n    (10): Swish()\n    (11): Dropout(p=0.09729428347287006, inplace=False)\n    (12): Linear(in_features=16, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     2.31158709526062      │\n│          val_acc          │    0.23674911260604858    │\n│         val_loss          │     2.31158709526062      │\n│        valid_mapk         │    0.3402777910232544     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.3402777910232544, 'val_loss': 2.31158709526062, 'val_acc': 0.23674911260604858, 'hp_metric': 2.31158709526062}\n\n\nspotPython tuning: 2.238137722015381 [#########-] 88.00% \n\n\n\nconfig: {'l1': 128, 'epochs': 64, 'batch_size': 256, 'act_fn': Tanh(), 'optimizer': 'AdamW', 'dropout_prob': 0.0, 'lr_mult': 0.1, 'patience': 8, 'initialization': 'Kaiming'}\n_L_in: 64\n_L_out: 11\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=128, bias=True)\n    (1): Tanh()\n    (2): Dropout(p=0.0, inplace=False)\n    (3): Linear(in_features=128, out_features=64, bias=True)\n    (4): Tanh()\n    (5): Dropout(p=0.0, inplace=False)\n    (6): Linear(in_features=64, out_features=64, bias=True)\n    (7): Tanh()\n    (8): Dropout(p=0.0, inplace=False)\n    (9): Linear(in_features=64, out_features=32, bias=True)\n    (10): Tanh()\n    (11): Dropout(p=0.0, inplace=False)\n    (12): Linear(in_features=32, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     2.33255672454834      │\n│          val_acc          │    0.2226148396730423     │\n│         val_loss          │     2.33255672454834      │\n│        valid_mapk         │    0.3295838236808777     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.3295838236808777, 'val_loss': 2.33255672454834, 'val_acc': 0.2226148396730423, 'hp_metric': 2.33255672454834}\n\n\nspotPython tuning: 2.238137722015381 [#########-] 93.58% \n\n\n\nconfig: {'l1': 1024, 'epochs': 256, 'batch_size': 256, 'act_fn': Swish(), 'optimizer': 'NAdam', 'dropout_prob': 0.0, 'lr_mult': 1.166260588985513, 'patience': 32, 'initialization': 'Kaiming'}\n_L_in: 64\n_L_out: 11\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=1024, bias=True)\n    (1): Swish()\n    (2): Dropout(p=0.0, inplace=False)\n    (3): Linear(in_features=1024, out_features=512, bias=True)\n    (4): Swish()\n    (5): Dropout(p=0.0, inplace=False)\n    (6): Linear(in_features=512, out_features=512, bias=True)\n    (7): Swish()\n    (8): Dropout(p=0.0, inplace=False)\n    (9): Linear(in_features=512, out_features=256, bias=True)\n    (10): Swish()\n    (11): Dropout(p=0.0, inplace=False)\n    (12): Linear(in_features=256, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     2.25215744972229      │\n│          val_acc          │    0.2826855182647705     │\n│         val_loss          │     2.25215744972229      │\n│        valid_mapk         │    0.4092399775981903     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.4092399775981903, 'val_loss': 2.25215744972229, 'val_acc': 0.2826855182647705, 'hp_metric': 2.25215744972229}\n\n\nspotPython tuning: 2.238137722015381 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x18c45f310&gt;"
  },
  {
    "objectID": "31_spot_lightning_csv.html#sec-tensorboard-31",
    "href": "31_spot_lightning_csv.html#sec-tensorboard-31",
    "title": "21  HPT PyTorch Lightning: VBDP",
    "section": "21.9 Step 9: Tensorboard",
    "text": "21.9 Step 9: Tensorboard\nThe textual output shown in the console (or code cell) can be visualized with Tensorboard as described in Section 14.9, see also the description in the documentation: Tensorboard."
  },
  {
    "objectID": "31_spot_lightning_csv.html#sec-results-31",
    "href": "31_spot_lightning_csv.html#sec-results-31",
    "title": "21  HPT PyTorch Lightning: VBDP",
    "section": "21.10 Step 10: Results",
    "text": "21.10 Step 10: Results\nAfter the hyperparameter tuning run is finished, the results can be analyzed as described in Section 14.10.\n\nspot_tuner.plot_progress(log_y=False,\n    filename=\"./figures/\" + experiment_name+\"_progress.png\")\n\n\n\n\nProgress plot. Black dots denote results from the initial design. Red dots illustrate the improvement found by the surrogate model based optimization.\n\n\n\n\n\nfrom spotPython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control=fun_control, spot=spot_tuner))\n\n| name           | type   | default   |   lower |   upper |                tuned | transform             |   importance | stars   |\n|----------------|--------|-----------|---------|---------|----------------------|-----------------------|--------------|---------|\n| l1             | int    | 3         |     6.0 |    13.0 |                  6.0 | transform_power_2_int |         1.31 | *       |\n| epochs         | int    | 4         |     6.0 |    13.0 |                  7.0 | transform_power_2_int |         0.14 | .       |\n| batch_size     | int    | 4         |     2.0 |     8.0 |                  8.0 | transform_power_2_int |         0.59 | .       |\n| act_fn         | factor | ReLU      |     0.0 |     5.0 |                  3.0 | None                  |         0.00 |         |\n| optimizer      | factor | SGD       |     0.0 |     3.0 |                  2.0 | None                  |         0.00 |         |\n| dropout_prob   | float  | 0.01      |     0.0 |    0.25 | 0.012926647388264517 | None                  |         0.00 |         |\n| lr_mult        | float  | 1.0       |     0.1 |    10.0 |    0.832718394912432 | None                  |         0.22 | .       |\n| patience       | int    | 2         |     2.0 |     6.0 |                  3.0 | transform_power_2_int |         0.00 |         |\n| initialization | factor | Default   |     0.0 |     2.0 |                  1.0 | None                  |       100.00 | ***     |\n\n\n\nspot_tuner.plot_importance(threshold=0.025,\n    filename=\"./figures/\" + experiment_name+\"_importance.png\")\n\n\n\n\nVariable importance plot, threshold 0.025.\n\n\n\n\n\n21.10.1 Get the Tuned Architecture\n\nfrom spotPython.light.utils import get_tuned_architecture\nconfig = get_tuned_architecture(spot_tuner, fun_control)\n\n\nTest on the full data set\n\n\nfrom spotPython.light.traintest import test_model\ntest_model(config, fun_control)\n\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=64, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.012926647388264517, inplace=False)\n    (3): Linear(in_features=64, out_features=32, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.012926647388264517, inplace=False)\n    (6): Linear(in_features=32, out_features=32, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.012926647388264517, inplace=False)\n    (9): Linear(in_features=32, out_features=16, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.012926647388264517, inplace=False)\n    (12): Linear(in_features=16, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃        Test metric        ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │    2.1438722610473633     │\n│      test_mapk_epoch      │    0.4611745774745941     │\n│          val_acc          │    0.41442716121673584    │\n│         val_loss          │    2.1438722610473633     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntest_model result: {'test_mapk_epoch': 0.4611745774745941, 'val_loss': 2.1438722610473633, 'val_acc': 0.41442716121673584, 'hp_metric': 2.1438722610473633}\n\n\n(2.1438722610473633, 0.41442716121673584)\n\n\n\nfrom spotPython.light.traintest import load_light_from_checkpoint\n\nmodel_loaded = load_light_from_checkpoint(config, fun_control)\n\nLoading model from runs/lightning_logs/64_128_256_LeakyReLU()_Adamax_0.012926647388264517_0.832718394912432_8_Kaiming_TEST/checkpoints/last.ckpt\n\n\n\n\n21.10.2 Cross Validation With Lightning\n\nThe KFold class from sklearn.model_selection is used to generate the folds for cross-validation.\nThese mechanism is used to generate the folds for the final evaluation of the model.\nThe CrossValidationDataModule class [SOURCE] is used to generate the folds for the hyperparameter tuning process.\nIt is called from the cv_model function [SOURCE].\n\n\nfrom spotPython.light.traintest import cv_model\ncv_model(config, fun_control)\n\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=64, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.012926647388264517, inplace=False)\n    (3): Linear(in_features=64, out_features=32, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.012926647388264517, inplace=False)\n    (6): Linear(in_features=32, out_features=32, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.012926647388264517, inplace=False)\n    (9): Linear(in_features=32, out_features=16, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.012926647388264517, inplace=False)\n    (12): Linear(in_features=16, out_features=11, bias=True)\n  )\n)\nk: 0\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=64, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.012926647388264517, inplace=False)\n    (3): Linear(in_features=64, out_features=32, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.012926647388264517, inplace=False)\n    (6): Linear(in_features=32, out_features=32, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.012926647388264517, inplace=False)\n    (9): Linear(in_features=32, out_features=16, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.012926647388264517, inplace=False)\n    (12): Linear(in_features=16, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     2.40067982673645      │\n│          val_acc          │    0.1267605572938919     │\n│         val_loss          │     2.40067982673645      │\n│        valid_mapk         │    0.18309858441352844    │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.18309858441352844, 'val_loss': 2.40067982673645, 'val_acc': 0.1267605572938919, 'hp_metric': 2.40067982673645}\nk: 1\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=64, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.012926647388264517, inplace=False)\n    (3): Linear(in_features=64, out_features=32, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.012926647388264517, inplace=False)\n    (6): Linear(in_features=32, out_features=32, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.012926647388264517, inplace=False)\n    (9): Linear(in_features=32, out_features=16, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.012926647388264517, inplace=False)\n    (12): Linear(in_features=16, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │    2.2687666416168213     │\n│          val_acc          │    0.23943662643432617    │\n│         val_loss          │    2.2687666416168213     │\n│        valid_mapk         │     0.32863849401474      │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.32863849401474, 'val_loss': 2.2687666416168213, 'val_acc': 0.23943662643432617, 'hp_metric': 2.2687666416168213}\nk: 2\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=64, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.012926647388264517, inplace=False)\n    (3): Linear(in_features=64, out_features=32, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.012926647388264517, inplace=False)\n    (6): Linear(in_features=32, out_features=32, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.012926647388264517, inplace=False)\n    (9): Linear(in_features=32, out_features=16, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.012926647388264517, inplace=False)\n    (12): Linear(in_features=16, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │    2.2070271968841553     │\n│          val_acc          │    0.3380281627178192     │\n│         val_loss          │    2.2070271968841553     │\n│        valid_mapk         │    0.39906102418899536    │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.39906102418899536, 'val_loss': 2.2070271968841553, 'val_acc': 0.3380281627178192, 'hp_metric': 2.2070271968841553}\nk: 3\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=64, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.012926647388264517, inplace=False)\n    (3): Linear(in_features=64, out_features=32, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.012926647388264517, inplace=False)\n    (6): Linear(in_features=32, out_features=32, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.012926647388264517, inplace=False)\n    (9): Linear(in_features=32, out_features=16, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.012926647388264517, inplace=False)\n    (12): Linear(in_features=16, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     2.157003402709961     │\n│          val_acc          │    0.39436620473861694    │\n│         val_loss          │     2.157003402709961     │\n│        valid_mapk         │    0.4600938856601715     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.4600938856601715, 'val_loss': 2.157003402709961, 'val_acc': 0.39436620473861694, 'hp_metric': 2.157003402709961}\nk: 4\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=64, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.012926647388264517, inplace=False)\n    (3): Linear(in_features=64, out_features=32, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.012926647388264517, inplace=False)\n    (6): Linear(in_features=32, out_features=32, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.012926647388264517, inplace=False)\n    (9): Linear(in_features=32, out_features=16, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.012926647388264517, inplace=False)\n    (12): Linear(in_features=16, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     2.294954538345337     │\n│          val_acc          │    0.23943662643432617    │\n│         val_loss          │     2.294954538345337     │\n│        valid_mapk         │    0.3004694879055023     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.3004694879055023, 'val_loss': 2.294954538345337, 'val_acc': 0.23943662643432617, 'hp_metric': 2.294954538345337}\nk: 5\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=64, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.012926647388264517, inplace=False)\n    (3): Linear(in_features=64, out_features=32, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.012926647388264517, inplace=False)\n    (6): Linear(in_features=32, out_features=32, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.012926647388264517, inplace=False)\n    (9): Linear(in_features=32, out_features=16, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.012926647388264517, inplace=False)\n    (12): Linear(in_features=16, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │    2.0768275260925293     │\n│          val_acc          │    0.4647887349128723     │\n│         val_loss          │    2.0768275260925293     │\n│        valid_mapk         │    0.5446009635925293     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.5446009635925293, 'val_loss': 2.0768275260925293, 'val_acc': 0.4647887349128723, 'hp_metric': 2.0768275260925293}\nk: 6\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=64, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.012926647388264517, inplace=False)\n    (3): Linear(in_features=64, out_features=32, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.012926647388264517, inplace=False)\n    (6): Linear(in_features=32, out_features=32, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.012926647388264517, inplace=False)\n    (9): Linear(in_features=32, out_features=16, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.012926647388264517, inplace=False)\n    (12): Linear(in_features=16, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │    2.1443779468536377     │\n│          val_acc          │    0.4225352108478546     │\n│         val_loss          │    2.1443779468536377     │\n│        valid_mapk         │    0.4530516564846039     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.4530516564846039, 'val_loss': 2.1443779468536377, 'val_acc': 0.4225352108478546, 'hp_metric': 2.1443779468536377}\nk: 7\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=64, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.012926647388264517, inplace=False)\n    (3): Linear(in_features=64, out_features=32, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.012926647388264517, inplace=False)\n    (6): Linear(in_features=32, out_features=32, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.012926647388264517, inplace=False)\n    (9): Linear(in_features=32, out_features=16, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.012926647388264517, inplace=False)\n    (12): Linear(in_features=16, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     2.038654088973999     │\n│          val_acc          │    0.5428571701049805     │\n│         val_loss          │     2.038654088973999     │\n│        valid_mapk         │    0.5761904716491699     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.5761904716491699, 'val_loss': 2.038654088973999, 'val_acc': 0.5428571701049805, 'hp_metric': 2.038654088973999}\nk: 8\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=64, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.012926647388264517, inplace=False)\n    (3): Linear(in_features=64, out_features=32, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.012926647388264517, inplace=False)\n    (6): Linear(in_features=32, out_features=32, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.012926647388264517, inplace=False)\n    (9): Linear(in_features=32, out_features=16, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.012926647388264517, inplace=False)\n    (12): Linear(in_features=16, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │    2.0311355590820312     │\n│          val_acc          │    0.5428571701049805     │\n│         val_loss          │    2.0311355590820312     │\n│        valid_mapk         │    0.5642856955528259     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.5642856955528259, 'val_loss': 2.0311355590820312, 'val_acc': 0.5428571701049805, 'hp_metric': 2.0311355590820312}\nk: 9\nmodel: NetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=64, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.012926647388264517, inplace=False)\n    (3): Linear(in_features=64, out_features=32, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.012926647388264517, inplace=False)\n    (6): Linear(in_features=32, out_features=32, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.012926647388264517, inplace=False)\n    (9): Linear(in_features=32, out_features=16, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.012926647388264517, inplace=False)\n    (12): Linear(in_features=16, out_features=11, bias=True)\n  )\n)\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     2.099412441253662     │\n│          val_acc          │    0.44285714626312256    │\n│         val_loss          │     2.099412441253662     │\n│        valid_mapk         │    0.4714285731315613     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'valid_mapk': 0.4714285731315613, 'val_loss': 2.099412441253662, 'val_acc': 0.44285714626312256, 'hp_metric': 2.099412441253662}\ncv_model mapk result: 0.4280918836593628\n\n\n0.4280918836593628\n\n\n\n\n\n\n\n\nNote: Evaluation for the Final Comaprison\n\n\n\n\nThis is the evaluation that will be used in the comparison.\n\n\n\n\n\n21.10.3 Detailed Hyperparameter Plots\n\nfilename = \"./figures/\" + experiment_name\nspot_tuner.plot_important_hyperparameter_contour(filename=filename)\n\nl1:  1.3098014876342001\nepochs:  0.140831886381637\nbatch_size:  0.5919967545081264\nlr_mult:  0.22059848750984945\ninitialization:  100.0\n\n\n\n\n\nContour plots.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n21.10.4 Parallel Coordinates Plot\n\nspot_tuner.parallel_plot()\n\n\n                                                \nParallel coordinates plots\n\n\n\n\n21.10.5 Plot all Combinations of Hyperparameters\n\nWarning: this may take a while.\n\n\nPLOT_ALL = False\nif PLOT_ALL:\n    n = spot_tuner.k\n    for i in range(n-1):\n        for j in range(i+1, n):\n            spot_tuner.plot_contour(i=i, j=j, min_z=min_z, max_z = max_z)\n\n\n\n21.10.6 Visualizing the Activation Distribution\n\n\n\n\n\n\nReference:\n\n\n\n\nThe following code is based on [PyTorch Lightning TUTORIAL 2: ACTIVATION FUNCTIONS], Author: Phillip Lippe, License: [CC BY-SA], Generated: 2023-03-15T09:52:39.179933.\n\n\n\nAfter we have trained the models, we can look at the actual activation values that find inside the model. For instance, how many neurons are set to zero in ReLU? Where do we find most values in Tanh? To answer these questions, we can write a simple function which takes a trained model, applies it to a batch of images, and plots the histogram of the activations inside the network:\n\nfrom spotPython.torch.activation import Sigmoid, Tanh, ReLU, LeakyReLU, ELU, Swish\nact_fn_by_name = {\"sigmoid\": Sigmoid, \"tanh\": Tanh, \"relu\": ReLU, \"leakyrelu\": LeakyReLU, \"elu\": ELU, \"swish\": Swish}\n\n\nfrom spotPython.hyperparameters.values import get_one_config_from_X\nX = spot_tuner.to_all_dim(spot_tuner.min_X.reshape(1,-1))\nconfig = get_one_config_from_X(X, fun_control)\nmodel = fun_control[\"core_model\"](**config, _L_in=64, _L_out=11)\nmodel\n\nNetLightBase(\n  (train_mapk): MAPK()\n  (valid_mapk): MAPK()\n  (test_mapk): MAPK()\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=64, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.012926647388264517, inplace=False)\n    (3): Linear(in_features=64, out_features=32, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.012926647388264517, inplace=False)\n    (6): Linear(in_features=32, out_features=32, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.012926647388264517, inplace=False)\n    (9): Linear(in_features=32, out_features=16, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.012926647388264517, inplace=False)\n    (12): Linear(in_features=16, out_features=11, bias=True)\n  )\n)\n\n\n\nfrom spotPython.utils.eda import visualize_activations\nvisualize_activations(model, device=\"cpu\", color=f\"C{0}\")"
  },
  {
    "objectID": "99_spot_doc.html#example-spot",
    "href": "99_spot_doc.html#example-spot",
    "title": "22  Documentation of the Sequential Parameter Optimization",
    "section": "22.1 Example: spot",
    "text": "22.1 Example: spot\n\nimport numpy as np\nfrom math import inf\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom scipy.optimize import shgo\nfrom scipy.optimize import direct\nfrom scipy.optimize import differential_evolution\nimport matplotlib.pyplot as plt\n\n\n22.1.1 The Objective Function\nThe spotPython package provides several classes of objective functions. We will use an analytical objective function, i.e., a function that can be described by a (closed) formula: \\[f(x) = x^2\\]\n\nfun = analytical().fun_sphere\n\n\nx = np.linspace(-1,1,100).reshape(-1,1)\ny = fun(x)\nplt.figure()\nplt.plot(x,y, \"k\")\nplt.show()\n\n\n\n\n\nspot_1 = spot.Spot(fun=fun,\n                   lower = np.array([-10]),\n                   upper = np.array([100]),\n                   fun_evals = 7,\n                   fun_repeats = 1,\n                   max_time = inf,\n                   noise = False,\n                   tolerance_x = np.sqrt(np.spacing(1)),\n                   var_type=[\"num\"],\n                   infill_criterion = \"y\",\n                   n_points = 1,\n                   seed=123,\n                   log_level = 50,\n                   show_models=True,\n                   fun_control = {},\n                   design_control={\"init_size\": 5,\n                                   \"repeats\": 1},\n                   surrogate_control={\"noise\": False,\n                                      \"cod_type\": \"norm\",\n                                      \"min_theta\": -4,\n                                      \"max_theta\": 3,\n                                      \"n_theta\": 1,\n                                      \"model_optimizer\": differential_evolution,\n                                      \"model_fun_evals\": 1000,\n                                      })\n\nspot’s __init__ method sets the control parameters. There are two parameter groups:\n\nexternal parameters can be specified by the user\ninternal parameters, which are handled by spot.\n\n\n\n22.1.2 External Parameters\n\n\n\n\n\n\n\n\n\n\nexternal parameter\ntype\ndescription\ndefault\nmandatory\n\n\n\n\nfun\nobject\nobjective function\n\nyes\n\n\nlower\narray\nlower bound\n\nyes\n\n\nupper\narray\nupper bound\n\nyes\n\n\nfun_evals\nint\nnumber of function evaluations\n15\nno\n\n\nfun_evals\nint\nnumber of function evaluations\n15\nno\n\n\nfun_control\ndict\nnoise etc.\n{}\nn\n\n\nmax_time\nint\nmax run time budget\ninf\nno\n\n\nnoise\nbool\nif repeated evaluations of fun results in different values, then noise should be set to True.\nFalse\nno\n\n\ntolerance_x\nfloat\ntolerance for new x solutions. Minimum distance of new solutions, generated by suggest_new_X, to already existing solutions. If zero (which is the default), every new solution is accepted.\n0\nno\n\n\nvar_type\nlist\nlist of type information, can be either \"num\" or \"factor\"\n[\"num\"]\nno\n\n\ninfill_criterion\nstring\nCan be \"y\", \"s\", \"ei\" (negative expected improvement), or \"all\"\n\"y\"\nno\n\n\nn_points\nint\nnumber of infill points\n1\nno\n\n\nseed\nint\ninitial seed. If Spot.run() is called twice, different results will be generated. To reproduce results, the seed can be used.\n123\nno\n\n\nlog_level\nint\nlog level with the following settings: NOTSET (0), DEBUG (10: Detailed information, typically of interest only when diagnosing problems.), INFO (20: Confirmation that things are working as expected.), WARNING (30: An indication that something unexpected happened, or indicative of some problem in the near future (e.g. ‘disk space low’). The software is still working as expected.), ERROR (40: Due to a more serious problem, the software has not been able to perform some function.), and CRITICAL (50: A serious error, indicating that the program itself may be unable to continue running.)\n50\nno\n\n\nshow_models\nbool\nPlot model. Currently only 1-dim functions are supported\nFalse\nno\n\n\ndesign\nobject\nexperimental design\nNone\nno\n\n\ndesign_control\ndict\ncontrol parameters\nsee below\nno\n\n\nsurrogate\n\nsurrogate model\nkriging\nno\n\n\nsurrogate_control\ndict\ncontrol parameters\nsee below\nno\n\n\noptimizer\nobject\noptimizer\nsee below\nno\n\n\noptimizer_control\ndict\ncontrol parameters\nsee below\nno\n\n\n\n\nBesides these single parameters, the following parameter dictionaries can be specified by the user:\n\nfun_control\ndesign_control\nsurrogate_control\noptimizer_control"
  },
  {
    "objectID": "99_spot_doc.html#the-fun_control-dictionary",
    "href": "99_spot_doc.html#the-fun_control-dictionary",
    "title": "22  Documentation of the Sequential Parameter Optimization",
    "section": "22.2 The fun_control Dictionary",
    "text": "22.2 The fun_control Dictionary\n\n\n\nexternal parameter\ntype\ndescription\ndefault\nmandatory\n\n\n\n\nsigma\nfloat\nnoise: standard deviation\n0\nyes\n\n\nseed\nint\nseed for rng\n124\nyes"
  },
  {
    "objectID": "99_spot_doc.html#the-design_control-dictionary",
    "href": "99_spot_doc.html#the-design_control-dictionary",
    "title": "22  Documentation of the Sequential Parameter Optimization",
    "section": "22.3 The design_control Dictionary",
    "text": "22.3 The design_control Dictionary\n\n\n\n\n\n\n\n\n\n\nexternal parameter\ntype\ndescription\ndefault\nmandatory\n\n\n\n\ninit_size\nint\ninitial sample size\n10\nyes\n\n\nrepeats\nint\nnumber of repeats of the initial sammples\n1\nyes"
  },
  {
    "objectID": "99_spot_doc.html#the-surrogate_control-dictionary",
    "href": "99_spot_doc.html#the-surrogate_control-dictionary",
    "title": "22  Documentation of the Sequential Parameter Optimization",
    "section": "22.4 The surrogate_control Dictionary",
    "text": "22.4 The surrogate_control Dictionary\n\n\n\n\n\n\n\n\n\n\nexternal parameter\ntype\ndescription\ndefault\nmandatory\n\n\n\n\nnoise\n\n\n\n\n\n\nmodel_optimizer\nobject\noptimizer\ndifferential_evolution\nno\n\n\nmodel_fun_evals\n\n\n\n\n\n\nmin_theta\n\n\n-3.\n\n\n\nmax_theta\n\n\n3.\n\n\n\nn_theta\n\n\n1\n\n\n\nn_p\n\n\n1\n\n\n\noptim_p\n\n\nFalse\n\n\n\ncod_type\n\n\n\"norm\"\n\n\n\nvar_type\n\n\n\n\n\n\nuse_cod_y\nbool\n\nFalse"
  },
  {
    "objectID": "99_spot_doc.html#the-optimizer_control-dictionary",
    "href": "99_spot_doc.html#the-optimizer_control-dictionary",
    "title": "22  Documentation of the Sequential Parameter Optimization",
    "section": "22.5 The optimizer_control Dictionary",
    "text": "22.5 The optimizer_control Dictionary\n\n\n\n\n\n\n\n\n\n\nexternal parameter\ntype\ndescription\ndefault\nmandatory\n\n\n\n\nmax_iter\nint\nmax number of iterations. Note: these are the cheap evaluations on the surrogate.\n1000\nno"
  },
  {
    "objectID": "99_spot_doc.html#run",
    "href": "99_spot_doc.html#run",
    "title": "22  Documentation of the Sequential Parameter Optimization",
    "section": "22.6 Run",
    "text": "22.6 Run\n\nspot_1.run()\n\n\n\n\n\n\n\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x15c092470&gt;"
  },
  {
    "objectID": "99_spot_doc.html#print-the-results",
    "href": "99_spot_doc.html#print-the-results",
    "title": "22  Documentation of the Sequential Parameter Optimization",
    "section": "22.7 Print the Results",
    "text": "22.7 Print the Results\n\nspot_1.print_results()\n\nmin y: 0.29847171516431314\nx0: -0.5463256493743572\n\n\n[['x0', -0.5463256493743572]]"
  },
  {
    "objectID": "99_spot_doc.html#show-the-progress",
    "href": "99_spot_doc.html#show-the-progress",
    "title": "22  Documentation of the Sequential Parameter Optimization",
    "section": "22.8 Show the Progress",
    "text": "22.8 Show the Progress\n\nspot_1.plot_progress()"
  },
  {
    "objectID": "99_spot_doc.html#visualize-the-surrogate",
    "href": "99_spot_doc.html#visualize-the-surrogate",
    "title": "22  Documentation of the Sequential Parameter Optimization",
    "section": "22.9 Visualize the Surrogate",
    "text": "22.9 Visualize the Surrogate\n\nThe plot method of the kriging surrogate is used.\nNote: the plot uses the interval defined by the ranges of the natural variables.\n\n\nspot_1.surrogate.plot()\n\n&lt;Figure size 864x576 with 0 Axes&gt;"
  },
  {
    "objectID": "99_spot_doc.html#init-build-initial-design",
    "href": "99_spot_doc.html#init-build-initial-design",
    "title": "22  Documentation of the Sequential Parameter Optimization",
    "section": "22.10 Init: Build Initial Design",
    "text": "22.10 Init: Build Initial Design\n\nfrom spotPython.design.spacefilling import spacefilling\nfrom spotPython.build.kriging import Kriging\nfrom spotPython.fun.objectivefunctions import analytical\ngen = spacefilling(2)\nrng = np.random.RandomState(1)\nlower = np.array([-5,-0])\nupper = np.array([10,15])\nfun = analytical().fun_branin\nfun_control = {\"sigma\": 0,\n               \"seed\": 123}\n\nX = gen.scipy_lhd(10, lower=lower, upper = upper)\nprint(X)\ny = fun(X, fun_control=fun_control)\nprint(y)\n\n[[ 8.97647221 13.41926847]\n [ 0.66946019  1.22344228]\n [ 5.23614115 13.78185824]\n [ 5.6149825  11.5851384 ]\n [-1.72963184  1.66516096]\n [-4.26945568  7.1325531 ]\n [ 1.26363761 10.17935555]\n [ 2.88779942  8.05508969]\n [-3.39111089  4.15213772]\n [ 7.30131231  5.22275244]]\n[128.95676449  31.73474356 172.89678121 126.71295908  64.34349975\n  70.16178611  48.71407916  31.77322887  76.91788181  30.69410529]"
  },
  {
    "objectID": "99_spot_doc.html#replicability",
    "href": "99_spot_doc.html#replicability",
    "title": "22  Documentation of the Sequential Parameter Optimization",
    "section": "22.11 Replicability",
    "text": "22.11 Replicability\nSeed\n\ngen = spacefilling(2, seed=123)\nX0 = gen.scipy_lhd(3)\ngen = spacefilling(2, seed=345)\nX1 = gen.scipy_lhd(3)\nX2 = gen.scipy_lhd(3)\ngen = spacefilling(2, seed=123)\nX3 = gen.scipy_lhd(3)\nX0, X1, X2, X3\n\n(array([[0.77254938, 0.31539299],\n        [0.59321338, 0.93854273],\n        [0.27469803, 0.3959685 ]]),\n array([[0.78373509, 0.86811887],\n        [0.06692621, 0.6058029 ],\n        [0.41374778, 0.00525456]]),\n array([[0.121357  , 0.69043832],\n        [0.41906219, 0.32838498],\n        [0.86742658, 0.52910374]]),\n array([[0.77254938, 0.31539299],\n        [0.59321338, 0.93854273],\n        [0.27469803, 0.3959685 ]]))"
  },
  {
    "objectID": "99_spot_doc.html#surrogates",
    "href": "99_spot_doc.html#surrogates",
    "title": "22  Documentation of the Sequential Parameter Optimization",
    "section": "22.12 Surrogates",
    "text": "22.12 Surrogates\n\n22.12.1 A Simple Predictor\nThe code below shows how to use a simple model for prediction. Assume that only two (very costly) measurements are available:\n\nf(0) = 0.5\nf(2) = 2.5\n\nWe are interested in the value at \\(x_0 = 1\\), i.e., \\(f(x_0 = 1)\\), but cannot run an additional, third experiment.\n\nfrom sklearn import linear_model\nX = np.array([[0], [2]])\ny = np.array([0.5, 2.5])\nS_lm = linear_model.LinearRegression()\nS_lm = S_lm.fit(X, y)\nX0 = np.array([[1]])\ny0 = S_lm.predict(X0)\nprint(y0)\n\n[1.5]\n\n\nCentral Idea: Evaluation of the surrogate model S_lm is much cheaper (or / and much faster) than running the real-world experiment \\(f\\)."
  },
  {
    "objectID": "99_spot_doc.html#demotest-objective-function-fails",
    "href": "99_spot_doc.html#demotest-objective-function-fails",
    "title": "22  Documentation of the Sequential Parameter Optimization",
    "section": "22.13 Demo/Test: Objective Function Fails",
    "text": "22.13 Demo/Test: Objective Function Fails\nSPOT expects np.nan values from failed objective function values. These are handled. Note: SPOT’s counter considers only successful executions of the objective function.\n\nimport numpy as np\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nimport numpy as np\nfrom math import inf\n# number of initial points:\nni = 20\n# number of points\nn = 30\n\nfun = analytical().fun_random_error\nlower = np.array([-1])\nupper = np.array([1])\ndesign_control={\"init_size\": ni}\n\nspot_1 = spot.Spot(fun=fun,\n            lower = lower,\n            upper= upper,\n            fun_evals = n,\n            show_progress=False,\n            design_control=design_control,)\nspot_1.run()\n# To check whether the run was successfully completed,\n# we compare the number of evaluated points to the specified\n# number of points.\nassert spot_1.y.shape[0] == n\n\n[ 0.53176481 -0.9053821  -0.02203599 -0.21843718  0.78240941 -0.58120945\n         nan  0.67234256  0.31802454 -0.68898927 -0.75129705         nan\n  0.41757584         nan  0.82585329  0.23700598 -0.49274073 -0.82319082\n -0.17991251  0.1481835 ]\n[-1.]\n\n\n[-0.47259301]\n\n\n\n[0.95541987]\n\n\n[0.17335968]\n[nan]\n\n\n[-0.58552368]\n[-0.20126111]\n\n\n[nan]\n\n\n[-0.60100809]\n\n\n[-0.97897336]\n[-0.2748985]\n\n\n[0.8359486]\n[0.99035591]\n\n\n[0.01641232]\n\n\n[nan]\n\n\n[0.5629346]"
  },
  {
    "objectID": "99_spot_doc.html#sec-detailed-data-splitting",
    "href": "99_spot_doc.html#sec-detailed-data-splitting",
    "title": "22  Documentation of the Sequential Parameter Optimization",
    "section": "22.14 PyTorch: Detailed Description of the Data Splitting",
    "text": "22.14 PyTorch: Detailed Description of the Data Splitting\n\n22.14.1 Description of the \"train_hold_out\" Setting\nThe \"train_hold_out\" setting is used by default. It uses the loss function specfied in fun_control and the metric specified in fun_control.\n\nFirst, the method HyperTorch().fun_torch is called.\nfun_torc(), which is implemented in the file hypertorch.py, calls evaluate_hold_out() as follows:\n\ndf_eval, _ = evaluate_hold_out(\n    model,\n    train_dataset=fun_control[\"train\"],\n    shuffle=self.fun_control[\"shuffle\"],\n    loss_function=self.fun_control[\"loss_function\"],\n    metric=self.fun_control[\"metric_torch\"],\n    device=self.fun_control[\"device\"],\n    show_batch_interval=self.fun_control[\"show_batch_interval\"],\n    path=self.fun_control[\"path\"],\n    task=self.fun_control[\"task\"],\n    writer=self.fun_control[\"writer\"],\n    writerId=config_id,\n)\nNote: Only the data set fun_control[\"train\"] is used for training and validation. It is used in evaluate_hold_out as follows:\ntrainloader, valloader = create_train_val_data_loaders(\n                dataset=train_dataset, batch_size=batch_size_instance, shuffle=shuffle\n            )\ncreate_train_val_data_loaders() splits the train_dataset into trainloader and valloader using torch.utils.data.random_split() as follows:\ndef create_train_val_data_loaders(dataset, batch_size, shuffle, num_workers=0):\n    test_abs = int(len(dataset) * 0.6)\n    train_subset, val_subset = random_split(dataset, [test_abs, len(dataset) - test_abs])\n    trainloader = torch.utils.data.DataLoader(\n        train_subset, batch_size=int(batch_size), shuffle=shuffle, num_workers=num_workers\n    )\n    valloader = torch.utils.data.DataLoader(\n        val_subset, batch_size=int(batch_size), shuffle=shuffle, num_workers=num_workers\n    )\n    return trainloader, valloader\nThe optimizer is set up as follows:\noptimizer_instance = net.optimizer\nlr_mult_instance = net.lr_mult\nsgd_momentum_instance = net.sgd_momentum\noptimizer = optimizer_handler(\n    optimizer_name=optimizer_instance,\n    params=net.parameters(),\n    lr_mult=lr_mult_instance,\n    sgd_momentum=sgd_momentum_instance,\n)\n\nevaluate_hold_out() sets the net attributes such as epochs, batch_size, optimizer, and patience. For each epoch, the methods train_one_epoch() and validate_one_epoch() are called, the former for training and the latter for validation and early stopping. The validation loss from the last epoch (not the best validation loss) is returned from evaluate_hold_out.\nThe method train_one_epoch() is implemented as follows:\n\ndef train_one_epoch(\n    net,\n    trainloader,\n    batch_size,\n    loss_function,\n    optimizer,\n    device,\n    show_batch_interval=10_000,\n    task=None,\n):\n    running_loss = 0.0\n    epoch_steps = 0\n    for batch_nr, data in enumerate(trainloader, 0):\n        input, target = data\n        input, target = input.to(device), target.to(device)\n        optimizer.zero_grad()\n        output = net(input)\n        if task == \"regression\":\n            target = target.unsqueeze(1)\n            if target.shape == output.shape:\n                loss = loss_function(output, target)\n            else:\n                raise ValueError(f\"Shapes of target and output do not match:\n                 {target.shape} vs {output.shape}\")\n        elif task == \"classification\":\n            loss = loss_function(output, target)\n        else:\n            raise ValueError(f\"Unknown task: {task}\")\n        loss.backward()\n        torch.nn.utils.clip_grad_norm_(net.parameters(), max_norm=1.0)\n        optimizer.step()\n        running_loss += loss.item()\n        epoch_steps += 1\n        if batch_nr % show_batch_interval == (show_batch_interval - 1):  \n            print(\n                \"Batch: %5d. Batch Size: %d. Training Loss (running): %.3f\"\n                % (batch_nr + 1, int(batch_size), running_loss / epoch_steps)\n            )\n            running_loss = 0.0\n    return loss.item()\n\nThe method validate_one_epoch() is implemented as follows:\n\ndef validate_one_epoch(net, valloader, loss_function, metric, device, task):\n    val_loss = 0.0\n    val_steps = 0\n    total = 0\n    correct = 0\n    metric.reset()\n    for i, data in enumerate(valloader, 0):\n        # get batches\n        with torch.no_grad():\n            input, target = data\n            input, target = input.to(device), target.to(device)\n            output = net(input)\n            # print(f\"target: {target}\")\n            # print(f\"output: {output}\")\n            if task == \"regression\":\n                target = target.unsqueeze(1)\n                if target.shape == output.shape:\n                    loss = loss_function(output, target)\n                else:\n                    raise ValueError(f\"Shapes of target and output \n                        do not match: {target.shape} vs {output.shape}\")\n                metric_value = metric.update(output, target)\n            elif task == \"classification\":\n                loss = loss_function(output, target)\n                metric_value = metric.update(output, target)\n                _, predicted = torch.max(output.data, 1)\n                total += target.size(0)\n                correct += (predicted == target).sum().item()\n            else:\n                raise ValueError(f\"Unknown task: {task}\")\n            val_loss += loss.cpu().numpy()\n            val_steps += 1\n    loss = val_loss / val_steps\n    print(f\"Loss on hold-out set: {loss}\")\n    if task == \"classification\":\n        accuracy = correct / total\n        print(f\"Accuracy on hold-out set: {accuracy}\")\n    # metric on all batches using custom accumulation\n    metric_value = metric.compute()\n    metric_name = type(metric).__name__\n    print(f\"{metric_name} value on hold-out data: {metric_value}\")\n    return metric_value, loss\n\n22.14.1.1 Description of the \"test_hold_out\" Setting\nIt uses the loss function specfied in fun_control and the metric specified in fun_control.\n\nFirst, the method HyperTorch().fun_torch is called.\nfun_torc() calls spotPython.torch.traintest.evaluate_hold_out() similar to the \"train_hold_out\" setting with one exception: It passes an additional test data set to evaluate_hold_out() as follows:\n\ntest_dataset=fun_control[\"test\"]\nevaluate_hold_out() calls create_train_test_data_loaders instead of create_train_val_data_loaders: The two data sets are used in create_train_test_data_loaders as follows:\ndef create_train_test_data_loaders(dataset, batch_size, shuffle, test_dataset, \n        num_workers=0):\n    trainloader = torch.utils.data.DataLoader(\n        dataset, batch_size=int(batch_size), shuffle=shuffle, \n        num_workers=num_workers\n    )\n    testloader = torch.utils.data.DataLoader(\n        test_dataset, batch_size=int(batch_size), shuffle=shuffle, \n        num_workers=num_workers\n    )\n    return trainloader, testloader\n\nThe following steps are identical to the \"train_hold_out\" setting. Only a different data loader is used for testing.\n\n\n\n22.14.1.2 Detailed Description of the \"train_cv\" Setting\nIt uses the loss function specfied in fun_control and the metric specified in fun_control.\n\nFirst, the method HyperTorch().fun_torch is called.\nfun_torc() calls spotPython.torch.traintest.evaluate_cv() as follows (Note: Only the data set fun_control[\"train\"] is used for CV.):\n\ndf_eval, _ = evaluate_cv(\n    model,\n    dataset=fun_control[\"train\"],\n    shuffle=self.fun_control[\"shuffle\"],\n    device=self.fun_control[\"device\"],\n    show_batch_interval=self.fun_control[\"show_batch_interval\"],\n    task=self.fun_control[\"task\"],\n    writer=self.fun_control[\"writer\"],\n    writerId=config_id,\n)\n\nIn `evaluate_cv(), the following steps are performed: The optimizer is set up as follows:\n\noptimizer_instance = net.optimizer\nlr_instance = net.lr\nsgd_momentum_instance = net.sgd_momentum\noptimizer = optimizer_handler(optimizer_name=optimizer_instance,\n     params=net.parameters(), lr_mult=lr_mult_instance)\nevaluate_cv() sets the net attributes such as epochs, batch_size, optimizer, and patience. CV is implemented as follows:\ndef evaluate_cv(\n    net,\n    dataset,\n    shuffle=False,\n    loss_function=None,\n    num_workers=0,\n    device=None,\n    show_batch_interval=10_000,\n    metric=None,\n    path=None,\n    task=None,\n    writer=None,\n    writerId=None,\n):\n    lr_mult_instance = net.lr_mult\n    epochs_instance = net.epochs\n    batch_size_instance = net.batch_size\n    k_folds_instance = net.k_folds\n    optimizer_instance = net.optimizer\n    patience_instance = net.patience\n    sgd_momentum_instance = net.sgd_momentum\n    removed_attributes, net = get_removed_attributes_and_base_net(net)\n    metric_values = {}\n    loss_values = {}\n    try:\n        device = getDevice(device=device)\n        if torch.cuda.is_available():\n            device = \"cuda:0\"\n            if torch.cuda.device_count() &gt; 1:\n                print(\"We will use\", torch.cuda.device_count(), \"GPUs!\")\n                net = nn.DataParallel(net)\n        net.to(device)\n        optimizer = optimizer_handler(\n            optimizer_name=optimizer_instance,\n            params=net.parameters(),\n            lr_mult=lr_mult_instance,\n            sgd_momentum=sgd_momentum_instance,\n        )\n        kfold = KFold(n_splits=k_folds_instance, shuffle=shuffle)\n        for fold, (train_ids, val_ids) in enumerate(kfold.split(dataset)):\n            print(f\"Fold: {fold + 1}\")\n            train_subsampler = torch.utils.data.SubsetRandomSampler(train_ids)\n            val_subsampler = torch.utils.data.SubsetRandomSampler(val_ids)\n            trainloader = torch.utils.data.DataLoader(\n                dataset, batch_size=batch_size_instance, \n                sampler=train_subsampler, num_workers=num_workers\n            )\n            valloader = torch.utils.data.DataLoader(\n                dataset, batch_size=batch_size_instance, \n                sampler=val_subsampler, num_workers=num_workers\n            )\n            # each fold starts with new weights:\n            reset_weights(net)\n            # Early stopping parameters\n            best_val_loss = float(\"inf\")\n            counter = 0\n            for epoch in range(epochs_instance):\n                print(f\"Epoch: {epoch + 1}\")\n                # training loss from one epoch:\n                training_loss = train_one_epoch(\n                    net=net,\n                    trainloader=trainloader,\n                    batch_size=batch_size_instance,\n                    loss_function=loss_function,\n                    optimizer=optimizer,\n                    device=device,\n                    show_batch_interval=show_batch_interval,\n                    task=task,\n                )\n                # Early stopping check. Calculate validation loss from one epoch:\n                metric_values[fold], loss_values[fold] = validate_one_epoch(\n                    net, valloader=valloader, loss_function=loss_function, \n                    metric=metric, device=device, task=task\n                )\n                # Log the running loss averaged per batch\n                metric_name = \"Metric\"\n                if metric is None:\n                    metric_name = type(metric).__name__\n                    print(f\"{metric_name} value on hold-out data: \n                        {metric_values[fold]}\")\n                if writer is not None:\n                    writer.add_scalars(\n                        \"evaluate_cv fold:\" + str(fold + 1) + \n                        \". Train & Val Loss and Val Metric\" + writerId,\n                        {\"Train loss\": training_loss, \"Val loss\": \n                        loss_values[fold], metric_name: metric_values[fold]},\n                        epoch + 1,\n                    )\n                    writer.flush()\n                if loss_values[fold] &lt; best_val_loss:\n                    best_val_loss = loss_values[fold]\n                    counter = 0\n                    # save model:\n                    if path is not None:\n                        torch.save(net.state_dict(), path)\n                else:\n                    counter += 1\n                    if counter &gt;= patience_instance:\n                        print(f\"Early stopping at epoch {epoch}\")\n                        break\n        df_eval = sum(loss_values.values()) / len(loss_values.values())\n        df_metrics = sum(metric_values.values()) / len(metric_values.values())\n        df_preds = np.nan\n    except Exception as err:\n        print(f\"Error in Net_Core. Call to evaluate_cv() failed. {err=}, \n            {type(err)=}\")\n        df_eval = np.nan\n        df_preds = np.nan\n    add_attributes(net, removed_attributes)\n    if writer is not None:\n        metric_name = \"Metric\"\n        if metric is None:\n            metric_name = type(metric).__name__\n        writer.add_scalars(\n            \"CV: Val Loss and Val Metric\" + writerId,\n            {\"CV-loss\": df_eval, metric_name: df_metrics},\n            epoch + 1,\n        )\n        writer.flush()\n    return df_eval, df_preds, df_metrics\n\nThe method train_fold() is implemented as shown above.\nThe method validate_one_epoch() is implemented as shown above. In contrast to the hold-out setting, it is called for each of the \\(k\\) folds. The results are stored in a dictionaries metric_values and loss_values. The results are averaged over the \\(k\\) folds and returned as df_eval.\n\n\n\n22.14.1.3 Detailed Description of the \"test_cv\" Setting\nIt uses the loss function specfied in fun_control and the metric specified in fun_control.\n\nFirst, the method HyperTorch().fun_torch is called.\nfun_torc() calls spotPython.torch.traintest.evaluate_cv() as follows:\n\ndf_eval, _ = evaluate_cv(\n    model,\n    dataset=fun_control[\"test\"],\n    shuffle=self.fun_control[\"shuffle\"],\n    device=self.fun_control[\"device\"],\n    show_batch_interval=self.fun_control[\"show_batch_interval\"],\n    task=self.fun_control[\"task\"],\n    writer=self.fun_control[\"writer\"],\n    writerId=config_id,\n)\nNote: The data set fun_control[\"test\"] is used for CV. The rest is the same as for the \"train_cv\" setting.\n\n\n22.14.1.4 Detailed Description of the Final Model Training and Evaluation\nThere are two methods that can be used for the final evaluation of a Pytorch model:\n\n\"train_tuned and\n\"test_tuned\".\n\ntrain_tuned() is just a wrapper to evaluate_hold_out using the train data set. It is implemented as follows:\ndef train_tuned(\n    net,\n    train_dataset,\n    shuffle,\n    loss_function,\n    metric,\n    device=None,\n    show_batch_interval=10_000,\n    path=None,\n    task=None,\n    writer=None,\n):\n    evaluate_hold_out(\n        net=net,\n        train_dataset=train_dataset,\n        shuffle=shuffle,\n        test_dataset=None,\n        loss_function=loss_function,\n        metric=metric,\n        device=device,\n        show_batch_interval=show_batch_interval,\n        path=path,\n        task=task,\n        writer=writer,\n    )\nThe test_tuned() procedure is implemented as follows:\ndef test_tuned(net, shuffle, test_dataset=None, loss_function=None,\n    metric=None, device=None, path=None, task=None):\n    batch_size_instance = net.batch_size\n    removed_attributes, net = get_removed_attributes_and_base_net(net)\n    if path is not None:\n        net.load_state_dict(torch.load(path))\n        net.eval()\n    try:\n        device = getDevice(device=device)\n        if torch.cuda.is_available():\n            device = \"cuda:0\"\n            if torch.cuda.device_count() &gt; 1:\n                print(\"We will use\", torch.cuda.device_count(), \"GPUs!\")\n                net = nn.DataParallel(net)\n        net.to(device)\n        valloader = torch.utils.data.DataLoader(\n            test_dataset, batch_size=int(batch_size_instance),\n            shuffle=shuffle, \n            num_workers=0\n        )\n        metric_value, loss = validate_one_epoch(\n            net, valloader=valloader, loss_function=loss_function,\n            metric=metric, device=device, task=task\n        )\n        df_eval = loss\n        df_metric = metric_value\n        df_preds = np.nan\n    except Exception as err:\n        print(f\"Error in Net_Core. Call to test_tuned() failed. {err=}, \n            {type(err)=}\")\n        df_eval = np.nan\n        df_metric = np.nan\n        df_preds = np.nan\n    add_attributes(net, removed_attributes)\n    print(f\"Final evaluation: Validation loss: {df_eval}\")\n    print(f\"Final evaluation: Validation metric: {df_metric}\")\n    print(\"----------------------------------------------\")\n    return df_eval, df_preds, df_metric"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Bartz, Eva, Thomas Bartz-Beielstein, Martin Zaefferer, and Olaf\nMersmann, eds. 2022. Hyperparameter Tuning for\nMachine and Deep Learning with R - A Practical Guide.\nSpringer.\n\n\nBartz-Beielstein, Thomas. 2023. “PyTorch\nHyperparameter Tuning with SPOT: Comparison with Ray\nTuner and Default Hyperparameters on\nCIFAR10.” https://github.com/sequential-parameter-optimization/spotPython/blob/main/notebooks/14_spot_ray_hpt_torch_cifar10.ipynb.\n\n\nBartz-Beielstein, Thomas, Jürgen Branke, Jörn Mehnen, and Olaf Mersmann.\n2014. “Evolutionary Algorithms.” Wiley\nInterdisciplinary Reviews: Data Mining and Knowledge Discovery 4\n(3): 178–95.\n\n\nBartz-Beielstein, Thomas, Carola Doerr, Jakob Bossek, Sowmya\nChandrasekaran, Tome Eftimov, Andreas Fischbach, Pascal Kerschke, et al.\n2020. “Benchmarking in Optimization: Best Practice and Open\nIssues.” arXiv. https://arxiv.org/abs/2007.03488.\n\n\nBartz-Beielstein, Thomas, Christian Lasarczyk, and Mike Preuss. 2005.\n“Sequential Parameter Optimization.” In\nProceedings 2005 Congress on Evolutionary\nComputation (CEC’05), Edinburgh, Scotland, edited by B McKay\net al., 773–80. Piscataway NJ: IEEE Press.\n\n\nLewis, R M, V Torczon, and M W Trosset. 2000. “Direct search methods: Then and now.”\nJournal of Computational and Applied Mathematics 124 (1–2):\n191–207.\n\n\nLi, Lisha, Kevin Jamieson, Giulia DeSalvo, Afshin Rostamizadeh, and\nAmeet Talwalkar. 2016. “Hyperband: A Novel\nBandit-Based Approach to Hyperparameter Optimization.”\narXiv e-Prints, March, arXiv:1603.06560.\n\n\nMeignan, David, Sigrid Knust, Jean-Marc Frayet, Gilles Pesant, and\nNicolas Gaud. 2015. “A Review and Taxonomy of\nInteractive Optimization Methods in Operations Research.”\nACM Transactions on Interactive Intelligent Systems, September.\n\n\nMontiel, Jacob, Max Halford, Saulo Martiello Mastelini, Geoffrey\nBolmier, Raphael Sourty, Robin Vaysse, Adil Zouitine, et al. 2021.\n“River: Machine Learning for Streaming Data in Python.”\n\n\nPyTorch. 2023a. “Hyperparameter Tuning with Ray Tune.” https://pytorch.org/tutorials/beginner/hyperparameter_tuning_tutorial.html.\n\n\n———. 2023b. “Training a Classifier.” https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html."
  }
]