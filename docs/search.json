[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hyperparameter-tuning Cookbook",
    "section": "",
    "text": "Preface\nThe goal of hyperparameter tuning (or hyperparameter optimization) is to optimize the hyperparameters to improve the performance of the machine or deep learning model.\nspotPython (“Sequential Parameter Optimization Toolbox in Python”) is the Python version of the well-known hyperparameter tuner SPOT, which has been developed in the R programming environment for statistical analysis for over a decade. The related open-access book is available here: Hyperparameter Tuning for Machine and Deep Learning with R—A Practical Guide.\nscikit-learn is a Python module for machine learning built on top of SciPy and is distributed under the 3-Clause BSD license. The project was started in 2007 by David Cournapeau as a Google Summer of Code project, and since then many volunteers have contributed.\nPyTorch is an optimized tensor library for deep learning using GPUs and CPUs.\nRiver is a Python library for online machine learning. It is designed to be used in real-world environments, where not all data is available at once, but streaming in."
  },
  {
    "objectID": "index.html#citation",
    "href": "index.html#citation",
    "title": "Hyperparameter-tuning Cookbook",
    "section": "Citation",
    "text": "Citation\nIf this document has been useful to you and you wish to cite it in a scientific publication, please refer to the following paper:\n@ARTICLE{bart23earxiv,\n       author = {{Bartz-Beielstein}, Thomas},\n        title = \"{PyTorch Hyperparameter Tuning -- A Tutorial for spotPython}\",\n      journal = {arXiv e-prints},\n     keywords = {Computer Science - Machine Learning, Computer Science - Artificial Intelligence, Mathematics - Numerical Analysis, 68T07, A.1, B.8.0, G.1.6, G.4, I.2.8},\n         year = 2023,\n        month = may,\n          eid = {arXiv:2305.11930},\n        pages = {arXiv:2305.11930},\n          doi = {10.48550/arXiv.2305.11930},\narchivePrefix = {arXiv},\n       eprint = {2305.11930},\n primaryClass = {cs.LG},\n       adsurl = {https://ui.adsabs.harvard.edu/abs/2023arXiv230511930B},\n      adsnote = {Provided by the SAO/NASA Astrophysics Data System}\n}"
  },
  {
    "objectID": "01_spot_intro.html#sec-spot",
    "href": "01_spot_intro.html#sec-spot",
    "title": "1  Introduction: Hyperparameter Tuning",
    "section": "1.1 The Hyperparameter Tuning Software SPOT",
    "text": "1.1 The Hyperparameter Tuning Software SPOT\nSurrogate model based optimization methods are common approaches in simulation and optimization. SPOT was developed because there is a great need for sound statistical analysis of simulation and optimization algorithms. SPOT includes methods for tuning based on classical regression and analysis of variance techniques. It presents tree-based models such as classification and regression trees and random forests as well as Bayesian optimization (Gaussian process models, also known as Kriging). Combinations of different meta-modeling approaches are possible. SPOT comes with a sophisticated surrogate model based optimization method, that can handle discrete and continuous inputs. Furthermore, any model implemented in scikit-learn can be used out-of-the-box as a surrogate in spotPython.\nSPOT implements key techniques such as exploratory fitness landscape analysis and sensitivity analysis. It can be used to understand the performance of various algorithms, while simultaneously giving insights into their algorithmic behavior. In addition, SPOT can be used as an optimizer and for automatic and interactive tuning. Details on SPOT and its use in practice are given by Bartz et al. (2022).\nA typical hyperparameter tuning process with spotPython consists of the following steps:\n\nLoading the data (training and test datasets), see Section 13.3.\nSpecification of the preprocessing model, see Section 13.4.1. This model is called prep_model (“preparation” or pre-processing). The information required for the hyperparameter tuning is stored in the dictionary fun_control. Thus, the information needed for the execution of the hyperparameter tuning is available in a readable form.\nSelection of the machine learning or deep learning model to be tuned, see Section 13.4.2. This is called the core_model. Once the core_model is defined, then the associated hyperparameters are stored in the fun_control dictionary. First, the hyperparameters of the core_model are initialized with the default values of the core_model. As default values we use the default values contained in the spotPython package for the algorithms of the torch package.\nModification of the default values for the hyperparameters used in core_model, see Section 13.5.3.1. This step is optional.\n\nnumeric parameters are modified by changing the bounds.\ncategorical parameters are modified by changing the categories (“levels”).\n\nSelection of target function (loss function) for the optimizer, see Section 13.8.\nCalling SPOT with the corresponding parameters, see Section 13.12. The results are stored in a dictionary and are available for further analysis.\nPresentation, visualization and interpretation of the results, see Section 13.14."
  },
  {
    "objectID": "01_spot_intro.html#spot-as-an-optimizer",
    "href": "01_spot_intro.html#spot-as-an-optimizer",
    "title": "1  Introduction: Hyperparameter Tuning",
    "section": "1.2 Spot as an Optimizer",
    "text": "1.2 Spot as an Optimizer\nThe spot loop consists of the following steps:\n\nInit: Build initial design \\(X\\)\nEvaluate initial design on real objective \\(f\\): \\(y = f(X)\\)\nBuild surrogate: \\(S = S(X,y)\\)\nOptimize on surrogate: \\(X_0 = \\text{optimize}(S)\\)\nEvaluate on real objective: \\(y_0 = f(X_0)\\)\nImpute (Infill) new points: \\(X = X \\cup X_0\\), \\(y = y \\cup y_0\\).\nGot 3.\n\nCentral Idea: Evaluation of the surrogate model S is much cheaper (or / and much faster) than running the real-world experiment \\(f\\). We start with a small example."
  },
  {
    "objectID": "01_spot_intro.html#example-spot-and-the-sphere-function",
    "href": "01_spot_intro.html#example-spot-and-the-sphere-function",
    "title": "1  Introduction: Hyperparameter Tuning",
    "section": "1.3 Example: Spot and the Sphere Function",
    "text": "1.3 Example: Spot and the Sphere Function\n\nimport numpy as np\nfrom math import inf\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom scipy.optimize import shgo\nfrom scipy.optimize import direct\nfrom scipy.optimize import differential_evolution\nimport matplotlib.pyplot as plt\n\n\n1.3.1 The Objective Function: Sphere\nThe spotPython package provides several classes of objective functions. We will use an analytical objective function, i.e., a function that can be described by a (closed) formula: \\[f(x) = x^2\\]\n\nfun = analytical().fun_sphere\n\nWe can apply the function fun to input values and plot the result:\n\nx = np.linspace(-1,1,100).reshape(-1,1)\ny = fun(x)\nplt.figure()\nplt.plot(x, y, \"k\")\nplt.show()\n\n\n\n\n\nspot_0 = spot.Spot(fun=fun,\n                   lower = np.array([-1]),\n                   upper = np.array([1]))\n\n\nspot_0.run()\n\n&lt;spotPython.spot.spot.Spot at 0x16c96bc10&gt;\n\n\n\nspot_0.print_results()\n\nmin y: 3.696886711914087e-10\nx0: 1.922728975158508e-05\n\n\n[['x0', 1.922728975158508e-05]]\n\n\n\nspot_0.plot_progress(log_y=True)\n\n\n\n\n\nspot_0.plot_model()"
  },
  {
    "objectID": "01_spot_intro.html#spot-parameters-fun_evals-init_size-and-show_models",
    "href": "01_spot_intro.html#spot-parameters-fun_evals-init_size-and-show_models",
    "title": "1  Introduction: Hyperparameter Tuning",
    "section": "1.4 Spot Parameters: fun_evals, init_size and show_models",
    "text": "1.4 Spot Parameters: fun_evals, init_size and show_models\nWe will modify three parameters:\n\nThe number of function evaluations (fun_evals)\nThe size of the initial design (init_size)\nThe parameter show_models, which visualizes the search process for 1-dim functions.\n\nThe full list of the Spot parameters is shown in the Help System and in the notebook spot_doc.ipynb.\n\nspot_1 = spot.Spot(fun=fun,\n                   lower = np.array([-1]),\n                   upper = np.array([2]),\n                   fun_evals= 10,\n                   seed=123,\n                   show_models=True,\n                   design_control={\"init_size\": 9})\nspot_1.run()\n\n\n\n\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x16cacfdf0&gt;"
  },
  {
    "objectID": "01_spot_intro.html#print-the-results",
    "href": "01_spot_intro.html#print-the-results",
    "title": "1  Introduction: Hyperparameter Tuning",
    "section": "1.5 Print the Results",
    "text": "1.5 Print the Results\n\nspot_1.print_results()\n\nmin y: 3.6779240309761575e-07\nx0: -0.0006064589047063418\n\n\n[['x0', -0.0006064589047063418]]"
  },
  {
    "objectID": "01_spot_intro.html#show-the-progress",
    "href": "01_spot_intro.html#show-the-progress",
    "title": "1  Introduction: Hyperparameter Tuning",
    "section": "1.6 Show the Progress",
    "text": "1.6 Show the Progress\n\nspot_1.plot_progress()\n\n\n\n\n\n\n\n\nBartz, Eva, Thomas Bartz-Beielstein, Martin Zaefferer, and Olaf Mersmann, eds. 2022. Hyperparameter Tuning for Machine and Deep Learning with R - A Practical Guide. Springer.\n\n\nBartz-Beielstein, Thomas. 2023. “PyTorch Hyperparameter Tuning with SPOT: Comparison with Ray Tuner and Default Hyperparameters on CIFAR10.” https://github.com/sequential-parameter-optimization/spotPython/blob/main/notebooks/14_spot_ray_hpt_torch_cifar10.ipynb.\n\n\nBartz-Beielstein, Thomas, Jürgen Branke, Jörn Mehnen, and Olaf Mersmann. 2014. “Evolutionary Algorithms.” Wiley Interdisciplinary Reviews: Data Mining and Knowledge Discovery 4 (3): 178–95.\n\n\nBartz-Beielstein, Thomas, Christian Lasarczyk, and Mike Preuss. 2005. “Sequential Parameter Optimization.” In Proceedings 2005 Congress on Evolutionary Computation (CEC’05), Edinburgh, Scotland, edited by B McKay et al., 773–80. Piscataway NJ: IEEE Press.\n\n\nLewis, R M, V Torczon, and M W Trosset. 2000. “Direct search methods: Then and now.” Journal of Computational and Applied Mathematics 124 (1–2): 191–207.\n\n\nLi, Lisha, Kevin Jamieson, Giulia DeSalvo, Afshin Rostamizadeh, and Ameet Talwalkar. 2016. “Hyperband: A Novel Bandit-Based Approach to Hyperparameter Optimization.” arXiv e-Prints, March, arXiv:1603.06560.\n\n\nMeignan, David, Sigrid Knust, Jean-Marc Frayet, Gilles Pesant, and Nicolas Gaud. 2015. “A Review and Taxonomy of Interactive Optimization Methods in Operations Research.” ACM Transactions on Interactive Intelligent Systems, September.\n\n\nPyTorch. 2023. “Hyperparameter Tuning with Ray Tune.” https://pytorch.org/tutorials/beginner/hyperparameter_tuning_tutorial.html."
  },
  {
    "objectID": "01_spot_intro.html#footnotes",
    "href": "01_spot_intro.html#footnotes",
    "title": "1  Introduction: Hyperparameter Tuning",
    "section": "",
    "text": "https://github.com/sequential-parameter-optimization↩︎"
  },
  {
    "objectID": "02_spot_multidim.html#example-spot-and-the-3-dim-sphere-function",
    "href": "02_spot_multidim.html#example-spot-and-the-3-dim-sphere-function",
    "title": "2  Multi-dimensional Functions",
    "section": "2.1 Example: Spot and the 3-dim Sphere Function",
    "text": "2.1 Example: Spot and the 3-dim Sphere Function\n\nimport numpy as np\nfrom math import inf\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom scipy.optimize import shgo\nfrom scipy.optimize import direct\nfrom scipy.optimize import differential_evolution\nimport matplotlib.pyplot as plt\nimport pylab\nfrom numpy import append, ndarray, multiply, isinf, linspace, meshgrid, ravel\nfrom numpy import array\n\n\n2.1.1 The Objective Function: 3-dim Sphere\n\nThe spotPython package provides several classes of objective functions.\nWe will use an analytical objective function, i.e., a function that can be described by a (closed) formula: \\[f(x) = \\sum_i^n x_i^2 \\]\nHere we will use \\(n=3\\).\n\n\nfun = analytical().fun_sphere\n\n\nThe size of the lower bound vector determines the problem dimension.\nHere we will use np.array([-1, -1, -1]), i.e., a three-dim function.\nWe will use three different theta values (one for each dimension), i.e., we set\nsurrogate_control={\"n_theta\": 3}.\n\n\nspot_3 = spot.Spot(fun=fun,\n                   lower = -1.0*np.ones(3),\n                   upper = np.ones(3),\n                   var_name=[\"Pressure\", \"Temp\", \"Lambda\"],\n                   show_progress=True,\n                   surrogate_control={\"n_theta\": 3})\n\nspot_3.run()\n\nspotPython tuning: 0.03443344056467332 [#######---] 73.33% \n\n\nspotPython tuning: 0.03134865993507926 [########--] 80.00% \n\n\nspotPython tuning: 0.0009629342967936851 [#########-] 86.67% \n\n\nspotPython tuning: 8.541951463966474e-05 [#########-] 93.33% \n\n\nspotPython tuning: 6.285135731399678e-05 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x10601a050&gt;\n\n\n\n\n2.1.2 Results\n\nspot_3.print_results()\n\nmin y: 6.285135731399678e-05\nPressure: 0.005236109709736696\nTemp: 0.0019572552655686714\nLambda: 0.005621713639718905\n\n\n[['Pressure', 0.005236109709736696],\n ['Temp', 0.0019572552655686714],\n ['Lambda', 0.005621713639718905]]\n\n\n\nspot_3.plot_progress()\n\n\n\n\n\n\n2.1.3 A Contour Plot\n\nWe can select two dimensions, say \\(i=0\\) and \\(j=1\\), and generate a contour plot as follows.\n\nNote: We have specified identical min_z and max_z values to generate comparable plots!\n\n\n\nspot_3.plot_contour(i=0, j=1, min_z=0, max_z=2.25)\n\n\n\n\n\nIn a similar manner, we can plot dimension \\(i=0\\) and \\(j=2\\):\n\n\nspot_3.plot_contour(i=0, j=2, min_z=0, max_z=2.25)\n\n\n\n\n\nThe final combination is \\(i=1\\) and \\(j=2\\):\n\n\nspot_3.plot_contour(i=1, j=2, min_z=0, max_z=2.25)\n\n\n\n\n\nThe three plots look very similar, because the fun_sphere is symmetric.\nThis can also be seen from the variable importance:\n\n\nspot_3.print_importance()\n\nPressure:  99.35185545837122\nTemp:  99.99999999999999\nLambda:  94.31627052007231\n\n\n[['Pressure', 99.35185545837122],\n ['Temp', 99.99999999999999],\n ['Lambda', 94.31627052007231]]"
  },
  {
    "objectID": "02_spot_multidim.html#conclusion",
    "href": "02_spot_multidim.html#conclusion",
    "title": "2  Multi-dimensional Functions",
    "section": "2.2 Conclusion",
    "text": "2.2 Conclusion\nBased on this quick analysis, we can conclude that all three dimensions are equally important (as expected, because the analytical function is known)."
  },
  {
    "objectID": "02_spot_multidim.html#exercises",
    "href": "02_spot_multidim.html#exercises",
    "title": "2  Multi-dimensional Functions",
    "section": "2.3 Exercises",
    "text": "2.3 Exercises\n\nImportant:\n\nResults from these exercises should be added to this document, i.e., you should submit an updated version of this notebook.\nPlease combine your results using this notebook.\nOnly one notebook from each group!\nPresentation is based on this notebook. No addtional slides are required!\nspotPython version 0.16.11 (or greater) is required\n\n\n\n2.3.1 The Three Dimensional fun_cubed\n\nThe input dimension is 3. The search range is \\(-1 \\leq x \\leq 1\\) for all dimensions.\nGenerate contour plots\nCalculate the variable importance.\nDiscuss the variable importance:\n\nAre all variables equally important?\nIf not:\n\nWhich is the most important variable?\nWhich is the least important variable?\n\n\n\n\n\n2.3.2 The Ten Dimensional fun_wing_wt\n\nThe input dimension is 10. The search range is \\(0 \\leq x \\leq 1\\) for all dimensions.\nCalculate the variable importance.\nDiscuss the variable importance:\n\nAre all variables equally important?\nIf not:\n\nWhich is the most important variable?\nWhich is the least important variable?\n\nGenerate contour plots for the three most important variables. Do they confirm your selection?\n\n\n\n\n2.3.3 The Three Dimensional fun_runge\n\nThe input dimension is 3. The search range is \\(-5 \\leq x \\leq 5\\) for all dimensions.\nGenerate contour plots\nCalculate the variable importance.\nDiscuss the variable importance:\n\nAre all variables equally important?\nIf not:\n\nWhich is the most important variable?\nWhich is the least important variable?\n\n\n\n\n\n2.3.4 The Three Dimensional fun_linear\n\nThe input dimension is 3. The search range is \\(-5 \\leq x \\leq 5\\) for all dimensions.\nGenerate contour plots\nCalculate the variable importance.\nDiscuss the variable importance:\n\nAre all variables equally important?\nIf not:\n\nWhich is the most important variable?\nWhich is the least important variable?"
  },
  {
    "objectID": "03_spot_anisotropic.html",
    "href": "03_spot_anisotropic.html",
    "title": "3  Isotropic and Anisotropic Kriging",
    "section": "",
    "text": "4 Exercises"
  },
  {
    "objectID": "03_spot_anisotropic.html#example-isotropic-spot-surrogate-and-the-2-dim-sphere-function",
    "href": "03_spot_anisotropic.html#example-isotropic-spot-surrogate-and-the-2-dim-sphere-function",
    "title": "3  Isotropic and Anisotropic Kriging",
    "section": "3.1 Example: Isotropic Spot Surrogate and the 2-dim Sphere Function",
    "text": "3.1 Example: Isotropic Spot Surrogate and the 2-dim Sphere Function\n\nimport numpy as np\nfrom math import inf\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom scipy.optimize import shgo\nfrom scipy.optimize import direct\nfrom scipy.optimize import differential_evolution\nimport matplotlib.pyplot as plt\n\n\n3.1.1 The Objective Function: 2-dim Sphere\n\nThe spotPython package provides several classes of objective functions.\nWe will use an analytical objective function, i.e., a function that can be described by a (closed) formula: \\[f(x, y) = x^2 + y^2\\]\n\n\nfun = analytical().fun_sphere\nfun_control = {\"sigma\": 0,\n               \"seed\": 123}\n\n\nThe size of the lower bound vector determines the problem dimension.\nHere we will use np.array([-1, -1]), i.e., a two-dim function.\n\n\nspot_2 = spot.Spot(fun=fun,\n                   lower = np.array([-1, -1]),\n                   upper = np.array([1, 1]))\n\nspot_2.run()\n\n&lt;spotPython.spot.spot.Spot at 0x1515d3d30&gt;\n\n\n\n\n3.1.2 Results\n\nspot_2.print_results()\n\nmin y: 2.093282610941807e-05\nx0: 0.0016055267473267492\nx1: 0.00428428640184529\n\n\n[['x0', 0.0016055267473267492], ['x1', 0.00428428640184529]]\n\n\n\nspot_2.plot_progress(log_y=True)"
  },
  {
    "objectID": "03_spot_anisotropic.html#example-with-anisotropic-kriging",
    "href": "03_spot_anisotropic.html#example-with-anisotropic-kriging",
    "title": "3  Isotropic and Anisotropic Kriging",
    "section": "3.2 Example With Anisotropic Kriging",
    "text": "3.2 Example With Anisotropic Kriging\n\nThe default parameter setting of spotPython’s Kriging surrogate uses the same theta value for every dimension.\nThis is referred to as “using an isotropic kernel”.\nIf different theta values are used for each dimension, then an anisotropic kernel is used\nTo enable anisotropic models in spotPython, the number of theta values should be larger than one.\nWe can use surrogate_control={\"n_theta\": 2} to enable this behavior (2 is the problem dimension).\n\n\nspot_2_anisotropic = spot.Spot(fun=fun,\n                   lower = np.array([-1, -1]),\n                   upper = np.array([1, 1]),\n                   surrogate_control={\"n_theta\": 2})\nspot_2_anisotropic.run()\n\n&lt;spotPython.spot.spot.Spot at 0x1517581c0&gt;\n\n\n\n3.2.1 Taking a Look at the theta Values\n\nWe can check, whether one or several theta values were used.\nThe theta values from the surrogate can be printed as follows:\n\n\nspot_2_anisotropic.surrogate.theta\n\narray([0.19447342, 0.30813872])\n\n\n\nSince the surrogate from the isotropic setting was stored as spot_2, we can also take a look at the theta value from this model:\n\n\nspot_2.surrogate.theta\n\narray([0.26287447])\n\n\n\nNext, the search progress of the optimization with the anisotropic model can be visualized:\n\n\nspot_2_anisotropic.plot_progress(log_y=True)\n\n\n\n\n\nspot_2_anisotropic.print_results()\n\nmin y: 7.77061191821505e-06\nx0: -0.0024488252797500764\nx1: -0.0013318658594137815\n\n\n[['x0', -0.0024488252797500764], ['x1', -0.0013318658594137815]]\n\n\n\nspot_2_anisotropic.surrogate.plot()"
  },
  {
    "objectID": "03_spot_anisotropic.html#fun_branin",
    "href": "03_spot_anisotropic.html#fun_branin",
    "title": "3  Isotropic and Anisotropic Kriging",
    "section": "4.1 fun_branin",
    "text": "4.1 fun_branin\n\nDescribe the function.\n\nThe input dimension is 2. The search range is \\(-5 \\leq x_1 \\leq 10\\) and \\(0 \\leq x_2 \\leq 15\\).\n\nCompare the results from spotPython run a) with isotropic and b) anisotropic surrogate models.\nModify the termination criterion: instead of the number of evaluations (which is specified via fun_evals), the time should be used as the termination criterion. This can be done as follows (max_time=1 specifies a run time of one minute):\n\n\nfun_evals=inf,\nmax_time=1,"
  },
  {
    "objectID": "03_spot_anisotropic.html#fun_sin_cos",
    "href": "03_spot_anisotropic.html#fun_sin_cos",
    "title": "3  Isotropic and Anisotropic Kriging",
    "section": "4.2 fun_sin_cos",
    "text": "4.2 fun_sin_cos\n\nDescribe the function.\n\nThe input dimension is 2. The search range is \\(-2\\pi \\leq x_1 \\leq 2\\pi\\) and \\(-2\\pi \\leq x_2 \\leq 2\\pi\\).\n\nCompare the results from spotPython run a) with isotropic and b) anisotropic surrogate models.\nModify the termination criterion (max_time instead of fun_evals) as described for fun_branin."
  },
  {
    "objectID": "03_spot_anisotropic.html#fun_runge",
    "href": "03_spot_anisotropic.html#fun_runge",
    "title": "3  Isotropic and Anisotropic Kriging",
    "section": "4.3 fun_runge",
    "text": "4.3 fun_runge\n\nDescribe the function.\n\nThe input dimension is 2. The search range is \\(-5 \\leq x_1 \\leq 5\\) and \\(-5 \\leq x_2 \\leq 5\\).\n\nCompare the results from spotPython run a) with isotropic and b) anisotropic surrogate models.\nModify the termination criterion (max_time instead of fun_evals) as described for fun_branin."
  },
  {
    "objectID": "03_spot_anisotropic.html#fun_wingwt",
    "href": "03_spot_anisotropic.html#fun_wingwt",
    "title": "3  Isotropic and Anisotropic Kriging",
    "section": "4.4 fun_wingwt",
    "text": "4.4 fun_wingwt\n\nDescribe the function.\n\nThe input dimension is 10. The search ranges are between 0 and 1 (values are mapped internally to their natural bounds).\n\nCompare the results from spotPython run a) with isotropic and b) anisotropic surrogate models.\nModify the termination criterion (max_time instead of fun_evals) as described for fun_branin."
  },
  {
    "objectID": "04_spot_sklearn_surrogate.html",
    "href": "04_spot_sklearn_surrogate.html",
    "title": "4  Using sklearn Surrogates in spotPython",
    "section": "",
    "text": "5 Example: One-dimensional Sphere Function With spotPython’s Kriging\nfrom spotPython.fun.objectivefunctions import analytical\nlower = np.array([-1])\nupper = np.array([1])\nfun = analytical(seed=123).fun_sphere\nspot_1 = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = 10,\n                   max_time = inf,\n                   seed=123,\n                   show_models= True,\n                   tolerance_x = np.sqrt(np.spacing(1)),\n                   design_control={\"init_size\": 3},)\nspot_1.run()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x28ca9c790&gt;"
  },
  {
    "objectID": "04_spot_sklearn_surrogate.html#example-branin-function-with-spotpythons-internal-kriging-surrogate",
    "href": "04_spot_sklearn_surrogate.html#example-branin-function-with-spotpythons-internal-kriging-surrogate",
    "title": "4  Using sklearn Surrogates in spotPython",
    "section": "4.1 Example: Branin Function with spotPython’s Internal Kriging Surrogate",
    "text": "4.1 Example: Branin Function with spotPython’s Internal Kriging Surrogate\n\n4.1.1 The Objective Function Branin\n\nThe spotPython package provides several classes of objective functions.\nWe will use an analytical objective function, i.e., a function that can be described by a (closed) formula.\nHere we will use the Branin function:\n  y = a * (x2 - b * x1**2 + c * x1 - r) ** 2 + s * (1 - t) * np.cos(x1) + s,\n  where values of a, b, c, r, s and t are: a = 1, b = 5.1 / (4*pi**2),\n  c = 5 / pi, r = 6, s = 10 and t = 1 / (8*pi).\nIt has three global minima:\n  f(x) = 0.397887 at (-pi, 12.275), (pi, 2.275), and (9.42478, 2.475).\n\n\nfrom spotPython.fun.objectivefunctions import analytical\nlower = np.array([-5,-0])\nupper = np.array([10,15])\n\n\nfun = analytical().fun_branin\n\n\n\n4.1.2 Running the surrogate model based optimizer Spot:\n\nspot_2 = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = 20,\n                   max_time = inf,\n                   seed=123,\n                   design_control={\"init_size\": 10})\n\n\nspot_2.run()\n\n&lt;spotPython.spot.spot.Spot at 0x103e4c0a0&gt;\n\n\n\n\n4.1.3 Print the Results\n\nspot_2.print_results()\n\nmin y: 0.3982295132785083\nx0: 3.135528626303215\nx1: 2.2926027772585886\n\n\n[['x0', 3.135528626303215], ['x1', 2.2926027772585886]]\n\n\n\n\n4.1.4 Show the Progress and the Surrogate\n\nspot_2.plot_progress(log_y=True)\n\n\n\n\n\nspot_2.surrogate.plot()"
  },
  {
    "objectID": "04_spot_sklearn_surrogate.html#example-using-surrogates-from-scikit-learn",
    "href": "04_spot_sklearn_surrogate.html#example-using-surrogates-from-scikit-learn",
    "title": "4  Using sklearn Surrogates in spotPython",
    "section": "4.2 Example: Using Surrogates From scikit-learn",
    "text": "4.2 Example: Using Surrogates From scikit-learn\n\nDefault is the spotPython (i.e., the internal) kriging surrogate.\nIt can be called explicitely and passed to Spot.\n\n\nfrom spotPython.build.kriging import Kriging\nS_0 = Kriging(name='kriging', seed=123)\n\n\nAlternatively, models from scikit-learn can be selected, e.g., Gaussian Process, RBFs, Regression Trees, etc.\n\n\n# Needed for the sklearn surrogates:\nfrom sklearn.gaussian_process import GaussianProcessRegressor\nfrom sklearn.gaussian_process.kernels import RBF\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import linear_model\nfrom sklearn import tree\nimport pandas as pd\n\n\nHere are some additional models that might be useful later:\n\n\nS_Tree = DecisionTreeRegressor(random_state=0)\nS_LM = linear_model.LinearRegression()\nS_Ridge = linear_model.Ridge()\nS_RF = RandomForestRegressor(max_depth=2, random_state=0)\n\n\n4.2.1 GaussianProcessRegressor as a Surrogate\n\nTo use a Gaussian Process model from sklearn, that is similar to spotPython’s Kriging, we can proceed as follows:\n\n\nkernel = 1 * RBF(length_scale=1.0, length_scale_bounds=(1e-2, 1e2))\nS_GP = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)\n\n\nThe scikit-learn GP model S_GP is selected for Spot as follows:\nsurrogate = S_GP\nWe can check the kind of surogate model with the command isinstance:\n\n\nisinstance(S_GP, GaussianProcessRegressor)\n\nTrue\n\n\n\nisinstance(S_0, Kriging)\n\nTrue\n\n\n\nSimilar to the Spot run with the internal Kriging model, we can call the run with the scikit-learn surrogate:\n\n\nfun = analytical(seed=123).fun_branin\nspot_2_GP = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = 20,\n                   seed=123,\n                   design_control={\"init_size\": 10},\n                   surrogate = S_GP)\nspot_2_GP.run()\n\n&lt;spotPython.spot.spot.Spot at 0x28ca9c100&gt;\n\n\n\nspot_2_GP.plot_progress()\n\n\n\n\n\nspot_2_GP.print_results()\n\nmin y: 0.39849269895514894\nx0: 3.149390667141969\nx1: 2.2866294742318978\n\n\n[['x0', 3.149390667141969], ['x1', 2.2866294742318978]]"
  },
  {
    "objectID": "04_spot_sklearn_surrogate.html#example-sklearn-model-gaussianprocess",
    "href": "04_spot_sklearn_surrogate.html#example-sklearn-model-gaussianprocess",
    "title": "4  Using sklearn Surrogates in spotPython",
    "section": "5.1 Example: Sklearn Model GaussianProcess",
    "text": "5.1 Example: Sklearn Model GaussianProcess\n\nThis example visualizes the search process on the GaussianProcessRegression surrogate from sklearn.\nTherefore surrogate = S_GP is added to the argument list.\n\n\nfun = analytical(seed=123).fun_sphere\nspot_1_GP = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = 10,\n                   max_time = inf,\n                   seed=123,\n                   show_models= True,\n                   design_control={\"init_size\": 3},\n                   surrogate = S_GP)\nspot_1_GP.run()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x28cac7730&gt;\n\n\n\nspot_1_GP.print_results()\n\nmin y: 3.751414374998725e-09\nx0: -6.124879080438017e-05\n\n\n[['x0', -6.124879080438017e-05]]\n\n\n\nspot_1_GP.plot_progress(log_y=True)\n\n\n\n\n\nspot_1_GP.plot_model()"
  },
  {
    "objectID": "04_spot_sklearn_surrogate.html#exercise-2",
    "href": "04_spot_sklearn_surrogate.html#exercise-2",
    "title": "4  Using sklearn Surrogates in spotPython",
    "section": "6.1 Exercise 2",
    "text": "6.1 Exercise 2\n\nCompare the performance of the five different surrogates on both objective functions:\n\nspotPython’s internal Kriging\nDecisionTreeRegressor\nRandomForestRegressor\nlinear_model.LinearRegression\nlinear_model.Ridge"
  },
  {
    "objectID": "05_spot_sklearn_optimization.html",
    "href": "05_spot_sklearn_optimization.html",
    "title": "5  Sequential Parameter Optimization: Using scipy Optimizers",
    "section": "",
    "text": "6 Exercises"
  },
  {
    "objectID": "05_spot_sklearn_optimization.html#the-objective-function-branin",
    "href": "05_spot_sklearn_optimization.html#the-objective-function-branin",
    "title": "5  Sequential Parameter Optimization: Using scipy Optimizers",
    "section": "5.1 The Objective Function Branin",
    "text": "5.1 The Objective Function Branin\n\nThe spotPython package provides several classes of objective functions.\nWe will use an analytical objective function, i.e., a function that can be described by a (closed) formula.\nHere we will use the Branin function. The 2-dim Branin function is\n\\[y = a * (x2 - b * x1**2 + c * x1 - r) ** 2 + s * (1 - t) * cos(x1) + s,\\] where values of a, b, c, r, s and t are: \\(a = 1, b = 5.1 / (4*pi**2), c = 5 / pi, r = 6, s = 10\\) and \\(t = 1 / (8*pi)\\).\nIt has three global minima:\n\\(f(x) = 0.397887\\) at \\((-\\pi, 12.275)\\), \\((\\pi, 2.275)\\), and \\((9.42478, 2.475)\\).\nInput Domain: This function is usually evaluated on the square x1 in [-5, 10] x x2 in [0, 15].\n\n\nfrom spotPython.fun.objectivefunctions import analytical\nlower = np.array([-5,-0])\nupper = np.array([10,15])\n\n\nfun = analytical(seed=123).fun_branin"
  },
  {
    "objectID": "05_spot_sklearn_optimization.html#the-optimizer",
    "href": "05_spot_sklearn_optimization.html#the-optimizer",
    "title": "5  Sequential Parameter Optimization: Using scipy Optimizers",
    "section": "5.2 The Optimizer",
    "text": "5.2 The Optimizer\n\nDifferential Evalution from the scikit.optimize package, see https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.differential_evolution.html#scipy.optimize.differential_evolution is the default optimizer for the search on the surrogate.\nOther optimiers that are available in spotPython:\n\ndual_annealing\ndirect\nshgo\nbasinhopping, see https://docs.scipy.org/doc/scipy/reference/optimize.html#global-optimization.\n\nThese can be selected as follows:\nsurrogate_control = \"model_optimizer\": differential_evolution\nWe will use differential_evolution.\nThe optimizer can use 1000 evaluations. This value will be passed to the differential_evolution method, which has the argument maxiter (int). It defines the maximum number of generations over which the entire differential evolution population is evolved, see https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.differential_evolution.html#scipy.optimize.differential_evolution\n\n\nspot_de = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = 20,\n                   max_time = inf,\n                   seed=125,\n                   noise=False,\n                   show_models= False,\n                   design_control={\"init_size\": 10},\n                   surrogate_control={\"n_theta\": 2,\n                                      \"model_optimizer\": differential_evolution,\n                                      \"model_fun_evals\": 1000,\n                                      })\nspot_de.run()\n\n&lt;spotPython.spot.spot.Spot at 0x16ac63e50&gt;"
  },
  {
    "objectID": "05_spot_sklearn_optimization.html#print-the-results",
    "href": "05_spot_sklearn_optimization.html#print-the-results",
    "title": "5  Sequential Parameter Optimization: Using scipy Optimizers",
    "section": "5.3 Print the Results",
    "text": "5.3 Print the Results\n\nspot_de.print_results()\n\nmin y: 0.39951958110619046\nx0: -3.1570201165683587\nx1: 12.289980569430284\n\n\n[['x0', -3.1570201165683587], ['x1', 12.289980569430284]]"
  },
  {
    "objectID": "05_spot_sklearn_optimization.html#show-the-progress",
    "href": "05_spot_sklearn_optimization.html#show-the-progress",
    "title": "5  Sequential Parameter Optimization: Using scipy Optimizers",
    "section": "5.4 Show the Progress",
    "text": "5.4 Show the Progress\n\nspot_de.plot_progress(log_y=True)\n\n\n\n\n\nspot_de.surrogate.plot()"
  },
  {
    "objectID": "05_spot_sklearn_optimization.html#dual_annealing",
    "href": "05_spot_sklearn_optimization.html#dual_annealing",
    "title": "5  Sequential Parameter Optimization: Using scipy Optimizers",
    "section": "6.1 dual_annealing",
    "text": "6.1 dual_annealing\n\nDescribe the optimization algorithm\nUse the algorithm as an optimizer on the surrogate"
  },
  {
    "objectID": "05_spot_sklearn_optimization.html#direct",
    "href": "05_spot_sklearn_optimization.html#direct",
    "title": "5  Sequential Parameter Optimization: Using scipy Optimizers",
    "section": "6.2 direct",
    "text": "6.2 direct\n\nDescribe the optimization algorithm\nUse the algorithm as an optimizer on the surrogate"
  },
  {
    "objectID": "05_spot_sklearn_optimization.html#shgo",
    "href": "05_spot_sklearn_optimization.html#shgo",
    "title": "5  Sequential Parameter Optimization: Using scipy Optimizers",
    "section": "6.3 shgo",
    "text": "6.3 shgo\n\nDescribe the optimization algorithm\nUse the algorithm as an optimizer on the surrogate"
  },
  {
    "objectID": "05_spot_sklearn_optimization.html#basinhopping",
    "href": "05_spot_sklearn_optimization.html#basinhopping",
    "title": "5  Sequential Parameter Optimization: Using scipy Optimizers",
    "section": "6.4 basinhopping",
    "text": "6.4 basinhopping\n\nDescribe the optimization algorithm\nUse the algorithm as an optimizer on the surrogate"
  },
  {
    "objectID": "05_spot_sklearn_optimization.html#performance-comparison",
    "href": "05_spot_sklearn_optimization.html#performance-comparison",
    "title": "5  Sequential Parameter Optimization: Using scipy Optimizers",
    "section": "6.5 Performance Comparison",
    "text": "6.5 Performance Comparison\nCompare the performance and run time of the 5 different optimizers:\n* `differential_evolution`\n* `dual_annealing`\n*  `direct`\n* `shgo`\n* `basinhopping`.\nThe Branin function has three global minima:\n\n\\(f(x) = 0.397887\\) at\n\n\\((-\\pi, 12.275)\\),\n\\((\\pi, 2.275)\\), and\n\\((9.42478, 2.475)\\).\n\n\nWhich optima are found by the optimizers? Does the seed change this behavior?"
  },
  {
    "objectID": "06_spot_gaussian.html",
    "href": "06_spot_gaussian.html",
    "title": "6  Sequential Parameter Optimization: Gaussian Process Models",
    "section": "",
    "text": "7 Exercises"
  },
  {
    "objectID": "06_spot_gaussian.html#gaussian-processes-regression-basic-introductory-scikit-learn-example",
    "href": "06_spot_gaussian.html#gaussian-processes-regression-basic-introductory-scikit-learn-example",
    "title": "6  Sequential Parameter Optimization: Gaussian Process Models",
    "section": "6.1 Gaussian Processes Regression: Basic Introductory scikit-learn Example",
    "text": "6.1 Gaussian Processes Regression: Basic Introductory scikit-learn Example\n\nThis is the example from scikit-learn: https://scikit-learn.org/stable/auto_examples/gaussian_process/plot_gpr_noisy_targets.html\nAfter fitting our model, we see that the hyperparameters of the kernel have been optimized.\nNow, we will use our kernel to compute the mean prediction of the full dataset and plot the 95% confidence interval.\n\n\n6.1.1 Train and Test Data\n\nX = np.linspace(start=0, stop=10, num=1_000).reshape(-1, 1)\ny = np.squeeze(X * np.sin(X))\nrng = np.random.RandomState(1)\ntraining_indices = rng.choice(np.arange(y.size), size=6, replace=False)\nX_train, y_train = X[training_indices], y[training_indices]\n\n\n\n6.1.2 Building the Surrogate With Sklearn\n\nThe model building with sklearn consisits of three steps:\n\nInstantiating the model, then\nfitting the model (using fit), and\nmaking predictions (using predict)\n\n\n\nkernel = 1 * RBF(length_scale=1.0, length_scale_bounds=(1e-2, 1e2))\ngaussian_process = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)\ngaussian_process.fit(X_train, y_train)\nmean_prediction, std_prediction = gaussian_process.predict(X, return_std=True)\n\n\n\n6.1.3 Plotting the SklearnModel\n\nplt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, mean_prediction, label=\"Mean prediction\")\nplt.fill_between(\n    X.ravel(),\n    mean_prediction - 1.96 * std_prediction,\n    mean_prediction + 1.96 * std_prediction,\n    alpha=0.5,\n    label=r\"95% confidence interval\",\n)\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"sk-learn Version: Gaussian process regression on noise-free dataset\")\n\n\n\n\n\n\n6.1.4 The spotPython Version\n\nThe spotPython version is very similar:\n\nInstantiating the model, then\nfitting the model and\nmaking predictions (using predict).\n\n\n\nS = Kriging(name='kriging',  seed=123, log_level=50, cod_type=\"norm\")\nS.fit(X_train, y_train)\nS_mean_prediction, S_std_prediction, S_ei = S.predict(X, return_val=\"all\")\n\n\nplt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, S_mean_prediction, label=\"Mean prediction\")\nplt.fill_between(\n    X.ravel(),\n    S_mean_prediction - 1.96 * S_std_prediction,\n    S_mean_prediction + 1.96 * S_std_prediction,\n    alpha=0.5,\n    label=r\"95% confidence interval\",\n)\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"spotPython Version: Gaussian process regression on noise-free dataset\")\n\n\n\n\n\n\n6.1.5 Visualizing the Differences Between the spotPython and the sklearn Model Fits\n\nplt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, S_mean_prediction, label=\"spotPython Mean prediction\")\nplt.plot(X, mean_prediction, label=\"Sklearn Mean Prediction\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Comparing Mean Predictions\")"
  },
  {
    "objectID": "06_spot_gaussian.html#schonlau-example-function",
    "href": "06_spot_gaussian.html#schonlau-example-function",
    "title": "6  Sequential Parameter Optimization: Gaussian Process Models",
    "section": "7.1 Schonlau Example Function",
    "text": "7.1 Schonlau Example Function\n\nThe Schonlau Example Function is based on sample points only (there is no analytical function description available):\n\n\nX = np.linspace(start=0, stop=13, num=1_000).reshape(-1, 1)\nX_train = np.array([1., 2., 3., 4., 12.]).reshape(-1,1)\ny_train = np.array([0., -1.75, -2, -0.5, 5.])\n\n\nDescribe the function.\nCompare the two models that were build using the spotPython and the sklearn surrogate.\nNote: Since there is no analytical function available, you might be interested in adding some points and describe the effects."
  },
  {
    "objectID": "06_spot_gaussian.html#forrester-example-function",
    "href": "06_spot_gaussian.html#forrester-example-function",
    "title": "6  Sequential Parameter Optimization: Gaussian Process Models",
    "section": "7.2 Forrester Example Function",
    "text": "7.2 Forrester Example Function\n\nThe Forrester Example Function is defined as follows:\nf(x) = (6x- 2)^2 sin(12x-4) for x in [0,1].\nData points are generated as follows:\n\n\nX = np.linspace(start=-0.5, stop=1.5, num=1_000).reshape(-1, 1)\nX_train = np.array([0.0, 0.175, 0.225, 0.3, 0.35, 0.375, 0.5,1]).reshape(-1,1)\nfun = analytical().fun_forrester\nfun_control = {\"sigma\": 0.1,\n               \"seed\": 123}\ny = fun(X, fun_control=fun_control)\ny_train = fun(X_train, fun_control=fun_control)\n\n\nDescribe the function.\nCompare the two models that were build using the spotPython and the sklearn surrogate.\nNote: Modify the noise level (\"sigma\"), e.g., use a value of 0.2, and compare the two models.\n\n\nfun_control = {\"sigma\": 0.2}"
  },
  {
    "objectID": "06_spot_gaussian.html#fun_runge-function-1-dim",
    "href": "06_spot_gaussian.html#fun_runge-function-1-dim",
    "title": "6  Sequential Parameter Optimization: Gaussian Process Models",
    "section": "7.3 fun_runge Function (1-dim)",
    "text": "7.3 fun_runge Function (1-dim)\n\nThe Runge function is defined as follows:\nf(x) = 1/ (1 + sum(x_i))^2\nData points are generated as follows:\n\n\ngen = spacefilling(1)\nrng = np.random.RandomState(1)\nlower = np.array([-10])\nupper = np.array([10])\nfun = analytical().fun_runge\nfun_control = {\"sigma\": 0.025,\n               \"seed\": 123}\nX_train = gen.scipy_lhd(10, lower=lower, upper = upper).reshape(-1,1)\ny_train = fun(X, fun_control=fun_control)\nX = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\ny = fun(X, fun_control=fun_control)\n\n\nDescribe the function.\nCompare the two models that were build using the spotPython and the sklearn surrogate.\nNote: Modify the noise level (\"sigma\"), e.g., use a value of 0.05, and compare the two models.\n\n\nfun_control = {\"sigma\": 0.5}"
  },
  {
    "objectID": "06_spot_gaussian.html#fun_cubed-1-dim",
    "href": "06_spot_gaussian.html#fun_cubed-1-dim",
    "title": "6  Sequential Parameter Optimization: Gaussian Process Models",
    "section": "7.4 fun_cubed (1-dim)",
    "text": "7.4 fun_cubed (1-dim)\n\nThe Cubed function is defined as follows:\nnp.sum(X[i]** 3)\nData points are generated as follows:\n\n\ngen = spacefilling(1)\nrng = np.random.RandomState(1)\nlower = np.array([-10])\nupper = np.array([10])\nfun = analytical().fun_cubed\nfun_control = {\"sigma\": 0.025,\n               \"seed\": 123}\nX_train = gen.scipy_lhd(10, lower=lower, upper = upper).reshape(-1,1)\ny_train = fun(X, fun_control=fun_control)\nX = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\ny = fun(X, fun_control=fun_control)\n\n\nDescribe the function.\nCompare the two models that were build using the spotPython and the sklearn surrogate.\nNote: Modify the noise level (\"sigma\"), e.g., use a value of 0.05, and compare the two models.\n\n\nfun_control = {\"sigma\": 0.05}"
  },
  {
    "objectID": "06_spot_gaussian.html#the-effect-of-noise",
    "href": "06_spot_gaussian.html#the-effect-of-noise",
    "title": "6  Sequential Parameter Optimization: Gaussian Process Models",
    "section": "7.5 The Effect of Noise",
    "text": "7.5 The Effect of Noise\nHow does the behavior of the spotPython fit changes when the argument noise is set to True, i.e.,\nS = Kriging(name='kriging',  seed=123, n_theta=1, noise=True)\nis used?"
  },
  {
    "objectID": "07_spot_ei.html#example-spot-and-the-1-dim-sphere-function",
    "href": "07_spot_ei.html#example-spot-and-the-1-dim-sphere-function",
    "title": "7  Expected Improvement",
    "section": "7.1 Example: Spot and the 1-dim Sphere Function",
    "text": "7.1 Example: Spot and the 1-dim Sphere Function\n\nimport numpy as np\nfrom math import inf\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom scipy.optimize import shgo\nfrom scipy.optimize import direct\nfrom scipy.optimize import differential_evolution\nimport matplotlib.pyplot as plt\n\n\n7.1.1 The Objective Function: 1-dim Sphere\n\nThe spotPython package provides several classes of objective functions.\nWe will use an analytical objective function, i.e., a function that can be described by a (closed) formula: \\[f(x) = x^2 \\]\n\n\nfun = analytical().fun_sphere\n\n\nfun = analytical().fun_sphere\nfun_control = {\"sigma\": 0,\n               \"seed\": 123}\n\n\nThe size of the lower bound vector determines the problem dimension.\nHere we will use np.array([-1]), i.e., a one-dim function.\n\n\nspot_1 = spot.Spot(fun=fun,\n                   lower = np.array([-1]),\n                   upper = np.array([1]))\n\nspot_1.run()\n\n&lt;spotPython.spot.spot.Spot at 0x14d85fdc0&gt;\n\n\n\n\n7.1.2 Results\n\nspot_1.print_results()\n\nmin y: 3.696886711914087e-10\nx0: 1.922728975158508e-05\n\n\n[['x0', 1.922728975158508e-05]]\n\n\n\nspot_1.plot_progress(log_y=True)"
  },
  {
    "objectID": "07_spot_ei.html#same-but-with-ei-as-infill_criterion",
    "href": "07_spot_ei.html#same-but-with-ei-as-infill_criterion",
    "title": "7  Expected Improvement",
    "section": "7.2 Same, but with EI as infill_criterion",
    "text": "7.2 Same, but with EI as infill_criterion\n\nspot_1_ei = spot.Spot(fun=fun,\n                   lower = np.array([-1]),\n                   upper = np.array([1]),\n                   infill_criterion = \"ei\")\nspot_1_ei.run()\n\n&lt;spotPython.spot.spot.Spot at 0x14da13970&gt;\n\n\n\nspot_1_ei.plot_progress(log_y=True)\n\n\n\n\n\nspot_1_ei.print_results()\n\nmin y: 2.207887258868953e-10\nx0: 1.4858961130809088e-05\n\n\n[['x0', 1.4858961130809088e-05]]"
  },
  {
    "objectID": "07_spot_ei.html#non-isotropic-kriging",
    "href": "07_spot_ei.html#non-isotropic-kriging",
    "title": "7  Expected Improvement",
    "section": "7.3 Non-isotropic Kriging",
    "text": "7.3 Non-isotropic Kriging\n\nspot_2_ei_noniso = spot.Spot(fun=fun,\n                   lower = np.array([-1, -1]),\n                   upper = np.array([1, 1]),\n                   fun_evals = 20,\n                   fun_repeats = 1,\n                   max_time = inf,\n                   noise = False,\n                   tolerance_x = np.sqrt(np.spacing(1)),\n                   var_type=[\"num\"],\n                   infill_criterion = \"ei\",\n                   n_points = 1,\n                   seed=123,\n                   log_level = 50,\n                   show_models=True,\n                   fun_control = fun_control,\n                   design_control={\"init_size\": 10,\n                                   \"repeats\": 1},\n                   surrogate_control={\"noise\": False,\n                                      \"cod_type\": \"norm\",\n                                      \"min_theta\": -4,\n                                      \"max_theta\": 3,\n                                      \"n_theta\": 2,\n                                      \"model_optimizer\": differential_evolution,\n                                      \"model_fun_evals\": 1000,\n                                      })\nspot_2_ei_noniso.run()\n\n&lt;spotPython.spot.spot.Spot at 0x14ddaa410&gt;\n\n\n\nspot_2_ei_noniso.plot_progress(log_y=True)\n\n\n\n\n\nspot_2_ei_noniso.print_results()\n\nmin y: 1.8779971830281702e-07\nx0: -0.0002783721390529846\nx1: 0.0003321274913371111\n\n\n[['x0', -0.0002783721390529846], ['x1', 0.0003321274913371111]]\n\n\n\nspot_2_ei_noniso.surrogate.plot()"
  },
  {
    "objectID": "07_spot_ei.html#using-sklearn-surrogates",
    "href": "07_spot_ei.html#using-sklearn-surrogates",
    "title": "7  Expected Improvement",
    "section": "7.4 Using sklearn Surrogates",
    "text": "7.4 Using sklearn Surrogates\n\n7.4.1 The spot Loop\nThe spot loop consists of the following steps:\n\nInit: Build initial design \\(X\\)\nEvaluate initial design on real objective \\(f\\): \\(y = f(X)\\)\nBuild surrogate: \\(S = S(X,y)\\)\nOptimize on surrogate: \\(X_0 = \\text{optimize}(S)\\)\nEvaluate on real objective: \\(y_0 = f(X_0)\\)\nImpute (Infill) new points: \\(X = X \\cup X_0\\), \\(y = y \\cup y_0\\).\nGot 3.\n\nThe spot loop is implemented in R as follows:\n\n\n\nVisual representation of the model based search with SPOT. Taken from: Bartz-Beielstein, T., and Zaefferer, M. Hyperparameter tuning approaches. In Hyperparameter Tuning for Machine and Deep Learning with R - A Practical Guide, E. Bartz, T. Bartz-Beielstein, M. Zaefferer, and O. Mersmann, Eds. Springer, 2022, ch. 4, pp. 67–114.\n\n\n\n\n7.4.2 spot: The Initial Model\n\n7.4.2.1 Example: Modifying the initial design size\nThis is the “Example: Modifying the initial design size” from Chapter 4.5.1 in [bart21i].\n\nspot_ei = spot.Spot(fun=fun,\n               lower = np.array([-1,-1]),\n               upper= np.array([1,1]),\n               design_control={\"init_size\": 5})\nspot_ei.run()\n\n&lt;spotPython.spot.spot.Spot at 0x14e342ec0&gt;\n\n\n\nspot_ei.plot_progress()\n\n\n\n\n\nnp.min(spot_1.y), np.min(spot_ei.y)\n\n(3.696886711914087e-10, 1.7928640814182596e-05)\n\n\n\n\n\n7.4.3 Init: Build Initial Design\n\nfrom spotPython.design.spacefilling import spacefilling\nfrom spotPython.build.kriging import Kriging\nfrom spotPython.fun.objectivefunctions import analytical\ngen = spacefilling(2)\nrng = np.random.RandomState(1)\nlower = np.array([-5,-0])\nupper = np.array([10,15])\nfun = analytical().fun_branin\nfun_control = {\"sigma\": 0,\n               \"seed\": 123}\n\nX = gen.scipy_lhd(10, lower=lower, upper = upper)\nprint(X)\ny = fun(X, fun_control=fun_control)\nprint(y)\n\n[[ 8.97647221 13.41926847]\n [ 0.66946019  1.22344228]\n [ 5.23614115 13.78185824]\n [ 5.6149825  11.5851384 ]\n [-1.72963184  1.66516096]\n [-4.26945568  7.1325531 ]\n [ 1.26363761 10.17935555]\n [ 2.88779942  8.05508969]\n [-3.39111089  4.15213772]\n [ 7.30131231  5.22275244]]\n[128.95676449  31.73474356 172.89678121 126.71295908  64.34349975\n  70.16178611  48.71407916  31.77322887  76.91788181  30.69410529]\n\n\n\nS = Kriging(name='kriging',  seed=123)\nS.fit(X, y)\nS.plot()\n\n\n\n\n\ngen = spacefilling(2, seed=123)\nX0 = gen.scipy_lhd(3)\ngen = spacefilling(2, seed=345)\nX1 = gen.scipy_lhd(3)\nX2 = gen.scipy_lhd(3)\ngen = spacefilling(2, seed=123)\nX3 = gen.scipy_lhd(3)\nX0, X1, X2, X3\n\n(array([[0.77254938, 0.31539299],\n        [0.59321338, 0.93854273],\n        [0.27469803, 0.3959685 ]]),\n array([[0.78373509, 0.86811887],\n        [0.06692621, 0.6058029 ],\n        [0.41374778, 0.00525456]]),\n array([[0.121357  , 0.69043832],\n        [0.41906219, 0.32838498],\n        [0.86742658, 0.52910374]]),\n array([[0.77254938, 0.31539299],\n        [0.59321338, 0.93854273],\n        [0.27469803, 0.3959685 ]]))\n\n\n\n\n7.4.4 Evaluate\n\n\n7.4.5 Build Surrogate\n\n\n7.4.6 A Simple Predictor\nThe code below shows how to use a simple model for prediction.\n\nAssume that only two (very costly) measurements are available:\n\nf(0) = 0.5\nf(2) = 2.5\n\nWe are interested in the value at \\(x_0 = 1\\), i.e., \\(f(x_0 = 1)\\), but cannot run an additional, third experiment.\n\n\nfrom sklearn import linear_model\nX = np.array([[0], [2]])\ny = np.array([0.5, 2.5])\nS_lm = linear_model.LinearRegression()\nS_lm = S_lm.fit(X, y)\nX0 = np.array([[1]])\ny0 = S_lm.predict(X0)\nprint(y0)\n\n[1.5]\n\n\n\nCentral Idea:\n\nEvaluation of the surrogate model S_lm is much cheaper (or / and much faster) than running the real-world experiment \\(f\\)."
  },
  {
    "objectID": "07_spot_ei.html#gaussian-processes-regression-basic-introductory-example",
    "href": "07_spot_ei.html#gaussian-processes-regression-basic-introductory-example",
    "title": "7  Expected Improvement",
    "section": "7.5 Gaussian Processes regression: basic introductory example",
    "text": "7.5 Gaussian Processes regression: basic introductory example\nThis example was taken from scikit-learn. After fitting our model, we see that the hyperparameters of the kernel have been optimized. Now, we will use our kernel to compute the mean prediction of the full dataset and plot the 95% confidence interval.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math as m\nfrom sklearn.gaussian_process import GaussianProcessRegressor\nfrom sklearn.gaussian_process.kernels import RBF\n\nX = np.linspace(start=0, stop=10, num=1_000).reshape(-1, 1)\ny = np.squeeze(X * np.sin(X))\nrng = np.random.RandomState(1)\ntraining_indices = rng.choice(np.arange(y.size), size=6, replace=False)\nX_train, y_train = X[training_indices], y[training_indices]\n\nkernel = 1 * RBF(length_scale=1.0, length_scale_bounds=(1e-2, 1e2))\ngaussian_process = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)\ngaussian_process.fit(X_train, y_train)\ngaussian_process.kernel_\n\nmean_prediction, std_prediction = gaussian_process.predict(X, return_std=True)\n\nplt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, mean_prediction, label=\"Mean prediction\")\nplt.fill_between(\n    X.ravel(),\n    mean_prediction - 1.96 * std_prediction,\n    mean_prediction + 1.96 * std_prediction,\n    alpha=0.5,\n    label=r\"95% confidence interval\",\n)\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"sk-learn Version: Gaussian process regression on noise-free dataset\")\n\n\n\n\n\nfrom spotPython.build.kriging import Kriging\nimport numpy as np\nimport matplotlib.pyplot as plt\nrng = np.random.RandomState(1)\nX = np.linspace(start=0, stop=10, num=1_000).reshape(-1, 1)\ny = np.squeeze(X * np.sin(X))\ntraining_indices = rng.choice(np.arange(y.size), size=6, replace=False)\nX_train, y_train = X[training_indices], y[training_indices]\n\n\nS = Kriging(name='kriging',  seed=123, log_level=50, cod_type=\"norm\")\nS.fit(X_train, y_train)\n\nmean_prediction, std_prediction, ei = S.predict(X, return_val=\"all\")\n\nstd_prediction\n\nplt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, mean_prediction, label=\"Mean prediction\")\nplt.fill_between(\n    X.ravel(),\n    mean_prediction - 1.96 * std_prediction,\n    mean_prediction + 1.96 * std_prediction,\n    alpha=0.5,\n    label=r\"95% confidence interval\",\n)\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"spotPython Version: Gaussian process regression on noise-free dataset\")"
  },
  {
    "objectID": "07_spot_ei.html#the-surrogate-using-scikit-learn-models",
    "href": "07_spot_ei.html#the-surrogate-using-scikit-learn-models",
    "title": "7  Expected Improvement",
    "section": "7.6 The Surrogate: Using scikit-learn models",
    "text": "7.6 The Surrogate: Using scikit-learn models\nDefault is the internal kriging surrogate.\n\nS_0 = Kriging(name='kriging', seed=123)\n\nModels from scikit-learn can be selected, e.g., Gaussian Process:\n\n# Needed for the sklearn surrogates:\nfrom sklearn.gaussian_process import GaussianProcessRegressor\nfrom sklearn.gaussian_process.kernels import RBF\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import linear_model\nfrom sklearn import tree\nimport pandas as pd\n\n\nkernel = 1 * RBF(length_scale=1.0, length_scale_bounds=(1e-2, 1e2))\nS_GP = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)\n\n\nand many more:\n\n\nS_Tree = DecisionTreeRegressor(random_state=0)\nS_LM = linear_model.LinearRegression()\nS_Ridge = linear_model.Ridge()\nS_RF = RandomForestRegressor(max_depth=2, random_state=0) \n\n\nThe scikit-learn GP model S_GP is selected.\n\n\nS = S_GP\n\n\nisinstance(S, GaussianProcessRegressor)\n\nTrue\n\n\n\nfrom spotPython.fun.objectivefunctions import analytical\nfun = analytical().fun_branin\nlower = np.array([-5,-0])\nupper = np.array([10,15])\ndesign_control={\"init_size\": 5}\nsurrogate_control={\n            \"infill_criterion\": None,\n            \"n_points\": 1,\n        }\nspot_GP = spot.Spot(fun=fun, lower = lower, upper= upper, surrogate=S, \n                    fun_evals = 15, noise = False, log_level = 50,\n                    design_control=design_control,\n                    surrogate_control=surrogate_control)\n\nspot_GP.run()\n\n&lt;spotPython.spot.spot.Spot at 0x15a0cc730&gt;\n\n\n\nspot_GP.y\n\narray([ 69.32459936, 152.38491454, 107.92560483,  24.51465459,\n        76.73500031,  86.30425335,  11.00309911,  16.11743682,\n         7.28117706,  21.82326089,  10.96088904,   2.95187906,\n         3.0290874 ,   2.10494552,   1.94315979])\n\n\n\nspot_GP.plot_progress()\n\n\n\n\n\nspot_GP.print_results()\n\nmin y: 1.943159789262726\nx0: 10.0\nx1: 2.99858323388107\n\n\n[['x0', 10.0], ['x1', 2.99858323388107]]"
  },
  {
    "objectID": "07_spot_ei.html#additional-examples",
    "href": "07_spot_ei.html#additional-examples",
    "title": "7  Expected Improvement",
    "section": "7.7 Additional Examples",
    "text": "7.7 Additional Examples\n\n# Needed for the sklearn surrogates:\nfrom sklearn.gaussian_process import GaussianProcessRegressor\nfrom sklearn.gaussian_process.kernels import RBF\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import linear_model\nfrom sklearn import tree\nimport pandas as pd\n\n\nkernel = 1 * RBF(length_scale=1.0, length_scale_bounds=(1e-2, 1e2))\nS_GP = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)\n\n\nfrom spotPython.build.kriging import Kriging\nimport numpy as np\nimport spotPython\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\n\nS_K = Kriging(name='kriging',\n              seed=123,\n              log_level=50,\n              infill_criterion = \"y\",\n              n_theta=1,\n              noise=False,\n              cod_type=\"norm\")\nfun = analytical().fun_sphere\nlower = np.array([-1,-1])\nupper = np.array([1,1])\n\ndesign_control={\"init_size\": 10}\nsurrogate_control={\n            \"n_points\": 1,\n        }\nspot_S_K = spot.Spot(fun=fun,\n                     lower = lower,\n                     upper= upper,\n                     surrogate=S_K,\n                     fun_evals = 25,\n                     noise = False,\n                     log_level = 50,\n                     design_control=design_control,\n                     surrogate_control=surrogate_control)\n\nspot_S_K.run()\n\n&lt;spotPython.spot.spot.Spot at 0x14e46c9a0&gt;\n\n\n\nspot_S_K.plot_progress(log_y=True)\n\n\n\n\n\nspot_S_K.surrogate.plot()\n\n\n\n\n\nspot_S_K.print_results()\n\nmin y: 1.7395335905335862e-06\nx0: -0.0013044072412622557\nx1: 0.0001950777780173277\n\n\n[['x0', -0.0013044072412622557], ['x1', 0.0001950777780173277]]\n\n\n\n7.7.1 Optimize on Surrogate\n\n\n7.7.2 Evaluate on Real Objective\n\n\n7.7.3 Impute / Infill new Points"
  },
  {
    "objectID": "07_spot_ei.html#tests",
    "href": "07_spot_ei.html#tests",
    "title": "7  Expected Improvement",
    "section": "7.8 Tests",
    "text": "7.8 Tests\n\nimport numpy as np\nfrom spotPython.spot import spot\nfrom spotPython.fun.objectivefunctions import analytical\n\nfun_sphere = analytical().fun_sphere\nspot_1 = spot.Spot(\n    fun=fun_sphere,\n    lower=np.array([-1, -1]),\n    upper=np.array([1, 1]),\n    n_points = 2\n)\n\n# (S-2) Initial Design:\nspot_1.X = spot_1.design.scipy_lhd(\n    spot_1.design_control[\"init_size\"], lower=spot_1.lower, upper=spot_1.upper\n)\nprint(spot_1.X)\n\n# (S-3): Eval initial design:\nspot_1.y = spot_1.fun(spot_1.X)\nprint(spot_1.y)\n\nspot_1.surrogate.fit(spot_1.X, spot_1.y)\nX0 = spot_1.suggest_new_X()\nprint(X0)\nassert X0.size == spot_1.n_points * spot_1.k\n\n[[ 0.86352963  0.7892358 ]\n [-0.24407197 -0.83687436]\n [ 0.36481882  0.8375811 ]\n [ 0.415331    0.54468512]\n [-0.56395091 -0.77797854]\n [-0.90259409 -0.04899292]\n [-0.16484832  0.35724741]\n [ 0.05170659  0.07401196]\n [-0.78548145 -0.44638164]\n [ 0.64017497 -0.30363301]]\n[1.36857656 0.75992983 0.83463487 0.46918172 0.92329124 0.8170764\n 0.15480068 0.00815134 0.81623768 0.502017  ]\n[[0.00160553 0.00428429]\n [0.00160553 0.00428429]]"
  },
  {
    "objectID": "07_spot_ei.html#ei-the-famous-schonlau-example",
    "href": "07_spot_ei.html#ei-the-famous-schonlau-example",
    "title": "7  Expected Improvement",
    "section": "7.9 EI: The Famous Schonlau Example",
    "text": "7.9 EI: The Famous Schonlau Example\n\nX_train0 = np.array([1, 2, 3, 4, 12]).reshape(-1,1)\nX_train = np.linspace(start=0, stop=10, num=5).reshape(-1, 1)\n\n\nfrom spotPython.build.kriging import Kriging\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nX_train = np.array([1., 2., 3., 4., 12.]).reshape(-1,1)\ny_train = np.array([0., -1.75, -2, -0.5, 5.])\n\nS = Kriging(name='kriging',  seed=123, log_level=50, n_theta=1, noise=False, cod_type=\"norm\")\nS.fit(X_train, y_train)\n\nX = np.linspace(start=0, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X, return_val=\"all\")\n\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, mean_prediction, label=\"Mean prediction\")\nif True:\n    plt.fill_between(\n        X.ravel(),\n        mean_prediction - 2 * std_prediction,\n        mean_prediction + 2 * std_prediction,\n        alpha=0.5,\n        label=r\"95% confidence interval\",\n    )\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Gaussian process regression on noise-free dataset\")\n\n\n\n\n\n#plt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\n# plt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, -ei, label=\"Expected Improvement\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Gaussian process regression on noise-free dataset\")\n\n\n\n\n\nS.log\n\n{'negLnLike': array([1.20788205]),\n 'theta': array([1.09276]),\n 'p': array([2.]),\n 'Lambda': array([None], dtype=object)}"
  },
  {
    "objectID": "07_spot_ei.html#ei-the-forrester-example",
    "href": "07_spot_ei.html#ei-the-forrester-example",
    "title": "7  Expected Improvement",
    "section": "7.10 EI: The Forrester Example",
    "text": "7.10 EI: The Forrester Example\n\nfrom spotPython.build.kriging import Kriging\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport spotPython\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\n\n# exact x locations are unknown:\nX_train = np.array([0.0, 0.175, 0.225, 0.3, 0.35, 0.375, 0.5,1]).reshape(-1,1)\n\nfun = analytical().fun_forrester\nfun_control = {\"sigma\": 1.0,\n               \"seed\": 123}\ny_train = fun(X_train, fun_control=fun_control)\n\nS = Kriging(name='kriging',  seed=123, log_level=50, n_theta=1, noise=False, cod_type=\"norm\")\nS.fit(X_train, y_train)\n\nX = np.linspace(start=0, stop=1, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X, return_val=\"all\")\n\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, mean_prediction, label=\"Mean prediction\")\nif True:\n    plt.fill_between(\n        X.ravel(),\n        mean_prediction - 2 * std_prediction,\n        mean_prediction + 2 * std_prediction,\n        alpha=0.5,\n        label=r\"95% confidence interval\",\n    )\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Gaussian process regression on noise-free dataset\")\n\n\n\n\n\n#plt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\n# plt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, -ei, label=\"Expected Improvement\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Gaussian process regression on noise-free dataset\")"
  },
  {
    "objectID": "07_spot_ei.html#noise",
    "href": "07_spot_ei.html#noise",
    "title": "7  Expected Improvement",
    "section": "7.11 Noise",
    "text": "7.11 Noise\n\nimport numpy as np\nimport spotPython\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom spotPython.design.spacefilling import spacefilling\nfrom spotPython.build.kriging import Kriging\nimport matplotlib.pyplot as plt\n\ngen = spacefilling(1)\nrng = np.random.RandomState(1)\nlower = np.array([-10])\nupper = np.array([10])\nfun = analytical().fun_sphere\nfun_control = {\"sigma\": 2,\n               \"seed\": 125}\nX = gen.scipy_lhd(10, lower=lower, upper = upper)\nprint(X)\ny = fun(X, fun_control=fun_control)\nprint(y)\ny.shape\nX_train = X.reshape(-1,1)\ny_train = y\n\nS = Kriging(name='kriging',\n            seed=123,\n            log_level=50,\n            n_theta=1,\n            noise=False)\nS.fit(X_train, y_train)\n\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X_axis, return_val=\"all\")\n\n#plt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\nplt.scatter(X_train, y_train, label=\"Observations\")\n#plt.plot(X, ei, label=\"Expected Improvement\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Sphere: Gaussian process regression on noisy dataset\")\n\n[[ 0.63529627]\n [-4.10764204]\n [-0.44071975]\n [ 9.63125638]\n [-8.3518118 ]\n [-3.62418901]\n [ 4.15331   ]\n [ 3.4468512 ]\n [ 6.36049088]\n [-7.77978539]]\n[-4.61635371 11.44873209 -0.19988024 91.92791676 68.05926244 12.02926818\n 16.2470957   9.12729929 38.4987029  58.38469104]\n\n\n\n\n\n\nS.log\n\n{'negLnLike': array([24.69806131]),\n 'theta': array([1.31023943]),\n 'p': array([2.]),\n 'Lambda': array([None], dtype=object)}\n\n\n\nS = Kriging(name='kriging',\n            seed=123,\n            log_level=50,\n            n_theta=1,\n            noise=True)\nS.fit(X_train, y_train)\n\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X_axis, return_val=\"all\")\n\n#plt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\nplt.scatter(X_train, y_train, label=\"Observations\")\n#plt.plot(X, ei, label=\"Expected Improvement\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Sphere: Gaussian process regression with nugget on noisy dataset\")\n\n\n\n\n\nS.log\n\n{'negLnLike': array([22.14095646]),\n 'theta': array([-0.32527397]),\n 'p': array([2.]),\n 'Lambda': array([9.08815007e-05])}"
  },
  {
    "objectID": "07_spot_ei.html#cubic-function",
    "href": "07_spot_ei.html#cubic-function",
    "title": "7  Expected Improvement",
    "section": "7.12 Cubic Function",
    "text": "7.12 Cubic Function\n\nimport numpy as np\nimport spotPython\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom spotPython.design.spacefilling import spacefilling\nfrom spotPython.build.kriging import Kriging\nimport matplotlib.pyplot as plt\n\ngen = spacefilling(1)\nrng = np.random.RandomState(1)\nlower = np.array([-10])\nupper = np.array([10])\nfun = analytical().fun_cubed\nfun_control = {\"sigma\": 10,\n               \"seed\": 123}\n\nX = gen.scipy_lhd(10, lower=lower, upper = upper)\nprint(X)\ny = fun(X, fun_control=fun_control)\nprint(y)\ny.shape\nX_train = X.reshape(-1,1)\ny_train = y\n\nS = Kriging(name='kriging',  seed=123, log_level=50, n_theta=1, noise=False)\nS.fit(X_train, y_train)\n\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X_axis, return_val=\"all\")\n\nplt.scatter(X_train, y_train, label=\"Observations\")\n#plt.plot(X, ei, label=\"Expected Improvement\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Cubed: Gaussian process regression on noisy dataset\")\n\n[[ 0.63529627]\n [-4.10764204]\n [-0.44071975]\n [ 9.63125638]\n [-8.3518118 ]\n [-3.62418901]\n [ 4.15331   ]\n [ 3.4468512 ]\n [ 6.36049088]\n [-7.77978539]]\n[  -9.63480707  -72.98497325   12.7936499   895.34567477 -573.35961837\n  -41.83176425   65.27989461   46.37081417  254.1530734  -474.09587355]\n\n\n\n\n\n\nS = Kriging(name='kriging',  seed=123, log_level=0, n_theta=1, noise=True)\nS.fit(X_train, y_train)\n\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X_axis, return_val=\"all\")\n\nplt.scatter(X_train, y_train, label=\"Observations\")\n#plt.plot(X, ei, label=\"Expected Improvement\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Cubed: Gaussian process with nugget regression on noisy dataset\")\n\n\n\n\n\nimport numpy as np\nimport spotPython\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom spotPython.design.spacefilling import spacefilling\nfrom spotPython.build.kriging import Kriging\nimport matplotlib.pyplot as plt\n\ngen = spacefilling(1)\nrng = np.random.RandomState(1)\nlower = np.array([-10])\nupper = np.array([10])\nfun = analytical().fun_runge\nfun_control = {\"sigma\": 0.25,\n               \"seed\": 123}\n\nX = gen.scipy_lhd(10, lower=lower, upper = upper)\nprint(X)\ny = fun(X, fun_control=fun_control)\nprint(y)\ny.shape\nX_train = X.reshape(-1,1)\ny_train = y\n\nS = Kriging(name='kriging',  seed=123, log_level=50, n_theta=1, noise=False)\nS.fit(X_train, y_train)\n\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X_axis, return_val=\"all\")\n\nplt.scatter(X_train, y_train, label=\"Observations\")\n#plt.plot(X, ei, label=\"Expected Improvement\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Gaussian process regression on noisy dataset\")\n\n[[ 0.63529627]\n [-4.10764204]\n [-0.44071975]\n [ 9.63125638]\n [-8.3518118 ]\n [-3.62418901]\n [ 4.15331   ]\n [ 3.4468512 ]\n [ 6.36049088]\n [-7.77978539]]\n[ 0.46517267 -0.03599548  1.15933822  0.05915901  0.24419145  0.21502359\n -0.10432134  0.21312309 -0.05502681 -0.06434374]\n\n\n\n\n\n\nS = Kriging(name='kriging',\n            seed=123,\n            log_level=50,\n            n_theta=1,\n            noise=True)\nS.fit(X_train, y_train)\n\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X_axis, return_val=\"all\")\n\nplt.scatter(X_train, y_train, label=\"Observations\")\n#plt.plot(X, ei, label=\"Expected Improvement\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Gaussian process regression with nugget on noisy dataset\")"
  },
  {
    "objectID": "07_spot_ei.html#factors",
    "href": "07_spot_ei.html#factors",
    "title": "7  Expected Improvement",
    "section": "7.13 Factors",
    "text": "7.13 Factors\n\n[\"num\"] * 3\n\n['num', 'num', 'num']\n\n\n\nfrom spotPython.design.spacefilling import spacefilling\nfrom spotPython.build.kriging import Kriging\nfrom spotPython.fun.objectivefunctions import analytical\nimport numpy as np\n\n\ngen = spacefilling(2)\nn = 30\nrng = np.random.RandomState(1)\nlower = np.array([-5,-0])\nupper = np.array([10,15])\nfun = analytical().fun_branin_factor\n#fun = analytical(sigma=0).fun_sphere\n\nX0 = gen.scipy_lhd(n, lower=lower, upper = upper)\nX1 = np.random.randint(low=1, high=3, size=(n,))\nX = np.c_[X0, X1]\ny = fun(X)\nS = Kriging(name='kriging',  seed=123, log_level=50, n_theta=3, noise=False, var_type=[\"num\", \"num\", \"num\"])\nS.fit(X, y)\nSf = Kriging(name='kriging',  seed=123, log_level=50, n_theta=3, noise=False, var_type=[\"num\", \"num\", \"factor\"])\nSf.fit(X, y)\nn = 50\nX0 = gen.scipy_lhd(n, lower=lower, upper = upper)\nX1 = np.random.randint(low=1, high=3, size=(n,))\nX = np.c_[X0, X1]\ny = fun(X)\ns=np.sum(np.abs(S.predict(X)[0] - y))\nsf=np.sum(np.abs(Sf.predict(X)[0] - y))\nsf - s\n\n-10.4894511156117\n\n\n\n# vars(S)\n\n\n# vars(Sf)"
  },
  {
    "objectID": "08_spot_noisy.html#example-spot-and-the-noisy-sphere-function",
    "href": "08_spot_noisy.html#example-spot-and-the-noisy-sphere-function",
    "title": "8  Hyperparameter Tuning and Noise",
    "section": "8.1 Example: Spot and the Noisy Sphere Function",
    "text": "8.1 Example: Spot and the Noisy Sphere Function\n\nimport numpy as np\nfrom math import inf\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom scipy.optimize import shgo\nfrom scipy.optimize import direct\nfrom scipy.optimize import differential_evolution\nimport matplotlib.pyplot as plt\n\n\n8.1.1 The Objective Function: Noisy Sphere\n\nThe spotPython package provides several classes of objective functions.\nWe will use an analytical objective function with noise, i.e., a function that can be described by a (closed) formula: \\[f(x) = x^2 + \\epsilon\\]\nSince sigma is set to 0.1, noise is added to the function:\n\n\nfun = analytical().fun_sphere\nfun_control = {\"sigma\": 0.1,\n               \"seed\": 123}\n\n\nA plot illustrates the noise:\n\n\nx = np.linspace(-1,1,100).reshape(-1,1)\ny = fun(x, fun_control=fun_control)\nplt.figure()\nplt.plot(x,y, \"k\")\nplt.show()\n\n\n\n\nSpot is adopted as follows to cope with noisy functions:\n\nfun_repeats is set to a value larger than 1 (here: 2)\nnoise is set to true. Therefore, a nugget (Lambda) term is added to the correlation matrix\ninit size (of the design_control dictionary) is set to a value larger than 1 (here: 2)\n\n\nspot_1_noisy = spot.Spot(fun=fun,\n                   lower = np.array([-1]),\n                   upper = np.array([1]),\n                   fun_evals = 10,\n                   fun_repeats = 2,\n                   noise = True,\n                   seed=123,\n                   show_models=True,\n                   fun_control = fun_control,\n                   design_control={\"init_size\": 3,\n                                   \"repeats\": 2},\n                   surrogate_control={\"noise\": True})\n\n\nspot_1_noisy.run()\n\n\n\n\n\n\n\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x13fd6f310&gt;"
  },
  {
    "objectID": "08_spot_noisy.html#print-the-results",
    "href": "08_spot_noisy.html#print-the-results",
    "title": "8  Hyperparameter Tuning and Noise",
    "section": "8.2 Print the Results",
    "text": "8.2 Print the Results\n\nspot_1_noisy.print_results()\n\nmin y: -0.06415721594238855\nx0: 0.18642671238960512\nmin mean y: -0.03309048099839016\nx0: 0.18642671238960512\n\n\n[['x0', 0.18642671238960512], ['x0', 0.18642671238960512]]\n\n\n\nspot_1_noisy.plot_progress(log_y=False)"
  },
  {
    "objectID": "08_spot_noisy.html#noise-and-surrogates-the-nugget-effect",
    "href": "08_spot_noisy.html#noise-and-surrogates-the-nugget-effect",
    "title": "8  Hyperparameter Tuning and Noise",
    "section": "8.3 Noise and Surrogates: The Nugget Effect",
    "text": "8.3 Noise and Surrogates: The Nugget Effect\n\n8.3.1 The Noisy Sphere\n\n8.3.1.1 The Data\n\nWe prepare some data first:\n\n\nimport numpy as np\nimport spotPython\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom spotPython.design.spacefilling import spacefilling\nfrom spotPython.build.kriging import Kriging\nimport matplotlib.pyplot as plt\n\ngen = spacefilling(1)\nrng = np.random.RandomState(1)\nlower = np.array([-10])\nupper = np.array([10])\nfun = analytical().fun_sphere\nfun_control = {\"sigma\": 2,\n               \"seed\": 125}\nX = gen.scipy_lhd(10, lower=lower, upper = upper)\ny = fun(X, fun_control=fun_control)\nX_train = X.reshape(-1,1)\ny_train = y\n\n\nA surrogate without nugget is fitted to these data:\n\n\nS = Kriging(name='kriging',\n            seed=123,\n            log_level=50,\n            n_theta=1,\n            noise=False)\nS.fit(X_train, y_train)\n\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X_axis, return_val=\"all\")\n\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Sphere: Gaussian process regression on noisy dataset\")\n\n\n\n\n\nIn comparison to the surrogate without nugget, we fit a surrogate with nugget to the data:\n\n\nS_nug = Kriging(name='kriging',\n            seed=123,\n            log_level=50,\n            n_theta=1,\n            noise=True)\nS_nug.fit(X_train, y_train)\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S_nug.predict(X_axis, return_val=\"all\")\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Sphere: Gaussian process regression with nugget on noisy dataset\")\n\n\n\n\n\nThe value of the nugget term can be extracted from the model as follows:\n\n\nS.Lambda\n\n\nS_nug.Lambda\n\n9.088150066416743e-05\n\n\n\nWe see:\n\nthe first model S has no nugget,\nwhereas the second model has a nugget value (Lambda) larger than zero."
  },
  {
    "objectID": "08_spot_noisy.html#exercises",
    "href": "08_spot_noisy.html#exercises",
    "title": "8  Hyperparameter Tuning and Noise",
    "section": "8.4 Exercises",
    "text": "8.4 Exercises\n\n8.4.1 Noisy fun_cubed\n\nAnalyse the effect of noise on the fun_cubed function with the following settings:\n\n\nfun = analytical().fun_cubed\nfun_control = {\"sigma\": 10,\n               \"seed\": 123}\nlower = np.array([-10])\nupper = np.array([10])\n\n\n\n8.4.2 fun_runge\n\nAnalyse the effect of noise on the fun_runge function with the following settings:\n\n\nlower = np.array([-10])\nupper = np.array([10])\nfun = analytical().fun_runge\nfun_control = {\"sigma\": 0.25,\n               \"seed\": 123}\n\n\n\n8.4.3 fun_forrester\n\nAnalyse the effect of noise on the fun_forrester function with the following settings:\n\n\nlower = np.array([0])\nupper = np.array([1])\nfun = analytical().fun_forrester\nfun_control = {\"sigma\": 5,\n               \"seed\": 123}\n\n\n\n8.4.4 fun_xsin\n\nAnalyse the effect of noise on the fun_xsin function with the following settings:\n\n\nlower = np.array([-1.])\nupper = np.array([1.])\nfun = analytical().fun_xsin\nfun_control = {\"sigma\": 0.5,\n               \"seed\": 123}"
  },
  {
    "objectID": "09_spot_ocba.html#example-spot-ocba-and-the-noisy-sphere-function",
    "href": "09_spot_ocba.html#example-spot-ocba-and-the-noisy-sphere-function",
    "title": "9  Handling Noise: Optimal Computational Budget Allocation in Spot",
    "section": "9.1 Example: Spot, OCBA, and the Noisy Sphere Function",
    "text": "9.1 Example: Spot, OCBA, and the Noisy Sphere Function\n\nimport numpy as np\nfrom math import inf\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom scipy.optimize import shgo\nfrom scipy.optimize import direct\nfrom scipy.optimize import differential_evolution\nimport matplotlib.pyplot as plt\n\n\n9.1.1 The Objective Function: Noisy Sphere\nThe spotPython package provides several classes of objective functions. We will use an analytical objective function with noise, i.e., a function that can be described by a (closed) formula: \\[f(x) = x^2 + \\epsilon\\]\nSince sigma is set to 0.1, noise is added to the function:\n\nfun = analytical().fun_sphere\nfun_control = {\"sigma\": 0.1,\n               \"seed\": 123}\n\nA plot illustrates the noise:\n\nx = np.linspace(-1,1,100).reshape(-1,1)\ny = fun(x, fun_control=fun_control)\nplt.figure()\nplt.plot(x,y, \"k\")\nplt.show()\n\n\n\n\nSpot is adopted as follows to cope with noisy functions:\n\nfun_repeats is set to a value larger than 1 (here: 2)\nnoise is set to true. Therefore, a nugget (Lambda) term is added to the correlation matrix\ninit size (of the design_control dictionary) is set to a value larger than 1 (here: 2)\n\n\nspot_1_noisy = spot.Spot(fun=fun,\n                   lower = np.array([-1]),\n                   upper = np.array([1]),\n                   fun_evals = 50,\n                   fun_repeats = 2,\n                   infill_criterion=\"ei\",\n                   noise = True,\n                   tolerance_x=0.0,\n                   ocba_delta = 1,\n                   seed=123,\n                   show_models=True,\n                   fun_control = fun_control,\n                   design_control={\"init_size\": 3,\n                                   \"repeats\": 2},\n                   surrogate_control={\"noise\": True})\n\n\nspot_1_noisy.run()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x148367400&gt;"
  },
  {
    "objectID": "09_spot_ocba.html#print-the-results",
    "href": "09_spot_ocba.html#print-the-results",
    "title": "9  Handling Noise: Optimal Computational Budget Allocation in Spot",
    "section": "9.2 Print the Results",
    "text": "9.2 Print the Results\n\nspot_1_noisy.print_results()\n\nmin y: -0.08106318979661208\nx0: 0.1335999447536301\nmin mean y: -0.06294830660588041\nx0: 0.1335999447536301\n\n\n[['x0', 0.1335999447536301], ['x0', 0.1335999447536301]]\n\n\n\nspot_1_noisy.plot_progress(log_y=False)"
  },
  {
    "objectID": "09_spot_ocba.html#noise-and-surrogates-the-nugget-effect",
    "href": "09_spot_ocba.html#noise-and-surrogates-the-nugget-effect",
    "title": "9  Handling Noise: Optimal Computational Budget Allocation in Spot",
    "section": "9.3 Noise and Surrogates: The Nugget Effect",
    "text": "9.3 Noise and Surrogates: The Nugget Effect\n\n9.3.1 The Noisy Sphere\n\n9.3.1.1 The Data\nWe prepare some data first:\n\nimport numpy as np\nimport spotPython\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom spotPython.design.spacefilling import spacefilling\nfrom spotPython.build.kriging import Kriging\nimport matplotlib.pyplot as plt\n\ngen = spacefilling(1)\nrng = np.random.RandomState(1)\nlower = np.array([-10])\nupper = np.array([10])\nfun = analytical().fun_sphere\nfun_control = {\"sigma\": 2,\n               \"seed\": 125}\nX = gen.scipy_lhd(10, lower=lower, upper = upper)\ny = fun(X, fun_control=fun_control)\nX_train = X.reshape(-1,1)\ny_train = y\n\nA surrogate without nugget is fitted to these data:\n\nS = Kriging(name='kriging',\n            seed=123,\n            log_level=50,\n            n_theta=1,\n            noise=False)\nS.fit(X_train, y_train)\n\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X_axis, return_val=\"all\")\n\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Sphere: Gaussian process regression on noisy dataset\")\n\n\n\n\nIn comparison to the surrogate without nugget, we fit a surrogate with nugget to the data:\n\nS_nug = Kriging(name='kriging',\n            seed=123,\n            log_level=50,\n            n_theta=1,\n            noise=True)\nS_nug.fit(X_train, y_train)\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S_nug.predict(X_axis, return_val=\"all\")\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Sphere: Gaussian process regression with nugget on noisy dataset\")\n\n\n\n\nThe value of the nugget term can be extracted from the model as follows:\n\nS.Lambda\n\n\nS_nug.Lambda\n\n9.088150066416743e-05\n\n\nWe see:\n\nthe first model S has no nugget,\nwhereas the second model has a nugget value (Lambda) larger than zero."
  },
  {
    "objectID": "09_spot_ocba.html#exercises",
    "href": "09_spot_ocba.html#exercises",
    "title": "9  Handling Noise: Optimal Computational Budget Allocation in Spot",
    "section": "9.4 Exercises",
    "text": "9.4 Exercises\n\n9.4.1 Noisy fun_cubed\nAnalyse the effect of noise on the fun_cubed function with the following settings:\n\nfun = analytical().fun_cubed\nfun_control = {\"sigma\": 10,\n               \"seed\": 123}\nlower = np.array([-10])\nupper = np.array([10])\n\n\n\n9.4.2 fun_runge\nAnalyse the effect of noise on the fun_runge function with the following settings:\n\nlower = np.array([-10])\nupper = np.array([10])\nfun = analytical().fun_runge\nfun_control = {\"sigma\": 0.25,\n               \"seed\": 123}\n\n\n\n9.4.3 fun_forrester\nAnalyse the effect of noise on the fun_forrester function with the following settings:\n\nlower = np.array([0])\nupper = np.array([1])\nfun = analytical().fun_forrester\nfun_control = {\"sigma\": 5,\n               \"seed\": 123}\n\n\n\n9.4.4 fun_xsin\nAnalyse the effect of noise on the fun_xsin function with the following settings:\n\nlower = np.array([-1.])\nupper = np.array([1.])\nfun = analytical().fun_xsin\nfun_control = {\"sigma\": 0.5,\n               \"seed\": 123}\n\n\nspot_1_noisy.mean_y.shape[0]\n\n18"
  },
  {
    "objectID": "10_spot_hpt_sklearn_classification.html#step-1-initialization-of-the-empty-fun_control-dictionary",
    "href": "10_spot_hpt_sklearn_classification.html#step-1-initialization-of-the-empty-fun_control-dictionary",
    "title": "10  Hyperparameter Tuning: sklearn",
    "section": "10.1 Step 1: Initialization of the Empty fun_control Dictionary",
    "text": "10.1 Step 1: Initialization of the Empty fun_control Dictionary\n\nfun_control = fun_control_init(task=\"classification\",\n    tensorboard_path=\"runs/10_spot_hpt_sklearn_classification\")"
  },
  {
    "objectID": "10_spot_hpt_sklearn_classification.html#step-2-load-data-classification",
    "href": "10_spot_hpt_sklearn_classification.html#step-2-load-data-classification",
    "title": "10  Hyperparameter Tuning: sklearn",
    "section": "10.2 Step 2: Load Data (Classification)",
    "text": "10.2 Step 2: Load Data (Classification)\nRandomly generate classification data.\n\nn_features = 2\nn_samples = 250\ntarget_column = \"y\"\nds =  make_moons(n_samples, noise=0.5, random_state=0)\nX, y = ds\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.4, random_state=42\n)\ntrain = pd.DataFrame(np.hstack((X_train, y_train.reshape(-1, 1))))\ntest = pd.DataFrame(np.hstack((X_test, y_test.reshape(-1, 1))))\ntrain.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\ntest.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\ntrain.head()\n\n\n\n\n\n\n\n\nx1\nx2\ny\n\n\n\n\n0\n1.083978\n-1.246111\n1.0\n\n\n1\n0.074916\n0.868104\n0.0\n\n\n2\n-1.668535\n0.751752\n0.0\n\n\n3\n1.286597\n1.454165\n0.0\n\n\n4\n1.387021\n0.448355\n1.0\n\n\n\n\n\n\n\n\nfrom matplotlib.colors import ListedColormap\nx_min, x_max = X[:, 0].min() - 0.5, X[:, 0].max() + 0.5\ny_min, y_max = X[:, 1].min() - 0.5, X[:, 1].max() + 0.5\n\n# just plot the dataset first\ncm = plt.cm.RdBu\ncm_bright = ListedColormap([\"#FF0000\", \"#0000FF\"])\nax = plt.subplot(1, 1, 1)\nax.set_title(\"Input data\")\n# Plot the training points\nax.scatter(X_train[:, 0], X_train[:, 1], c=y_train, cmap=cm_bright, edgecolors=\"k\")\n# Plot the testing points\nax.scatter(\n    X_test[:, 0], X_test[:, 1], c=y_test, cmap=cm_bright, alpha=0.6, edgecolors=\"k\"\n)\nax.set_xlim(x_min, x_max)\nax.set_ylim(y_min, y_max)\nax.set_xticks(())\nax.set_yticks(())\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\nn_samples = len(train)\n# add the dataset to the fun_control\nfun_control.update({\"data\": None, # dataset,\n               \"train\": train,\n               \"test\": test,\n               \"n_samples\": n_samples,\n               \"target_column\": target_column})"
  },
  {
    "objectID": "10_spot_hpt_sklearn_classification.html#step-3-specification-of-the-preprocessing-model",
    "href": "10_spot_hpt_sklearn_classification.html#step-3-specification-of-the-preprocessing-model",
    "title": "10  Hyperparameter Tuning: sklearn",
    "section": "10.3 Step 3: Specification of the Preprocessing Model",
    "text": "10.3 Step 3: Specification of the Preprocessing Model\nData preprocesssing can be very simple, e.g., you can ignore it. Then you would choose the prep_model “None”:\n\nprep_model = None\nfun_control.update({\"prep_model\": prep_model})\n\nA default approach for numerical data is the StandardScaler (mean 0, variance 1). This can be selected as follows:\n\nprep_model = StandardScaler()\nfun_control.update({\"prep_model\": prep_model})\n\nEven more complicated pre-processing steps are possible, e.g., the follwing pipeline:\n\n# categorical_columns = []\n# one_hot_encoder = OneHotEncoder(handle_unknown=\"ignore\", sparse_output=False)\n# prep_model = ColumnTransformer(\n#         transformers=[\n#             (\"categorical\", one_hot_encoder, categorical_columns),\n#         ],\n#         remainder=StandardScaler(),\n#     )"
  },
  {
    "objectID": "10_spot_hpt_sklearn_classification.html#step-4-select-algorithm-and-core_model_hyper_dict",
    "href": "10_spot_hpt_sklearn_classification.html#step-4-select-algorithm-and-core_model_hyper_dict",
    "title": "10  Hyperparameter Tuning: sklearn",
    "section": "10.4 Step 4: Select algorithm and core_model_hyper_dict",
    "text": "10.4 Step 4: Select algorithm and core_model_hyper_dict\nThe selection of the algorithm (ML model) that should be tuned is done by specifying the its name from the sklearn implementation. For example, the SVC support vector machine classifier is selected as follows:\n\n# core_model  = RidgeCV\n# core_model = GradientBoostingRegressor\n# core_model = ElasticNet\n# core_model = RandomForestClassifier\ncore_model = SVC\n# core_model = LogisticRegression\n# core_model = KNeighborsClassifier\n# core_model = GradientBoostingClassifier\nfun_control = add_core_model_to_fun_control(core_model=core_model,\n                              fun_control=fun_control,\n                              hyper_dict=SklearnHyperDict,\n                              filename=None)\n\nNow fun_control has the information from the JSON file:\n    \"SVC\":\n    {\n        \"C\": {\n            \"type\": \"float\",\n            \"default\": 1.0,\n            \"transform\": \"None\",\n            \"lower\": 0.1,\n            \"upper\": 10.0},\n        \"kernel\": {\n            \"levels\": [\"linear\", \"poly\", \"rbf\", \"sigmoid\"],\n            \"type\": \"factor\",\n            \"default\": \"rbf\",\n            \"transform\": \"None\",\n            \"core_model_parameter_type\": \"str\",\n            \"lower\": 0,\n            \"upper\": 3},\n        \"degree\": {\n            \"type\": \"int\",\n            \"default\": 3,\n            \"transform\": \"None\",\n            \"lower\": 3,\n            \"upper\": 3},\n        \"gamma\": {\n            \"levels\": [\"scale\", \"auto\"],\n            \"type\": \"factor\",\n            \"default\": \"scale\",\n            \"transform\": \"None\",\n            \"core_model_parameter_type\": \"str\",\n            \"lower\": 0,\n            \"upper\": 1},\n        \"coef0\": {\n            \"type\": \"float\",\n            \"default\": 0.0,\n            \"transform\": \"None\",\n            \"lower\": 0.0,\n            \"upper\": 0.0},\n        \"shrinking\": {\n            \"levels\": [0, 1],\n            \"type\": \"factor\",\n            \"default\": 0,\n            \"transform\": \"None\",\n            \"core_model_parameter_type\": \"bool\",\n            \"lower\": 0,\n            \"upper\": 1},\n        \"probability\": {\n            \"levels\": [0, 1],\n            \"type\": \"factor\",\n            \"default\": 0,\n            \"transform\": \"None\",\n            \"core_model_parameter_type\": \"bool\",\n            \"lower\": 0,\n            \"upper\": 1},\n        \"tol\": {\n            \"type\": \"float\",\n            \"default\": 1e-3,\n            \"transform\": \"None\",\n            \"lower\": 1e-4,\n            \"upper\": 1e-2},\n        \"cache_size\": {\n            \"type\": \"float\",\n            \"default\": 200,\n            \"transform\": \"None\",\n            \"lower\": 100,\n            \"upper\": 400},\n        \"break_ties\": {\n            \"levels\": [0, 1],\n            \"type\": \"factor\",\n            \"default\": 0,\n            \"transform\": \"None\",\n            \"core_model_parameter_type\": \"bool\",\n            \"lower\": 0,\n            \"upper\": 1}\n    }"
  },
  {
    "objectID": "10_spot_hpt_sklearn_classification.html#step-5-modify-hyper_dict-hyperparameters-for-the-selected-algorithm-aka-core_model",
    "href": "10_spot_hpt_sklearn_classification.html#step-5-modify-hyper_dict-hyperparameters-for-the-selected-algorithm-aka-core_model",
    "title": "10  Hyperparameter Tuning: sklearn",
    "section": "10.5 Step 5: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model",
    "text": "10.5 Step 5: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model\n\n10.5.1 Modify hyperparameter of type factor\nFactors can be modified with the modify_hyper_parameter_levels function. For example, to exclude the sigmoid kernel from the tuning, the kernel hyperparameter of the SVC model can be modified as follows:\n\nfun_control = modify_hyper_parameter_levels(fun_control, \"kernel\", [\"linear\", \"poly\", \"rbf\"])\nfun_control[\"core_model_hyper_dict\"][\"kernel\"]\n\n{'levels': ['linear', 'poly', 'rbf'],\n 'type': 'factor',\n 'default': 'rbf',\n 'transform': 'None',\n 'core_model_parameter_type': 'str',\n 'lower': 0,\n 'upper': 2}\n\n\n\n\n10.5.2 Modify hyperparameter of type numeric and integer (boolean)\nNumeric and boolean values can be modified using the modify_hyper_parameter_bounds method. For example, to change the tol hyperparameter of the SVC model to the interval [1e-3, 1e-2], the following code can be used:\n\nfun_control = modify_hyper_parameter_bounds(fun_control, \"tol\", bounds=[1e-3, 1e-2])\n# fun_control = modify_hyper_parameter_bounds(fun_control, \"min_samples_split\", bounds=[3, 20])\n#fun_control = modify_hyper_parameter_bounds(fun_control, \"merit_preprune\", bounds=[0, 0])\nfun_control[\"core_model_hyper_dict\"][\"tol\"]\n\n{'type': 'float',\n 'default': 0.001,\n 'transform': 'None',\n 'lower': 0.001,\n 'upper': 0.01}"
  },
  {
    "objectID": "10_spot_hpt_sklearn_classification.html#step-6-selection-of-the-objective-loss-function",
    "href": "10_spot_hpt_sklearn_classification.html#step-6-selection-of-the-objective-loss-function",
    "title": "10  Hyperparameter Tuning: sklearn",
    "section": "10.6 Step 6: Selection of the Objective (Loss) Function",
    "text": "10.6 Step 6: Selection of the Objective (Loss) Function\nThere are two metrics:\n1. `metric_river` is used for the river based evaluation via `eval_oml_iter_progressive`.\n2. `metric_sklearn` is used for the sklearn based evaluation.\n\nfun = HyperSklearn(seed=123, log_level=50).fun_sklearn\n# metric_sklearn = roc_auc_score\n# weights = -1.0\nmetric_sklearn = log_loss\nweights = 1.0\n# k = None\n# custom_metric = mapk\n\nfun_control.update({\n               \"horizon\": None,\n               \"oml_grace_period\": None,\n               \"weights\": weights,\n               \"step\": None,\n               \"log_level\": 50,\n               \"weight_coeff\": None,\n               \"metric_river\": None,\n               \"metric_sklearn\": metric_sklearn,\n               # \"metric_params\": {\"k\": k},\n               })\n\n\n10.6.1 Predict Classes or Class Probabilities\nIf the key \"predict_proba\" is set to True, the class probabilities are predicted. False is the default, i.e., the classes are predicted.\n\nfun_control.update({\n               \"predict_proba\": False,\n               })"
  },
  {
    "objectID": "10_spot_hpt_sklearn_classification.html#step-7-calling-the-spot-function",
    "href": "10_spot_hpt_sklearn_classification.html#step-7-calling-the-spot-function",
    "title": "10  Hyperparameter Tuning: sklearn",
    "section": "10.7 Step 7: Calling the SPOT Function",
    "text": "10.7 Step 7: Calling the SPOT Function\n\n10.7.1 Prepare the SPOT Parameters\n\nGet types and variable names as well as lower and upper bounds for the hyperparameters.\n\n\nvar_type = get_var_type(fun_control)\nvar_name = get_var_name(fun_control)\nfun_control.update({\"var_type\": var_type,\n                    \"var_name\": var_name})\n\nlower = get_bound_values(fun_control, \"lower\")\nupper = get_bound_values(fun_control, \"upper\")\n\n\nprint(gen_design_table(fun_control))\n\n| name        | type   | default   |   lower |   upper | transform   |\n|-------------|--------|-----------|---------|---------|-------------|\n| C           | float  | 1.0       |   0.1   |   10    | None        |\n| kernel      | factor | rbf       |   0     |    2    | None        |\n| degree      | int    | 3         |   3     |    3    | None        |\n| gamma       | factor | scale     |   0     |    1    | None        |\n| coef0       | float  | 0.0       |   0     |    0    | None        |\n| shrinking   | factor | 0         |   0     |    1    | None        |\n| probability | factor | 0         |   0     |    1    | None        |\n| tol         | float  | 0.001     |   0.001 |    0.01 | None        |\n| cache_size  | float  | 200.0     | 100     |  400    | None        |\n| break_ties  | factor | 0         |   0     |    1    | None        |\n\n\n\n\n10.7.2 Run the Spot Optimizer\n\nRun SPOT for approx. x mins (max_time).\nNote: the run takes longer, because the evaluation time of initial design (here: initi_size, 20 points) is not considered.\n\n\nfrom spotPython.hyperparameters.values import get_default_hyperparameters_as_array\nhyper_dict=SklearnHyperDict().load()\nX_start = get_default_hyperparameters_as_array(fun_control, hyper_dict)\nX_start\n\narray([[1.e+00, 2.e+00, 3.e+00, 0.e+00, 0.e+00, 0.e+00, 0.e+00, 1.e-03,\n        2.e+02, 0.e+00]])\n\n\n\nspot_tuner = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = inf,\n                   fun_repeats = 1,\n                   max_time = MAX_TIME,\n                   noise = False,\n                   tolerance_x = np.sqrt(np.spacing(1)),\n                   var_type = var_type,\n                   var_name = var_name,\n                   infill_criterion = \"y\",\n                   n_points = 1,\n                   seed=123,\n                   log_level = 50,\n                   show_models= False,\n                   show_progress= True,\n                   fun_control = fun_control,\n                   design_control={\"init_size\": INIT_SIZE,\n                                   \"repeats\": 1},\n                   surrogate_control={\"noise\": True,\n                                      \"cod_type\": \"norm\",\n                                      \"min_theta\": -4,\n                                      \"max_theta\": 3,\n                                      \"n_theta\": len(var_name),\n                                      \"model_optimizer\": differential_evolution,\n                                      \"model_fun_evals\": 10_000,\n                                      \"log_level\": 50\n                                      })\nspot_tuner.run(X_start=X_start)\n\nspotPython tuning: 5.691103166702708 [----------] 2.79% \n\n\nspotPython tuning: 5.691103166702708 [----------] 4.62% \n\n\nspotPython tuning: 5.691103166702708 [#---------] 6.13% \n\n\nspotPython tuning: 5.691103166702708 [#---------] 7.59% \n\n\nspotPython tuning: 5.691103166702708 [#---------] 9.07% \n\n\nspotPython tuning: 5.691103166702708 [#---------] 11.47% \n\n\nspotPython tuning: 5.691103166702708 [#---------] 13.76% \n\n\nspotPython tuning: 5.691103166702708 [##--------] 15.97% \n\n\nspotPython tuning: 5.691103166702708 [##--------] 18.29% \n\n\nspotPython tuning: 5.691103166702708 [##--------] 20.57% \n\n\nspotPython tuning: 5.691103166702708 [##--------] 23.02% \n\n\nspotPython tuning: 5.691103166702708 [###-------] 25.65% \n\n\nspotPython tuning: 5.691103166702708 [###-------] 34.01% \n\n\nspotPython tuning: 5.691103166702708 [#####-----] 45.84% \n\n\nspotPython tuning: 5.691103166702708 [######----] 58.39% \n\n\nspotPython tuning: 5.691103166702708 [#######---] 70.96% \n\n\nspotPython tuning: 5.691103166702708 [########--] 83.31% \n\n\nspotPython tuning: 5.691103166702708 [##########] 95.59% \n\n\nspotPython tuning: 5.691103166702708 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x2b483a680&gt;\n\n\n\n\n10.7.3 Results\n\nSAVE = False\nLOAD = False\n\nif SAVE:\n    result_file_name = \"res_\" + experiment_name + \".pkl\"\n    with open(result_file_name, 'wb') as f:\n        pickle.dump(spot_tuner, f)\n\nif LOAD:\n    result_file_name = \"res_ch10-friedman-hpt-0_maans03_60min_20init_1K_2023-04-14_10-11-19.pkl\"\n    with open(result_file_name, 'rb') as f:\n        spot_tuner =  pickle.load(f)\n\n\nShow the Progress of the hyperparameter tuning:\n\n\nspot_tuner.plot_progress(log_y=False, filename=\"./figures/\" + experiment_name+\"_progress.pdf\")\n\n\n\n\nPrint the results.\n\nprint(gen_design_table(fun_control=fun_control, spot=spot_tuner))\n\n| name        | type   | default   |   lower |   upper |                tuned | transform   |   importance | stars   |\n|-------------|--------|-----------|---------|---------|----------------------|-------------|--------------|---------|\n| C           | float  | 1.0       |     0.1 |    10.0 |   3.6280771109650245 | None        |         1.14 | *       |\n| kernel      | factor | rbf       |     0.0 |     2.0 |                  1.0 | None        |       100.00 | ***     |\n| degree      | int    | 3         |     3.0 |     3.0 |                  3.0 | None        |         0.00 |         |\n| gamma       | factor | scale     |     0.0 |     1.0 |                  0.0 | None        |         0.00 |         |\n| coef0       | float  | 0.0       |     0.0 |     0.0 |                  0.0 | None        |         0.00 |         |\n| shrinking   | factor | 0         |     0.0 |     1.0 |                  1.0 | None        |         0.00 |         |\n| probability | factor | 0         |     0.0 |     1.0 |                  0.0 | None        |         0.00 |         |\n| tol         | float  | 0.001     |   0.001 |    0.01 | 0.006642600916881275 | None        |         0.00 |         |\n| cache_size  | float  | 200.0     |   100.0 |   400.0 |   202.03372626175258 | None        |         0.00 |         |\n| break_ties  | factor | 0         |     0.0 |     1.0 |                  1.0 | None        |         0.00 |         |"
  },
  {
    "objectID": "10_spot_hpt_sklearn_classification.html#show-variable-importance",
    "href": "10_spot_hpt_sklearn_classification.html#show-variable-importance",
    "title": "10  Hyperparameter Tuning: sklearn",
    "section": "10.8 Show variable importance",
    "text": "10.8 Show variable importance\n\nspot_tuner.plot_importance(threshold=0.025, filename=\"./figures/\" + experiment_name+\"_importance.pdf\")"
  },
  {
    "objectID": "10_spot_hpt_sklearn_classification.html#get-default-hyperparameters",
    "href": "10_spot_hpt_sklearn_classification.html#get-default-hyperparameters",
    "title": "10  Hyperparameter Tuning: sklearn",
    "section": "10.9 Get Default Hyperparameters",
    "text": "10.9 Get Default Hyperparameters\n\nvalues_default = get_default_values(fun_control)\nvalues_default = transform_hyper_parameter_values(fun_control=fun_control, hyper_parameter_values=values_default)\nvalues_default\n\n{'C': 1.0,\n 'kernel': 'rbf',\n 'degree': 3,\n 'gamma': 'scale',\n 'coef0': 0.0,\n 'shrinking': 0,\n 'probability': 0,\n 'tol': 0.001,\n 'cache_size': 200.0,\n 'break_ties': 0}\n\n\n\nmodel_default = make_pipeline(fun_control[\"prep_model\"], fun_control[\"core_model\"](**values_default))\nmodel_default\n\nPipeline(steps=[('standardscaler', StandardScaler()),\n                ('svc',\n                 SVC(break_ties=0, cache_size=200.0, probability=0,\n                     shrinking=0))])In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.PipelinePipeline(steps=[('standardscaler', StandardScaler()),\n                ('svc',\n                 SVC(break_ties=0, cache_size=200.0, probability=0,\n                     shrinking=0))])StandardScalerStandardScaler()SVCSVC(break_ties=0, cache_size=200.0, probability=0, shrinking=0)"
  },
  {
    "objectID": "10_spot_hpt_sklearn_classification.html#get-spot-results",
    "href": "10_spot_hpt_sklearn_classification.html#get-spot-results",
    "title": "10  Hyperparameter Tuning: sklearn",
    "section": "10.10 Get SPOT Results",
    "text": "10.10 Get SPOT Results\n\nX = spot_tuner.to_all_dim(spot_tuner.min_X.reshape(1,-1))\nprint(X)\n\n[[3.62807711e+00 1.00000000e+00 3.00000000e+00 0.00000000e+00\n  0.00000000e+00 1.00000000e+00 0.00000000e+00 6.64260092e-03\n  2.02033726e+02 1.00000000e+00]]\n\n\n\nv_dict = assign_values(X, fun_control[\"var_name\"])\nreturn_conf_list_from_var_dict(var_dict=v_dict, fun_control=fun_control)\n\n[{'C': 3.6280771109650245,\n  'kernel': 'poly',\n  'degree': 3,\n  'gamma': 'scale',\n  'coef0': 0.0,\n  'shrinking': 1,\n  'probability': 0,\n  'tol': 0.006642600916881275,\n  'cache_size': 202.03372626175258,\n  'break_ties': 1}]\n\n\n\nmodel_spot = get_one_sklearn_model_from_X(X, fun_control)\nmodel_spot\n\nPipeline(steps=[('standardscaler', StandardScaler()),\n                ('svc',\n                 SVC(C=3.6280771109650245, break_ties=1,\n                     cache_size=202.03372626175258, kernel='poly',\n                     probability=0, shrinking=1, tol=0.006642600916881275))])In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.PipelinePipeline(steps=[('standardscaler', StandardScaler()),\n                ('svc',\n                 SVC(C=3.6280771109650245, break_ties=1,\n                     cache_size=202.03372626175258, kernel='poly',\n                     probability=0, shrinking=1, tol=0.006642600916881275))])StandardScalerStandardScaler()SVCSVC(C=3.6280771109650245, break_ties=1, cache_size=202.03372626175258,\n    kernel='poly', probability=0, shrinking=1, tol=0.006642600916881275)"
  },
  {
    "objectID": "10_spot_hpt_sklearn_classification.html#plot-compare-predictions",
    "href": "10_spot_hpt_sklearn_classification.html#plot-compare-predictions",
    "title": "10  Hyperparameter Tuning: sklearn",
    "section": "10.11 Plot: Compare Predictions",
    "text": "10.11 Plot: Compare Predictions\n\nplot_roc([model_default, model_spot], fun_control, model_names=[\"Default\", \"Spot\"])\n\n\n\n\n\nplot_confusion_matrix(model_default, fun_control, title = \"Default\")\n\n\n\n\n\nplot_confusion_matrix(model_spot, fun_control, title=\"SPOT\")\n\n\n\n\n\nmin(spot_tuner.y), max(spot_tuner.y)\n\n(5.691103166702708, 9.485171944504513)"
  },
  {
    "objectID": "10_spot_hpt_sklearn_classification.html#detailed-hyperparameter-plots",
    "href": "10_spot_hpt_sklearn_classification.html#detailed-hyperparameter-plots",
    "title": "10  Hyperparameter Tuning: sklearn",
    "section": "10.12 Detailed Hyperparameter Plots",
    "text": "10.12 Detailed Hyperparameter Plots\n\nfilename = \"./figures/\" + experiment_name\nspot_tuner.plot_important_hyperparameter_contour(filename=filename)\n\nC:  1.1399176173997725\nkernel:  100.0"
  },
  {
    "objectID": "10_spot_hpt_sklearn_classification.html#parallel-coordinates-plot",
    "href": "10_spot_hpt_sklearn_classification.html#parallel-coordinates-plot",
    "title": "10  Hyperparameter Tuning: sklearn",
    "section": "10.13 Parallel Coordinates Plot",
    "text": "10.13 Parallel Coordinates Plot\n\nspot_tuner.parallel_plot()"
  },
  {
    "objectID": "10_spot_hpt_sklearn_classification.html#plot-all-combinations-of-hyperparameters",
    "href": "10_spot_hpt_sklearn_classification.html#plot-all-combinations-of-hyperparameters",
    "title": "10  Hyperparameter Tuning: sklearn",
    "section": "10.14 Plot all Combinations of Hyperparameters",
    "text": "10.14 Plot all Combinations of Hyperparameters\n\nWarning: this may take a while.\n\n\nPLOT_ALL = False\nif PLOT_ALL:\n    n = spot_tuner.k\n    for i in range(n-1):\n        for j in range(i+1, n):\n            spot_tuner.plot_contour(i=i, j=j, min_z=min_z, max_z = max_z)"
  },
  {
    "objectID": "11_spot_hpt_torch_fashion_mnist.html#step-1-initialization-of-the-empty-fun_control-dictionary",
    "href": "11_spot_hpt_torch_fashion_mnist.html#step-1-initialization-of-the-empty-fun_control-dictionary",
    "title": "11  Hyperparameter Tuning: PyTorch With fashionMNIST Data Using Hold-out Data Sets",
    "section": "11.1 Step 1: Initialization of the Empty fun_control Dictionary",
    "text": "11.1 Step 1: Initialization of the Empty fun_control Dictionary\n\nfun_control = fun_control_init(task=\"classification\",\n    tensorboard_path=\"runs/11_spot_hpt_torch_fashion_mnist\",\n    device=DEVICE)"
  },
  {
    "objectID": "11_spot_hpt_torch_fashion_mnist.html#step-2-load-fashionmnist-data",
    "href": "11_spot_hpt_torch_fashion_mnist.html#step-2-load-fashionmnist-data",
    "title": "11  Hyperparameter Tuning: PyTorch With fashionMNIST Data Using Hold-out Data Sets",
    "section": "11.2 Step 2: Load fashionMNIST Data",
    "text": "11.2 Step 2: Load fashionMNIST Data\n\ndef load_data(data_dir=\"./data\"):\n    # Download training data from open datasets.\n    training_data = datasets.FashionMNIST(\n        root=data_dir,\n        train=True,\n        download=True,\n        transform=ToTensor(),\n    )\n    # Download test data from open datasets.\n    test_data = datasets.FashionMNIST(\n        root=data_dir,\n        train=False,\n        download=True,\n        transform=ToTensor(),\n    )\n    return training_data, test_data\n\n\ntrain, test = load_data()\ntrain.data.shape, test.data.shape\n\n(torch.Size([60000, 28, 28]), torch.Size([10000, 28, 28]))\n\n\n\nn_samples = len(train)\n# add the dataset to the fun_control\nfun_control.update({\"data\": None,\n               \"train\": train,\n               \"test\": test,\n               \"n_samples\": n_samples,\n               \"target_column\": None})"
  },
  {
    "objectID": "11_spot_hpt_torch_fashion_mnist.html#step-3-specification-of-the-preprocessing-model",
    "href": "11_spot_hpt_torch_fashion_mnist.html#step-3-specification-of-the-preprocessing-model",
    "title": "11  Hyperparameter Tuning: PyTorch With fashionMNIST Data Using Hold-out Data Sets",
    "section": "11.3 Step 3: Specification of the Preprocessing Model",
    "text": "11.3 Step 3: Specification of the Preprocessing Model\n\n# categorical_columns = []\n# one_hot_encoder = OneHotEncoder(handle_unknown=\"ignore\", sparse_output=False)\n# prep_model = ColumnTransformer(\n#         transformers=[\n#             (\"categorical\", one_hot_encoder, categorical_columns),\n#         ],\n#         remainder=StandardScaler(),\n#     )\nprep_model = None\nfun_control.update({\"prep_model\": prep_model})"
  },
  {
    "objectID": "11_spot_hpt_torch_fashion_mnist.html#step-4-select-algorithm-and-core_model_hyper_dict",
    "href": "11_spot_hpt_torch_fashion_mnist.html#step-4-select-algorithm-and-core_model_hyper_dict",
    "title": "11  Hyperparameter Tuning: PyTorch With fashionMNIST Data Using Hold-out Data Sets",
    "section": "11.4 Step 4: Select algorithm and core_model_hyper_dict",
    "text": "11.4 Step 4: Select algorithm and core_model_hyper_dict\nspotPython implements a class which is similar to the class described in the PyTorch tutorial. The class is called Net_fashionMNIST and is implemented in the file netcifar10.py. The class is imported here.\nNote: In addition to the class Net from the PyTorch tutorial, the class Net_CIFAR10 has additional attributes, namely:\n\nlearning rate (lr),\nbatchsize (batch_size),\nepochs (epochs), and\nk_folds (k_folds).\n\nFurther attributes can be easily added to the class, e.g., optimizer or loss_function.\n\ncore_model = Net_fashionMNIST\nfun_control = add_core_model_to_fun_control(core_model=core_model,\n                              fun_control=fun_control,\n                              hyper_dict=TorchHyperDict,\n                              filename=None)"
  },
  {
    "objectID": "11_spot_hpt_torch_fashion_mnist.html#step-5-modify-hyper_dict-hyperparameters-for-the-selected-algorithm-aka-core_model",
    "href": "11_spot_hpt_torch_fashion_mnist.html#step-5-modify-hyper_dict-hyperparameters-for-the-selected-algorithm-aka-core_model",
    "title": "11  Hyperparameter Tuning: PyTorch With fashionMNIST Data Using Hold-out Data Sets",
    "section": "11.5 Step 5: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model",
    "text": "11.5 Step 5: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model\n\n11.5.1 Modify hyperparameter of type factor\n\n# fun_control = modify_hyper_parameter_levels(fun_control, \"leaf_model\", [\"LinearRegression\"])\n# fun_control[\"core_model_hyper_dict\"]\n\n\n\n11.5.2 Modify hyperparameter of type numeric and integer (boolean)\n\n# fun_control = modify_hyper_parameter_bounds(fun_control, \"delta\", bounds=[1e-10, 1e-6])\n# fun_control = modify_hyper_parameter_bounds(fun_control, \"min_samples_split\", bounds=[3, 20])\n#fun_control = modify_hyper_parameter_bounds(fun_control, \"merit_preprune\", bounds=[0, 0])\n# fun_control[\"core_model_hyper_dict\"]\nfun_control = modify_hyper_parameter_bounds(fun_control, \"k_folds\", bounds=[0, 0])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"patience\", bounds=[2, 2])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"epochs\", bounds=[2, 3])"
  },
  {
    "objectID": "11_spot_hpt_torch_fashion_mnist.html#step-6-selection-of-the-objective-loss-function",
    "href": "11_spot_hpt_torch_fashion_mnist.html#step-6-selection-of-the-objective-loss-function",
    "title": "11  Hyperparameter Tuning: PyTorch With fashionMNIST Data Using Hold-out Data Sets",
    "section": "11.6 Step 6: Selection of the Objective (Loss) Function",
    "text": "11.6 Step 6: Selection of the Objective (Loss) Function\n\nfrom torch.nn import CrossEntropyLoss\nloss_function = CrossEntropyLoss()\nfun_control.update({\"loss_function\": loss_function})\n\nIn addition to the loss functions, spotPython provides access to a large number of metrics.\n\nThe key \"metric_sklearn\" is used for metrics that follow the scikit-learn conventions.\nThe key \"river_metric\" is used for the river based evaluation (Montiel et al. 2021) via eval_oml_iter_progressive, and\nthe key \"metric_torch\" is used for the metrics from TorchMetrics.\n\nTorchMetrics is a collection of more than 90 PyTorch metrics1.\nBecause the PyTorch tutorial uses the accuracy as metric, we use the same metric here. Currently, accuracy is computed in the tutorial’s example code. We will use TorchMetrics instead, because it offers more flexibilty, e.g., it can be used for regression and classification. Furthermore, TorchMetrics offers the following advantages:\n\nA standardized interface to increase reproducibility\nReduces Boilerplate\nDistributed-training compatible\nRigorously tested\nAutomatic accumulation over batches\nAutomatic synchronization between multiple devices\n\nTherefore, we set\n\nimport torchmetrics\nmetric_torch = torchmetrics.Accuracy(task=\"multiclass\", num_classes=10).to(fun_control[\"device\"])\nfun_control.update({\"metric_torch\": metric_torch})\n\n\n\n\n\n\n\nMinimization and maximization:\n\n\n\nspotPython performs minimization by default. If accuracy should be maximized, then the objective function has to be multiplied by -1. Therefore, weights is set to -1 in this case.\n\n\n\nfun = HyperTorch(seed=123, log_level=50).fun_torch\nloss_function = CrossEntropyLoss()\nweights = 1.0\nshuffle = True\neval = \"train_hold_out\"\nshow_batch_interval = 100_000\npath=\"torch_model.pt\"\n\nfun_control.update({\n               \"data_dir\": None,\n               \"checkpoint_dir\": None,\n               \"horizon\": None,\n               \"oml_grace_period\": None,\n               \"weights\": weights,\n               \"step\": None,\n               \"log_level\": 50,\n               \"weight_coeff\": None,\n               \"metric_river\": None,\n               \"metric_sklearn\": None,\n               \"loss_function\": loss_function,\n               \"shuffle\": shuffle,\n               \"eval\": eval,\n               \"show_batch_interval\": show_batch_interval,\n               \"path\": path,\n               })\n\n\nfun_control\n\n{'data': None,\n 'train': Dataset FashionMNIST\n     Number of datapoints: 60000\n     Root location: ./data\n     Split: Train\n     StandardTransform\n Transform: ToTensor(),\n 'test': Dataset FashionMNIST\n     Number of datapoints: 10000\n     Root location: ./data\n     Split: Test\n     StandardTransform\n Transform: ToTensor(),\n 'loss_function': CrossEntropyLoss(),\n 'metric_sklearn': None,\n 'metric_river': None,\n 'metric_torch': MulticlassAccuracy(),\n 'metric_params': {},\n 'prep_model': None,\n 'n_samples': 60000,\n 'target_column': None,\n 'shuffle': True,\n 'eval': 'train_hold_out',\n 'k_folds': None,\n 'optimizer': None,\n 'device': 'mps',\n 'show_batch_interval': 100000,\n 'path': 'torch_model.pt',\n 'task': 'classification',\n 'save_model': False,\n 'weights': 1.0,\n 'writer': &lt;torch.utils.tensorboard.writer.SummaryWriter at 0x10905ec20&gt;,\n 'core_model': spotPython.torch.netfashionMNIST.Net_fashionMNIST,\n 'core_model_hyper_dict': {'l1': {'type': 'int',\n   'default': 5,\n   'transform': 'transform_power_2_int',\n   'lower': 2,\n   'upper': 9},\n  'l2': {'type': 'int',\n   'default': 5,\n   'transform': 'transform_power_2_int',\n   'lower': 2,\n   'upper': 9},\n  'lr_mult': {'type': 'float',\n   'default': 1.0,\n   'transform': 'None',\n   'lower': 0.1,\n   'upper': 10.0},\n  'batch_size': {'type': 'int',\n   'default': 4,\n   'transform': 'transform_power_2_int',\n   'lower': 1,\n   'upper': 4},\n  'epochs': {'type': 'int',\n   'default': 3,\n   'transform': 'transform_power_2_int',\n   'lower': 2,\n   'upper': 3},\n  'k_folds': {'type': 'int',\n   'default': 1,\n   'transform': 'None',\n   'lower': 0,\n   'upper': 0},\n  'patience': {'type': 'int',\n   'default': 5,\n   'transform': 'None',\n   'lower': 2,\n   'upper': 2},\n  'optimizer': {'levels': ['Adadelta',\n    'Adagrad',\n    'Adam',\n    'AdamW',\n    'SparseAdam',\n    'Adamax',\n    'ASGD',\n    'NAdam',\n    'RAdam',\n    'RMSprop',\n    'Rprop',\n    'SGD'],\n   'type': 'factor',\n   'default': 'SGD',\n   'transform': 'None',\n   'core_model_parameter_type': 'str',\n   'lower': 0,\n   'upper': 12},\n  'sgd_momentum': {'type': 'float',\n   'default': 0.0,\n   'transform': 'None',\n   'lower': 0.0,\n   'upper': 1.0}},\n 'data_dir': None,\n 'checkpoint_dir': None,\n 'horizon': None,\n 'oml_grace_period': None,\n 'step': None,\n 'log_level': 50,\n 'weight_coeff': None}"
  },
  {
    "objectID": "11_spot_hpt_torch_fashion_mnist.html#step-7-calling-the-spot-function",
    "href": "11_spot_hpt_torch_fashion_mnist.html#step-7-calling-the-spot-function",
    "title": "11  Hyperparameter Tuning: PyTorch With fashionMNIST Data Using Hold-out Data Sets",
    "section": "11.7 Step 7: Calling the SPOT Function",
    "text": "11.7 Step 7: Calling the SPOT Function\n\n11.7.1 Prepare the SPOT Parameters\nGet types and variable names as well as lower and upper bounds for the hyperparameters.\n\nvar_type = get_var_type(fun_control)\nvar_name = get_var_name(fun_control)\nfun_control.update({\"var_type\": var_type,\n                    \"var_name\": var_name})\n\nlower = get_bound_values(fun_control, \"lower\")\nupper = get_bound_values(fun_control, \"upper\")\n\n\nprint(gen_design_table(fun_control))\n\n| name         | type   | default   |   lower |   upper | transform             |\n|--------------|--------|-----------|---------|---------|-----------------------|\n| l1           | int    | 5         |     2   |       9 | transform_power_2_int |\n| l2           | int    | 5         |     2   |       9 | transform_power_2_int |\n| lr_mult      | float  | 1.0       |     0.1 |      10 | None                  |\n| batch_size   | int    | 4         |     1   |       4 | transform_power_2_int |\n| epochs       | int    | 3         |     2   |       3 | transform_power_2_int |\n| k_folds      | int    | 1         |     0   |       0 | None                  |\n| patience     | int    | 5         |     2   |       2 | None                  |\n| optimizer    | factor | SGD       |     0   |      12 | None                  |\n| sgd_momentum | float  | 0.0       |     0   |       1 | None                  |\n\n\n\n\n11.7.2 Run the Spot Optimizer\n\nRun SPOT for approx. x mins (max_time).\nNote: the run takes longer, because the evaluation time of initial design (here: initi_size, 20 points) is not considered.\n\n\nfrom spotPython.hyperparameters.values import get_default_hyperparameters_as_array\nhyper_dict=TorchHyperDict().load()\nX_start = get_default_hyperparameters_as_array(fun_control, hyper_dict)\nX_start\n\narray([[ 5.,  5.,  1.,  4.,  3.,  1.,  5., 11.,  0.]])\n\n\n\nspot_tuner = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = inf,\n                   fun_repeats = 1,\n                   max_time = MAX_TIME,\n                   noise = False,\n                   tolerance_x = np.sqrt(np.spacing(1)),\n                   var_type = var_type,\n                   var_name = var_name,\n                   infill_criterion = \"y\",\n                   n_points = 1,\n                   seed=123,\n                   log_level = 50,\n                   show_models= False,\n                   show_progress= True,\n                   fun_control = fun_control,\n                   design_control={\"init_size\": INIT_SIZE,\n                                   \"repeats\": 1},\n                   surrogate_control={\"noise\": True,\n                                      \"cod_type\": \"norm\",\n                                      \"min_theta\": -4,\n                                      \"max_theta\": 3,\n                                      \"n_theta\": len(var_name),\n                                      \"model_optimizer\": differential_evolution,\n                                      \"model_fun_evals\": 10_000,\n                                      \"log_level\": 50\n                                      })\nspot_tuner.run(X_start=X_start)\n\n\nconfig: {'l1': 16, 'l2': 32, 'lr_mult': 9.563687451910228, 'batch_size': 8, 'epochs': 8, 'k_folds': 0, 'patience': 2, 'optimizer': 'AdamW', 'sgd_momentum': 0.41533100039458876}\nEpoch: 1\n\n\nLoss on hold-out set: 0.5919768625410895\nAccuracy on hold-out set: 0.7926666666666666\nMulticlassAccuracy value on hold-out data: 0.7926666736602783\nEpoch: 2\n\n\nLoss on hold-out set: 0.5422454833596324\nAccuracy on hold-out set: 0.8049166666666666\nMulticlassAccuracy value on hold-out data: 0.8049166798591614\nEpoch: 3\n\n\nLoss on hold-out set: 0.5306496526372309\nAccuracy on hold-out set: 0.8284583333333333\nMulticlassAccuracy value on hold-out data: 0.828458309173584\nEpoch: 4\n\n\nLoss on hold-out set: 0.5690700718184235\nAccuracy on hold-out set: 0.82525\nMulticlassAccuracy value on hold-out data: 0.8252500295639038\nEpoch: 5\n\n\nLoss on hold-out set: 0.601823767261114\nAccuracy on hold-out set: 0.7808333333333334\nMulticlassAccuracy value on hold-out data: 0.7808333039283752\nEarly stopping at epoch 4\nReturned to Spot: Validation loss: 0.601823767261114\n----------------------------------------------\n\nconfig: {'l1': 128, 'l2': 32, 'lr_mult': 6.258012467639852, 'batch_size': 2, 'epochs': 4, 'k_folds': 0, 'patience': 2, 'optimizer': 'RAdam', 'sgd_momentum': 0.9572474073249809}\nEpoch: 1\n\n\nLoss on hold-out set: 0.5694384363164898\nAccuracy on hold-out set: 0.8373333333333334\nMulticlassAccuracy value on hold-out data: 0.8373333215713501\nEpoch: 2\n\n\nLoss on hold-out set: 0.5111982016891852\nAccuracy on hold-out set: 0.8609583333333334\nMulticlassAccuracy value on hold-out data: 0.8609583377838135\nEpoch: 3\n\n\nLoss on hold-out set: 0.5325020373088812\nAccuracy on hold-out set: 0.8742083333333334\nMulticlassAccuracy value on hold-out data: 0.8742083311080933\nEpoch: 4\n\n\nLoss on hold-out set: 0.5583847571162562\nAccuracy on hold-out set: 0.8638333333333333\nMulticlassAccuracy value on hold-out data: 0.8638333082199097\nEarly stopping at epoch 3\nReturned to Spot: Validation loss: 0.5583847571162562\n----------------------------------------------\n\nconfig: {'l1': 256, 'l2': 256, 'lr_mult': 0.2437336281201693, 'batch_size': 16, 'epochs': 8, 'k_folds': 0, 'patience': 2, 'optimizer': 'Adagrad', 'sgd_momentum': 0.15368887503658651}\nEpoch: 1\n\n\nLoss on hold-out set: 0.5014787770112356\nAccuracy on hold-out set: 0.8265833333333333\nMulticlassAccuracy value on hold-out data: 0.8265833258628845\nEpoch: 2\n\n\nLoss on hold-out set: 0.44958208562930424\nAccuracy on hold-out set: 0.8417916666666667\nMulticlassAccuracy value on hold-out data: 0.8417916893959045\nEpoch: 3\n\n\nLoss on hold-out set: 0.4320714940639834\nAccuracy on hold-out set: 0.8482083333333333\nMulticlassAccuracy value on hold-out data: 0.8482083082199097\nEpoch: 4\n\n\nLoss on hold-out set: 0.4265569516072671\nAccuracy on hold-out set: 0.8494166666666667\nMulticlassAccuracy value on hold-out data: 0.8494166731834412\nEpoch: 5\n\n\nLoss on hold-out set: 0.42196655583878356\nAccuracy on hold-out set: 0.8513333333333334\nMulticlassAccuracy value on hold-out data: 0.8513333201408386\nEpoch: 6\n\n\nLoss on hold-out set: 0.40411193598558504\nAccuracy on hold-out set: 0.8585416666666666\nMulticlassAccuracy value on hold-out data: 0.8585416674613953\nEpoch: 7\n\n\nLoss on hold-out set: 0.39835683585455023\nAccuracy on hold-out set: 0.8597916666666666\nMulticlassAccuracy value on hold-out data: 0.8597916960716248\nEpoch: 8\n\n\nLoss on hold-out set: 0.3937539686386784\nAccuracy on hold-out set: 0.8613333333333333\nMulticlassAccuracy value on hold-out data: 0.8613333106040955\nReturned to Spot: Validation loss: 0.3937539686386784\n----------------------------------------------\n\nconfig: {'l1': 64, 'l2': 8, 'lr_mult': 2.906205211581667, 'batch_size': 8, 'epochs': 4, 'k_folds': 0, 'patience': 2, 'optimizer': 'SGD', 'sgd_momentum': 0.25435133436334767}\nEpoch: 1\n\n\nLoss on hold-out set: 0.953721585482359\nAccuracy on hold-out set: 0.6365833333333333\nMulticlassAccuracy value on hold-out data: 0.6365833282470703\nEpoch: 2\n\n\nLoss on hold-out set: 0.7918141765445471\nAccuracy on hold-out set: 0.698125\nMulticlassAccuracy value on hold-out data: 0.6981250047683716\nEpoch: 3\n\n\nLoss on hold-out set: 0.7259560302868485\nAccuracy on hold-out set: 0.7350416666666667\nMulticlassAccuracy value on hold-out data: 0.7350416779518127\nEpoch: 4\n\n\nLoss on hold-out set: 0.6805050338432193\nAccuracy on hold-out set: 0.7610833333333333\nMulticlassAccuracy value on hold-out data: 0.7610833048820496\nReturned to Spot: Validation loss: 0.6805050338432193\n----------------------------------------------\n\nconfig: {'l1': 4, 'l2': 128, 'lr_mult': 4.224097306355747, 'batch_size': 4, 'epochs': 8, 'k_folds': 0, 'patience': 2, 'optimizer': 'Adamax', 'sgd_momentum': 0.6538496127257492}\nEpoch: 1\n\n\nLoss on hold-out set: 1.0079037581153742\nAccuracy on hold-out set: 0.5950416666666667\nMulticlassAccuracy value on hold-out data: 0.5950416922569275\nEpoch: 2\n\n\nLoss on hold-out set: 0.9708360467644622\nAccuracy on hold-out set: 0.6071666666666666\nMulticlassAccuracy value on hold-out data: 0.6071666479110718\nEpoch: 3\n\n\nLoss on hold-out set: 0.9234958228009085\nAccuracy on hold-out set: 0.6239583333333333\nMulticlassAccuracy value on hold-out data: 0.6239583492279053\nEpoch: 4\n\n\nLoss on hold-out set: 0.9553061232081882\nAccuracy on hold-out set: 0.6332916666666667\nMulticlassAccuracy value on hold-out data: 0.6332916617393494\nEpoch: 5\n\n\nLoss on hold-out set: 0.9313747411405621\nAccuracy on hold-out set: 0.6387083333333333\nMulticlassAccuracy value on hold-out data: 0.6387083530426025\nEarly stopping at epoch 4\nReturned to Spot: Validation loss: 0.9313747411405621\n----------------------------------------------\n\nconfig: {'l1': 256, 'l2': 256, 'lr_mult': 0.22681831533642605, 'batch_size': 16, 'epochs': 8, 'k_folds': 0, 'patience': 2, 'optimizer': 'Adagrad', 'sgd_momentum': 0.14870946450909894}\nEpoch: 1\n\n\nLoss on hold-out set: 0.48470553995668886\nAccuracy on hold-out set: 0.8322916666666667\nMulticlassAccuracy value on hold-out data: 0.8322916626930237\nEpoch: 2\n\n\nLoss on hold-out set: 0.4450473321378231\nAccuracy on hold-out set: 0.846\nMulticlassAccuracy value on hold-out data: 0.8460000157356262\nEpoch: 3\n\n\nLoss on hold-out set: 0.42815405742575724\nAccuracy on hold-out set: 0.8490833333333333\nMulticlassAccuracy value on hold-out data: 0.8490833044052124\nEpoch: 4\n\n\nLoss on hold-out set: 0.41871932974457743\nAccuracy on hold-out set: 0.849625\nMulticlassAccuracy value on hold-out data: 0.8496249914169312\nEpoch: 5\n\n\nLoss on hold-out set: 0.40385921974480155\nAccuracy on hold-out set: 0.8589166666666667\nMulticlassAccuracy value on hold-out data: 0.8589166402816772\nEpoch: 6\n\n\nLoss on hold-out set: 0.3990575960949063\nAccuracy on hold-out set: 0.8619166666666667\nMulticlassAccuracy value on hold-out data: 0.8619166612625122\nEpoch: 7\n\n\nLoss on hold-out set: 0.3924024781137705\nAccuracy on hold-out set: 0.86375\nMulticlassAccuracy value on hold-out data: 0.8637499809265137\nEpoch: 8\n\n\nLoss on hold-out set: 0.3886936074246963\nAccuracy on hold-out set: 0.8648333333333333\nMulticlassAccuracy value on hold-out data: 0.8648333549499512\nReturned to Spot: Validation loss: 0.3886936074246963\n----------------------------------------------\n\n\nspotPython tuning: 0.3886936074246963 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x2864f8160&gt;\n\n\n\n\n11.7.3 Results\n\nSAVE = False\nLOAD = False\n\nif SAVE:\n    result_file_name = \"res_\" + experiment_name + \".pkl\"\n    with open(result_file_name, 'wb') as f:\n        pickle.dump(spot_tuner, f)\n\nif LOAD:\n    result_file_name = \"res_ch10-friedman-hpt-0_maans03_60min_20init_1K_2023-04-14_10-11-19.pkl\"\n    with open(result_file_name, 'rb') as f:\n        spot_tuner =  pickle.load(f)\n\n\nShow the Progress of the hyperparameter tuning:\n\n\nspot_tuner.y\n\narray([0.60182377, 0.55838476, 0.39375397, 0.68050503, 0.93137474,\n       0.38869361])\n\n\n\nspot_tuner.plot_progress(log_y=False, filename=\"./figures/\" + experiment_name+\"_progress.pdf\")\n\n\n\n\nPrint the results\n\nprint(gen_design_table(fun_control=fun_control, spot=spot_tuner))\n\n| name         | type   | default   |   lower |   upper |               tuned | transform             |   importance | stars   |\n|--------------|--------|-----------|---------|---------|---------------------|-----------------------|--------------|---------|\n| l1           | int    | 5         |     2.0 |     9.0 |                 8.0 | transform_power_2_int |       100.00 | ***     |\n| l2           | int    | 5         |     2.0 |     9.0 |                 8.0 | transform_power_2_int |         0.04 |         |\n| lr_mult      | float  | 1.0       |     0.1 |    10.0 | 0.22681831533642605 | None                  |         0.04 |         |\n| batch_size   | int    | 4         |     1.0 |     4.0 |                 4.0 | transform_power_2_int |         0.00 |         |\n| epochs       | int    | 3         |     2.0 |     3.0 |                 3.0 | transform_power_2_int |         0.16 | .       |\n| k_folds      | int    | 1         |     0.0 |     0.0 |                 0.0 | None                  |         0.00 |         |\n| patience     | int    | 5         |     2.0 |     2.0 |                 2.0 | None                  |         0.00 |         |\n| optimizer    | factor | SGD       |     0.0 |    12.0 |                 1.0 | None                  |        18.26 | *       |\n| sgd_momentum | float  | 0.0       |     0.0 |     1.0 | 0.14870946450909894 | None                  |         0.44 | .       |"
  },
  {
    "objectID": "11_spot_hpt_torch_fashion_mnist.html#show-variable-importance",
    "href": "11_spot_hpt_torch_fashion_mnist.html#show-variable-importance",
    "title": "11  Hyperparameter Tuning: PyTorch With fashionMNIST Data Using Hold-out Data Sets",
    "section": "11.8 Show variable importance",
    "text": "11.8 Show variable importance\n\nspot_tuner.plot_importance(threshold=0.025, filename=\"./figures/\" + experiment_name+\"_importance.pdf\")"
  },
  {
    "objectID": "11_spot_hpt_torch_fashion_mnist.html#sec-get-spot-results-11",
    "href": "11_spot_hpt_torch_fashion_mnist.html#sec-get-spot-results-11",
    "title": "11  Hyperparameter Tuning: PyTorch With fashionMNIST Data Using Hold-out Data Sets",
    "section": "11.9 Get SPOT Results",
    "text": "11.9 Get SPOT Results\nThe architecture of the spotPython model can be obtained by the following code:\n\nfrom spotPython.hyperparameters.values import get_one_core_model_from_X\nX = spot_tuner.to_all_dim(spot_tuner.min_X.reshape(1,-1))\nmodel_spot = get_one_core_model_from_X(X, fun_control)\nmodel_spot\n\nNet_fashionMNIST(\n  (flatten): Flatten(start_dim=1, end_dim=-1)\n  (linear_relu_stack): Sequential(\n    (0): Linear(in_features=784, out_features=256, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=256, out_features=256, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=256, out_features=10, bias=True)\n  )\n)"
  },
  {
    "objectID": "11_spot_hpt_torch_fashion_mnist.html#get-default-hyperparameters",
    "href": "11_spot_hpt_torch_fashion_mnist.html#get-default-hyperparameters",
    "title": "11  Hyperparameter Tuning: PyTorch With fashionMNIST Data Using Hold-out Data Sets",
    "section": "11.10 Get Default Hyperparameters",
    "text": "11.10 Get Default Hyperparameters\n\nfrom spotPython.hyperparameters.values import get_one_core_model_from_X\nfc = fun_control\nfc.update({\"core_model_hyper_dict\":\n    hyper_dict[fun_control[\"core_model\"].__name__]})\nmodel_default = get_one_core_model_from_X(X_start, fun_control=fc)\nmodel_default\n\nNet_fashionMNIST(\n  (flatten): Flatten(start_dim=1, end_dim=-1)\n  (linear_relu_stack): Sequential(\n    (0): Linear(in_features=784, out_features=32, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=32, out_features=32, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=32, out_features=10, bias=True)\n  )\n)"
  },
  {
    "objectID": "11_spot_hpt_torch_fashion_mnist.html#evaluation-of-the-default-and-the-tuned-architectures",
    "href": "11_spot_hpt_torch_fashion_mnist.html#evaluation-of-the-default-and-the-tuned-architectures",
    "title": "11  Hyperparameter Tuning: PyTorch With fashionMNIST Data Using Hold-out Data Sets",
    "section": "11.11 Evaluation of the Default and the Tuned Architectures",
    "text": "11.11 Evaluation of the Default and the Tuned Architectures\nThe method train_tuned takes a model architecture without trained weights and trains this model with the train data. The train data is split into train and validation data. The validation data is used for early stopping. The trained model weights are saved as a dictionary.\n\nfrom spotPython.torch.traintest import (\n    train_tuned,\n    test_tuned,\n    )\ntrain_tuned(net=model_default, train_dataset=train, shuffle=True,\n        loss_function=fun_control[\"loss_function\"],\n        metric=fun_control[\"metric_torch\"],\n        device = fun_control[\"device\"],\n        show_batch_interval=1_000_000,\n        path=None,\n        task=fun_control[\"task\"],)\n\ntest_tuned(net=model_default, test_dataset=test, \n        loss_function=fun_control[\"loss_function\"],\n        metric=fun_control[\"metric_torch\"],\n        shuffle=False, \n        device = fun_control[\"device\"],\n        task=fun_control[\"task\"],)\n\nEpoch: 1\n\n\nLoss on hold-out set: 2.002133889834086\nAccuracy on hold-out set: 0.395125\nMulticlassAccuracy value on hold-out data: 0.39512500166893005\nEpoch: 2\n\n\nLoss on hold-out set: 1.536445673386256\nAccuracy on hold-out set: 0.5830833333333333\nMulticlassAccuracy value on hold-out data: 0.5830833315849304\nEpoch: 3\n\n\nLoss on hold-out set: 1.2659441814422607\nAccuracy on hold-out set: 0.635625\nMulticlassAccuracy value on hold-out data: 0.6356250047683716\nEpoch: 4\n\n\nLoss on hold-out set: 1.1083517822821936\nAccuracy on hold-out set: 0.64375\nMulticlassAccuracy value on hold-out data: 0.643750011920929\nEpoch: 5\n\n\nLoss on hold-out set: 1.0063857422669729\nAccuracy on hold-out set: 0.6590833333333334\nMulticlassAccuracy value on hold-out data: 0.6590833067893982\nEpoch: 6\n\n\nLoss on hold-out set: 0.9346535342931748\nAccuracy on hold-out set: 0.6680416666666666\nMulticlassAccuracy value on hold-out data: 0.6680416464805603\nEpoch: 7\n\n\nLoss on hold-out set: 0.8822947811484337\nAccuracy on hold-out set: 0.6852916666666666\nMulticlassAccuracy value on hold-out data: 0.6852916479110718\nEpoch: 8\n\n\nLoss on hold-out set: 0.8434276076555252\nAccuracy on hold-out set: 0.69525\nMulticlassAccuracy value on hold-out data: 0.6952499747276306\nReturned to Spot: Validation loss: 0.8434276076555252\n----------------------------------------------\n\n\nLoss on hold-out set: 0.8601902204036712\nAccuracy on hold-out set: 0.6849\nMulticlassAccuracy value on hold-out data: 0.6848999857902527\nFinal evaluation: Validation loss: 0.8601902204036712\nFinal evaluation: Validation metric: 0.6848999857902527\n----------------------------------------------\n\n\n(0.8601902204036712, nan, tensor(0.6849, device='mps:0'))\n\n\nThe following code trains the model model_spot. If path is set to a filename, e.g., path = \"model_spot_trained.pt\", the weights of the trained model will be saved to this file.\n\ntrain_tuned(net=model_spot, train_dataset=train,\n        loss_function=fun_control[\"loss_function\"],\n        metric=fun_control[\"metric_torch\"],\n        shuffle=True,\n        device = fun_control[\"device\"],\n        path=None,\n        task=fun_control[\"task\"],)\n#| echo: true\ntest_tuned(net=model_spot, test_dataset=test,\n            shuffle=False,\n            loss_function=fun_control[\"loss_function\"],\n            metric=fun_control[\"metric_torch\"],\n            device = fun_control[\"device\"],\n            task=fun_control[\"task\"],)\n\nEpoch: 1\n\n\nLoss on hold-out set: 0.4911266313244899\nAccuracy on hold-out set: 0.8313333333333334\nMulticlassAccuracy value on hold-out data: 0.831333339214325\nEpoch: 2\n\n\nLoss on hold-out set: 0.46031840571016075\nAccuracy on hold-out set: 0.8353333333333334\nMulticlassAccuracy value on hold-out data: 0.8353333473205566\nEpoch: 3\n\n\nLoss on hold-out set: 0.43224791787813105\nAccuracy on hold-out set: 0.8477916666666667\nMulticlassAccuracy value on hold-out data: 0.8477916717529297\nEpoch: 4\n\n\nLoss on hold-out set: 0.42185806428889433\nAccuracy on hold-out set: 0.8517083333333333\nMulticlassAccuracy value on hold-out data: 0.8517083525657654\nEpoch: 5\n\n\nLoss on hold-out set: 0.41309068199495474\nAccuracy on hold-out set: 0.85425\nMulticlassAccuracy value on hold-out data: 0.8542500138282776\nEpoch: 6\n\n\nLoss on hold-out set: 0.4044274035145839\nAccuracy on hold-out set: 0.8583333333333333\nMulticlassAccuracy value on hold-out data: 0.8583333492279053\nEpoch: 7\n\n\nLoss on hold-out set: 0.397600487438341\nAccuracy on hold-out set: 0.8612083333333334\nMulticlassAccuracy value on hold-out data: 0.8612083196640015\nEpoch: 8\n\n\nLoss on hold-out set: 0.3943131767263015\nAccuracy on hold-out set: 0.861375\nMulticlassAccuracy value on hold-out data: 0.8613749742507935\nReturned to Spot: Validation loss: 0.3943131767263015\n----------------------------------------------\n\n\nLoss on hold-out set: 0.4229417533516884\nAccuracy on hold-out set: 0.8522\nMulticlassAccuracy value on hold-out data: 0.8521999716758728\nFinal evaluation: Validation loss: 0.4229417533516884\nFinal evaluation: Validation metric: 0.8521999716758728\n----------------------------------------------\n\n\n(0.4229417533516884, nan, tensor(0.8522, device='mps:0'))"
  },
  {
    "objectID": "11_spot_hpt_torch_fashion_mnist.html#detailed-hyperparameter-plots",
    "href": "11_spot_hpt_torch_fashion_mnist.html#detailed-hyperparameter-plots",
    "title": "11  Hyperparameter Tuning: PyTorch With fashionMNIST Data Using Hold-out Data Sets",
    "section": "11.12 Detailed Hyperparameter Plots",
    "text": "11.12 Detailed Hyperparameter Plots\n\nfilename = \"./figures/\" + experiment_name\nspot_tuner.plot_important_hyperparameter_contour(filename=filename)\n\nl1:  100.0\nl2:  0.040086691763006235\nlr_mult:  0.03531024245898389\nepochs:  0.16440806107512462\noptimizer:  18.263478058594348\nsgd_momentum:  0.44059827453221734"
  },
  {
    "objectID": "11_spot_hpt_torch_fashion_mnist.html#parallel-coordinates-plot",
    "href": "11_spot_hpt_torch_fashion_mnist.html#parallel-coordinates-plot",
    "title": "11  Hyperparameter Tuning: PyTorch With fashionMNIST Data Using Hold-out Data Sets",
    "section": "11.13 Parallel Coordinates Plot",
    "text": "11.13 Parallel Coordinates Plot\n\nspot_tuner.parallel_plot()"
  },
  {
    "objectID": "11_spot_hpt_torch_fashion_mnist.html#plot-all-combinations-of-hyperparameters",
    "href": "11_spot_hpt_torch_fashion_mnist.html#plot-all-combinations-of-hyperparameters",
    "title": "11  Hyperparameter Tuning: PyTorch With fashionMNIST Data Using Hold-out Data Sets",
    "section": "11.14 Plot all Combinations of Hyperparameters",
    "text": "11.14 Plot all Combinations of Hyperparameters\n\nWarning: this may take a while.\n\n\nPLOT_ALL = False\nif PLOT_ALL:\n    n = spot_tuner.k\n    for i in range(n-1):\n        for j in range(i+1, n):\n            spot_tuner.plot_contour(i=i, j=j, min_z=min_z, max_z = max_z)\n\n\n\n\n\nMontiel, Jacob, Max Halford, Saulo Martiello Mastelini, Geoffrey Bolmier, Raphael Sourty, Robin Vaysse, Adil Zouitine, et al. 2021. “River: Machine Learning for Streaming Data in Python.”"
  },
  {
    "objectID": "11_spot_hpt_torch_fashion_mnist.html#footnotes",
    "href": "11_spot_hpt_torch_fashion_mnist.html#footnotes",
    "title": "11  Hyperparameter Tuning: PyTorch With fashionMNIST Data Using Hold-out Data Sets",
    "section": "",
    "text": "https://torchmetrics.readthedocs.io/en/latest/.↩︎"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html",
    "href": "12_spot_hpt_torch_cifar10.html",
    "title": "12  Hyperparameter Tuning: PyTorch wth cifar10 Data",
    "section": "",
    "text": "13 Tensorboard\nThe textual output shown in the console (or code cell) can be visualized with Tensorboard."
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#sec-setup-12",
    "href": "12_spot_hpt_torch_cifar10.html#sec-setup-12",
    "title": "12  Hyperparameter Tuning: PyTorch wth cifar10 Data",
    "section": "12.1 Setup",
    "text": "12.1 Setup\nBefore we consider the detailed experimental setup, we select the parameters that affect run time, initial design size and the device that is used.\n\nMAX_TIME = 1\nINIT_SIZE = 5\nDEVICE = None # \"cpu\" # \"cuda:0\"\n\n\nfrom spotPython.utils.device import getDevice\nDEVICE = getDevice(DEVICE)\nprint(DEVICE)\n\nmps\n\n\n\n\n24-torch_bartz09_1min_5init_2023-06-15_00-20-38"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#initialization-of-the-fun_control-dictionary",
    "href": "12_spot_hpt_torch_cifar10.html#initialization-of-the-fun_control-dictionary",
    "title": "12  Hyperparameter Tuning: PyTorch wth cifar10 Data",
    "section": "12.2 Initialization of the fun_control Dictionary",
    "text": "12.2 Initialization of the fun_control Dictionary\nspotPython uses a Python dictionary for storing the information required for the hyperparameter tuning process. This dictionary is called fun_control and is initialized with the function fun_control_init. The function fun_control_init returns a skeleton dictionary. The dictionary is filled with the required information for the hyperparameter tuning process. It stores the hyperparameter tuning settings, e.g., the deep learning network architecture that should be tuned, the classification (or regression) problem, and the data that is used for the tuning. The dictionary is used as an input for the SPOT function.\n\nfrom spotPython.utils.init import fun_control_init\nfun_control = fun_control_init(task=\"classification\",\n    tensorboard_path=\"runs/12_spot_hpt_torch_cifar10\",\n    device=DEVICE)\n\n\nimport torch\nprint(torch.__version__)\n# Check that MPS is available\nif not torch.backends.mps.is_available():\n    if not torch.backends.mps.is_built():\n        print(\"MPS not available because the current PyTorch install was not \"\n              \"built with MPS enabled.\")\n    else:\n        print(\"MPS not available because the current MacOS version is not 12.3+ \"\n              \"and/or you do not have an MPS-enabled device on this machine.\")\n\nelse:\n    mps_device = torch.device(\"mps\")\n    print(\"MPS device: \", mps_device)\n\n2.0.1\nMPS device:  mps"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#sec-data-loading-12",
    "href": "12_spot_hpt_torch_cifar10.html#sec-data-loading-12",
    "title": "12  Hyperparameter Tuning: PyTorch wth cifar10 Data",
    "section": "12.3 PyTorch Data Loading",
    "text": "12.3 PyTorch Data Loading"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#load-data-cifar10-data",
    "href": "12_spot_hpt_torch_cifar10.html#load-data-cifar10-data",
    "title": "12  Hyperparameter Tuning: PyTorch wth cifar10 Data",
    "section": "12.4 1. Load Data Cifar10 Data",
    "text": "12.4 1. Load Data Cifar10 Data\n\nfrom torchvision import datasets, transforms\nimport torchvision\ndef load_data(data_dir=\"./data\"):\n    transform = transforms.Compose([\n        transforms.ToTensor(),\n        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n    ])\n\n    trainset = torchvision.datasets.CIFAR10(\n        root=data_dir, train=True, download=True, transform=transform)\n\n    testset = torchvision.datasets.CIFAR10(\n        root=data_dir, train=False, download=True, transform=transform)\n\n    return trainset, testset\ntrain, test = load_data()\ntrain.data.shape, test.data.shape\nn_samples = len(train)\n\nFiles already downloaded and verified\n\n\nFiles already downloaded and verified\n\n\n\nSince this works fine, we can add the data loading to the fun_control dictionary:\n\n\n# add the dataset to the fun_control\nfun_control.update({\"data\": None, # dataset,\n               \"train\": train,\n               \"test\": test,\n               \"n_samples\": n_samples,\n               \"target_column\": None})"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#sec-specification-of-preprocessing-model-12",
    "href": "12_spot_hpt_torch_cifar10.html#sec-specification-of-preprocessing-model-12",
    "title": "12  Hyperparameter Tuning: PyTorch wth cifar10 Data",
    "section": "12.5 Specification of the Preprocessing Model",
    "text": "12.5 Specification of the Preprocessing Model\nAfter the training and test data are specified and added to the fun_control dictionary, spotPython allows the specification of a data preprocessing pipeline, e.g., for the scaling of the data or for the one-hot encoding of categorical variables. The preprocessing model is called prep_model (“preparation” or pre-processing) and includes steps that are not subject to the hyperparameter tuning process. The preprocessing model is specified in the fun_control dictionary. The preprocessing model can be implemented as a sklearn pipeline. The following code shows a typical preprocessing pipeline:\n\n# categorical_columns = []\n# one_hot_encoder = OneHotEncoder(handle_unknown=\"ignore\", sparse_output=False)\n# prep_model = ColumnTransformer(\n#         transformers=[\n#             (\"categorical\", one_hot_encoder, categorical_columns),\n#         ],\n#         remainder=StandardScaler(),\n#     )\nprep_model = None\nfun_control.update({\"prep_model\": prep_model})"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#sec-selection-of-the-algorithm-12",
    "href": "12_spot_hpt_torch_cifar10.html#sec-selection-of-the-algorithm-12",
    "title": "12  Hyperparameter Tuning: PyTorch wth cifar10 Data",
    "section": "12.6 Select algorithm and core_model_hyper_dict",
    "text": "12.6 Select algorithm and core_model_hyper_dict\n\n12.6.1 Implementing a Configurable Neural Network With spotPython\nspotPython includes the Net_CIFAR10 class which is implemented in the file netcifar10.py. The class is imported here.\n\n12.6.1.1 The Net_Core class\nNet_lin_reg inherits from the class Net_Core which is implemented in the file netcore.py. It implements the additional attributes that are common to all neural network models. The Net_Core class is implemented in the file netcore.py. It implements hyperparameters as attributes, that are not used by the core_model, e.g.:\n\noptimizer (optimizer),\nlearning rate (lr),\nbatch size (batch_size),\nepochs (epochs),\nk_folds (k_folds), and\nearly stopping criterion “patience” (patience).\n\nUsers can add further attributes to the class. The class Net_Core is shown below.\nfrom torch import nn\n\n\nclass Net_Core(nn.Module):\n    def __init__(self, lr_mult, batch_size, epochs, k_folds, patience,\n    optimizer, sgd_momentum):\n        super(Net_Core, self).__init__()\n        self.lr_mult = lr_mult\n        self.batch_size = batch_size\n        self.epochs = epochs\n        self.k_folds = k_folds\n        self.patience = patience\n        self.optimizer = optimizer\n        self.sgd_momentum = sgd_momentum\n:::{.callout-note}\nWe see that the class Net_lin_reg has additional attributes and does not inherit from nn directly. It adds an additional class, Net_core, that takes care of additional attributes that are common to all neural network models, e.g., the learning rate multiplier lr_mult or the batch size batch_size.\n\nfrom spotPython.torch.netcifar10 import Net_CIFAR10\nfrom spotPython.data.torch_hyper_dict import TorchHyperDict\nfrom spotPython.hyperparameters.values import add_core_model_to_fun_control\ncore_model = Net_CIFAR10\nfun_control = add_core_model_to_fun_control(core_model=core_model,\n                              fun_control=fun_control,\n                              hyper_dict=TorchHyperDict,\n                              filename=None)"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#sec-search-space-12",
    "href": "12_spot_hpt_torch_cifar10.html#sec-search-space-12",
    "title": "12  Hyperparameter Tuning: PyTorch wth cifar10 Data",
    "section": "12.7 The Search Space",
    "text": "12.7 The Search Space\n\n12.7.1 Configuring the Search Space With spotPython\n\n12.7.1.1 The hyper_dict Hyperparameters for the Selected Algorithm\nspotPython uses JSON files for the specification of the hyperparameters. The JSON file for the core_model is called torch_hyper_dict.json. The corresponding entries for the Net_CIFAR10 class are shown below.\nspotPython can handle numerical, boolean, and categorical hyperparameters. They can be specified in the JSON file in a similar way as the numerical hyperparameters as shown below. Each entry in the JSON file represents one hyperparameter with the following structure: type, default, transform, lower, and upper.\n\"factor_hyperparameter\": {\n    \"levels\": [\"A\", \"B\", \"C\"],\n    \"type\": \"factor\",\n    \"default\": \"B\",\n    \"transform\": \"None\",\n    \"core_model_parameter_type\": \"str\",\n    \"lower\": 0,\n    \"upper\": 2},\nThe corresponding entries for the Net_CIFAR10 class are shown below.\n    \"Net_CIFAR10\":\n    {\n        \"l1\": {\n            \"type\": \"int\",\n            \"default\": 5,\n            \"transform\": \"transform_power_2_int\",\n            \"lower\": 2,\n            \"upper\": 9},\n        \"l2\": {\n            \"type\": \"int\",\n            \"default\": 5,\n            \"transform\": \"transform_power_2_int\",\n            \"lower\": 2,\n            \"upper\": 9},\n        \"lr_mult\": {\n            \"type\": \"float\",\n            \"default\": 1.0,\n            \"transform\": \"None\",\n            \"lower\": 0.1,\n            \"upper\": 10.0},\n        \"batch_size\": {\n            \"type\": \"int\",\n            \"default\": 4,\n            \"transform\": \"transform_power_2_int\",\n            \"lower\": 1,\n            \"upper\": 4},\n        \"epochs\": {\n            \"type\": \"int\",\n            \"default\": 3,\n            \"transform\": \"transform_power_2_int\",\n            \"lower\": 3,\n            \"upper\": 4},\n        \"k_folds\": {\n            \"type\": \"int\",\n            \"default\": 1,\n            \"transform\": \"None\",\n            \"lower\": 1,\n            \"upper\": 1},\n        \"patience\": {\n            \"type\": \"int\",\n            \"default\": 5,\n            \"transform\": \"None\",\n            \"lower\": 2,\n            \"upper\": 10\n        },\n        \"optimizer\": {\n            \"levels\": [\"Adadelta\", \"Adagrad\", \"Adam\", \"AdamW\", \"SparseAdam\", \"Adamax\", \"ASGD\", \"NAdam\", \"RAdam\", \"RMSprop\", \"Rprop\", \"SGD\"],\n            \"type\": \"factor\",\n            \"default\": \"SGD\",\n            \"transform\": \"None\",\n            \"class_name\": \"torch.optim\",\n            \"core_model_parameter_type\": \"str\",\n            \"lower\": 0,\n            \"upper\": 12},\n        \"sgd_momentum\": {\n            \"type\": \"float\",\n            \"default\": 0.0,\n            \"transform\": \"None\",\n            \"lower\": 0.0,\n            \"upper\": 1.0}\n    },"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#sec-modification-of-hyperparameters-12",
    "href": "12_spot_hpt_torch_cifar10.html#sec-modification-of-hyperparameters-12",
    "title": "12  Hyperparameter Tuning: PyTorch wth cifar10 Data",
    "section": "12.8 Modifying the Hyperparameters",
    "text": "12.8 Modifying the Hyperparameters\nspotPython provides functions for modifying the hyperparameters, their bounds and factors as well as for activating and de-activating hyperparameters without re-compilation of the Python source code. These functions are described in the following.\n\n12.8.1 Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model\nAfter specifying the model, the corresponding hyperparameters, their types and bounds are loaded from the JSON file torch_hyper_dict.json. After loading, the user can modify the hyperparameters, e.g., the bounds. spotPython provides a simple rule for de-activating hyperparameters: If the lower and the upper bound are set to identical values, the hyperparameter is de-activated. This is useful for the hyperparameter tuning, because it allows to specify a hyperparameter in the JSON file, but to de-activate it in the fun_control dictionary. This is done in the next step.\n\n\n12.8.2 Modify Hyperparameters of Type numeric and integer (boolean)"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#modify-hyper_dict-hyperparameters-for-the-selected-algorithm-aka-core_model",
    "href": "12_spot_hpt_torch_cifar10.html#modify-hyper_dict-hyperparameters-for-the-selected-algorithm-aka-core_model",
    "title": "12  Hyperparameter Tuning: PyTorch wth cifar10 Data",
    "section": "12.9 4. Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model",
    "text": "12.9 4. Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model\nAfter specifying the model, the corresponding hyperparameters, their types and bounds are loaded from the JSON file torch_hyper_dict.json. After loading, the user can modify the hyperparameters, e.g., the bounds. spotPython provides a clever rule for de-activating hyperparameters. If the lower and the upper bound are set to identical values, the hyperparameter is de-activated. This is useful for the hyperparameter tuning, because it allows to specify a hyperparameter in the JSON file, but to de-activate it in the fun_control dictionary. This is done in the next step.\n\n12.9.1 Modify hyperparameter of type numeric and integer (boolean)\nThe hyperparameter k_folds is not used, it is de-activated here by setting the lower and upper bound to the same value.\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_bounds\n# fun_control = modify_hyper_parameter_bounds(fun_control, \"delta\", bounds=[1e-10, 1e-6])\n# fun_control = modify_hyper_parameter_bounds(fun_control, \"min_samples_split\", bounds=[3, 20])\n#fun_control = modify_hyper_parameter_bounds(fun_control, \"merit_preprune\", bounds=[0, 0])\n# fun_control[\"core_model_hyper_dict\"]\nfun_control = modify_hyper_parameter_bounds(fun_control, \"k_folds\", bounds=[2, 2])\n\n\n\n12.9.2 Modify hyperparameter of type factor\nIn a similar manner as for the numerical hyperparameters, the categorical hyperparameters can be modified. For example, the hyperparameter leaf_model is de-activated here by choosing only one value \"LinearRegression\".\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_levels\nfun_control = modify_hyper_parameter_levels(fun_control, \"optimizer\", [\"Adam\"])\n# fun_control = modify_hyper_parameter_levels(fun_control, \"leaf_model\", [\"LinearRegression\"])\n# fun_control[\"core_model_hyper_dict\"]\n\n\n\n12.9.3 Optimizers\nOptimizers can be selected as described in Section 14.7.4.\n\n\n\n\n\n\nA note on the learning rate\n\n\n\nspotPython provides a multiplier for the default learning rates, lr_mult, because optimizers use different learning rates. Using a multiplier for the learning rates might enable a simultaneous tuning of the learning rates for all optimizers. However, this is not recommended, because the learning rates are not comparable across optimizers. Therefore, we recommend fixing the learning rate for all optimizers if multiple optimizers are used. This can be done by setting the lower and upper bounds of the learning rate multiplier to the same value as shown below.\n\n\nThus, the learning rate, which affects the SGD optimizer, will be set to a fixed value. We choose the default value of 1e-3 for the learning rate, because it is used in other PyTorch examples (it is also the default value used by spotPython as defined in the optimizer_handler() method). We recommend tuning the learning rate later, when a reduced set of optimizers is fixed. Here, we will demonstrate how to select in a screening phase the optimizers that should be used for the hyperparameter tuning.\nFor the same reason, we will fix the sgd_momentum to 0.9.\n\nfun_control = modify_hyper_parameter_bounds(fun_control,\n    \"lr_mult\", bounds=[1e-3, 1e-3])\nfun_control = modify_hyper_parameter_bounds(fun_control,\n    \"sgd_momentum\", bounds=[0.9, 0.9])"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#sec-selection-of-target-function-12",
    "href": "12_spot_hpt_torch_cifar10.html#sec-selection-of-target-function-12",
    "title": "12  Hyperparameter Tuning: PyTorch wth cifar10 Data",
    "section": "12.10 Evaluation",
    "text": "12.10 Evaluation\nThe evaluation procedure requires the specification of two elements:\n\nthe way how the data is split into a train and a test set and\nthe loss function (and a metric).\n\nThese are described in Section 14.8.\nThe loss function is specified by the key \"loss_function\". We will use CrossEntropy loss for the multiclass-classification task.\n\nfrom torch.nn import CrossEntropyLoss\nloss_function = CrossEntropyLoss()\nfun_control.update({\"loss_function\": loss_function})\n\nIn addition to the loss functions, spotPython provides access to a large number of metrics.\n\nThe key \"metric_sklearn\" is used for metrics that follow the scikit-learn conventions.\nThe key \"river_metric\" is used for the river based evaluation (Montiel et al. 2021) via eval_oml_iter_progressive, and\nthe key \"metric_torch\" is used for the metrics from TorchMetrics.\n\nTorchMetrics is a collection of more than 90 PyTorch metrics1.\nA description can be found in Section 14.8.2.\n\nimport torchmetrics\nmetric_torch = torchmetrics.Accuracy(task=\"multiclass\", num_classes=10).to(fun_control[\"device\"])\nfun_control.update({\"metric_torch\": metric_torch})"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#sec-call-the-hyperparameter-tuner-12",
    "href": "12_spot_hpt_torch_cifar10.html#sec-call-the-hyperparameter-tuner-12",
    "title": "12  Hyperparameter Tuning: PyTorch wth cifar10 Data",
    "section": "12.11 Calling the SPOT Function",
    "text": "12.11 Calling the SPOT Function\nNow, the dictionary fun_control contains all information needed for the hyperparameter tuning. Before the hyperparameter tuning is started, it is recommended to take a look at the experimental design. The method gen_design_table generates a design table as follows:\n\nfrom spotPython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control))\n\n| name         | type   | default   |   lower |   upper | transform             |\n|--------------|--------|-----------|---------|---------|-----------------------|\n| l1           | int    | 5         |   2     |   9     | transform_power_2_int |\n| l2           | int    | 5         |   2     |   9     | transform_power_2_int |\n| lr_mult      | float  | 1.0       |   0.001 |   0.001 | None                  |\n| batch_size   | int    | 4         |   1     |   4     | transform_power_2_int |\n| epochs       | int    | 3         |   3     |   4     | transform_power_2_int |\n| k_folds      | int    | 1         |   2     |   2     | None                  |\n| patience     | int    | 5         |   2     |  10     | None                  |\n| optimizer    | factor | SGD       |   0     |   0     | None                  |\n| sgd_momentum | float  | 0.0       |   0.9   |   0.9   | None                  |\n\n\nThis allows to check if all information is available and if the information is correct.\nThe objective function fun_torch is selected next. It implements an interface from PyTorch’s training, validation, and testing methods to spotPython.\n\nfrom spotPython.fun.hypertorch import HyperTorch\nfun = HyperTorch().fun_torch\n\nThe spotPython hyperparameter tuning is started by calling the Spot function. Here, we will run the tuner for approximately 30 minutes (max_time). Note: the initial design is always evaluated in the spotPython run. As a consequence, the run may take longer than specified by max_time, because the evaluation time of initial design (here: init_size, 10 points) is performed independently of max_time.\n\nimport numpy as np\nfrom spotPython.spot import spot\nfrom math import inf\nspot_tuner = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = inf,\n                   fun_repeats = 1,\n                   max_time = MAX_TIME,\n                   noise = False,\n                   tolerance_x = np.sqrt(np.spacing(1)),\n                   var_type = var_type,\n                   var_name = var_name,\n                   infill_criterion = \"y\",\n                   n_points = 1,\n                   seed=123,\n                   log_level = 50,\n                   show_models= False,\n                   show_progress= True,\n                   fun_control = fun_control,\n                   design_control={\"init_size\": INIT_SIZE,\n                                   \"repeats\": 1},\n                   surrogate_control={\"noise\": True,\n                                      \"cod_type\": \"norm\",\n                                      \"min_theta\": -4,\n                                      \"max_theta\": 3,\n                                      \"n_theta\": len(var_name),\n                                      \"model_fun_evals\": 10_000,\n                                      \"log_level\": 50\n                                      })\nspot_tuner.run(X_start=X_start)\n\n\nconfig: {'l1': 128, 'l2': 8, 'lr_mult': 0.001, 'batch_size': 16, 'epochs': 16, 'k_folds': 2, 'patience': 5, 'optimizer': 'Adam', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.3142356275558473\nAccuracy on hold-out set: 0.09975\nMulticlassAccuracy value on hold-out data: 0.09974999725818634\nEpoch: 2\n\n\nLoss on hold-out set: 2.3131948938369753\nAccuracy on hold-out set: 0.09975\nMulticlassAccuracy value on hold-out data: 0.09974999725818634\nEpoch: 3\n\n\nLoss on hold-out set: 2.3122001722335814\nAccuracy on hold-out set: 0.09975\nMulticlassAccuracy value on hold-out data: 0.09974999725818634\nEpoch: 4\n\n\nLoss on hold-out set: 2.3113376068115232\nAccuracy on hold-out set: 0.09975\nMulticlassAccuracy value on hold-out data: 0.09974999725818634\nEpoch: 5\n\n\nLoss on hold-out set: 2.310332297325134\nAccuracy on hold-out set: 0.09975\nMulticlassAccuracy value on hold-out data: 0.09974999725818634\nEpoch: 6\n\n\nLoss on hold-out set: 2.3091301836013796\nAccuracy on hold-out set: 0.09975\nMulticlassAccuracy value on hold-out data: 0.09974999725818634\nEpoch: 7\n\n\nLoss on hold-out set: 2.3076420265197752\nAccuracy on hold-out set: 0.09975\nMulticlassAccuracy value on hold-out data: 0.09974999725818634\nEpoch: 8\n\n\nLoss on hold-out set: 2.305810295295715\nAccuracy on hold-out set: 0.09975\nMulticlassAccuracy value on hold-out data: 0.09974999725818634\nEpoch: 9\n\n\nLoss on hold-out set: 2.303575220108032\nAccuracy on hold-out set: 0.09975\nMulticlassAccuracy value on hold-out data: 0.09974999725818634\nEpoch: 10\n\n\nLoss on hold-out set: 2.300930771827698\nAccuracy on hold-out set: 0.09975\nMulticlassAccuracy value on hold-out data: 0.09974999725818634\nEpoch: 11\n\n\nLoss on hold-out set: 2.297853945159912\nAccuracy on hold-out set: 0.0998\nMulticlassAccuracy value on hold-out data: 0.0997999981045723\nEpoch: 12\n\n\nLoss on hold-out set: 2.2943308353424072\nAccuracy on hold-out set: 0.101\nMulticlassAccuracy value on hold-out data: 0.10100000351667404\nEpoch: 13\n\n\nLoss on hold-out set: 2.2903799419403077\nAccuracy on hold-out set: 0.10565\nMulticlassAccuracy value on hold-out data: 0.10565000027418137\nEpoch: 14\n\n\nLoss on hold-out set: 2.286016369628906\nAccuracy on hold-out set: 0.1126\nMulticlassAccuracy value on hold-out data: 0.11259999871253967\nEpoch: 15\n\n\nLoss on hold-out set: 2.281289504623413\nAccuracy on hold-out set: 0.1208\nMulticlassAccuracy value on hold-out data: 0.12080000340938568\nEpoch: 16\n\n\nLoss on hold-out set: 2.276259234237671\nAccuracy on hold-out set: 0.12715\nMulticlassAccuracy value on hold-out data: 0.12714999914169312\nReturned to Spot: Validation loss: 2.276259234237671\n----------------------------------------------\n\nconfig: {'l1': 16, 'l2': 16, 'lr_mult': 0.001, 'batch_size': 8, 'epochs': 8, 'k_folds': 2, 'patience': 7, 'optimizer': 'Adam', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.3212450092315673\nAccuracy on hold-out set: 0.1008\nMulticlassAccuracy value on hold-out data: 0.10080000013113022\nEpoch: 2\n\n\nLoss on hold-out set: 2.3175892451286315\nAccuracy on hold-out set: 0.1008\nMulticlassAccuracy value on hold-out data: 0.10080000013113022\nEpoch: 3\n\n\nLoss on hold-out set: 2.313878079414368\nAccuracy on hold-out set: 0.1008\nMulticlassAccuracy value on hold-out data: 0.10080000013113022\nEpoch: 4\n\n\nLoss on hold-out set: 2.3105178533554076\nAccuracy on hold-out set: 0.1008\nMulticlassAccuracy value on hold-out data: 0.10080000013113022\nEpoch: 5\n\n\nLoss on hold-out set: 2.3070853699684144\nAccuracy on hold-out set: 0.1038\nMulticlassAccuracy value on hold-out data: 0.10379999876022339\nEpoch: 6\n\n\nLoss on hold-out set: 2.3033511624336245\nAccuracy on hold-out set: 0.117\nMulticlassAccuracy value on hold-out data: 0.11699999868869781\nEpoch: 7\n\n\nLoss on hold-out set: 2.2987976725578307\nAccuracy on hold-out set: 0.12915\nMulticlassAccuracy value on hold-out data: 0.12915000319480896\nEpoch: 8\n\n\nLoss on hold-out set: 2.2936014513015746\nAccuracy on hold-out set: 0.13345\nMulticlassAccuracy value on hold-out data: 0.1334500014781952\nReturned to Spot: Validation loss: 2.2936014513015746\n----------------------------------------------\n\nconfig: {'l1': 256, 'l2': 128, 'lr_mult': 0.001, 'batch_size': 2, 'epochs': 16, 'k_folds': 2, 'patience': 9, 'optimizer': 'Adam', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.2917327533245087\nAccuracy on hold-out set: 0.12725\nMulticlassAccuracy value on hold-out data: 0.12725000083446503\nEpoch: 2\n\n\nLoss on hold-out set: 2.2612567551374436\nAccuracy on hold-out set: 0.18715\nMulticlassAccuracy value on hold-out data: 0.1871500015258789\nEpoch: 3\n\n\nLoss on hold-out set: 2.2061368394374847\nAccuracy on hold-out set: 0.1945\nMulticlassAccuracy value on hold-out data: 0.19449999928474426\nEpoch: 4\n\n\nLoss on hold-out set: 2.1470815731167794\nAccuracy on hold-out set: 0.22175\nMulticlassAccuracy value on hold-out data: 0.22175000607967377\nEpoch: 5\n\n\nLoss on hold-out set: 2.096602593433857\nAccuracy on hold-out set: 0.2555\nMulticlassAccuracy value on hold-out data: 0.2554999887943268\nEpoch: 6\n\n\nLoss on hold-out set: 2.053043792015314\nAccuracy on hold-out set: 0.2685\nMulticlassAccuracy value on hold-out data: 0.2685000002384186\nEpoch: 7\n\n\nLoss on hold-out set: 2.014997237855196\nAccuracy on hold-out set: 0.2788\nMulticlassAccuracy value on hold-out data: 0.27880001068115234\nEpoch: 8\n\n\nLoss on hold-out set: 1.981966679698229\nAccuracy on hold-out set: 0.28885\nMulticlassAccuracy value on hold-out data: 0.28885000944137573\nEpoch: 9\n\n\nLoss on hold-out set: 1.9541859735846518\nAccuracy on hold-out set: 0.29675\nMulticlassAccuracy value on hold-out data: 0.296750009059906\nEpoch: 10\n\n\nLoss on hold-out set: 1.9317885659515859\nAccuracy on hold-out set: 0.30255\nMulticlassAccuracy value on hold-out data: 0.30254998803138733\nEpoch: 11\n\n\nLoss on hold-out set: 1.9136856927335262\nAccuracy on hold-out set: 0.30895\nMulticlassAccuracy value on hold-out data: 0.3089500069618225\nEpoch: 12\n\n\nLoss on hold-out set: 1.8987651331067086\nAccuracy on hold-out set: 0.31445\nMulticlassAccuracy value on hold-out data: 0.3144499957561493\nEpoch: 13\n\n\nLoss on hold-out set: 1.8860693186610937\nAccuracy on hold-out set: 0.31915\nMulticlassAccuracy value on hold-out data: 0.31915000081062317\nEpoch: 14\n\n\nLoss on hold-out set: 1.874677218285203\nAccuracy on hold-out set: 0.3238\nMulticlassAccuracy value on hold-out data: 0.3237999975681305\nEpoch: 15\n\n\nLoss on hold-out set: 1.8641018875926734\nAccuracy on hold-out set: 0.32835\nMulticlassAccuracy value on hold-out data: 0.3283500075340271\nEpoch: 16\n\n\nLoss on hold-out set: 1.8541052027463913\nAccuracy on hold-out set: 0.3317\nMulticlassAccuracy value on hold-out data: 0.33169999718666077\nReturned to Spot: Validation loss: 1.8541052027463913\n----------------------------------------------\n\nconfig: {'l1': 8, 'l2': 32, 'lr_mult': 0.001, 'batch_size': 4, 'epochs': 8, 'k_folds': 2, 'patience': 6, 'optimizer': 'Adam', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.3049700310230254\nAccuracy on hold-out set: 0.1006\nMulticlassAccuracy value on hold-out data: 0.1005999967455864\nEpoch: 2\n\n\nLoss on hold-out set: 2.3044945236206056\nAccuracy on hold-out set: 0.10175\nMulticlassAccuracy value on hold-out data: 0.10175000131130219\nEpoch: 3\n\n\nLoss on hold-out set: 2.304011713886261\nAccuracy on hold-out set: 0.1059\nMulticlassAccuracy value on hold-out data: 0.10589999705553055\nEpoch: 4\n\n\nLoss on hold-out set: 2.3034459031581878\nAccuracy on hold-out set: 0.11195\nMulticlassAccuracy value on hold-out data: 0.11195000261068344\nEpoch: 5\n\n\nLoss on hold-out set: 2.3027652218818666\nAccuracy on hold-out set: 0.1197\nMulticlassAccuracy value on hold-out data: 0.11969999969005585\nEpoch: 6\n\n\nLoss on hold-out set: 2.3019251953125\nAccuracy on hold-out set: 0.12525\nMulticlassAccuracy value on hold-out data: 0.12524999678134918\nEpoch: 7\n\n\nLoss on hold-out set: 2.3008276158332825\nAccuracy on hold-out set: 0.12885\nMulticlassAccuracy value on hold-out data: 0.12884999811649323\nEpoch: 8\n\n\nLoss on hold-out set: 2.299410948419571\nAccuracy on hold-out set: 0.13165\nMulticlassAccuracy value on hold-out data: 0.13165000081062317\nReturned to Spot: Validation loss: 2.299410948419571\n----------------------------------------------\n\nconfig: {'l1': 64, 'l2': 512, 'lr_mult': 0.001, 'batch_size': 8, 'epochs': 16, 'k_folds': 2, 'patience': 3, 'optimizer': 'Adam', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.3010306661605835\nAccuracy on hold-out set: 0.12385\nMulticlassAccuracy value on hold-out data: 0.12385000288486481\nEpoch: 2\n\n\nLoss on hold-out set: 2.2981597155570985\nAccuracy on hold-out set: 0.14165\nMulticlassAccuracy value on hold-out data: 0.1416500061750412\nEpoch: 3\n\n\nLoss on hold-out set: 2.2937135018348696\nAccuracy on hold-out set: 0.15225\nMulticlassAccuracy value on hold-out data: 0.1522500067949295\nEpoch: 4\n\n\nLoss on hold-out set: 2.286209341335297\nAccuracy on hold-out set: 0.1602\nMulticlassAccuracy value on hold-out data: 0.16019999980926514\nEpoch: 5\n\n\nLoss on hold-out set: 2.273649608898163\nAccuracy on hold-out set: 0.19665\nMulticlassAccuracy value on hold-out data: 0.19664999842643738\nEpoch: 6\n\n\nLoss on hold-out set: 2.2553646927833557\nAccuracy on hold-out set: 0.21655\nMulticlassAccuracy value on hold-out data: 0.21654999256134033\nEpoch: 7\n\n\nLoss on hold-out set: 2.232011631679535\nAccuracy on hold-out set: 0.2261\nMulticlassAccuracy value on hold-out data: 0.22609999775886536\nEpoch: 8\n\n\nLoss on hold-out set: 2.204334761047363\nAccuracy on hold-out set: 0.23205\nMulticlassAccuracy value on hold-out data: 0.23205000162124634\nEpoch: 9\n\n\nLoss on hold-out set: 2.1739803652763365\nAccuracy on hold-out set: 0.23815\nMulticlassAccuracy value on hold-out data: 0.2381500005722046\nEpoch: 10\n\n\nLoss on hold-out set: 2.1442159241199494\nAccuracy on hold-out set: 0.24275\nMulticlassAccuracy value on hold-out data: 0.24275000393390656\nEpoch: 11\n\n\nLoss on hold-out set: 2.1182879725933077\nAccuracy on hold-out set: 0.248\nMulticlassAccuracy value on hold-out data: 0.24799999594688416\nEpoch: 12\n\n\nLoss on hold-out set: 2.097240575218201\nAccuracy on hold-out set: 0.25325\nMulticlassAccuracy value on hold-out data: 0.25325000286102295\nEpoch: 13\n\n\nLoss on hold-out set: 2.080285821247101\nAccuracy on hold-out set: 0.26005\nMulticlassAccuracy value on hold-out data: 0.2600499987602234\nEpoch: 14\n\n\nLoss on hold-out set: 2.066159715461731\nAccuracy on hold-out set: 0.2663\nMulticlassAccuracy value on hold-out data: 0.2662999927997589\nEpoch: 15\n\n\nLoss on hold-out set: 2.053798400592804\nAccuracy on hold-out set: 0.2702\nMulticlassAccuracy value on hold-out data: 0.2702000141143799\nEpoch: 16\n\n\nLoss on hold-out set: 2.042636300230026\nAccuracy on hold-out set: 0.27395\nMulticlassAccuracy value on hold-out data: 0.2739500105381012\nReturned to Spot: Validation loss: 2.042636300230026\n----------------------------------------------\n\n\n\nconfig: {'l1': 512, 'l2': 256, 'lr_mult': 0.001, 'batch_size': 2, 'epochs': 16, 'k_folds': 2, 'patience': 10, 'optimizer': 'Adam', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.2756777888298036\nAccuracy on hold-out set: 0.19145\nMulticlassAccuracy value on hold-out data: 0.19144999980926514\nEpoch: 2\n\n\nLoss on hold-out set: 2.2095968044400216\nAccuracy on hold-out set: 0.24035\nMulticlassAccuracy value on hold-out data: 0.24034999310970306\nEpoch: 3\n\n\nLoss on hold-out set: 2.1328695333838463\nAccuracy on hold-out set: 0.25295\nMulticlassAccuracy value on hold-out data: 0.2529500126838684\nEpoch: 4\n\n\nLoss on hold-out set: 2.078280544412136\nAccuracy on hold-out set: 0.264\nMulticlassAccuracy value on hold-out data: 0.2639999985694885\nEpoch: 5\n\n\nLoss on hold-out set: 2.0374396889925004\nAccuracy on hold-out set: 0.2737\nMulticlassAccuracy value on hold-out data: 0.2736999988555908\nEpoch: 6\n\n\nLoss on hold-out set: 2.003498708432913\nAccuracy on hold-out set: 0.2836\nMulticlassAccuracy value on hold-out data: 0.28360000252723694\nEpoch: 7\n\n\nLoss on hold-out set: 1.9760794464290141\nAccuracy on hold-out set: 0.2911\nMulticlassAccuracy value on hold-out data: 0.29109999537467957\nEpoch: 8\n\n\nLoss on hold-out set: 1.9541714536309243\nAccuracy on hold-out set: 0.2983\nMulticlassAccuracy value on hold-out data: 0.29829999804496765\nEpoch: 9\n\n\nLoss on hold-out set: 1.9362848136663438\nAccuracy on hold-out set: 0.3049\nMulticlassAccuracy value on hold-out data: 0.30489999055862427\nEpoch: 10\n\n\nLoss on hold-out set: 1.9211854695260524\nAccuracy on hold-out set: 0.3105\nMulticlassAccuracy value on hold-out data: 0.31049999594688416\nEpoch: 11\n\n\nLoss on hold-out set: 1.907843160805106\nAccuracy on hold-out set: 0.3155\nMulticlassAccuracy value on hold-out data: 0.3154999911785126\nEpoch: 12\n\n\nLoss on hold-out set: 1.8957028525948525\nAccuracy on hold-out set: 0.32075\nMulticlassAccuracy value on hold-out data: 0.32074999809265137\nEpoch: 13\n\n\nLoss on hold-out set: 1.8844266456991434\nAccuracy on hold-out set: 0.3261\nMulticlassAccuracy value on hold-out data: 0.3260999917984009\nEpoch: 14\n\n\nLoss on hold-out set: 1.8738533942848443\nAccuracy on hold-out set: 0.33005\nMulticlassAccuracy value on hold-out data: 0.330049991607666\nEpoch: 15\n\n\nLoss on hold-out set: 1.8637814008712767\nAccuracy on hold-out set: 0.3327\nMulticlassAccuracy value on hold-out data: 0.3327000141143799\nEpoch: 16\n\n\nLoss on hold-out set: 1.8541804857194424\nAccuracy on hold-out set: 0.3363\nMulticlassAccuracy value on hold-out data: 0.33629998564720154\nReturned to Spot: Validation loss: 1.8541804857194424\n----------------------------------------------\n\n\nspotPython tuning: 1.8541052027463913 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x2c33830a0&gt;"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#tensorboard-start-tensorboard",
    "href": "12_spot_hpt_torch_cifar10.html#tensorboard-start-tensorboard",
    "title": "12  Hyperparameter Tuning: PyTorch wth cifar10 Data",
    "section": "13.1 Tensorboard: Start Tensorboard",
    "text": "13.1 Tensorboard: Start Tensorboard\nStart TensorBoard through the command line to visualize data you logged. Specify the root log directory as used in fun_control = fun_control_init(task=\"regression\", tensorboard_path=\"runs/24_spot_torch_regression\") as the tensorboard_path. The argument logdir points to directory where TensorBoard will look to find event files that it can display. TensorBoard will recursively walk the directory structure rooted at logdir, looking for .tfevents. files.\ntensorboard --logdir=runs\nGo to the URL it provides or to http://localhost:6006/. The following figures show some screenshots of Tensorboard.\n\n\n\nFigure 13.1: Tensorboard\n\n\n\n\n\nFigure 13.2: Tensorboard\n\n\n\n13.1.1 Results\n\nSAVE = False\nLOAD = False\n\nif SAVE:\n    result_file_name = \"res_\" + experiment_name + \".pkl\"\n    with open(result_file_name, 'wb') as f:\n        pickle.dump(spot_tuner, f)\n\nif LOAD:\n    result_file_name = \"ADD THE NAME here, e.g.: res_ch10-friedman-hpt-0_maans03_60min_20init_1K_2023-04-14_10-11-19.pkl\"\n    with open(result_file_name, 'rb') as f:\n        spot_tuner =  pickle.load(f)\n\nAfter the hyperparameter tuning run is finished, the progress of the hyperparameter tuning can be visualized. The following code generates the progress plot from Figure 14.4.\n\nspot_tuner.plot_progress(log_y=False, filename=\"./figures/\" + experiment_name+\"_progress.png\")\n\n\n\n\n\nPrint the results\n\n\nprint(gen_design_table(fun_control=fun_control, spot=spot_tuner))\n\n| name         | type   | default   |   lower |   upper |   tuned | transform             |   importance | stars   |\n|--------------|--------|-----------|---------|---------|---------|-----------------------|--------------|---------|\n| l1           | int    | 5         |     2.0 |     9.0 |     8.0 | transform_power_2_int |         0.00 |         |\n| l2           | int    | 5         |     2.0 |     9.0 |     7.0 | transform_power_2_int |         0.00 |         |\n| lr_mult      | float  | 1.0       |   0.001 |   0.001 |   0.001 | None                  |         0.00 |         |\n| batch_size   | int    | 4         |     1.0 |     4.0 |     1.0 | transform_power_2_int |         0.61 | .       |\n| epochs       | int    | 3         |     3.0 |     4.0 |     4.0 | transform_power_2_int |       100.00 | ***     |\n| k_folds      | int    | 1         |     2.0 |     2.0 |     2.0 | None                  |         0.00 |         |\n| patience     | int    | 5         |     2.0 |    10.0 |     9.0 | None                  |         0.00 |         |\n| optimizer    | factor | SGD       |     0.0 |     0.0 |     0.0 | None                  |         0.00 |         |\n| sgd_momentum | float  | 0.0       |     0.9 |     0.9 |     0.9 | None                  |         0.00 |         |\n\n\nTo visualize the most important hyperparameters, spotPython provides the function plot_importance. The following code generates the importance plot from Figure 14.5.\n\nspot_tuner.plot_importance(threshold=0.025, filename=\"./figures/\" + experiment_name+\"_importance.png\")"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#sec-get-spot-results-12",
    "href": "12_spot_hpt_torch_cifar10.html#sec-get-spot-results-12",
    "title": "12  Hyperparameter Tuning: PyTorch wth cifar10 Data",
    "section": "13.2 Get the Tuned Architecture",
    "text": "13.2 Get the Tuned Architecture\nThe architecture of the spotPython model can be obtained by the following code:\n\nfrom spotPython.hyperparameters.values import get_one_core_model_from_X\nX = spot_tuner.to_all_dim(spot_tuner.min_X.reshape(1,-1))\nmodel_spot = get_one_core_model_from_X(X, fun_control)\nmodel_spot\n\nNet_CIFAR10(\n  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))\n  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n  (fc1): Linear(in_features=400, out_features=256, bias=True)\n  (fc2): Linear(in_features=256, out_features=128, bias=True)\n  (fc3): Linear(in_features=128, out_features=10, bias=True)\n)"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#evaluation-of-the-tuned-architecture",
    "href": "12_spot_hpt_torch_cifar10.html#evaluation-of-the-tuned-architecture",
    "title": "12  Hyperparameter Tuning: PyTorch wth cifar10 Data",
    "section": "13.3 Evaluation of the Tuned Architecture",
    "text": "13.3 Evaluation of the Tuned Architecture\nThe method train_tuned takes a model architecture without trained weights and trains this model with the train data. The train data is split into train and validation data. The validation data is used for early stopping. The trained model weights are saved as a dictionary.\nThe following code trains the model model_spot. If path is set to a filename, e.g., path = \"model_spot_trained.pt\", the weights of the trained model will be saved to this file.\n\nfrom spotPython.torch.traintest import (\n    train_tuned,\n    test_tuned,\n    )\ntrain_tuned(net=model_spot, train_dataset=train,\n        loss_function=fun_control[\"loss_function\"],\n        metric=fun_control[\"metric_torch\"],\n        shuffle=True,\n        device = fun_control[\"device\"],\n        path=None,\n        task=fun_control[\"task\"],)\n\nEpoch: 1\n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 2.301\n\n\nLoss on hold-out set: 2.2919553975343705\nAccuracy on hold-out set: 0.1612\nMulticlassAccuracy value on hold-out data: 0.16120000183582306\nEpoch: 2\n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 2.282\n\n\nLoss on hold-out set: 2.253749695253372\nAccuracy on hold-out set: 0.2273\nMulticlassAccuracy value on hold-out data: 0.2273000031709671\nEpoch: 3\n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 2.232\n\n\nLoss on hold-out set: 2.1795707850694654\nAccuracy on hold-out set: 0.23645\nMulticlassAccuracy value on hold-out data: 0.23645000159740448\nEpoch: 4\n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 2.154\n\n\nLoss on hold-out set: 2.109324400573969\nAccuracy on hold-out set: 0.25075\nMulticlassAccuracy value on hold-out data: 0.25075000524520874\nEpoch: 5\n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 2.092\n\n\nLoss on hold-out set: 2.064946688425541\nAccuracy on hold-out set: 0.2624\nMulticlassAccuracy value on hold-out data: 0.2624000012874603\nEpoch: 6\n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 2.056\n\n\nLoss on hold-out set: 2.0348740309774875\nAccuracy on hold-out set: 0.271\nMulticlassAccuracy value on hold-out data: 0.2709999978542328\nEpoch: 7\n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 2.027\n\n\nLoss on hold-out set: 2.010551889437437\nAccuracy on hold-out set: 0.27945\nMulticlassAccuracy value on hold-out data: 0.279449999332428\nEpoch: 8\n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 2.000\n\n\nLoss on hold-out set: 1.9910521739065647\nAccuracy on hold-out set: 0.284\nMulticlassAccuracy value on hold-out data: 0.2840000092983246\nEpoch: 9\n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 1.990\n\n\nLoss on hold-out set: 1.9736495065689086\nAccuracy on hold-out set: 0.2895\nMulticlassAccuracy value on hold-out data: 0.28949999809265137\nEpoch: 10\n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 1.977\n\n\nLoss on hold-out set: 1.9588579506278039\nAccuracy on hold-out set: 0.2955\nMulticlassAccuracy value on hold-out data: 0.2955000102519989\nEpoch: 11\n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 1.953\n\n\nLoss on hold-out set: 1.9473622916400433\nAccuracy on hold-out set: 0.3003\nMulticlassAccuracy value on hold-out data: 0.3003000020980835\nEpoch: 12\n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 1.944\n\n\nLoss on hold-out set: 1.9351203795909881\nAccuracy on hold-out set: 0.3016\nMulticlassAccuracy value on hold-out data: 0.30160000920295715\nEpoch: 13\n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 1.933\n\n\nLoss on hold-out set: 1.9252469483137131\nAccuracy on hold-out set: 0.30675\nMulticlassAccuracy value on hold-out data: 0.30674999952316284\nEpoch: 14\n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 1.928\n\n\nLoss on hold-out set: 1.9161997938424349\nAccuracy on hold-out set: 0.31215\nMulticlassAccuracy value on hold-out data: 0.3121500015258789\nEpoch: 15\n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 1.916\n\n\nLoss on hold-out set: 1.906196483156085\nAccuracy on hold-out set: 0.3156\nMulticlassAccuracy value on hold-out data: 0.3156000077724457\nEpoch: 16\n\n\nBatch: 10000. Batch Size: 2. Training Loss (running): 1.902\n\n\nLoss on hold-out set: 1.897555482211709\nAccuracy on hold-out set: 0.3191\nMulticlassAccuracy value on hold-out data: 0.3190999925136566\nReturned to Spot: Validation loss: 1.897555482211709\n----------------------------------------------\n\n\nIf path is set to a filename, e.g., path = \"model_spot_trained.pt\", the weights of the trained model will be loaded from this file.\n\ntest_tuned(net=model_spot, test_dataset=test,\n            shuffle=False,\n            loss_function=fun_control[\"loss_function\"],\n            metric=fun_control[\"metric_torch\"],\n            device = fun_control[\"device\"],\n            task=fun_control[\"task\"],)\n\nLoss on hold-out set: 1.886259642636776\nAccuracy on hold-out set: 0.3233\nMulticlassAccuracy value on hold-out data: 0.32330000400543213\nFinal evaluation: Validation loss: 1.886259642636776\nFinal evaluation: Validation metric: 0.32330000400543213\n----------------------------------------------\n\n\n(1.886259642636776, nan, tensor(0.3233, device='mps:0'))"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#cross-validated-evaluations",
    "href": "12_spot_hpt_torch_cifar10.html#cross-validated-evaluations",
    "title": "12  Hyperparameter Tuning: PyTorch wth cifar10 Data",
    "section": "13.4 Cross-validated Evaluations",
    "text": "13.4 Cross-validated Evaluations\n\nfrom spotPython.torch.traintest import evaluate_cv\n# modify k-kolds:\nsetattr(model_spot, \"k_folds\",  10)\nevaluate_cv(net=model_spot,\n            dataset=fun_control[\"data\"],\n            loss_function=fun_control[\"loss_function\"],\n            metric=fun_control[\"metric_torch\"],\n            task=fun_control[\"task\"],\n            writer=fun_control[\"writer\"],\n            writerId=\"model_spot_cv\",\n            device = fun_control[\"device\"])\n\nError in Net_Core. Call to evaluate_cv() failed. err=TypeError(\"Expected sequence or array-like, got &lt;class 'NoneType'&gt;\"), type(err)=&lt;class 'TypeError'&gt;\n\n\n(nan, nan, nan)"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#detailed-hyperparameter-plots",
    "href": "12_spot_hpt_torch_cifar10.html#detailed-hyperparameter-plots",
    "title": "12  Hyperparameter Tuning: PyTorch wth cifar10 Data",
    "section": "13.5 Detailed Hyperparameter Plots",
    "text": "13.5 Detailed Hyperparameter Plots\nThe contour plot in this section visualize the interactions of the two most important hyperparameters, l1, and epochs of the surrogate model used to optimize the hyperparameters. Since some of these hyperparameters take fatorial or integer values, sometimes step-like fitness landcapes (or response surfaces) are generated. SPOT draws the interactions of the main hyperparameters by default. It is also possible to visualize all interactions. For this, again refer to the notebook (Bartz-Beielstein 2023).\n\nfilename = \"./figures/\" + experiment_name\nspot_tuner.plot_important_hyperparameter_contour(filename=filename)\n\nbatch_size:  0.60833789472054\nepochs:  100.0"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#parallel-coordinates-plot",
    "href": "12_spot_hpt_torch_cifar10.html#parallel-coordinates-plot",
    "title": "12  Hyperparameter Tuning: PyTorch wth cifar10 Data",
    "section": "13.6 Parallel Coordinates Plot",
    "text": "13.6 Parallel Coordinates Plot\n\nspot_tuner.parallel_plot()"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#plot-all-combinations-of-hyperparameters",
    "href": "12_spot_hpt_torch_cifar10.html#plot-all-combinations-of-hyperparameters",
    "title": "12  Hyperparameter Tuning: PyTorch wth cifar10 Data",
    "section": "13.7 Plot all Combinations of Hyperparameters",
    "text": "13.7 Plot all Combinations of Hyperparameters\n\nWarning: this may take a while.\n\n\nPLOT_ALL = False\nif PLOT_ALL:\n    n = spot_tuner.k\n    for i in range(n-1):\n        for j in range(i+1, n):\n            spot_tuner.plot_contour(i=i, j=j, min_z=min_z, max_z = max_z)\n\n\n\n\n\nBartz-Beielstein, Thomas. 2023. “PyTorch Hyperparameter Tuning with SPOT: Comparison with Ray Tuner and Default Hyperparameters on CIFAR10.” https://github.com/sequential-parameter-optimization/spotPython/blob/main/notebooks/14_spot_ray_hpt_torch_cifar10.ipynb.\n\n\nMontiel, Jacob, Max Halford, Saulo Martiello Mastelini, Geoffrey Bolmier, Raphael Sourty, Robin Vaysse, Adil Zouitine, et al. 2021. “River: Machine Learning for Streaming Data in Python.”"
  },
  {
    "objectID": "12_spot_hpt_torch_cifar10.html#footnotes",
    "href": "12_spot_hpt_torch_cifar10.html#footnotes",
    "title": "12  Hyperparameter Tuning: PyTorch wth cifar10 Data",
    "section": "",
    "text": "https://torchmetrics.readthedocs.io/en/latest/.↩︎"
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#sec-setup",
    "href": "14_spot_ray_hpt_torch_cifar10.html#sec-setup",
    "title": "13  Hyperparameter Tuning for PyTorch With spotPython",
    "section": "13.1 Setup",
    "text": "13.1 Setup\nBefore we consider the detailed experimental setup, we select the parameters that affect run time, initial design size and the device that is used.\n\nMAX_TIME = 1\nINIT_SIZE = 5\nDEVICE = None # \"cpu\" # \"cuda:0\"\n\n\nfrom spotPython.utils.device import getDevice\nDEVICE = getDevice(DEVICE)\nprint(DEVICE)\n\nmps\n\n\n\n\n14-torch_bartz09_1min_5init_2023-06-15_04-27-18"
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#initialization-of-the-fun_control-dictionary",
    "href": "14_spot_ray_hpt_torch_cifar10.html#initialization-of-the-fun_control-dictionary",
    "title": "13  Hyperparameter Tuning for PyTorch With spotPython",
    "section": "13.2 Initialization of the fun_control Dictionary",
    "text": "13.2 Initialization of the fun_control Dictionary\nspotPython uses a Python dictionary for storing the information required for the hyperparameter tuning process. This dictionary is called fun_control and is initialized with the function fun_control_init. The function fun_control_init returns a skeleton dictionary. The dictionary is filled with the required information for the hyperparameter tuning process. It stores the hyperparameter tuning settings, e.g., the deep learning network architecture that should be tuned, the classification (or regression) problem, and the data that is used for the tuning. The dictionary is used as an input for the SPOT function.\n\nfrom spotPython.utils.init import fun_control_init\nfun_control = fun_control_init(task=\"classification\",\n    tensorboard_path=\"runs/14_spot_ray_hpt_torch_cifar10\",\n    device=DEVICE,)"
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#sec-data-loading",
    "href": "14_spot_ray_hpt_torch_cifar10.html#sec-data-loading",
    "title": "13  Hyperparameter Tuning for PyTorch With spotPython",
    "section": "13.3 Data Loading",
    "text": "13.3 Data Loading\nThe data loading process is implemented in the same manner as described in the Section “Data loaders” in PyTorch (2023a). The data loaders are wrapped into the function load_data_cifar10 which is identical to the function load_data in PyTorch (2023a). A global data directory is used, which allows sharing the data directory between different trials. The method load_data_cifar10 is part of the spotPython package and can be imported from spotPython.data.torchdata.\nIn the following step, the test and train data are added to the dictionary fun_control.\n\nfrom spotPython.data.torchdata import load_data_cifar10\ntrain, test = load_data_cifar10()\nn_samples = len(train)\n# add the dataset to the fun_control\nfun_control.update({\n    \"train\": train,\n    \"test\": test,\n    \"n_samples\": n_samples})\n\nFiles already downloaded and verified\n\n\nFiles already downloaded and verified"
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#sec-the-model-to-be-tuned",
    "href": "14_spot_ray_hpt_torch_cifar10.html#sec-the-model-to-be-tuned",
    "title": "13  Hyperparameter Tuning for PyTorch With spotPython",
    "section": "13.4 The Model (Algorithm) to be Tuned",
    "text": "13.4 The Model (Algorithm) to be Tuned\n\n13.4.1 Specification of the Preprocessing Model\nAfter the training and test data are specified and added to the fun_control dictionary, spotPython allows the specification of a data preprocessing pipeline, e.g., for the scaling of the data or for the one-hot encoding of categorical variables. The preprocessing model is called prep_model (“preparation” or pre-processing) and includes steps that are not subject to the hyperparameter tuning process. The preprocessing model is specified in the fun_control dictionary. The preprocessing model can be implemented as a sklearn pipeline. The following code shows a typical preprocessing pipeline:\ncategorical_columns = [\"cities\", \"colors\"]\none_hot_encoder = OneHotEncoder(handle_unknown=\"ignore\",\n                                    sparse_output=False)\nprep_model = ColumnTransformer(\n        transformers=[\n             (\"categorical\", one_hot_encoder, categorical_columns),\n         ],\n         remainder=StandardScaler(),\n     )\nBecause the Ray Tune (ray[tune]) hyperparameter tuning as described in PyTorch (2023a) does not use a preprocessing model, the preprocessing model is set to None here.\n\nprep_model = None\nfun_control.update({\"prep_model\": prep_model})\n\n\n\n13.4.2 Select algorithm and core_model_hyper_dict\nThe same neural network model as implemented in the section “Configurable neural network” of the PyTorch tutorial (PyTorch 2023a) is used here. We will show the implementation from PyTorch (2023a) in Section 13.4.2.1 first, before the extended implementation with spotPython is shown in Section 13.4.2.2.\n\n13.4.2.1 Implementing a Configurable Neural Network With Ray Tune\nWe used the same hyperparameters that are implemented as configurable in the PyTorch tutorial. We specify the layer sizes, namely l1 and l2, of the fully connected layers:\nclass Net(nn.Module):\n    def __init__(self, l1=120, l2=84):\n        super(Net, self).__init__()\n        self.conv1 = nn.Conv2d(3, 6, 5)\n        self.pool = nn.MaxPool2d(2, 2)\n        self.conv2 = nn.Conv2d(6, 16, 5)\n        self.fc1 = nn.Linear(16 * 5 * 5, l1)\n        self.fc2 = nn.Linear(l1, l2)\n        self.fc3 = nn.Linear(l2, 10)\n\n    def forward(self, x):\n        x = self.pool(F.relu(self.conv1(x)))\n        x = self.pool(F.relu(self.conv2(x)))\n        x = x.view(-1, 16 * 5 * 5)\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\n\nThe learning rate, i.e., lr, of the optimizer is made configurable, too:\noptimizer = optim.SGD(net.parameters(), lr=config[\"lr\"], momentum=0.9)\n\n\n13.4.2.2 Implementing a Configurable Neural Network With spotPython\nspotPython implements a class which is similar to the class described in the PyTorch tutorial. The class is called Net_CIFAR10 and is implemented in the file netcifar10.py.\nfrom torch import nn\nimport torch.nn.functional as F\nimport spotPython.torch.netcore as netcore\n\n\nclass Net_CIFAR10(netcore.Net_Core):\n    def __init__(self, l1, l2, lr_mult, batch_size, epochs, k_folds, patience,\n    optimizer, sgd_momentum):\n        super(Net_CIFAR10, self).__init__(\n            lr_mult=lr_mult,\n            batch_size=batch_size,\n            epochs=epochs,\n            k_folds=k_folds,\n            patience=patience,\n            optimizer=optimizer,\n            sgd_momentum=sgd_momentum,\n        )\n        self.conv1 = nn.Conv2d(3, 6, 5)\n        self.pool = nn.MaxPool2d(2, 2)\n        self.conv2 = nn.Conv2d(6, 16, 5)\n        self.fc1 = nn.Linear(16 * 5 * 5, l1)\n        self.fc2 = nn.Linear(l1, l2)\n        self.fc3 = nn.Linear(l2, 10)\n\n    def forward(self, x):\n        x = self.pool(F.relu(self.conv1(x)))\n        x = self.pool(F.relu(self.conv2(x)))\n        x = x.view(-1, 16 * 5 * 5)\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\n\n\n\n13.4.3 The Net_Core class\nNet_CIFAR10 inherits from the class Net_Core which is implemented in the file netcore.py. It implements the additional attributes that are common to all neural network models. The Net_Core class is implemented in the file netcore.py. It implements hyperparameters as attributes, that are not used by the core_model, e.g.:\n\noptimizer (optimizer),\nlearning rate (lr),\nbatch size (batch_size),\nepochs (epochs),\nk_folds (k_folds), and\nearly stopping criterion “patience” (patience).\n\nUsers can add further attributes to the class. The class Net_Core is shown below.\nfrom torch import nn\n\n\nclass Net_Core(nn.Module):\n    def __init__(self, lr_mult, batch_size, epochs, k_folds, patience,\n        optimizer, sgd_momentum):\n        super(Net_Core, self).__init__()\n        self.lr_mult = lr_mult\n        self.batch_size = batch_size\n        self.epochs = epochs\n        self.k_folds = k_folds\n        self.patience = patience\n        self.optimizer = optimizer\n        self.sgd_momentum = sgd_momentum\n\n\n13.4.4 Comparison of the Approach Described in the PyTorch Tutorial With spotPython\nComparing the class Net from the PyTorch tutorial and the class Net_CIFAR10 from spotPython, we see that the class Net_CIFAR10 has additional attributes and does not inherit from nn directly. It adds an additional class, Net_core, that takes care of additional attributes that are common to all neural network models, e.g., the learning rate multiplier lr_mult or the batch size batch_size.\nspotPython’s core_model implements an instance of the Net_CIFAR10 class. In addition to the basic neural network model, the core_model can use these additional attributes. spotPython provides methods for handling these additional attributes to guarantee 100% compatibility with the PyTorch classes. The method add_core_model_to_fun_control adds the hyperparameters and additional attributes to the fun_control dictionary. The method is shown below.\n\nfrom spotPython.torch.netcifar10 import Net_CIFAR10\nfrom spotPython.data.torch_hyper_dict import TorchHyperDict\nfrom spotPython.hyperparameters.values import add_core_model_to_fun_control\ncore_model = Net_CIFAR10\nfun_control = add_core_model_to_fun_control(core_model=core_model,\n                              fun_control=fun_control,\n                              hyper_dict=TorchHyperDict,\n                              filename=None)"
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#sec-search-space",
    "href": "14_spot_ray_hpt_torch_cifar10.html#sec-search-space",
    "title": "13  Hyperparameter Tuning for PyTorch With spotPython",
    "section": "13.5 The Search Space: Hyperparameters",
    "text": "13.5 The Search Space: Hyperparameters\nIn Section 13.5.1, we first describe how to configure the search space with ray[tune] (as shown in PyTorch (2023a)) and then how to configure the search space with spotPython in Section 13.5.2.\n\n13.5.1 Configuring the Search Space With Ray Tune\nRay Tune’s search space can be configured as follows (PyTorch 2023a):\nconfig = {\n    \"l1\": tune.sample_from(lambda _: 2**np.random.randint(2, 9)),\n    \"l2\": tune.sample_from(lambda _: 2**np.random.randint(2, 9)),\n    \"lr\": tune.loguniform(1e-4, 1e-1),\n    \"batch_size\": tune.choice([2, 4, 8, 16])\n}\nThe tune.sample_from() function enables the user to define sample methods to obtain hyperparameters. In this example, the l1 and l2 parameters should be powers of 2 between 4 and 256, so either 4, 8, 16, 32, 64, 128, or 256. The lr (learning rate) should be uniformly sampled between 0.0001 and 0.1. Lastly, the batch size is a choice between 2, 4, 8, and 16.\nAt each trial, ray[tune] will randomly sample a combination of parameters from these search spaces. It will then train a number of models in parallel and find the best performing one among these. ray[tune] uses the ASHAScheduler which will terminate bad performing trials early.\n\n\n13.5.2 Configuring the Search Space With spotPython\n\n13.5.2.1 The hyper_dict Hyperparameters for the Selected Algorithm\nspotPython uses JSON files for the specification of the hyperparameters. Users can specify their individual JSON files, or they can use the JSON files provided by spotPython. The JSON file for the core_model is called torch_hyper_dict.json.\nIn contrast to ray[tune], spotPython can handle numerical, boolean, and categorical hyperparameters. They can be specified in the JSON file in a similar way as the numerical hyperparameters as shown below. Each entry in the JSON file represents one hyperparameter with the following structure: type, default, transform, lower, and upper.\n\"factor_hyperparameter\": {\n    \"levels\": [\"A\", \"B\", \"C\"],\n    \"type\": \"factor\",\n    \"default\": \"B\",\n    \"transform\": \"None\",\n    \"core_model_parameter_type\": \"str\",\n    \"lower\": 0,\n    \"upper\": 2},\nThe corresponding entries for the Net_CIFAR10 class are shown below.\n{\"Net_CIFAR10\":\n    {\n        \"l1\": {\n            \"type\": \"int\",\n            \"default\": 5,\n            \"transform\": \"transform_power_2_int\",\n            \"lower\": 2,\n            \"upper\": 9},\n        \"l2\": {\n            \"type\": \"int\",\n            \"default\": 5,\n            \"transform\": \"transform_power_2_int\",\n            \"lower\": 2,\n            \"upper\": 9},\n        \"lr_mult\": {\n            \"type\": \"float\",\n            \"default\": 1.0,\n            \"transform\": \"None\",\n            \"lower\": 0.1,\n            \"upper\": 10},\n        \"batch_size\": {\n            \"type\": \"int\",\n            \"default\": 4,\n            \"transform\": \"transform_power_2_int\",\n            \"lower\": 1,\n            \"upper\": 4},\n        \"epochs\": {\n            \"type\": \"int\",\n            \"default\": 3,\n            \"transform\": \"transform_power_2_int\",\n            \"lower\": 1,\n            \"upper\": 4},\n        \"k_folds\": {\n            \"type\": \"int\",\n            \"default\": 2,\n            \"transform\": \"None\",\n            \"lower\": 2,\n            \"upper\": 3},\n        \"patience\": {\n            \"type\": \"int\",\n            \"default\": 5,\n            \"transform\": \"None\",\n            \"lower\": 2,\n            \"upper\": 10},\n        \"optimizer\": {\n            \"levels\": [\"Adadelta\",\n                       \"Adagrad\",\n                       \"Adam\",\n                       \"AdamW\",\n                       \"SparseAdam\",\n                       \"Adamax\",\n                       \"ASGD\",\n                       \"LBFGS\",\n                       \"NAdam\",\n                       \"RAdam\",\n                       \"RMSprop\",\n                       \"Rprop\",\n                       \"SGD\"],\n            \"type\": \"factor\",\n            \"default\": \"SGD\",\n            \"transform\": \"None\",\n            \"class_name\": \"torch.optim\",\n            \"core_model_parameter_type\": \"str\",\n            \"lower\": 0,\n            \"upper\": 12},\n        \"sgd_momentum\": {\n            \"type\": \"float\",\n            \"default\": 0.0,\n            \"transform\": \"None\",\n            \"lower\": 0.0,\n            \"upper\": 1.0}\n    }\n}\n\n\n\n13.5.3 Modifying the Hyperparameters\nRay tune (PyTorch 2023a) does not provide a way to change the specified hyperparameters without re-compilation. However, spotPython provides functions for modifying the hyperparameters, their bounds and factors as well as for activating and de-activating hyperparameters without re-compilation of the Python source code. These functions are described in the following.\n\n13.5.3.1 Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model\nAfter specifying the model, the corresponding hyperparameters, their types and bounds are loaded from the JSON file torch_hyper_dict.json. After loading, the user can modify the hyperparameters, e.g., the bounds. spotPython provides a simple rule for de-activating hyperparameters: If the lower and the upper bound are set to identical values, the hyperparameter is de-activated. This is useful for the hyperparameter tuning, because it allows to specify a hyperparameter in the JSON file, but to de-activate it in the fun_control dictionary. This is done in the next step.\n\n\n13.5.3.2 Modify Hyperparameters of Type numeric and integer (boolean)\nSince the hyperparameter k_folds is not used in the PyTorch tutorial, it is de-activated here by setting the lower and upper bound to the same value. Note, k_folds is of type “integer”.\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_bounds\nfun_control = modify_hyper_parameter_bounds(fun_control, \n    \"batch_size\", bounds=[1, 5])\nfun_control = modify_hyper_parameter_bounds(fun_control, \n    \"k_folds\", bounds=[0, 0])\nfun_control = modify_hyper_parameter_bounds(fun_control, \n    \"patience\", bounds=[3, 3])\n\n\n\n13.5.3.3 Modify Hyperparameter of Type factor\nIn a similar manner as for the numerical hyperparameters, the categorical hyperparameters can be modified. New configurations can be chosen by adding or deleting levels. For example, the hyperparameter optimizer can be re-configured as follows:\nIn the following setting, two optimizers (\"SGD\" and \"Adam\") will be compared during the spotPython hyperparameter tuning. The hyperparameter optimizer is active.\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_levels\nfun_control = modify_hyper_parameter_levels(fun_control,\n     \"optimizer\", [\"SGD\", \"Adam\"])\n\nThe hyperparameter optimizer can be de-activated by choosing only one value (level), here: \"SGD\".\n\nfun_control = modify_hyper_parameter_levels(fun_control, \"optimizer\", [\"SGD\"])\n\nAs discussed in Section 13.6, there are some issues with the LBFGS optimizer. Therefore, the usage of the LBFGS optimizer is not deactivated in spotPython by default. However, the LBFGS optimizer can be activated by adding it to the list of optimizers. Rprop was removed, because it does perform very poorly (as some pre-tests have shown). However, it can also be activated by adding it to the list of optimizers. Since SparseAdam does not support dense gradients, Adam was used instead. Therefore, there are 10 default optimizers:\n\nfun_control = modify_hyper_parameter_levels(fun_control, \"optimizer\",\n    [\"Adadelta\", \"Adagrad\", \"Adam\", \"AdamW\", \"Adamax\", \"ASGD\", \n    \"NAdam\", \"RAdam\", \"RMSprop\", \"SGD\"])"
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#sec-optimizers",
    "href": "14_spot_ray_hpt_torch_cifar10.html#sec-optimizers",
    "title": "13  Hyperparameter Tuning for PyTorch With spotPython",
    "section": "13.6 Optimizers",
    "text": "13.6 Optimizers\nTable 14.1 shows some of the optimizers available in PyTorch:\n\\(a\\) denotes (0.9,0.999), \\(b\\) (0.5,1.2), and \\(c\\) (1e-6, 50), respectively. \\(R\\) denotes required, but unspecified. “m” denotes momentum, “w_d” weight_decay, “d” dampening, “n” nesterov, “r” rho, “l_s” learning rate for scaling delta, “l_d” lr_decay, “b” betas, “l” lambd, “a” alpha, “m_d” for momentum_decay, “e” etas, and “s_s” for step_sizes.\n\n\nTable 13.1: Optimizers available in PyTorch (selection). The default values are shown in the table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOptimizer\nlr\nm\nw_d\nd\nn\nr\nl_s\nl_d\nb\nl\na\nm_d\ne\ns_s\n\n\n\n\nAdadelta\n-\n-\n0.\n-\n-\n0.9\n1.\n-\n-\n-\n-\n-\n-\n-\n\n\nAdagrad\n1e-2\n-\n0.\n-\n-\n-\n-\n0.\n-\n-\n-\n-\n-\n-\n\n\nAdam\n1e-3\n-\n0.\n-\n-\n-\n-\n-\n\\(a\\)\n-\n-\n-\n-\n-\n\n\nAdamW\n1e-3\n-\n1e-2\n-\n-\n-\n-\n-\n\\(a\\)\n-\n-\n-\n-\n-\n\n\nSparseAdam\n1e-3\n-\n-\n-\n-\n-\n-\n-\n\\(a\\)\n-\n-\n-\n-\n-\n\n\nAdamax\n2e-3\n-\n0.\n-\n-\n-\n-\n-\n\\(a\\)\n-\n-\n-\n-\n-\n\n\nASGD\n1e-2\n.9\n0.\n-\nF\n-\n-\n-\n-\n1e-4\n.75\n-\n-\n-\n\n\nLBFGS\n1.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n\n\nNAdam\n2e-3\n-\n0.\n-\n-\n-\n-\n-\n\\(a\\)\n-\n-\n0\n-\n-\n\n\nRAdam\n1e-3\n-\n0.\n-\n-\n-\n-\n-\n\\(a\\)\n-\n-\n-\n-\n-\n\n\nRMSprop\n1e-2\n0.\n0.\n-\n-\n-\n-\n-\n\\(a\\)\n-\n-\n-\n-\n-\n\n\nRprop\n1e-2\n-\n-\n-\n-\n-\n-\n-\n-\n-\n\\(b\\)\n\\(c\\)\n-\n-\n\n\nSGD\n\\(R\\)\n0.\n0.\n0.\nF\n-\n-\n-\n-\n-\n-\n-\n-\n-\n\n\n\n\nspotPython implements an optimization handler that maps the optimizer names to the corresponding PyTorch optimizers.\n\n\n\n\n\n\nA note on LBFGS\n\n\n\nWe recommend deactivating PyTorch’s LBFGS optimizer, because it does not perform very well. The PyTorch documentation, see https://pytorch.org/docs/stable/generated/torch.optim.LBFGS.html#torch.optim.LBFGS, states:\n\nThis is a very memory intensive optimizer (it requires additional param_bytes * (history_size + 1) bytes). If it doesn’t fit in memory try reducing the history size, or use a different algorithm.\n\nFurthermore, the LBFGS optimizer is not compatible with the PyTorch tutorial. The reason is that the LBFGS optimizer requires the closure function, which is not implemented in the PyTorch tutorial. Therefore, the LBFGS optimizer is recommended here. Since there are ten optimizers in the portfolio, it is not recommended tuning the hyperparameters that effect one single optimizer only.\n\n\n\n\n\n\n\n\nA note on the learning rate\n\n\n\nspotPython provides a multiplier for the default learning rates, lr_mult, because optimizers use different learning rates. Using a multiplier for the learning rates might enable a simultaneous tuning of the learning rates for all optimizers. However, this is not recommended, because the learning rates are not comparable across optimizers. Therefore, we recommend fixing the learning rate for all optimizers if multiple optimizers are used. This can be done by setting the lower and upper bounds of the learning rate multiplier to the same value as shown below.\nThus, the learning rate, which affects the SGD optimizer, will be set to a fixed value. We choose the default value of 1e-3 for the learning rate, because it is used in other PyTorch examples (it is also the default value used by spotPython as defined in the optimizer_handler() method). We recommend tuning the learning rate later, when a reduced set of optimizers is fixed. Here, we will demonstrate how to select in a screening phase the optimizers that should be used for the hyperparameter tuning.\n\n\nFor the same reason, we will fix the sgd_momentum to 0.9.\n\nfun_control = modify_hyper_parameter_bounds(fun_control,\n    \"lr_mult\", bounds=[1.0, 1.0])\nfun_control = modify_hyper_parameter_bounds(fun_control,\n    \"sgd_momentum\", bounds=[0.9, 0.9])"
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#sec-data-splitting",
    "href": "14_spot_ray_hpt_torch_cifar10.html#sec-data-splitting",
    "title": "13  Hyperparameter Tuning for PyTorch With spotPython",
    "section": "13.7 Evaluation: Data Splitting",
    "text": "13.7 Evaluation: Data Splitting\nThe evaluation procedure requires the specification of the way how the data is split into a train and a test set and the loss function (and a metric). As a default, spotPython provides a standard hold-out data split and cross validation.\n\n13.7.1 Hold-out Data Split\nIf a hold-out data split is used, the data will be partitioned into a training, a validation, and a test data set. The split depends on the setting of the eval parameter. If eval is set to train_hold_out, one data set, usually the original training data set, is split into a new training and a validation data set. The training data set is used for training the model. The validation data set is used for the evaluation of the hyperparameter configuration and early stopping to prevent overfitting. In this case, the original test data set is not used.\nspotPython returns the hyperparameters of the machine learning and deep learning models, e.g., number of layers, learning rate, or optimizer, but not the model weights. Therefore, after the SPOT run is finished, the corresponding model with the optimized architecture has to be trained again with the best hyperparameter configuration. The training is performed on the training data set. The test data set is used for the final evaluation of the model.\nSummarizing, the following splits are performed in the hold-out setting:\n\nRun spotPython with eval set to train_hold_out to determine the best hyperparameter configuration.\nTrain the model with the best hyperparameter configuration (“architecture”) on the training data set: train_tuned(model_spot, train, \"model_spot.pt\").\nTest the model on the test data: test_tuned(model_spot, test, \"model_spot.pt\")\n\nThese steps will be exemplified in the following sections. In addition to this hold-out setting, spotPython provides another hold-out setting, where an explicit test data is specified by the user that will be used as the validation set. To choose this option, the eval parameter is set to test_hold_out. In this case, the training data set is used for the model training. Then, the explicitly defined test data set is used for the evaluation of the hyperparameter configuration (the validation).\n\n\n13.7.2 Cross-Validation\nThe cross validation setting is used by setting the eval parameter to train_cv or test_cv. In both cases, the data set is split into \\(k\\) folds. The model is trained on \\(k-1\\) folds and evaluated on the remaining fold. This is repeated \\(k\\) times, so that each fold is used exactly once for evaluation. The final evaluation is performed on the test data set. The cross validation setting is useful for small data sets, because it allows to use all data for training and evaluation. However, it is computationally expensive, because the model has to be trained \\(k\\) times.\nCombinations of the above settings are possible, e.g., cross validation can be used for training and hold-out for evaluation or vice versa. Also, cross validation can be used for training and testing. Because cross validation is not used in the PyTorch tutorial (PyTorch 2023a), it is not considered further here.\n\n\n13.7.3 Overview of the Evaluation Settings\n\n13.7.3.1 Settings for the Hyperparameter Tuning\nAn overview of the training evaluations is shown in Table 14.2. \"train_cv\" and \"test_cv\" use sklearn.model_selection.KFold() internally. More details on the data splitting are provided in Section 16.14 (in the Appendix).\n\n\nTable 13.2: Overview of the evaluation settings.\n\n\n\n\n\n\n\n\n\neval\ntrain\ntest\nfunction\ncomment\n\n\n\n\n\"train_hold_out\"\n\\(\\checkmark\\)\n\ntrain_one_epoch(), validate_one_epoch() for early stopping\nsplits the train data set internally\n\n\n\"test_hold_out\"\n\\(\\checkmark\\)\n\\(\\checkmark\\)\ntrain_one_epoch(), validate_one_epoch() for early stopping\nuse the test data set for validate_one_epoch()\n\n\n\"train_cv\"\n\\(\\checkmark\\)\n\nevaluate_cv(net, train)\nCV using the train data set\n\n\n\"test_cv\"\n\n\\(\\checkmark\\)\nevaluate_cv(net, test)\nCV using the test data set . Identical to \"train_cv\", uses only test data.\n\n\n\n\n\n\n13.7.3.2 Settings for the Final Evaluation of the Tuned Architecture\n\n13.7.3.2.1 Training of the Tuned Architecture\ntrain_tuned(model, train): train the model with the best hyperparameter configuration (or simply the default) on the training data set. It splits the traindata into new train and validation sets using create_train_val_data_loaders(), which calls torch.utils.data.random_split() internally. Currently, 60% of the data is used for training and 40% for validation. The train data is used for training the model with train_hold_out(). The validation data is used for early stopping using validate_fold_or_hold_out() on the validation data set.\n\n\n13.7.3.2.2 Testing of the Tuned Architecture\ntest_tuned(model, test): test the model on the test data set. No data splitting is performed. The (trained) model is evaluated using the validate_fold_or_hold_out() function. Note: During training, shuffle is set to True, whereas during testing, shuffle is set to False.\nSection 16.14.1.4 describes the final evaluation of the tuned architecture."
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#sec-loss-functions",
    "href": "14_spot_ray_hpt_torch_cifar10.html#sec-loss-functions",
    "title": "13  Hyperparameter Tuning for PyTorch With spotPython",
    "section": "13.8 Evaluation: Loss Functions and Metrics",
    "text": "13.8 Evaluation: Loss Functions and Metrics\nThe key \"loss_function\" specifies the loss function which is used during the optimization. There are several different loss functions under PyTorch’s nn package. For example, a simple loss is MSELoss, which computes the mean-squared error between the output and the target. In this tutorial we will use CrossEntropyLoss, because it is also used in the PyTorch tutorial.\n\nfrom torch.nn import CrossEntropyLoss\nloss_function = CrossEntropyLoss()\nfun_control.update({\"loss_function\": loss_function})\n\nIn addition to the loss functions, spotPython provides access to a large number of metrics.\n\nThe key \"metric_sklearn\" is used for metrics that follow the scikit-learn conventions.\nThe key \"river_metric\" is used for the river based evaluation (Montiel et al. 2021) via eval_oml_iter_progressive, and\nthe key \"metric_torch\" is used for the metrics from TorchMetrics.\n\nTorchMetrics is a collection of more than 90 PyTorch metrics, see https://torchmetrics.readthedocs.io/en/latest/. Because the PyTorch tutorial uses the accuracy as metric, we use the same metric here. Currently, accuracy is computed in the tutorial’s example code. We will use TorchMetrics instead, because it offers more flexibilty, e.g., it can be used for regression and classification. Furthermore, TorchMetrics offers the following advantages:\n* A standardized interface to increase reproducibility\n* Reduces Boilerplate\n* Distributed-training compatible\n* Rigorously tested\n* Automatic accumulation over batches\n* Automatic synchronization between multiple devices\nTherefore, we set\n\nimport torchmetrics\nmetric_torch = torchmetrics.Accuracy(task=\"multiclass\", num_classes=10).to(fun_control[\"device\"])\nfun_control.update({\"metric_torch\": metric_torch})\n\n\nloss_function = CrossEntropyLoss()\nweights = 1.0\nshuffle = True\neval = \"train_hold_out\"\nshow_batch_interval = 100_000\npath=\"torch_model.pt\"\n\nfun_control.update({\n               \"data_dir\": None,\n               \"checkpoint_dir\": None,\n               \"horizon\": None,\n               \"oml_grace_period\": None,\n               \"weights\": weights,\n               \"step\": None,\n               \"log_level\": 50,\n               \"weight_coeff\": None,\n               \"metric_river\": None,\n               \"metric_sklearn\": None,\n               \"loss_function\": loss_function,\n               \"shuffle\": shuffle,\n               \"eval\": eval,\n               \"show_batch_interval\": show_batch_interval,\n               \"path\": path,\n               })"
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#sec-prepare-spot-call",
    "href": "14_spot_ray_hpt_torch_cifar10.html#sec-prepare-spot-call",
    "title": "13  Hyperparameter Tuning for PyTorch With spotPython",
    "section": "13.9 Preparing the SPOT Call",
    "text": "13.9 Preparing the SPOT Call\nThe following code passes the information about the parameter ranges and bounds to spot.\nNow, the dictionary fun_control contains all information needed for the hyperparameter tuning. Before the hyperparameter tuning is started, it is recommended to take a look at the experimental design. The method gen_design_table generates a design table as follows:\n\nfrom spotPython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control))\n\n| name         | type   | default   |   lower |   upper | transform             |\n|--------------|--------|-----------|---------|---------|-----------------------|\n| l1           | int    | 5         |     2   |     9   | transform_power_2_int |\n| l2           | int    | 5         |     2   |     9   | transform_power_2_int |\n| lr_mult      | float  | 1.0       |     1   |     1   | None                  |\n| batch_size   | int    | 4         |     1   |     5   | transform_power_2_int |\n| epochs       | int    | 3         |     3   |     4   | transform_power_2_int |\n| k_folds      | int    | 1         |     0   |     0   | None                  |\n| patience     | int    | 5         |     3   |     3   | None                  |\n| optimizer    | factor | SGD       |     0   |     9   | None                  |\n| sgd_momentum | float  | 0.0       |     0.9 |     0.9 | None                  |\n\n\nThis allows to check if all information is available and if the information is correct. Table 14.3 shows the experimental design for the hyperparameter tuning. The table shows the hyperparameters, their types, default values, lower and upper bounds, and the transformation function. The transformation function is used to transform the hyperparameter values from the unit hypercube to the original domain. The transformation function is applied to the hyperparameter values before the evaluation of the objective function. Hyperparameter transformations are shown in the column “transform”, e.g., the l1 default is 5, which results in the value \\(2^5 = 32\\) for the network, because the transformation transform_power_2_int was selected in the JSON file. The default value of the batch_size is set to 4, which results in a batch size of \\(2^4 = 16\\).\n\n\nTable 13.3: Experimental design for the hyperparameter tuning.\n\n\n\n\n\n\n\n\n\n\nname\ntype\ndefault\nlower\nupper\ntransform\n\n\n\n\nl1\nint\n5\n2\n9\ntransform_power_2_int\n\n\nl2\nint\n5\n2\n9\ntransform_power_2_int\n\n\nlr_mult\nfloat\n1.0\n1\n1\nNone\n\n\nbatch_size\nint\n4\n1\n5\ntransform_power_2_int\n\n\nepochs\nint\n3\n3\n4\ntransform_power_2_int\n\n\nk_folds\nint\n1\n0\n0\nNone\n\n\npatience\nint\n5\n3\n3\nNone\n\n\noptimizer\nfactor\nSGD\n0\n9\nNone\n\n\nsgd_momentum\nfloat\n0.0\n0.9\n0.9\nNone"
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#sec-the-objective-function",
    "href": "14_spot_ray_hpt_torch_cifar10.html#sec-the-objective-function",
    "title": "13  Hyperparameter Tuning for PyTorch With spotPython",
    "section": "13.10 The Objective Function fun_torch",
    "text": "13.10 The Objective Function fun_torch\nThe objective function fun_torch is selected next. It implements an interface from PyTorch’s training, validation, and testing methods to spotPython.\n\nfrom spotPython.fun.hypertorch import HyperTorch\nfun = HyperTorch().fun_torch"
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#sec-default-hyperparameters",
    "href": "14_spot_ray_hpt_torch_cifar10.html#sec-default-hyperparameters",
    "title": "13  Hyperparameter Tuning for PyTorch With spotPython",
    "section": "13.11 Using Default Hyperparameters or Results from Previous Runs",
    "text": "13.11 Using Default Hyperparameters or Results from Previous Runs\nWe add the default setting to the initial design:\n\nfrom spotPython.hyperparameters.values import get_default_hyperparameters_as_array\nhyper_dict=TorchHyperDict().load()\nX_start = get_default_hyperparameters_as_array(fun_control, hyper_dict)"
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#sec-call-the-hyperparameter-tuner",
    "href": "14_spot_ray_hpt_torch_cifar10.html#sec-call-the-hyperparameter-tuner",
    "title": "13  Hyperparameter Tuning for PyTorch With spotPython",
    "section": "13.12 Starting the Hyperparameter Tuning",
    "text": "13.12 Starting the Hyperparameter Tuning\nThe spotPython hyperparameter tuning is started by calling the Spot function. Here, we will run the tuner for approximately 30 minutes (max_time). Note: the initial design is always evaluated in the spotPython run. As a consequence, the run may take longer than specified by max_time, because the evaluation time of initial design (here: init_size, 10 points) is performed independently of max_time.\n\nfrom spotPython.spot import spot\nfrom math import inf\nimport numpy as np\nspot_tuner = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = inf,\n                   fun_repeats = 1,\n                   max_time = MAX_TIME,\n                   noise = False,\n                   tolerance_x = np.sqrt(np.spacing(1)),\n                   var_type = var_type,\n                   var_name = var_name,\n                   infill_criterion = \"y\",\n                   n_points = 1,\n                   seed=123,\n                   log_level = 50,\n                   show_models= False,\n                   show_progress= True,\n                   fun_control = fun_control,\n                   design_control={\"init_size\": INIT_SIZE,\n                                   \"repeats\": 1},\n                   surrogate_control={\"noise\": True,\n                                      \"cod_type\": \"norm\",\n                                      \"min_theta\": -4,\n                                      \"max_theta\": 3,\n                                      \"n_theta\": len(var_name),\n                                      \"model_fun_evals\": 10_000,\n                                      \"log_level\": 50\n                                      })\nspot_tuner.run(X_start=X_start)\n\n\nconfig: {'l1': 128, 'l2': 8, 'lr_mult': 1.0, 'batch_size': 32, 'epochs': 16, 'k_folds': 0, 'patience': 3, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 1.6407620010375976\nAccuracy on hold-out set: 0.38385\nMulticlassAccuracy value on hold-out data: 0.38385000824928284\nEpoch: 2\n\n\nLoss on hold-out set: 1.5115755756378173\nAccuracy on hold-out set: 0.43725\nMulticlassAccuracy value on hold-out data: 0.4372499883174896\nEpoch: 3\n\n\nLoss on hold-out set: 1.4078164987564088\nAccuracy on hold-out set: 0.4836\nMulticlassAccuracy value on hold-out data: 0.483599990606308\nEpoch: 4\n\n\nLoss on hold-out set: 1.348567317390442\nAccuracy on hold-out set: 0.5118\nMulticlassAccuracy value on hold-out data: 0.5117999911308289\nEpoch: 5\n\n\nLoss on hold-out set: 1.281852014541626\nAccuracy on hold-out set: 0.5404\nMulticlassAccuracy value on hold-out data: 0.5404000282287598\nEpoch: 6\n\n\nLoss on hold-out set: 1.2834273971557617\nAccuracy on hold-out set: 0.5371\nMulticlassAccuracy value on hold-out data: 0.5371000170707703\nEpoch: 7\n\n\nLoss on hold-out set: 1.2577076998710632\nAccuracy on hold-out set: 0.56025\nMulticlassAccuracy value on hold-out data: 0.5602499842643738\nEpoch: 8\n\n\nLoss on hold-out set: 1.209896249961853\nAccuracy on hold-out set: 0.56935\nMulticlassAccuracy value on hold-out data: 0.569350004196167\nEpoch: 9\n\n\nLoss on hold-out set: 1.2036437366485595\nAccuracy on hold-out set: 0.58215\nMulticlassAccuracy value on hold-out data: 0.5821499824523926\nEpoch: 10\n\n\nLoss on hold-out set: 1.1735747277259827\nAccuracy on hold-out set: 0.59565\nMulticlassAccuracy value on hold-out data: 0.5956500172615051\nEpoch: 11\n\n\nLoss on hold-out set: 1.193840849685669\nAccuracy on hold-out set: 0.58775\nMulticlassAccuracy value on hold-out data: 0.5877500176429749\nEpoch: 12\n\n\nLoss on hold-out set: 1.1496929738998414\nAccuracy on hold-out set: 0.60655\nMulticlassAccuracy value on hold-out data: 0.6065499782562256\nEpoch: 13\n\n\nLoss on hold-out set: 1.1579737644195556\nAccuracy on hold-out set: 0.60475\nMulticlassAccuracy value on hold-out data: 0.6047499775886536\nEpoch: 14\n\n\nLoss on hold-out set: 1.139996582508087\nAccuracy on hold-out set: 0.61355\nMulticlassAccuracy value on hold-out data: 0.6135500073432922\nEpoch: 15\n\n\nLoss on hold-out set: 1.1740305074691773\nAccuracy on hold-out set: 0.6037\nMulticlassAccuracy value on hold-out data: 0.6036999821662903\nEpoch: 16\n\n\nLoss on hold-out set: 1.1771300091743468\nAccuracy on hold-out set: 0.6048\nMulticlassAccuracy value on hold-out data: 0.6047999858856201\nReturned to Spot: Validation loss: 1.1771300091743468\n----------------------------------------------\n\nconfig: {'l1': 16, 'l2': 16, 'lr_mult': 1.0, 'batch_size': 8, 'epochs': 8, 'k_folds': 0, 'patience': 3, 'optimizer': 'NAdam', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 1.4906662562847137\nAccuracy on hold-out set: 0.45465\nMulticlassAccuracy value on hold-out data: 0.45465001463890076\nEpoch: 2\n\n\nLoss on hold-out set: 1.397828810453415\nAccuracy on hold-out set: 0.5029\nMulticlassAccuracy value on hold-out data: 0.5029000043869019\nEpoch: 3\n\n\nLoss on hold-out set: 1.3394449212312698\nAccuracy on hold-out set: 0.52165\nMulticlassAccuracy value on hold-out data: 0.5216500163078308\nEpoch: 4\n\n\nLoss on hold-out set: 1.365410689330101\nAccuracy on hold-out set: 0.51825\nMulticlassAccuracy value on hold-out data: 0.5182499885559082\nEpoch: 5\n\n\nLoss on hold-out set: 1.3245867946863175\nAccuracy on hold-out set: 0.5405\nMulticlassAccuracy value on hold-out data: 0.5404999852180481\nEpoch: 6\n\n\nLoss on hold-out set: 1.3159036002576352\nAccuracy on hold-out set: 0.54765\nMulticlassAccuracy value on hold-out data: 0.5476499795913696\nEpoch: 7\n\n\nLoss on hold-out set: 1.2950417346358298\nAccuracy on hold-out set: 0.5502\nMulticlassAccuracy value on hold-out data: 0.5501999855041504\nEpoch: 8\n\n\nLoss on hold-out set: 1.2354189117491245\nAccuracy on hold-out set: 0.5786\nMulticlassAccuracy value on hold-out data: 0.5785999894142151\nReturned to Spot: Validation loss: 1.2354189117491245\n----------------------------------------------\n\nconfig: {'l1': 256, 'l2': 128, 'lr_mult': 1.0, 'batch_size': 2, 'epochs': 16, 'k_folds': 0, 'patience': 3, 'optimizer': 'RMSprop', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.3130746121287347\nAccuracy on hold-out set: 0.09925\nMulticlassAccuracy value on hold-out data: 0.09925000369548798\nEpoch: 2\n\n\nLoss on hold-out set: 2.3117747981786727\nAccuracy on hold-out set: 0.0963\nMulticlassAccuracy value on hold-out data: 0.09629999846220016\nEpoch: 3\n\n\nLoss on hold-out set: 2.3058304040908815\nAccuracy on hold-out set: 0.099\nMulticlassAccuracy value on hold-out data: 0.0989999994635582\nEpoch: 4\n\n\nLoss on hold-out set: 2.3071607283115387\nAccuracy on hold-out set: 0.09995\nMulticlassAccuracy value on hold-out data: 0.09995000064373016\nEpoch: 5\n\n\nLoss on hold-out set: 2.3054092252016067\nAccuracy on hold-out set: 0.0963\nMulticlassAccuracy value on hold-out data: 0.09629999846220016\nEpoch: 6\n\n\nLoss on hold-out set: 2.3054050130844117\nAccuracy on hold-out set: 0.0986\nMulticlassAccuracy value on hold-out data: 0.09860000014305115\nEpoch: 7\n\n\nLoss on hold-out set: 2.3060812525987626\nAccuracy on hold-out set: 0.10005\nMulticlassAccuracy value on hold-out data: 0.10005000233650208\nEpoch: 8\n\n\nLoss on hold-out set: 2.305261432003975\nAccuracy on hold-out set: 0.0992\nMulticlassAccuracy value on hold-out data: 0.09920000284910202\nEpoch: 9\n\n\nLoss on hold-out set: 2.307623797297478\nAccuracy on hold-out set: 0.099\nMulticlassAccuracy value on hold-out data: 0.0989999994635582\nEpoch: 10\n\n\nLoss on hold-out set: 2.3064984451293946\nAccuracy on hold-out set: 0.0992\nMulticlassAccuracy value on hold-out data: 0.09920000284910202\nEpoch: 11\n\n\nLoss on hold-out set: 2.3046734210968016\nAccuracy on hold-out set: 0.09905\nMulticlassAccuracy value on hold-out data: 0.09905000030994415\nEpoch: 12\n\n\nLoss on hold-out set: 2.305781009411812\nAccuracy on hold-out set: 0.0991\nMulticlassAccuracy value on hold-out data: 0.09910000115633011\nEpoch: 13\n\n\nLoss on hold-out set: 2.3111606400489806\nAccuracy on hold-out set: 0.0963\nMulticlassAccuracy value on hold-out data: 0.09629999846220016\nEpoch: 14\n\n\nLoss on hold-out set: 2.311051878976822\nAccuracy on hold-out set: 0.10035\nMulticlassAccuracy value on hold-out data: 0.10034999996423721\nEarly stopping at epoch 13\nReturned to Spot: Validation loss: 2.311051878976822\n----------------------------------------------\n\nconfig: {'l1': 8, 'l2': 32, 'lr_mult': 1.0, 'batch_size': 4, 'epochs': 8, 'k_folds': 0, 'patience': 3, 'optimizer': 'Adamax', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 1.613371852812171\nAccuracy on hold-out set: 0.4163\nMulticlassAccuracy value on hold-out data: 0.4162999987602234\nEpoch: 2\n\n\nLoss on hold-out set: 1.4575995494484901\nAccuracy on hold-out set: 0.48365\nMulticlassAccuracy value on hold-out data: 0.48364999890327454\nEpoch: 3\n\n\nLoss on hold-out set: 1.3457479530125855\nAccuracy on hold-out set: 0.52185\nMulticlassAccuracy value on hold-out data: 0.5218499898910522\nEpoch: 4\n\n\nLoss on hold-out set: 1.3188829038433731\nAccuracy on hold-out set: 0.5359\nMulticlassAccuracy value on hold-out data: 0.5358999967575073\nEpoch: 5\n\n\nLoss on hold-out set: 1.3046935267955064\nAccuracy on hold-out set: 0.54515\nMulticlassAccuracy value on hold-out data: 0.5451499819755554\nEpoch: 6\n\n\nLoss on hold-out set: 1.2626423230707646\nAccuracy on hold-out set: 0.5599\nMulticlassAccuracy value on hold-out data: 0.5598999857902527\nEpoch: 7\n\n\nLoss on hold-out set: 1.2433292634733022\nAccuracy on hold-out set: 0.5663\nMulticlassAccuracy value on hold-out data: 0.5662999749183655\nEpoch: 8\n\n\nLoss on hold-out set: 1.2297281091902406\nAccuracy on hold-out set: 0.5752\nMulticlassAccuracy value on hold-out data: 0.5752000212669373\nReturned to Spot: Validation loss: 1.2297281091902406\n----------------------------------------------\n\nconfig: {'l1': 64, 'l2': 512, 'lr_mult': 1.0, 'batch_size': 16, 'epochs': 16, 'k_folds': 0, 'patience': 3, 'optimizer': 'Adagrad', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 1.5264244680404664\nAccuracy on hold-out set: 0.43885\nMulticlassAccuracy value on hold-out data: 0.4388499855995178\nEpoch: 2\n\n\nLoss on hold-out set: 1.4376148431301117\nAccuracy on hold-out set: 0.4776\nMulticlassAccuracy value on hold-out data: 0.47760000824928284\nEpoch: 3\n\n\nLoss on hold-out set: 1.3634849273204803\nAccuracy on hold-out set: 0.5071\nMulticlassAccuracy value on hold-out data: 0.507099986076355\nEpoch: 4\n\n\nLoss on hold-out set: 1.325830283164978\nAccuracy on hold-out set: 0.5236\nMulticlassAccuracy value on hold-out data: 0.5235999822616577\nEpoch: 5\n\n\nLoss on hold-out set: 1.2879970479488372\nAccuracy on hold-out set: 0.53965\nMulticlassAccuracy value on hold-out data: 0.539650022983551\nEpoch: 6\n\n\nLoss on hold-out set: 1.2630202839851379\nAccuracy on hold-out set: 0.5514\nMulticlassAccuracy value on hold-out data: 0.5514000058174133\nEpoch: 7\n\n\nLoss on hold-out set: 1.243753415107727\nAccuracy on hold-out set: 0.56035\nMulticlassAccuracy value on hold-out data: 0.5603500008583069\nEpoch: 8\n\n\nLoss on hold-out set: 1.2362763473510743\nAccuracy on hold-out set: 0.5632\nMulticlassAccuracy value on hold-out data: 0.5631999969482422\nEpoch: 9\n\n\nLoss on hold-out set: 1.2129749362945557\nAccuracy on hold-out set: 0.57365\nMulticlassAccuracy value on hold-out data: 0.5736500024795532\nEpoch: 10\n\n\nLoss on hold-out set: 1.2045342101097107\nAccuracy on hold-out set: 0.572\nMulticlassAccuracy value on hold-out data: 0.5720000267028809\nEpoch: 11\n\n\nLoss on hold-out set: 1.1907189908504485\nAccuracy on hold-out set: 0.58\nMulticlassAccuracy value on hold-out data: 0.5799999833106995\nEpoch: 12\n\n\nLoss on hold-out set: 1.1857004568099976\nAccuracy on hold-out set: 0.5831\nMulticlassAccuracy value on hold-out data: 0.5831000208854675\nEpoch: 13\n\n\nLoss on hold-out set: 1.1769522353887558\nAccuracy on hold-out set: 0.58695\nMulticlassAccuracy value on hold-out data: 0.5869500041007996\nEpoch: 14\n\n\nLoss on hold-out set: 1.1704488521814347\nAccuracy on hold-out set: 0.5876\nMulticlassAccuracy value on hold-out data: 0.5875999927520752\nEpoch: 15\n\n\nLoss on hold-out set: 1.1685623241186143\nAccuracy on hold-out set: 0.58775\nMulticlassAccuracy value on hold-out data: 0.5877500176429749\nEpoch: 16\n\n\nLoss on hold-out set: 1.1654875667572022\nAccuracy on hold-out set: 0.5915\nMulticlassAccuracy value on hold-out data: 0.5914999842643738\nReturned to Spot: Validation loss: 1.1654875667572022\n----------------------------------------------\n\nconfig: {'l1': 64, 'l2': 256, 'lr_mult': 1.0, 'batch_size': 16, 'epochs': 16, 'k_folds': 0, 'patience': 3, 'optimizer': 'Adagrad', 'sgd_momentum': 0.9}\n\n\nEpoch: 1\n\n\nLoss on hold-out set: 1.5380939059257508\nAccuracy on hold-out set: 0.43495\nMulticlassAccuracy value on hold-out data: 0.43494999408721924\nEpoch: 2\n\n\nLoss on hold-out set: 1.4428960076332091\nAccuracy on hold-out set: 0.46975\nMulticlassAccuracy value on hold-out data: 0.46974998712539673\nEpoch: 3\n\n\nLoss on hold-out set: 1.407230632686615\nAccuracy on hold-out set: 0.48245\nMulticlassAccuracy value on hold-out data: 0.482450008392334\nEpoch: 4\n\n\nLoss on hold-out set: 1.3729929149627687\nAccuracy on hold-out set: 0.50175\nMulticlassAccuracy value on hold-out data: 0.5017499923706055\nEpoch: 5\n\n\nLoss on hold-out set: 1.3355705509185791\nAccuracy on hold-out set: 0.5164\nMulticlassAccuracy value on hold-out data: 0.5163999795913696\nEpoch: 6\n\n\nLoss on hold-out set: 1.3258145987987517\nAccuracy on hold-out set: 0.52215\nMulticlassAccuracy value on hold-out data: 0.5221499800682068\nEpoch: 7\n\n\nLoss on hold-out set: 1.31133931183815\nAccuracy on hold-out set: 0.5303\nMulticlassAccuracy value on hold-out data: 0.5303000211715698\nEpoch: 8\n\n\nLoss on hold-out set: 1.2895314261436461\nAccuracy on hold-out set: 0.5363\nMulticlassAccuracy value on hold-out data: 0.536300003528595\nEpoch: 9\n\n\nLoss on hold-out set: 1.2797864485502244\nAccuracy on hold-out set: 0.5394\nMulticlassAccuracy value on hold-out data: 0.5393999814987183\nEpoch: 10\n\n\nLoss on hold-out set: 1.2690049079418182\nAccuracy on hold-out set: 0.5442\nMulticlassAccuracy value on hold-out data: 0.5442000031471252\nEpoch: 11\n\n\nLoss on hold-out set: 1.2654052600383758\nAccuracy on hold-out set: 0.54285\nMulticlassAccuracy value on hold-out data: 0.5428500175476074\nEpoch: 12\n\n\nLoss on hold-out set: 1.2607907362937927\nAccuracy on hold-out set: 0.5473\nMulticlassAccuracy value on hold-out data: 0.5472999811172485\nEpoch: 13\n\n\nLoss on hold-out set: 1.2532444564819336\nAccuracy on hold-out set: 0.55245\nMulticlassAccuracy value on hold-out data: 0.5524500012397766\nEpoch: 14\n\n\nLoss on hold-out set: 1.2344400520801544\nAccuracy on hold-out set: 0.5563\nMulticlassAccuracy value on hold-out data: 0.5562999844551086\nEpoch: 15\n\n\nLoss on hold-out set: 1.2258455026626587\nAccuracy on hold-out set: 0.56095\nMulticlassAccuracy value on hold-out data: 0.560949981212616\nEpoch: 16\n\n\nLoss on hold-out set: 1.2250324273586273\nAccuracy on hold-out set: 0.5608\nMulticlassAccuracy value on hold-out data: 0.5608000159263611\nReturned to Spot: Validation loss: 1.2250324273586273\n----------------------------------------------\nspotPython tuning: 1.1654875667572022 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x14cccb5b0&gt;\n\n\nDuring the run, the following output is shown:\nconfig: {'l1': 128, 'l2': 8, 'lr_mult': 1.0, 'batch_size': 32,\n    'epochs': 16, 'k_folds': 0, 'patience': 3,\n    'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1\nLoss on hold-out set: 1.5143253986358642\nAccuracy on hold-out set: 0.4447\nMulticlassAccuracy value on hold-out data: 0.4447000026702881\nEpoch: 2\n...\nEpoch: 15\nLoss on hold-out set: 1.2061678514480592\nAccuracy on hold-out set: 0.59505\nMulticlassAccuracy value on hold-out data: 0.5950499773025513\nEarly stopping at epoch 14\nReturned to Spot: Validation loss: 1.2061678514480592\n----------------------------------------------"
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#sec-tensorboard",
    "href": "14_spot_ray_hpt_torch_cifar10.html#sec-tensorboard",
    "title": "13  Hyperparameter Tuning for PyTorch With spotPython",
    "section": "13.13 Tensorboard",
    "text": "13.13 Tensorboard\nThe textual output shown in the console (or code cell) can be visualized with Tensorboard.\n\n13.13.1 Tensorboard: Start Tensorboard\nStart TensorBoard through the command line to visualize data you logged. Specify the root log directory as used in fun_control = fun_control_init(task=\"regression\", tensorboard_path=\"runs/24_spot_torch_regression\") as the tensorboard_path. The argument logdir points to directory where TensorBoard will look to find event files that it can display. TensorBoard will recursively walk the directory structure rooted at logdir, looking for .tfevents. files.\ntensorboard --logdir=runs\nGo to the URL it provides or to http://localhost:6006/. The following figures show some screenshots of Tensorboard.\n\n\n\nFigure 13.1: Tensorboard\n\n\n\n\n\nFigure 13.2: Tensorboard\n\n\n\n\n13.13.2 Saving the State of the Notebook\nThe state of the notebook can be saved and reloaded as follows:\n\nimport pickle\nSAVE = False\nLOAD = False\n\nif SAVE:\n    result_file_name = \"res_\" + experiment_name + \".pkl\"\n    with open(result_file_name, 'wb') as f:\n        pickle.dump(spot_tuner, f)\n\nif LOAD:\n    result_file_name = \"add_the_name_of_the_result_file_here.pkl\"\n    with open(result_file_name, 'rb') as f:\n        spot_tuner =  pickle.load(f)"
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#sec-results",
    "href": "14_spot_ray_hpt_torch_cifar10.html#sec-results",
    "title": "13  Hyperparameter Tuning for PyTorch With spotPython",
    "section": "13.14 Results",
    "text": "13.14 Results\nAfter the hyperparameter tuning run is finished, the progress of the hyperparameter tuning can be visualized. The following code generates the progress plot from Figure 14.4.\n\nspot_tuner.plot_progress(log_y=False, \n    filename=\"./figures/\" + experiment_name+\"_progress.png\")\n\n\n\n\nProgress plot. Black dots denote results from the initial design. Red dots illustrate the improvement found by the surrogate model based optimization.\n\n\n\n\n\n\n\nFigure 13.3: Progress plot. Black dots denote results from the initial design. Red dots illustrate the improvement found by the surrogate model based optimization (surrogate model based optimization).\n\n\nFigure 14.4 shows a typical behaviour that can be observed in many hyperparameter studies (Bartz et al. 2022): the largest improvement is obtained during the evaluation of the initial design. The surrogate model based optimization-optimization with the surrogate refines the results. Figure 14.4 also illustrates one major difference between ray[tune] as used in PyTorch (2023a) and spotPython: the ray[tune] uses a random search and will generate results similar to the black dots, whereas spotPython uses a surrogate model based optimization and presents results represented by red dots in Figure 14.4. The surrogate model based optimization is considered to be more efficient than a random search, because the surrogate model guides the search towards promising regions in the hyperparameter space.\nIn addition to the improved (“optimized”) hyperparameter values, spotPython allows a statistical analysis, e.g., a sensitivity analysis, of the results. We can print the results of the hyperparameter tuning, see Table 14.4. The table shows the hyperparameters, their types, default values, lower and upper bounds, and the transformation function. The column “tuned” shows the tuned values. The column “importance” shows the importance of the hyperparameters. The column “stars” shows the importance of the hyperparameters in stars. The importance is computed by the SPOT software.\n\nprint(gen_design_table(fun_control=fun_control, spot=spot_tuner))\n\n| name         | type   | default   |   lower |   upper |   tuned | transform             |   importance | stars   |\n|--------------|--------|-----------|---------|---------|---------|-----------------------|--------------|---------|\n| l1           | int    | 5         |     2.0 |     9.0 |     6.0 | transform_power_2_int |         0.31 | .       |\n| l2           | int    | 5         |     2.0 |     9.0 |     9.0 | transform_power_2_int |         0.00 |         |\n| lr_mult      | float  | 1.0       |     1.0 |     1.0 |     1.0 | None                  |         0.00 |         |\n| batch_size   | int    | 4         |     1.0 |     5.0 |     4.0 | transform_power_2_int |         0.41 | .       |\n| epochs       | int    | 3         |     3.0 |     4.0 |     4.0 | transform_power_2_int |         0.00 |         |\n| k_folds      | int    | 1         |     0.0 |     0.0 |     0.0 | None                  |         0.00 |         |\n| patience     | int    | 5         |     3.0 |     3.0 |     3.0 | None                  |         0.00 |         |\n| optimizer    | factor | SGD       |     0.0 |     9.0 |     1.0 | None                  |       100.00 | ***     |\n| sgd_momentum | float  | 0.0       |     0.9 |     0.9 |     0.9 | None                  |         0.00 |         |\n\n\n\n\nTable 13.4: Results of the hyperparameter tuning.\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\ntype\ndefault\nlower\nupper\ntuned\ntransform\nimportance\nstars\n\n\n\n\nl1\nint\n5\n2.0\n9.0\n7.0\npow_2_int\n100.00\n***\n\n\nl2\nint\n5\n2.0\n9.0\n3.0\npow_2_int\n96.29\n***\n\n\nlr_mult\nfloat\n1.0\n0.1\n10.0\n0.1\nNone\n0.00\n\n\n\nbatchsize\nint\n4\n1.0\n5.0\n4.0\npow_2_int\n0.00\n\n\n\nepochs\nint\n3\n3.0\n4.0\n4.0\npow_2_int\n4.18\n*\n\n\nk_folds\nint\n2\n0.0\n0.0\n0.0\nNone\n0.00\n\n\n\npatience\nint\n5\n3.0\n3.0\n3.0\nNone\n0.00\n\n\n\noptimizer\nfactor\nSGD\n0.0\n9.0\n3.0\nNone\n0.16\n.\n\n\n\n\nTo visualize the most important hyperparameters, spotPython provides the function plot_importance. The following code generates the importance plot from Figure 14.5.\n\nspot_tuner.plot_importance(threshold=0.025,\n    filename=\"./figures/\" + experiment_name+\"_importance.png\")\n\n\n\n\n\n\n\nFigure 13.4: Variable importance\n\n\n\n13.14.1 Get SPOT Results\nThe architecture of the spotPython model can be obtained by the following code:\n\nfrom spotPython.hyperparameters.values import get_one_core_model_from_X\nX = spot_tuner.to_all_dim(spot_tuner.min_X.reshape(1,-1))\nmodel_spot = get_one_core_model_from_X(X, fun_control)\nmodel_spot\n\nNet_CIFAR10(\n  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))\n  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n  (fc1): Linear(in_features=400, out_features=64, bias=True)\n  (fc2): Linear(in_features=64, out_features=512, bias=True)\n  (fc3): Linear(in_features=512, out_features=10, bias=True)\n)\n\n\nFirst, the numerical representation of the hyperparameters are obtained, i.e., the numpy array X is generated. This array is then used to generate the model model_spot by the function get_one_core_model_from_X. The model model_spot has the following architecture:\nNet_CIFAR10(\n  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))\n  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1,\n    ceil_mode=False)\n  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n  (fc1): Linear(in_features=400, out_features=64, bias=True)\n  (fc2): Linear(in_features=64, out_features=32, bias=True)\n  (fc3): Linear(in_features=32, out_features=10, bias=True)\n)\n\n\n13.14.2 Get Default Hyperparameters\nIn a similar manner as in Section 13.14.1, the default hyperparameters can be obtained.\n\n# fun_control was modified, we generate a new one with the original \n# default hyperparameters\nfrom spotPython.hyperparameters.values import get_one_core_model_from_X\nfc = fun_control\nfc.update({\"core_model_hyper_dict\":\n    hyper_dict[fun_control[\"core_model\"].__name__]})\nmodel_default = get_one_core_model_from_X(X_start, fun_control=fc)\n\nThe corresponding default model has the following architecture:\nNet_CIFAR10(\n  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))\n  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1,\n    ceil_mode=False)\n  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n  (fc1): Linear(in_features=400, out_features=32, bias=True)\n  (fc2): Linear(in_features=32, out_features=32, bias=True)\n  (fc3): Linear(in_features=32, out_features=10, bias=True)\n)\n\n\n13.14.3 Evaluation of the Default Architecture\nThe method train_tuned takes a model architecture without trained weights and trains this model with the train data. The train data is split into train and validation data. The validation data is used for early stopping. The trained model weights are saved as a dictionary.\nThis evaluation is similar to the final evaluation in PyTorch (2023a).\n\nfrom spotPython.torch.traintest import (\n    train_tuned,\n    test_tuned,\n    )\ntrain_tuned(net=model_default, train_dataset=train, shuffle=True,\n        loss_function=fun_control[\"loss_function\"],\n        metric=fun_control[\"metric_torch\"],\n        device = fun_control[\"device\"], show_batch_interval=1_000_000,\n        path=None,\n        task=fun_control[\"task\"],)\n\ntest_tuned(net=model_default, test_dataset=test, \n        loss_function=fun_control[\"loss_function\"],\n        metric=fun_control[\"metric_torch\"],\n        shuffle=False, \n        device = fun_control[\"device\"],\n        task=fun_control[\"task\"],)        \n\nEpoch: 1\n\n\nLoss on hold-out set: 2.3068399251937866\nAccuracy on hold-out set: 0.10195\nMulticlassAccuracy value on hold-out data: 0.10194999724626541\nEpoch: 2\n\n\nLoss on hold-out set: 2.302365822792053\nAccuracy on hold-out set: 0.10375\nMulticlassAccuracy value on hold-out data: 0.10374999791383743\nEpoch: 3\n\n\nLoss on hold-out set: 2.297593585014343\nAccuracy on hold-out set: 0.11785\nMulticlassAccuracy value on hold-out data: 0.11784999817609787\nEpoch: 4\n\n\nLoss on hold-out set: 2.2895865383148193\nAccuracy on hold-out set: 0.16315\nMulticlassAccuracy value on hold-out data: 0.16314999759197235\nEpoch: 5\n\n\nLoss on hold-out set: 2.268256251716614\nAccuracy on hold-out set: 0.19805\nMulticlassAccuracy value on hold-out data: 0.19805000722408295\nEpoch: 6\n\n\nLoss on hold-out set: 2.188951551818848\nAccuracy on hold-out set: 0.2043\nMulticlassAccuracy value on hold-out data: 0.20430000126361847\nEpoch: 7\n\n\nLoss on hold-out set: 2.0881328260421754\nAccuracy on hold-out set: 0.24265\nMulticlassAccuracy value on hold-out data: 0.24265000224113464\nEpoch: 8\n\n\nLoss on hold-out set: 2.0242464301109315\nAccuracy on hold-out set: 0.2596\nMulticlassAccuracy value on hold-out data: 0.2596000134944916\nReturned to Spot: Validation loss: 2.0242464301109315\n----------------------------------------------\n\n\nLoss on hold-out set: 2.019867333030701\nAccuracy on hold-out set: 0.2642\nMulticlassAccuracy value on hold-out data: 0.26420000195503235\nFinal evaluation: Validation loss: 2.019867333030701\nFinal evaluation: Validation metric: 0.26420000195503235\n----------------------------------------------\n\n\n(2.019867333030701, nan, tensor(0.2642, device='mps:0'))\n\n\n\n\n13.14.4 Evaluation of the Tuned Architecture\nThe following code trains the model model_spot. If path is set to a filename, e.g., path = \"model_spot_trained.pt\", the weights of the trained model will be saved to this file.\n\ntrain_tuned(net=model_spot, train_dataset=train,\n        loss_function=fun_control[\"loss_function\"],\n        metric=fun_control[\"metric_torch\"],\n        shuffle=True,\n        device = fun_control[\"device\"],\n        path=None,\n        task=fun_control[\"task\"],)\ntest_tuned(net=model_spot, test_dataset=test,\n            shuffle=False,\n            loss_function=fun_control[\"loss_function\"],\n            metric=fun_control[\"metric_torch\"],\n            device = fun_control[\"device\"],\n            task=fun_control[\"task\"],)\n\nEpoch: 1\n\n\nLoss on hold-out set: 1.4431990340709686\nAccuracy on hold-out set: 0.46365\nMulticlassAccuracy value on hold-out data: 0.4636499881744385\nEpoch: 2\n\n\nLoss on hold-out set: 1.3786589848518371\nAccuracy on hold-out set: 0.4985\nMulticlassAccuracy value on hold-out data: 0.4984999895095825\nEpoch: 3\n\n\nLoss on hold-out set: 1.3271698711872102\nAccuracy on hold-out set: 0.51505\nMulticlassAccuracy value on hold-out data: 0.5150499939918518\nEpoch: 4\n\n\nLoss on hold-out set: 1.3035157971858977\nAccuracy on hold-out set: 0.53195\nMulticlassAccuracy value on hold-out data: 0.5319499969482422\nEpoch: 5\n\n\nLoss on hold-out set: 1.2819443511009216\nAccuracy on hold-out set: 0.5379\nMulticlassAccuracy value on hold-out data: 0.5378999710083008\nEpoch: 6\n\n\nLoss on hold-out set: 1.2620603518009186\nAccuracy on hold-out set: 0.54835\nMulticlassAccuracy value on hold-out data: 0.5483499765396118\nEpoch: 7\n\n\nLoss on hold-out set: 1.256653886604309\nAccuracy on hold-out set: 0.5496\nMulticlassAccuracy value on hold-out data: 0.5496000051498413\nEpoch: 8\n\n\nLoss on hold-out set: 1.244712181377411\nAccuracy on hold-out set: 0.55805\nMulticlassAccuracy value on hold-out data: 0.5580499768257141\nEpoch: 9\n\n\nLoss on hold-out set: 1.2287081483840943\nAccuracy on hold-out set: 0.5607\nMulticlassAccuracy value on hold-out data: 0.560699999332428\nEpoch: 10\n\n\nLoss on hold-out set: 1.2209305030107498\nAccuracy on hold-out set: 0.56385\nMulticlassAccuracy value on hold-out data: 0.5638499855995178\nEpoch: 11\n\n\nLoss on hold-out set: 1.230559185743332\nAccuracy on hold-out set: 0.56665\nMulticlassAccuracy value on hold-out data: 0.5666499733924866\nEpoch: 12\n\n\nLoss on hold-out set: 1.212126215171814\nAccuracy on hold-out set: 0.56825\nMulticlassAccuracy value on hold-out data: 0.5682500004768372\nEpoch: 13\n\n\nLoss on hold-out set: 1.209851747918129\nAccuracy on hold-out set: 0.5722\nMulticlassAccuracy value on hold-out data: 0.5722000002861023\nEpoch: 14\n\n\nLoss on hold-out set: 1.2072066585063934\nAccuracy on hold-out set: 0.5733\nMulticlassAccuracy value on hold-out data: 0.5733000040054321\nEpoch: 15\n\n\nLoss on hold-out set: 1.1993831404685975\nAccuracy on hold-out set: 0.5765\nMulticlassAccuracy value on hold-out data: 0.5764999985694885\nEpoch: 16\n\n\nLoss on hold-out set: 1.1961877880096436\nAccuracy on hold-out set: 0.5761\nMulticlassAccuracy value on hold-out data: 0.5760999917984009\nReturned to Spot: Validation loss: 1.1961877880096436\n----------------------------------------------\n\n\nLoss on hold-out set: 1.1804703751564025\nAccuracy on hold-out set: 0.586\nMulticlassAccuracy value on hold-out data: 0.5860000252723694\nFinal evaluation: Validation loss: 1.1804703751564025\nFinal evaluation: Validation metric: 0.5860000252723694\n----------------------------------------------\n\n\n(1.1804703751564025, nan, tensor(0.5860, device='mps:0'))\n\n\nThese runs will generate output similar to the following:\nLoss on hold-out set: 1.2267619131326675\nAccuracy on hold-out set: 0.58955\nEarly stopping at epoch 13\n\n\n13.14.5 Comparison with Default Hyperparameters and Ray Tune\nTable 14.5 shows the loss and accuracy of the default model, the model with the hyperparameters from SPOT, and the model with the hyperparameters from ray[tune]. The table shows a comparison of the loss and accuracy of the default model, the model with the hyperparameters from SPOT, and the model with the hyperparameters from ray[tune]. ray[tune] only shows the validation loss, because training loss is not reported by ray[tune]\n\n\nTable 13.5: Comparison.\n\n\n\n\n\n\n\n\n\nModel\nValidation Loss\nValidation Accuracy\nLoss\nAccuracy\n\n\n\n\nDefault\n2.1221\n0.2452\n2.1182\n0.2425\n\n\nspotPython\n1.2268\n0.5896\n1.2426\n0.5957\n\n\nray[tune]\n1.1815\n0.5836\n-\n0.5806\n\n\n\n\n\n\n13.14.6 Detailed Hyperparameter Plots\nThe contour plots in this section visualize the interactions of the three most important hyperparameters, l1, l2, and epochs, and optimizer of the surrogate model used to optimize the hyperparameters. Since some of these hyperparameters take fatorial or integer values, sometimes step-like fitness landcapes (or response surfaces) are generated. SPOT draws the interactions of the main hyperparameters by default. It is also possible to visualize all interactions. For this, again refer to the notebook (Bartz-Beielstein 2023).\n\nfilename = \"./figures/\" + experiment_name\nspot_tuner.plot_important_hyperparameter_contour(filename=filename)\n\nl1:  0.30601254606393424\nbatch_size:  0.40888210767007926\noptimizer:  100.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 13.5: Contour plot of the loss as a function of l1 and l2, i.e., the number of neurons in the layers.\n\n\n\n\n\nFigure 13.6: Contour plot of the loss as a function of the number of epochs and the neurons in layer l1.\n\n\n\n\n\nFigure 13.7: Contour plot of the loss as a function of the optimizer and the neurons in layer l1.\n\n\n\n\n\nFigure 13.8: Contour plot of the loss as a function of the number of epochs and the neurons in layer l2.\n\n\n\n\n\nFigure 13.9: Contour plot of the loss as a function of the optimizer and the neurons in layer l2.\n\n\n\n\n\nFigure 13.10: Contour plot of the loss as a function of the optimizer and the number of epochs.\n\n\nThe figures (Figure 13.5 to Figure 13.10) show the contour plots of the loss as a function of the hyperparameters. These plots are very helpful for benchmark studies and for understanding neural networks. spotPython provides additional tools for a visual inspection of the results and give valuable insights into the hyperparameter tuning process. This is especially useful for model explainability, transparency, and trustworthiness. In addition to the contour plots, Figure 14.7 shows the parallel plot of the hyperparameters.\n\nspot_tuner.parallel_plot()\n\n\n                                                \n\n\n\n\n\nFigure 13.11: Parallel plot"
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#sec-summary",
    "href": "14_spot_ray_hpt_torch_cifar10.html#sec-summary",
    "title": "13  Hyperparameter Tuning for PyTorch With spotPython",
    "section": "13.15 Summary and Outlook",
    "text": "13.15 Summary and Outlook\nThis tutorial presents the hyperparameter tuning open source software spotPython for PyTorch. To show its basic features, a comparison with the “official” PyTorch hyperparameter tuning tutorial (PyTorch 2023a) is presented. Some of the advantages of spotPython are:\n\nNumerical and categorical hyperparameters.\nPowerful surrogate models.\nFlexible approach and easy to use.\nSimple JSON files for the specification of the hyperparameters.\nExtension of default and user specified network classes.\nNoise handling techniques.\nInteraction with tensorboard.\n\nCurrently, only rudimentary parallel and distributed neural network training is possible, but these capabilities will be extended in the future. The next version of spotPython will also include a more detailed documentation and more examples.\n\n\n\n\n\n\nImportant\n\n\n\nImportant: This tutorial does not present a complete benchmarking study (Bartz-Beielstein et al. 2020). The results are only preliminary and highly dependent on the local configuration (hard- and software). Our goal is to provide a first impression of the performance of the hyperparameter tuning package spotPython. To demonstrate its capabilities, a quick comparison with ray[tune] was performed. ray[tune] was chosen, because it is presented as “an industry standard tool for distributed hyperparameter tuning.” The results should be interpreted with care."
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#sec-appendix",
    "href": "14_spot_ray_hpt_torch_cifar10.html#sec-appendix",
    "title": "13  Hyperparameter Tuning for PyTorch With spotPython",
    "section": "13.16 Appendix",
    "text": "13.16 Appendix\n\n13.16.1 Sample Output From Ray Tune’s Run\nThe output from ray[tune] could look like this (PyTorch 2023b):\nNumber of trials: 10 (10 TERMINATED)\n------+------+-------------+--------------+---------+------------+--------------------+\n|   l1 |   l2 |          lr |   batch_size |    loss |   accuracy | training_iteration |\n+------+------+-------------+--------------+---------+------------+--------------------|\n|   64 |    4 | 0.00011629  |            2 | 1.87273 |     0.244  |                  2 |\n|   32 |   64 | 0.000339763 |            8 | 1.23603 |     0.567  |                  8 |\n|    8 |   16 | 0.00276249  |           16 | 1.1815  |     0.5836 |                 10 |\n|    4 |   64 | 0.000648721 |            4 | 1.31131 |     0.5224 |                  8 |\n|   32 |   16 | 0.000340753 |            8 | 1.26454 |     0.5444 |                  8 |\n|    8 |    4 | 0.000699775 |            8 | 1.99594 |     0.1983 |                  2 |\n|  256 |    8 | 0.0839654   |           16 | 2.3119  |     0.0993 |                  1 |\n|   16 |  128 | 0.0758154   |           16 | 2.33575 |     0.1327 |                  1 |\n|   16 |    8 | 0.0763312   |           16 | 2.31129 |     0.1042 |                  4 |\n|  128 |   16 | 0.000124903 |            4 | 2.26917 |     0.1945 |                  1 |\n+-----+------+------+-------------+--------------+---------+------------+--------------------+\nBest trial config: {'l1': 8, 'l2': 16, 'lr': 0.00276249, 'batch_size': 16, 'data_dir': '...'}\nBest trial final validation loss: 1.181501\nBest trial final validation accuracy: 0.5836\nBest trial test set accuracy: 0.5806\n\n\n\n\nBartz, Eva, Thomas Bartz-Beielstein, Martin Zaefferer, and Olaf Mersmann, eds. 2022. Hyperparameter Tuning for Machine and Deep Learning with R - A Practical Guide. Springer.\n\n\nBartz-Beielstein, Thomas. 2023. “PyTorch Hyperparameter Tuning with SPOT: Comparison with Ray Tuner and Default Hyperparameters on CIFAR10.” https://github.com/sequential-parameter-optimization/spotPython/blob/main/notebooks/14_spot_ray_hpt_torch_cifar10.ipynb.\n\n\nBartz-Beielstein, Thomas, Carola Doerr, Jakob Bossek, Sowmya Chandrasekaran, Tome Eftimov, Andreas Fischbach, Pascal Kerschke, et al. 2020. “Benchmarking in Optimization: Best Practice and Open Issues.” arXiv. https://arxiv.org/abs/2007.03488.\n\n\nMontiel, Jacob, Max Halford, Saulo Martiello Mastelini, Geoffrey Bolmier, Raphael Sourty, Robin Vaysse, Adil Zouitine, et al. 2021. “River: Machine Learning for Streaming Data in Python.”\n\n\nPyTorch. 2023a. “Hyperparameter Tuning with Ray Tune.” https://pytorch.org/tutorials/beginner/hyperparameter_tuning_tutorial.html.\n\n\n———. 2023b. “Training a Classifier.” https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html."
  },
  {
    "objectID": "14_spot_ray_hpt_torch_cifar10.html#footnotes",
    "href": "14_spot_ray_hpt_torch_cifar10.html#footnotes",
    "title": "13  Hyperparameter Tuning for PyTorch With spotPython",
    "section": "",
    "text": "Alternatively, the source code can be downloaded from gitHub: https://github.com/sequential-parameter-optimization/spotPython.↩︎\nWe were not able to install Ray Tune on our system. Therefore, we used the results from the PyTorch tutorial.↩︎"
  },
  {
    "objectID": "24_spot_torch_regression.html#sec-setup-24",
    "href": "24_spot_torch_regression.html#sec-setup-24",
    "title": "14  Hyperparameter Tuning for PyTorch With spotPython: Regression",
    "section": "14.1 Setup",
    "text": "14.1 Setup\nBefore we consider the detailed experimental setup, we select the parameters that affect run time, initial design size and the device that is used.\n\nMAX_TIME = 1\nINIT_SIZE = 5\nDEVICE = None # \"cpu\" # \"cuda:0\"\n\n\nfrom spotPython.utils.device import getDevice\nDEVICE = getDevice(DEVICE)\nprint(DEVICE)\n\nmps\n\n\n\nimport os\nimport copy\nimport socket\nfrom datetime import datetime\nfrom dateutil.tz import tzlocal\nstart_time = datetime.now(tzlocal())\nHOSTNAME = socket.gethostname().split(\".\")[0]\nexperiment_name = '24-torch' + \"_\" + HOSTNAME + \"_\" + str(MAX_TIME) + \"min_\" + str(INIT_SIZE) + \"init_\" + str(start_time).split(\".\", 1)[0].replace(' ', '_')\nexperiment_name = experiment_name.replace(':', '-')\nprint(experiment_name)\nif not os.path.exists('./figures'):\n    os.makedirs('./figures')\n\n24-torch_bartz09_1min_5init_2023-06-15_05-59-44"
  },
  {
    "objectID": "24_spot_torch_regression.html#initialization-of-the-fun_control-dictionary",
    "href": "24_spot_torch_regression.html#initialization-of-the-fun_control-dictionary",
    "title": "14  Hyperparameter Tuning for PyTorch With spotPython: Regression",
    "section": "14.2 Initialization of the fun_control Dictionary",
    "text": "14.2 Initialization of the fun_control Dictionary\nspotPython uses a Python dictionary for storing the information required for the hyperparameter tuning process. This dictionary is called fun_control and is initialized with the function fun_control_init. The function fun_control_init returns a skeleton dictionary. The dictionary is filled with the required information for the hyperparameter tuning process. It stores the hyperparameter tuning settings, e.g., the deep learning network architecture that should be tuned, the classification (or regression) problem, and the data that is used for the tuning. The dictionary is used as an input for the SPOT function.\n\nfrom spotPython.utils.init import fun_control_init\nfun_control = fun_control_init(task=\"regression\",\n tensorboard_path=\"runs/24_spot_torch_regression\",\n device=DEVICE)"
  },
  {
    "objectID": "24_spot_torch_regression.html#sec-data-loading-24",
    "href": "24_spot_torch_regression.html#sec-data-loading-24",
    "title": "14  Hyperparameter Tuning for PyTorch With spotPython: Regression",
    "section": "14.3 PyTorch Data Loading",
    "text": "14.3 PyTorch Data Loading\n\n# Create dataset\nimport pandas as pd\nimport numpy as np\nfrom sklearn import datasets as sklearn_datasets\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nX, y = sklearn_datasets.make_regression(\n    n_samples=1000, n_features=10, noise=1, random_state=123)\ny = y.reshape(-1, 1)\n\n# Normalize the data\nX_scaler = MinMaxScaler()\nX_scaled = X_scaler.fit_transform(X)\ny_scaler = MinMaxScaler()\ny_scaled = y_scaler.fit_transform(y)\n\n# combine the features and target into a single dataframe named train_df\ntrain_df = pd.DataFrame(np.hstack((X_scaled, y_scaled)))\n\ntarget_column = \"y\"\nn_samples = train_df.shape[0]\nn_features = train_df.shape[1] - 1\ntrain_df.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\nX_train, X_test, y_train, y_test = train_test_split(train_df.drop(target_column,\n    axis=1), \n    train_df[target_column],\n    random_state=42,\n    test_size=0.25)\ntrainset = pd.DataFrame(np.hstack((X_train, np.array(y_train).reshape(-1, 1))))\ntestset = pd.DataFrame(np.hstack((X_test, np.array(y_test).reshape(-1, 1))))\ntrainset.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\ntestset.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\nprint(train_df.shape)\nprint(trainset.shape)\nprint(testset.shape)\n\n(1000, 11)\n(750, 11)\n(250, 11)\n\n\n\nimport torch\nfrom spotPython.torch.dataframedataset import DataFrameDataset\ndtype_x = torch.float32\ndtype_y = torch.float32\ntrain_df = DataFrameDataset(train_df, target_column=target_column,\n    dtype_x=dtype_x, dtype_y=dtype_y)\ntrain = DataFrameDataset(trainset, target_column=target_column,\n    dtype_x=dtype_x, dtype_y=dtype_y)\ntest = DataFrameDataset(testset, target_column=target_column,\n    dtype_x=dtype_x, dtype_y=dtype_y)\nn_samples = len(train)\n\n\nNow we can test the data loading:\n\n\nfrom spotPython.torch.traintest import create_train_val_data_loaders\ntrainloader, testloader = create_train_val_data_loaders(train, 2, True, 0)\nfor i, data in enumerate(trainloader, 0):\n    inputs, labels = data\n    print(inputs.shape)\n    print(labels.shape)\n    print(inputs)\n    print(labels)\n    break\n\ntorch.Size([2, 10])\ntorch.Size([2])\ntensor([[0.3163, 0.1814, 0.6331, 0.3031, 0.1927, 0.5964, 0.7035, 0.5347, 0.7078,\n         0.4439],\n        [0.4570, 0.6765, 0.6100, 0.3040, 0.3819, 0.6163, 0.4936, 0.8727, 0.4437,\n         0.3648]])\ntensor([0.2249, 0.6488])\n\n\n\nSince this works fine, we can add the data loading to the fun_control dictionary:\n\n\n# add the dataset to the fun_control\nfun_control.update({\"data\": train_df, # full dataset,\n               \"train\": train,\n               \"test\": test,\n               \"n_samples\": n_samples,\n               \"target_column\": target_column,})"
  },
  {
    "objectID": "24_spot_torch_regression.html#sec-specification-of-preprocessing-model-24",
    "href": "24_spot_torch_regression.html#sec-specification-of-preprocessing-model-24",
    "title": "14  Hyperparameter Tuning for PyTorch With spotPython: Regression",
    "section": "14.4 Specification of the Preprocessing Model",
    "text": "14.4 Specification of the Preprocessing Model\nAfter the training and test data are specified and added to the fun_control dictionary, spotPython allows the specification of a data preprocessing pipeline, e.g., for the scaling of the data or for the one-hot encoding of categorical variables. The preprocessing model is called prep_model (“preparation” or pre-processing) and includes steps that are not subject to the hyperparameter tuning process. The preprocessing model is specified in the fun_control dictionary. The preprocessing model can be implemented as a sklearn pipeline. The following code shows a typical preprocessing pipeline:\ncategorical_columns = [\"cities\", \"colors\"]\none_hot_encoder = OneHotEncoder(handle_unknown=\"ignore\",\n                                    sparse_output=False)\nprep_model = ColumnTransformer(\n        transformers=[\n             (\"categorical\", one_hot_encoder, categorical_columns),\n         ],\n         remainder=StandardScaler(),\n     )\n\nfun_control.update({\"prep_model\": None})"
  },
  {
    "objectID": "24_spot_torch_regression.html#sec-selection-of-the-algorithm-24",
    "href": "24_spot_torch_regression.html#sec-selection-of-the-algorithm-24",
    "title": "14  Hyperparameter Tuning for PyTorch With spotPython: Regression",
    "section": "14.5 Select algorithm and core_model_hyper_dict",
    "text": "14.5 Select algorithm and core_model_hyper_dict\n\n14.5.1 Implementing a Configurable Neural Network With spotPython\nspotPython includes the Net_lin_reg class which is implemented in the file netregression.py.\nfrom torch import nn\nimport spotPython.torch.netcore as netcore\n\n\nclass Net_lin_reg(netcore.Net_Core):\n    def __init__(\n        self, _L_in, _L_out, l1, dropout_prob, lr_mult,\n        batch_size, epochs, k_folds, patience, optimizer,\n        sgd_momentum\n    ):\n        super(Net_lin_reg, self).__init__(\n            lr_mult=lr_mult,\n            batch_size=batch_size,\n            epochs=epochs,\n            k_folds=k_folds,\n            patience=patience,\n            optimizer=optimizer,\n            sgd_momentum=sgd_momentum,\n        )\n        l2 = max(l1 // 2, 4)\n        self.fc1 = nn.Linear(_L_in, l1)\n        self.fc2 = nn.Linear(l1, l2)\n        self.fc3 = nn.Linear(l2, _L_out)\n        self.relu = nn.ReLU()\n        self.softmax = nn.Softmax(dim=1)\n        self.dropout1 = nn.Dropout(p=dropout_prob)\n        self.dropout2 = nn.Dropout(p=dropout_prob / 2)\n\n    def forward(self, x):\n        x = self.fc1(x)\n        x = self.relu(x)\n        x = self.dropout1(x)\n        x = self.fc2(x)\n        x = self.relu(x)\n        x = self.dropout2(x)\n        x = self.fc3(x)\n        return x\n\n\n14.5.1.1 The Net_Core class\nNet_lin_reg inherits from the class Net_Core which is implemented in the file netcore.py. It implements the additional attributes that are common to all neural network models. The Net_Core class is implemented in the file netcore.py. It implements hyperparameters as attributes, that are not used by the core_model, e.g.:\n\noptimizer (optimizer),\nlearning rate (lr),\nbatch size (batch_size),\nepochs (epochs),\nk_folds (k_folds), and\nearly stopping criterion “patience” (patience).\n\nUsers can add further attributes to the class. The class Net_Core is shown below.\nfrom torch import nn\n\n\nclass Net_Core(nn.Module):\n    def __init__(self, lr_mult, batch_size, epochs, k_folds, patience,\n    optimizer, sgd_momentum):\n        super(Net_Core, self).__init__()\n        self.lr_mult = lr_mult\n        self.batch_size = batch_size\n        self.epochs = epochs\n        self.k_folds = k_folds\n        self.patience = patience\n        self.optimizer = optimizer\n        self.sgd_momentum = sgd_momentum\nWe see that the class Net_lin_reg has additional attributes and does not inherit from nn directly. It adds an additional class, Net_core, that takes care of additional attributes that are common to all neural network models, e.g., the learning rate multiplier lr_mult or the batch size batch_size.\nspotPython’s core_model implements an instance of the Net_lin_reg class. In addition to the basic neural network model, the core_model can use these additional attributes. spotPython provides methods for handling these additional attributes to guarantee 100% compatibility with the PyTorch classes. The method add_core_model_to_fun_control adds the hyperparameters and additional attributes to the fun_control dictionary. The method is shown below.\n\nfrom spotPython.torch.netregression import Net_lin_reg\nfrom spotPython.data.torch_hyper_dict import TorchHyperDict\nfrom spotPython.hyperparameters.values import add_core_model_to_fun_control\ncore_model = Net_lin_reg\nfun_control = add_core_model_to_fun_control(core_model=core_model,\n                              fun_control=fun_control,\n                              hyper_dict=TorchHyperDict,\n                              filename=None)"
  },
  {
    "objectID": "24_spot_torch_regression.html#sec-search-space-24",
    "href": "24_spot_torch_regression.html#sec-search-space-24",
    "title": "14  Hyperparameter Tuning for PyTorch With spotPython: Regression",
    "section": "14.6 The Search Space",
    "text": "14.6 The Search Space\n\n14.6.1 Configuring the Search Space With spotPython\n\n14.6.1.1 The hyper_dict Hyperparameters for the Selected Algorithm\nspotPython uses JSON files for the specification of the hyperparameters. Users can specify their individual JSON files, or they can use the JSON files provided by spotPython. The JSON file for the core_model is called torch_hyper_dict.json.\nspotPython can handle numerical, boolean, and categorical hyperparameters. They can be specified in the JSON file in a similar way as the numerical hyperparameters as shown below. Each entry in the JSON file represents one hyperparameter with the following structure: type, default, transform, lower, and upper.\n\"factor_hyperparameter\": {\n    \"levels\": [\"A\", \"B\", \"C\"],\n    \"type\": \"factor\",\n    \"default\": \"B\",\n    \"transform\": \"None\",\n    \"core_model_parameter_type\": \"str\",\n    \"lower\": 0,\n    \"upper\": 2},\nThe corresponding entries for the Net_lin_reg class are shown below.\n    \"Net_lin_reg\":\n    {\n        \"_L_in\": {\n            \"type\": \"int\",\n            \"default\": 10,\n            \"transform\": \"None\",\n            \"lower\": 10,\n            \"upper\": 10},\n        \"_L_out\": {\n            \"type\": \"int\",\n            \"default\": 1,\n            \"transform\": \"None\",\n            \"lower\": 1,\n            \"upper\": 1},\n        \"l1\": {\n            \"type\": \"int\",\n            \"default\": 3,\n            \"transform\": \"transform_power_2_int\",\n            \"lower\": 3,\n            \"upper\": 8},\n        \"dropout_prob\": {\n            \"type\": \"float\",\n            \"default\": 0.01,\n            \"transform\": \"None\",\n            \"lower\": 0.0,\n            \"upper\": 0.9},\n        \"lr_mult\": {\n            \"type\": \"float\",\n            \"default\": 1.0,\n            \"transform\": \"None\",\n            \"lower\": 0.1,\n            \"upper\": 10.0},\n        \"batch_size\": {\n            \"type\": \"int\",\n            \"default\": 4,\n            \"transform\": \"transform_power_2_int\",\n            \"lower\": 1,\n            \"upper\": 4},\n        \"epochs\": {\n            \"type\": \"int\",\n            \"default\": 4,\n            \"transform\": \"transform_power_2_int\",\n            \"lower\": 4,\n            \"upper\": 9},\n        \"k_folds\": {\n            \"type\": \"int\",\n            \"default\": 1,\n            \"transform\": \"None\",\n            \"lower\": 1,\n            \"upper\": 1},\n        \"patience\": {\n            \"type\": \"int\",\n            \"default\": 2,\n            \"transform\": \"transform_power_2_int\",\n            \"lower\": 1,\n            \"upper\": 5\n        },\n        \"optimizer\": {\n            \"levels\": [\"Adadelta\",\n                       \"Adagrad\",\n                       \"Adam\",\n                       \"AdamW\",\n                       \"SparseAdam\",\n                       \"Adamax\",\n                       \"ASGD\",\n                       \"NAdam\",\n                       \"RAdam\",\n                       \"RMSprop\",\n                       \"Rprop\",\n                       \"SGD\"],\n            \"type\": \"factor\",\n            \"default\": \"SGD\",\n            \"transform\": \"None\",\n            \"class_name\": \"torch.optim\",\n            \"core_model_parameter_type\": \"str\",\n            \"lower\": 0,\n            \"upper\": 12},\n        \"sgd_momentum\": {\n            \"type\": \"float\",\n            \"default\": 0.0,\n            \"transform\": \"None\",\n            \"lower\": 0.0,\n            \"upper\": 1.0}\n    },"
  },
  {
    "objectID": "24_spot_torch_regression.html#sec-modification-of-hyperparameters-24",
    "href": "24_spot_torch_regression.html#sec-modification-of-hyperparameters-24",
    "title": "14  Hyperparameter Tuning for PyTorch With spotPython: Regression",
    "section": "14.7 Modifying the Hyperparameters",
    "text": "14.7 Modifying the Hyperparameters\nspotPython provides functions for modifying the hyperparameters, their bounds and factors as well as for activating and de-activating hyperparameters without re-compilation of the Python source code. These functions are described in the following.\n\n14.7.1 Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model\nAfter specifying the model, the corresponding hyperparameters, their types and bounds are loaded from the JSON file torch_hyper_dict.json. After loading, the user can modify the hyperparameters, e.g., the bounds. spotPython provides a simple rule for de-activating hyperparameters: If the lower and the upper bound are set to identical values, the hyperparameter is de-activated. This is useful for the hyperparameter tuning, because it allows to specify a hyperparameter in the JSON file, but to de-activate it in the fun_control dictionary. This is done in the next step.\n\n\n14.7.2 Modify Hyperparameters of Type numeric and integer (boolean)\n\n# modify the hyperparameter levels\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_bounds\n\nfun_control = modify_hyper_parameter_bounds(fun_control, \"epochs\", bounds=[2, 16])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"patience\", bounds=[3, 7])\n\n\n\n14.7.3 Modify Hyperparameter of Type factor\nIn a similar manner as for the numerical hyperparameters, the categorical hyperparameters can be modified. New configurations can be chosen by adding or deleting levels. For example, the hyperparameter optimizer can be re-configured as follows:\nIn the following setting, two optimizers (\"SGD\" and \"Adam\") will be compared during the spotPython hyperparameter tuning. The hyperparameter optimizer is active.\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_levels\nfun_control = modify_hyper_parameter_levels(fun_control, \"optimizer\",\n    [\"SGD\", \"Adam\"])\n\nThe hyperparameter optimizer can be de-activated by choosing only one value (level), here: \"SGD\".\n\nfun_control = modify_hyper_parameter_levels(fun_control, \"optimizer\", [\"SGD\"])\n\nAs discussed in Section 14.7.4, there are some issues with the LBFGS optimizer. Therefore, the usage of the LBFGS optimizer is not deactivated in spotPython by default. However, the LBFGS optimizer can be activated by adding it to the list of optimizers. Rprop was removed, because it does perform very poorly (as some pre-tests have shown). However, it can also be activated by adding it to the list of optimizers. Since SparseAdam does not support dense gradients, Adam was used instead. Therefore, there are 10 default optimizers:\n\nfun_control = modify_hyper_parameter_levels(fun_control, \"optimizer\",\n    [\"Adadelta\", \"Adagrad\", \"Adam\", \"AdamW\", \"Adamax\", \"ASGD\", \"NAdam\"])\n\n\nfun_control.update({\n               \"_L_in\": n_features,\n               \"_L_out\": 1,})\n\n\n\n14.7.4 Optimizers\nTable 14.1 shows some of the optimizers available in PyTorch:\n\n\nTable 14.1: Optimizers available in PyTorch (selection). “mom” denotes momentum, “weight” weight_decay, “damp” dampening, “nest” nesterov, “lr_sc” learning rate for scaling delta, “mom_dec” for momentum_decay, and “step_s” for step_sizes. The default values are shown in the table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOptimizer\nlr\nmom\nweight\ndamp\nnest\nrho\nlr_sc\nlr_decay\nbetas\nlambd\nalpha\nmom_decay\netas\nstep_s\n\n\n\n\nAdadelta\n-\n-\n0.\n-\n-\n0.9\n1.0\n-\n-\n-\n-\n-\n-\n-\n\n\nAdagrad\n1e-2\n-\n0.\n-\n-\n-\n-\n0.\n-\n-\n-\n-\n-\n-\n\n\nAdam\n1e-3\n-\n0.\n-\n-\n-\n-\n-\n(0.9,0.999)\n-\n-\n-\n-\n-\n\n\nAdamW\n1e-3\n-\n1e-2\n-\n-\n-\n-\n-\n(0.9,0.999)\n-\n-\n-\n-\n-\n\n\nSparseAdam\n1e-3\n-\n-\n-\n-\n-\n-\n-\n(0.9,0.999)\n-\n-\n-\n-\n-\n\n\nAdamax\n2e-3\n-\n0.\n-\n-\n-\n-\n-\n(0.9, 0.999)\n-\n-\n-\n-\n-\n\n\nASGD\n1e-2\n0.9\n0.\n-\nFalse\n-\n-\n-\n-\n1e-4\n0.75\n-\n-\n-\n\n\nLBFGS\n1.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n\n\nNAdam\n2e-3\n-\n0.\n-\n-\n-\n-\n-\n(0.9,0.999)\n-\n-\n0\n-\n-\n\n\nRAdam\n1e-3\n-\n0.\n-\n-\n-\n-\n-\n(0.9,0.999)\n-\n-\n-\n-\n-\n\n\nRMSprop\n1e-2\n0.\n0.\n-\n-\n-\n-\n-\n(0.9,0.999)\n-\n-\n-\n-\n-\n\n\nRprop\n1e-2\n-\n-\n-\n-\n-\n-\n-\n-\n-\n(0.5,1.2)\n(1e-6, 50)\n-\n-\n\n\nSGD\nrequired\n0.\n0.\n0.\nFalse\n-\n-\n-\n-\n-\n-\n-\n-\n-\n\n\n\n\nspotPython implements an optimization handler that maps the optimizer names to the corresponding PyTorch optimizers.\n\n\n\n\n\n\nA note on LBFGS\n\n\n\nWe recommend deactivating PyTorch’s LBFGS optimizer, because it does not perform very well. The PyTorch documentation, see https://pytorch.org/docs/stable/generated/torch.optim.LBFGS.html#torch.optim.LBFGS, states:\n\nThis is a very memory intensive optimizer (it requires additional param_bytes * (history_size + 1) bytes). If it doesn’t fit in memory try reducing the history size, or use a different algorithm.\n\nFurthermore, the LBFGS optimizer is not compatible with the PyTorch tutorial. The reason is that the LBFGS optimizer requires the closure function, which is not implemented in the PyTorch tutorial. Therefore, the LBFGS optimizer is recommended here.\n\n\nSince there are 10 optimizers in the portfolio, it is not recommended tuning the hyperparameters that effect one single optimizer only.\n\n\n\n\n\n\nA note on the learning rate\n\n\n\nspotPython provides a multiplier for the default learning rates, lr_mult, because optimizers use different learning rates. Using a multiplier for the learning rates might enable a simultaneous tuning of the learning rates for all optimizers. However, this is not recommended, because the learning rates are not comparable across optimizers. Therefore, we recommend fixing the learning rate for all optimizers if multiple optimizers are used. This can be done by setting the lower and upper bounds of the learning rate multiplier to the same value as shown below.\n\n\nThus, the learning rate, which affects the SGD optimizer, will be set to a fixed value. We choose the default value of 1e-3 for the learning rate, because it is used in other PyTorch examples (it is also the default value used by spotPython as defined in the optimizer_handler() method). We recommend tuning the learning rate later, when a reduced set of optimizers is fixed. Here, we will demonstrate how to select in a screening phase the optimizers that should be used for the hyperparameter tuning.\nFor the same reason, we will fix the sgd_momentum to 0.9.\n\nfun_control = modify_hyper_parameter_bounds(fun_control,\n    \"lr_mult\", bounds=[1e-3, 1e-3])\nfun_control = modify_hyper_parameter_bounds(fun_control,\n    \"sgd_momentum\", bounds=[0.9, 0.9])"
  },
  {
    "objectID": "24_spot_torch_regression.html#sec-selection-of-target-function-24",
    "href": "24_spot_torch_regression.html#sec-selection-of-target-function-24",
    "title": "14  Hyperparameter Tuning for PyTorch With spotPython: Regression",
    "section": "14.8 Evaluation",
    "text": "14.8 Evaluation\nThe evaluation procedure requires the specification of two elements:\n\nthe way how the data is split into a train and a test set and\nthe loss function (and a metric).\n\n\n14.8.1 Hold-out Data Split and Cross-Validation\nAs a default, spotPython provides a standard hold-out data split and cross validation.\n\n14.8.1.1 Hold-out Data Split\nIf a hold-out data split is used, the data will be partitioned into a training, a validation, and a test data set. The split depends on the setting of the eval parameter. If eval is set to train_hold_out, one data set, usually the original training data set, is split into a new training and a validation data set. The training data set is used for training the model. The validation data set is used for the evaluation of the hyperparameter configuration and early stopping to prevent overfitting. In this case, the original test data set is not used. The following splits are performed in the hold-out setting: \\(\\{\\text{train}_0, \\text{test}\\} \\rightarrow \\{\\text{train}_1, \\text{validation}_1, \\text{test}\\}\\), where \\(\\text{train}_1 \\cup \\text{validation}_1 = \\text{train}_0\\).\n\n\n\n\n\n\nNote\n\n\n\nspotPython returns the hyperparameters of the machine learning and deep learning models, e.g., number of layers, learning rate, or optimizer, but not the model weights. Therefore, after the SPOT run is finished, the corresponding model with the optimized architecture has to be trained again with the best hyperparameter configuration. The training is performed on the training data set. The test data set is used for the final evaluation of the model.\nSummarizing, the following splits are performed in the hold-out setting:\n\nRun spotPython with eval set to train_hold_out to determine the best hyperparameter configuration.\nTrain the model with the best hyperparameter configuration (“architecture”) on the training data set:\n\ntrain_tuned(model_spot, train, \"model_spot.pt\").\n\nTest the model on the test data:\n\ntest_tuned(model_spot, test, \"model_spot.pt\")\n\n\nThese steps will be exemplified in the following sections.\n\n\nIn addition to this hold-out setting, spotPython provides another hold-out setting, where an explicit test data is specified by the user that will be used as the validation set. To choose this option, the eval parameter is set to test_hold_out. In this case, the training data set is used for the model training. Then, the explicitly defined test data set is used for the evaluation of the hyperparameter configuration (the validation).\n\n\n14.8.1.2 Cross-Validation\nThe cross validation setting is used by setting the eval parameter to train_cv or test_cv. In both cases, the data set is split into \\(k\\) folds. The model is trained on \\(k-1\\) folds and evaluated on the remaining fold. This is repeated \\(k\\) times, so that each fold is used exactly once for evaluation. The final evaluation is performed on the test data set. The cross validation setting is useful for small data sets, because it allows to use all data for training and evaluation. However, it is computationally expensive, because the model has to be trained \\(k\\) times.\n\n\n\n\n\n\nNote\n\n\n\nCombinations of the above settings are possible, e.g., cross validation can be used for training and hold-out for evaluation or vice versa. Also, cross validation can be used for training and testing. Because cross validation is not used in the PyTorch tutorial (PyTorch 2023), it is not considered further here.\n\n\n\n\n14.8.1.3 Overview of the Evaluation Settings\n\n14.8.1.3.1 Settings for the Hyperparameter Tuning\nTable 14.2 provides an overview of the training evaluations.\n\n\nTable 14.2: Overview of the evaluation settings.\n\n\n\n\n\n\n\n\n\neval\ntrain\ntest\nfunction\ncomment\n\n\n\n\n\"train_hold_out\"\n\\(\\checkmark\\)\n\ntrain_one_epoch(), validate_one_epoch() for early stopping\nsplits the train data set internally\n\n\n\"test_hold_out\"\n\\(\\checkmark\\)\n\\(\\checkmark\\)\ntrain_one_epoch(), validate_one_epoch() for early stopping\nuse the test data set for validate_one_epoch()\n\n\n\"train_cv\"\n\\(\\checkmark\\)\n\nevaluate_cv(net, train)\nCV using the train data set\n\n\n\"test_cv\"\n\n\\(\\checkmark\\)\nevaluate_cv(net, test)\nCV using the test data set . Identical to \"train_cv\", uses only test data.\n\n\n\n\n\n\"train_cv\" and \"test_cv\" use sklearn.model_selection.KFold() internally.\n\n\n\n\n14.8.1.4 Settings for the Final Evaluation of the Tuned Architecture\n\n14.8.1.4.1 Training of the Tuned Architecture\ntrain_tuned(model, train): train the model with the best hyperparameter configuration (or simply the default) on the training data set. It splits the traindata into new train and validation sets using create_train_val_data_loaders(), which calls torch.utils.data.random_split() internally. Currently, 60% of the data is used for training and 40% for validation. The train data is used for training the model with train_one_epoch(). The validation data is used for early stopping using validate_one_epoch() on the validation data set.\n\n\n14.8.1.4.2 Testing of the Tuned Architecture\ntest_tuned(model, test): test the model on the test data set. No data splitting is performed. The (trained) model is evaluated using the validate_one_epoch() function.\nNote: During training, shuffle is set to True, whereas during testing, shuffle is set to False.\n\n\n\n\n14.8.2 Loss Functions and Metrics\nThe key \"loss_function\" specifies the loss function which is used during the optimization. There are several different loss functions under PyTorch’s nn package. For example, a simple loss is MSELoss, which computes the mean-squared error between the output and the target. In this tutorial we will use CrossEntropyLoss, because it is also used in the PyTorch tutorial.\n\n14.8.2.1 Loss Function\nThe loss function is specified by the key \"loss_function\". We will use MSE loss for the regression task.\n\nfrom torch.nn import MSELoss\nloss_torch = MSELoss()\nfun_control.update({\"loss_function\": loss_torch})\n\nIn addition to the loss functions, spotPython provides access to a large number of metrics.\n\nThe key \"metric_sklearn\" is used for metrics that follow the scikit-learn conventions.\nThe key \"river_metric\" is used for the river based evaluation (Montiel et al. 2021) via eval_oml_iter_progressive, and\nthe key \"metric_torch\" is used for the metrics from TorchMetrics.\n\nTorchMetrics is a collection of more than 90 PyTorch metrics1.\n\nfrom torchmetrics import MeanAbsoluteError\nmetric_torch = MeanAbsoluteError(device=fun_control[\"device\"])\nfun_control.update({\"metric_torch\": metric_torch})"
  },
  {
    "objectID": "24_spot_torch_regression.html#sec-call-the-hyperparameter-tuner-24",
    "href": "24_spot_torch_regression.html#sec-call-the-hyperparameter-tuner-24",
    "title": "14  Hyperparameter Tuning for PyTorch With spotPython: Regression",
    "section": "14.9 Calling the SPOT Function",
    "text": "14.9 Calling the SPOT Function\n\n# extract the variable types, names, and bounds\nfrom spotPython.hyperparameters.values import (get_bound_values,\n    get_var_name,\n    get_var_type,)\nvar_type = get_var_type(fun_control)\nvar_name = get_var_name(fun_control)\nfun_control.update({\"var_type\": var_type,\n                    \"var_name\": var_name})\nlower = get_bound_values(fun_control, \"lower\")\nupper = get_bound_values(fun_control, \"upper\")\n\nNow, the dictionary fun_control contains all information needed for the hyperparameter tuning. Before the hyperparameter tuning is started, it is recommended to take a look at the experimental design. The method gen_design_table generates a design table as follows:\n\nfrom spotPython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control))\n\n| name         | type   | default   |   lower |   upper | transform             |\n|--------------|--------|-----------|---------|---------|-----------------------|\n| _L_in        | int    | 10        |  10     |  10     | None                  |\n| _L_out       | int    | 1         |   1     |   1     | None                  |\n| l1           | int    | 3         |   3     |   8     | transform_power_2_int |\n| dropout_prob | float  | 0.01      |   0     |   0.9   | None                  |\n| lr_mult      | float  | 1.0       |   0.001 |   0.001 | None                  |\n| batch_size   | int    | 4         |   1     |   4     | transform_power_2_int |\n| epochs       | int    | 4         |   2     |  16     | transform_power_2_int |\n| k_folds      | int    | 1         |   1     |   1     | None                  |\n| patience     | int    | 2         |   3     |   7     | transform_power_2_int |\n| optimizer    | factor | SGD       |   0     |   6     | None                  |\n| sgd_momentum | float  | 0.0       |   0.9   |   0.9   | None                  |\n\n\nThis allows to check if all information is available and if the information is correct. Table 14.3 shows the experimental design for the hyperparameter tuning. Hyperparameter transformations are shown in the column “transform”, e.g., the l1 default is 5, which results in the value \\(2^5 = 32\\) for the network, because the transformation transform_power_2_int was selected in the JSON file. The default value of the batch_size is set to 4, which results in a batch size of \\(2^4 = 16\\).\n\n\nTable 14.3: Experimental design for the hyperparameter tuning. The table shows the hyperparameters, their types, default values, lower and upper bounds, and the transformation function. The transformation function is used to transform the hyperparameter values from the unit hypercube to the original domain. The transformation function is applied to the hyperparameter values before the evaluation of the objective function.\n\n\n\n\n\n\n\n\n\n\nname\ntype\ndefault\nlower\nupper\ntransform\n\n\n\n\n_L_in\nint\n10\n10\n10\nNone\n\n\n_L_out\nint\n1\n1\n1\nNone\n\n\nl1\nint\n3\n3\n8\ntransform_power_2_int\n\n\ndropout_prob\nfloat\n0.01\n0\n0.9\nNone\n\n\nlr_mult\nfloat\n1.0\n0.001\n0.001\nNone\n\n\nbatch_size\nint\n4\n1\n4\ntransform_power_2_int\n\n\nepochs\nint\n4\n2\n16\ntransform_power_2_int\n\n\nk_folds\nint\n1\n1\n1\nNone\n\n\npatience\nint\n2\n3\n7\ntransform_power_2_int\n\n\noptimizer\nfactor\nSGD\n0\n6\nNone\n\n\nsgd_momentum\nfloat\n0.0\n0.9\n0.9\nNone\n\n\n\n\nThe objective function fun_torch is selected next. It implements an interface from PyTorch’s training, validation, and testing methods to spotPython.\n\nfrom spotPython.fun.hypertorch import HyperTorch\nfun = HyperTorch().fun_torch\n\n\nfrom spotPython.hyperparameters.values import get_default_hyperparameters_as_array\nhyper_dict=TorchHyperDict().load()\nX_start = get_default_hyperparameters_as_array(fun_control, hyper_dict)\n\n\nfun_control.update({\n               \"device\": \"cpu\",\n               })\n\nThe spotPython hyperparameter tuning is started by calling the Spot function. Here, we will run the tuner for approximately 30 minutes (max_time). Note: the initial design is always evaluated in the spotPython run. As a consequence, the run may take longer than specified by max_time, because the evaluation time of initial design (here: init_size, 10 points) is performed independently of max_time.\n\nfrom spotPython.spot import spot\nfrom math import inf\nspot_tuner = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = inf,\n                   fun_repeats = 1,\n                   max_time = MAX_TIME,\n                   noise = False,\n                   tolerance_x = np.sqrt(np.spacing(1)),\n                   var_type = var_type,\n                   var_name = var_name,\n                   infill_criterion = \"y\",\n                   n_points = 1,\n                   seed=123,\n                   log_level = 50,\n                   show_models= False,\n                   show_progress= True,\n                   fun_control = fun_control,\n                   design_control={\"init_size\": INIT_SIZE,\n                                   \"repeats\": 1},\n                   surrogate_control={\"noise\": True,\n                                      \"cod_type\": \"norm\",\n                                      \"min_theta\": -4,\n                                      \"max_theta\": 3,\n                                      \"n_theta\": len(var_name),\n                                      \"model_fun_evals\": 10_000,\n                                      \"log_level\": 50\n                                      })\nspot_tuner.run(X_start=X_start)\n\n\nconfig: {'_L_in': 10, '_L_out': 1, 'l1': 128, 'dropout_prob': 0.7103122166156, 'lr_mult': 0.001, 'batch_size': 4, 'epochs': 128, 'k_folds': 1, 'patience': 128, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1\nLoss on hold-out set: 0.3880799110730489\nMeanAbsoluteError value on hold-out data: 0.5899776816368103\nEpoch: 2\nLoss on hold-out set: 0.3836869841814041\nMeanAbsoluteError value on hold-out data: 0.5859453678131104\nEpoch: 3\nLoss on hold-out set: 0.37800121009349824\nMeanAbsoluteError value on hold-out data: 0.5838974118232727\nEpoch: 4\n\n\nLoss on hold-out set: 0.37562453736861545\nMeanAbsoluteError value on hold-out data: 0.5799493193626404\nEpoch: 5\nLoss on hold-out set: 0.36837248464425404\nMeanAbsoluteError value on hold-out data: 0.5729854106903076\nEpoch: 6\nLoss on hold-out set: 0.36849121779203414\nMeanAbsoluteError value on hold-out data: 0.5718793272972107\nEpoch: 7\nLoss on hold-out set: 0.3593301492929459\nMeanAbsoluteError value on hold-out data: 0.5673142075538635\nEpoch: 8\n\n\nLoss on hold-out set: 0.35647780607144036\nMeanAbsoluteError value on hold-out data: 0.5659938454627991\nEpoch: 9\nLoss on hold-out set: 0.3682290816307068\nMeanAbsoluteError value on hold-out data: 0.572464644908905\nEpoch: 10\nLoss on hold-out set: 0.3438674708207448\nMeanAbsoluteError value on hold-out data: 0.5554881691932678\nEpoch: 11\nLoss on hold-out set: 0.35077977160612744\nMeanAbsoluteError value on hold-out data: 0.5578439235687256\nEpoch: 12\n\n\nLoss on hold-out set: 0.32907806505759557\nMeanAbsoluteError value on hold-out data: 0.5416633486747742\nEpoch: 13\nLoss on hold-out set: 0.3389214011033376\nMeanAbsoluteError value on hold-out data: 0.5456399321556091\nEpoch: 14\nLoss on hold-out set: 0.33186697870492937\nMeanAbsoluteError value on hold-out data: 0.5429821610450745\nEpoch: 15\nLoss on hold-out set: 0.32186263173818586\nMeanAbsoluteError value on hold-out data: 0.5337691307067871\nEpoch: 16\n\n\nLoss on hold-out set: 0.32638982792695365\nMeanAbsoluteError value on hold-out data: 0.5339400768280029\nEpoch: 17\nLoss on hold-out set: 0.34150955428679786\nMeanAbsoluteError value on hold-out data: 0.5488361120223999\nEpoch: 18\nLoss on hold-out set: 0.3181079350908597\nMeanAbsoluteError value on hold-out data: 0.5279594659805298\nEpoch: 19\nLoss on hold-out set: 0.3101205576459567\nMeanAbsoluteError value on hold-out data: 0.5216462016105652\nEpoch: 20\n\n\nLoss on hold-out set: 0.31272549013296763\nMeanAbsoluteError value on hold-out data: 0.5277438759803772\nEpoch: 21\nLoss on hold-out set: 0.31258161957065267\nMeanAbsoluteError value on hold-out data: 0.5266361236572266\nEpoch: 22\nLoss on hold-out set: 0.3085262535015742\nMeanAbsoluteError value on hold-out data: 0.5225566625595093\nEpoch: 23\nLoss on hold-out set: 0.2937054855624835\nMeanAbsoluteError value on hold-out data: 0.5049911737442017\nEpoch: 24\n\n\nLoss on hold-out set: 0.29786009723941487\nMeanAbsoluteError value on hold-out data: 0.505726158618927\nEpoch: 25\nLoss on hold-out set: 0.29567268838485083\nMeanAbsoluteError value on hold-out data: 0.5087849497795105\nEpoch: 26\nLoss on hold-out set: 0.2813201687733332\nMeanAbsoluteError value on hold-out data: 0.4963820278644562\nEpoch: 27\nLoss on hold-out set: 0.2902079832553863\nMeanAbsoluteError value on hold-out data: 0.5025125741958618\nEpoch: 28\n\n\nLoss on hold-out set: 0.27412380596001945\nMeanAbsoluteError value on hold-out data: 0.4855813682079315\nEpoch: 29\nLoss on hold-out set: 0.27381120532751085\nMeanAbsoluteError value on hold-out data: 0.4837619960308075\nEpoch: 30\nLoss on hold-out set: 0.2753249797721704\nMeanAbsoluteError value on hold-out data: 0.48615604639053345\nEpoch: 31\nLoss on hold-out set: 0.2756906555593014\nMeanAbsoluteError value on hold-out data: 0.4903359115123749\nEpoch: 32\n\n\nLoss on hold-out set: 0.26016402393579485\nMeanAbsoluteError value on hold-out data: 0.4773153066635132\nEpoch: 33\nLoss on hold-out set: 0.2694820617636045\nMeanAbsoluteError value on hold-out data: 0.48563048243522644\nEpoch: 34\nLoss on hold-out set: 0.2616444872319698\nMeanAbsoluteError value on hold-out data: 0.47832727432250977\nEpoch: 35\nLoss on hold-out set: 0.2511261120438576\nMeanAbsoluteError value on hold-out data: 0.4622211158275604\nEpoch: 36\n\n\nLoss on hold-out set: 0.26056523924072583\nMeanAbsoluteError value on hold-out data: 0.47433289885520935\nEpoch: 37\nLoss on hold-out set: 0.24974486788113912\nMeanAbsoluteError value on hold-out data: 0.4631868898868561\nEpoch: 38\nLoss on hold-out set: 0.24516535783807436\nMeanAbsoluteError value on hold-out data: 0.4578583240509033\nEpoch: 39\nLoss on hold-out set: 0.2462805862724781\nMeanAbsoluteError value on hold-out data: 0.4543892443180084\nEpoch: 40\n\n\nLoss on hold-out set: 0.23850424150625865\nMeanAbsoluteError value on hold-out data: 0.4484350085258484\nEpoch: 41\nLoss on hold-out set: 0.2375045409301917\nMeanAbsoluteError value on hold-out data: 0.44821715354919434\nEpoch: 42\nLoss on hold-out set: 0.2434506955742836\nMeanAbsoluteError value on hold-out data: 0.4549056589603424\nEpoch: 43\nLoss on hold-out set: 0.23038897509376208\nMeanAbsoluteError value on hold-out data: 0.44086360931396484\nEpoch: 44\n\n\nLoss on hold-out set: 0.2311189151306947\nMeanAbsoluteError value on hold-out data: 0.43871328234672546\nEpoch: 45\nLoss on hold-out set: 0.23182736575603485\nMeanAbsoluteError value on hold-out data: 0.44097092747688293\nEpoch: 46\nLoss on hold-out set: 0.21953868828713893\nMeanAbsoluteError value on hold-out data: 0.4279610216617584\nEpoch: 47\nLoss on hold-out set: 0.23960840448737145\nMeanAbsoluteError value on hold-out data: 0.44631215929985046\nEpoch: 48\n\n\nLoss on hold-out set: 0.21432177330056826\nMeanAbsoluteError value on hold-out data: 0.42518240213394165\nEpoch: 49\nLoss on hold-out set: 0.22572503065069516\nMeanAbsoluteError value on hold-out data: 0.4385136365890503\nEpoch: 50\nLoss on hold-out set: 0.21196399688720702\nMeanAbsoluteError value on hold-out data: 0.42245790362358093\nEpoch: 51\nLoss on hold-out set: 0.21647593803703785\nMeanAbsoluteError value on hold-out data: 0.42338305711746216\nEpoch: 52\n\n\nLoss on hold-out set: 0.21441839839021365\nMeanAbsoluteError value on hold-out data: 0.42293089628219604\nEpoch: 53\nLoss on hold-out set: 0.20614871313174565\nMeanAbsoluteError value on hold-out data: 0.41088417172431946\nEpoch: 54\nLoss on hold-out set: 0.21418154728909333\nMeanAbsoluteError value on hold-out data: 0.4205377697944641\nEpoch: 55\nLoss on hold-out set: 0.19838518684109052\nMeanAbsoluteError value on hold-out data: 0.4055808186531067\nEpoch: 56\n\n\nLoss on hold-out set: 0.19423130945612987\nMeanAbsoluteError value on hold-out data: 0.4013197720050812\nEpoch: 57\nLoss on hold-out set: 0.19603884605069954\nMeanAbsoluteError value on hold-out data: 0.40485307574272156\nEpoch: 58\nLoss on hold-out set: 0.191354534526666\nMeanAbsoluteError value on hold-out data: 0.3967095613479614\nEpoch: 59\nLoss on hold-out set: 0.18607441939413547\nMeanAbsoluteError value on hold-out data: 0.389576256275177\nEpoch: 60\n\n\nLoss on hold-out set: 0.19079403246442478\nMeanAbsoluteError value on hold-out data: 0.3925374746322632\nEpoch: 61\nLoss on hold-out set: 0.1960036384811004\nMeanAbsoluteError value on hold-out data: 0.4035680592060089\nEpoch: 62\nLoss on hold-out set: 0.18160789246360462\nMeanAbsoluteError value on hold-out data: 0.380288690328598\nEpoch: 63\nLoss on hold-out set: 0.1989179414510727\nMeanAbsoluteError value on hold-out data: 0.3994502127170563\nEpoch: 64\nLoss on hold-out set: 0.19254313580691815\nMeanAbsoluteError value on hold-out data: 0.39306581020355225\nEpoch: 65\n\n\nLoss on hold-out set: 0.1771948327869177\nMeanAbsoluteError value on hold-out data: 0.3773879110813141\nEpoch: 66\nLoss on hold-out set: 0.1760231030980746\nMeanAbsoluteError value on hold-out data: 0.3762041926383972\nEpoch: 67\nLoss on hold-out set: 0.17199590936303139\nMeanAbsoluteError value on hold-out data: 0.3691391050815582\nEpoch: 68\nLoss on hold-out set: 0.16509607955813407\nMeanAbsoluteError value on hold-out data: 0.3647073805332184\nEpoch: 69\nLoss on hold-out set: 0.17139507159590722\nMeanAbsoluteError value on hold-out data: 0.3691309094429016\nEpoch: 70\n\n\nLoss on hold-out set: 0.16666551979879538\nMeanAbsoluteError value on hold-out data: 0.3621125817298889\nEpoch: 71\nLoss on hold-out set: 0.1694364886979262\nMeanAbsoluteError value on hold-out data: 0.36576178669929504\nEpoch: 72\nLoss on hold-out set: 0.1707458314920465\nMeanAbsoluteError value on hold-out data: 0.36526861786842346\nEpoch: 73\nLoss on hold-out set: 0.158644323994716\nMeanAbsoluteError value on hold-out data: 0.35473546385765076\nEpoch: 74\nLoss on hold-out set: 0.15925804947813352\nMeanAbsoluteError value on hold-out data: 0.35808253288269043\nEpoch: 75\n\n\nLoss on hold-out set: 0.14871751541271805\nMeanAbsoluteError value on hold-out data: 0.3411659300327301\nEpoch: 76\nLoss on hold-out set: 0.15881584075589975\nMeanAbsoluteError value on hold-out data: 0.35057008266448975\nEpoch: 77\nLoss on hold-out set: 0.15353250943124294\nMeanAbsoluteError value on hold-out data: 0.3414638340473175\nEpoch: 78\nLoss on hold-out set: 0.13879319821794828\nMeanAbsoluteError value on hold-out data: 0.3278297185897827\nEpoch: 79\nLoss on hold-out set: 0.1432836973418792\nMeanAbsoluteError value on hold-out data: 0.3311055302619934\nEpoch: 80\n\n\nLoss on hold-out set: 0.14388307603696981\nMeanAbsoluteError value on hold-out data: 0.3319510519504547\nEpoch: 81\nLoss on hold-out set: 0.14630789950489997\nMeanAbsoluteError value on hold-out data: 0.3349020481109619\nEpoch: 82\nLoss on hold-out set: 0.1358308787892262\nMeanAbsoluteError value on hold-out data: 0.3195601999759674\nEpoch: 83\nLoss on hold-out set: 0.13304505594074725\nMeanAbsoluteError value on hold-out data: 0.31500616669654846\nEpoch: 84\nLoss on hold-out set: 0.14229338797430197\nMeanAbsoluteError value on hold-out data: 0.3295309841632843\nEpoch: 85\n\n\nLoss on hold-out set: 0.13413121630748112\nMeanAbsoluteError value on hold-out data: 0.32050973176956177\nEpoch: 86\nLoss on hold-out set: 0.12837606566647689\nMeanAbsoluteError value on hold-out data: 0.3109428882598877\nEpoch: 87\nLoss on hold-out set: 0.1336614220837752\nMeanAbsoluteError value on hold-out data: 0.31675392389297485\nEpoch: 88\nLoss on hold-out set: 0.12711885467171669\nMeanAbsoluteError value on hold-out data: 0.3072037696838379\nEpoch: 89\nLoss on hold-out set: 0.13057974826544524\nMeanAbsoluteError value on hold-out data: 0.31409522891044617\nEpoch: 90\n\n\nLoss on hold-out set: 0.1297481312106053\nMeanAbsoluteError value on hold-out data: 0.31132158637046814\nEpoch: 91\nLoss on hold-out set: 0.11912523386379083\nMeanAbsoluteError value on hold-out data: 0.30101707577705383\nEpoch: 92\nLoss on hold-out set: 0.12311545960605144\nMeanAbsoluteError value on hold-out data: 0.30496668815612793\nEpoch: 93\nLoss on hold-out set: 0.11927016124129296\nMeanAbsoluteError value on hold-out data: 0.2962914705276489\nEpoch: 94\nLoss on hold-out set: 0.12144774296631415\nMeanAbsoluteError value on hold-out data: 0.30237501859664917\nEpoch: 95\n\n\nLoss on hold-out set: 0.11746331736445427\nMeanAbsoluteError value on hold-out data: 0.2950419485569\nEpoch: 96\nLoss on hold-out set: 0.11121155418455601\nMeanAbsoluteError value on hold-out data: 0.2861716151237488\nEpoch: 97\nLoss on hold-out set: 0.10882653936743736\nMeanAbsoluteError value on hold-out data: 0.2833530306816101\nEpoch: 98\nLoss on hold-out set: 0.10903889745473862\nMeanAbsoluteError value on hold-out data: 0.2800130844116211\nEpoch: 99\nLoss on hold-out set: 0.12341873566309611\nMeanAbsoluteError value on hold-out data: 0.29833653569221497\nEpoch: 100\n\n\nLoss on hold-out set: 0.1054092987626791\nMeanAbsoluteError value on hold-out data: 0.2739351987838745\nEpoch: 101\nLoss on hold-out set: 0.1053611833974719\nMeanAbsoluteError value on hold-out data: 0.27997511625289917\nEpoch: 102\nLoss on hold-out set: 0.10180222911139329\nMeanAbsoluteError value on hold-out data: 0.27020105719566345\nEpoch: 103\nLoss on hold-out set: 0.11045179172108571\nMeanAbsoluteError value on hold-out data: 0.28186503052711487\nEpoch: 104\nLoss on hold-out set: 0.09439728098611037\nMeanAbsoluteError value on hold-out data: 0.26401928067207336\nEpoch: 105\n\n\nLoss on hold-out set: 0.09351931383212407\nMeanAbsoluteError value on hold-out data: 0.26154905557632446\nEpoch: 106\nLoss on hold-out set: 0.09713801949595412\nMeanAbsoluteError value on hold-out data: 0.2638161778450012\nEpoch: 107\nLoss on hold-out set: 0.09345814928412438\nMeanAbsoluteError value on hold-out data: 0.2608989179134369\nEpoch: 108\nLoss on hold-out set: 0.10183271319294969\nMeanAbsoluteError value on hold-out data: 0.2747385799884796\nEpoch: 109\nLoss on hold-out set: 0.09911684604982535\nMeanAbsoluteError value on hold-out data: 0.2694036066532135\nEpoch: 110\n\n\nLoss on hold-out set: 0.09799518172939618\nMeanAbsoluteError value on hold-out data: 0.2628406286239624\nEpoch: 111\nLoss on hold-out set: 0.10030249775697787\nMeanAbsoluteError value on hold-out data: 0.26927390694618225\nEpoch: 112\nLoss on hold-out set: 0.089515517236044\nMeanAbsoluteError value on hold-out data: 0.24437321722507477\nEpoch: 113\nLoss on hold-out set: 0.08700421212861935\nMeanAbsoluteError value on hold-out data: 0.2446918934583664\nEpoch: 114\nLoss on hold-out set: 0.09243666367605329\nMeanAbsoluteError value on hold-out data: 0.2530674636363983\nEpoch: 115\n\n\nLoss on hold-out set: 0.08728596359491349\nMeanAbsoluteError value on hold-out data: 0.2474481761455536\nEpoch: 116\nLoss on hold-out set: 0.09119456669936578\nMeanAbsoluteError value on hold-out data: 0.2502688467502594\nEpoch: 117\nLoss on hold-out set: 0.08733472774426142\nMeanAbsoluteError value on hold-out data: 0.2512621283531189\nEpoch: 118\nLoss on hold-out set: 0.08680794619644681\nMeanAbsoluteError value on hold-out data: 0.2450418621301651\nEpoch: 119\nLoss on hold-out set: 0.08382196660464009\nMeanAbsoluteError value on hold-out data: 0.24181099236011505\nEpoch: 120\n\n\nLoss on hold-out set: 0.08907857824116945\nMeanAbsoluteError value on hold-out data: 0.24978691339492798\nEpoch: 121\nLoss on hold-out set: 0.08207449068625768\nMeanAbsoluteError value on hold-out data: 0.24045430123806\nEpoch: 122\nLoss on hold-out set: 0.09053841241945823\nMeanAbsoluteError value on hold-out data: 0.24808357656002045\nEpoch: 123\nLoss on hold-out set: 0.07853908311575651\nMeanAbsoluteError value on hold-out data: 0.23402859270572662\nEpoch: 124\n\n\nLoss on hold-out set: 0.08898908268039425\nMeanAbsoluteError value on hold-out data: 0.24805593490600586\nEpoch: 125\nLoss on hold-out set: 0.09254279808762172\nMeanAbsoluteError value on hold-out data: 0.2544447183609009\nEpoch: 126\nLoss on hold-out set: 0.08263650688032309\nMeanAbsoluteError value on hold-out data: 0.23900435864925385\nEpoch: 127\nLoss on hold-out set: 0.07984504015495379\nMeanAbsoluteError value on hold-out data: 0.23947305977344513\nEpoch: 128\n\n\nLoss on hold-out set: 0.0862145904575785\nMeanAbsoluteError value on hold-out data: 0.2431158423423767\nReturned to Spot: Validation loss: 0.0862145904575785\n----------------------------------------------\n\nconfig: {'_L_in': 10, '_L_out': 1, 'l1': 32, 'dropout_prob': 0.13021660839652088, 'lr_mult': 0.001, 'batch_size': 8, 'epochs': 256, 'k_folds': 1, 'patience': 64, 'optimizer': 'Adagrad', 'sgd_momentum': 0.9}\nEpoch: 1\nLoss on hold-out set: 0.4627989726631265\nMeanAbsoluteError value on hold-out data: 0.6565921306610107\nEpoch: 2\nLoss on hold-out set: 0.4589531892224362\nMeanAbsoluteError value on hold-out data: 0.6534714102745056\nEpoch: 3\nLoss on hold-out set: 0.4593477570696881\nMeanAbsoluteError value on hold-out data: 0.6539322137832642\nEpoch: 4\nLoss on hold-out set: 0.46001733133667394\nMeanAbsoluteError value on hold-out data: 0.6547444462776184\nEpoch: 5\nLoss on hold-out set: 0.4608977029198094\nMeanAbsoluteError value on hold-out data: 0.6551709175109863\nEpoch: 6\nLoss on hold-out set: 0.4647337535494252\nMeanAbsoluteError value on hold-out data: 0.6578038334846497\nEpoch: 7\nLoss on hold-out set: 0.4612514509966499\nMeanAbsoluteError value on hold-out data: 0.654595136642456\nEpoch: 8\nLoss on hold-out set: 0.4579661174824363\nMeanAbsoluteError value on hold-out data: 0.6533114910125732\nEpoch: 9\nLoss on hold-out set: 0.4593767343383086\nMeanAbsoluteError value on hold-out data: 0.6537655591964722\nEpoch: 10\nLoss on hold-out set: 0.46053999348690633\nMeanAbsoluteError value on hold-out data: 0.6547128558158875\nEpoch: 11\n\n\nLoss on hold-out set: 0.4595827977908285\nMeanAbsoluteError value on hold-out data: 0.6539943218231201\nEpoch: 12\nLoss on hold-out set: 0.45962194470982803\nMeanAbsoluteError value on hold-out data: 0.6543705463409424\nEpoch: 13\nLoss on hold-out set: 0.45736330512322876\nMeanAbsoluteError value on hold-out data: 0.6524419784545898\nEpoch: 14\nLoss on hold-out set: 0.4599130185026872\nMeanAbsoluteError value on hold-out data: 0.6543874144554138\nEpoch: 15\nLoss on hold-out set: 0.4579157084226608\nMeanAbsoluteError value on hold-out data: 0.6527398228645325\nEpoch: 16\nLoss on hold-out set: 0.4562674541222422\nMeanAbsoluteError value on hold-out data: 0.6513288617134094\nEpoch: 17\nLoss on hold-out set: 0.4579960154859643\nMeanAbsoluteError value on hold-out data: 0.6523417234420776\nEpoch: 18\nLoss on hold-out set: 0.45789690080441925\nMeanAbsoluteError value on hold-out data: 0.6533842086791992\nEpoch: 19\nLoss on hold-out set: 0.4583052561471337\nMeanAbsoluteError value on hold-out data: 0.6532690525054932\nEpoch: 20\nLoss on hold-out set: 0.45698324316426325\nMeanAbsoluteError value on hold-out data: 0.6522902846336365\nEpoch: 21\nLoss on hold-out set: 0.4576420674198552\nMeanAbsoluteError value on hold-out data: 0.6519546508789062\nEpoch: 22\n\n\nLoss on hold-out set: 0.45693942826045186\nMeanAbsoluteError value on hold-out data: 0.6517285108566284\nEpoch: 23\nLoss on hold-out set: 0.4544865826242848\nMeanAbsoluteError value on hold-out data: 0.6501532793045044\nEpoch: 24\nLoss on hold-out set: 0.45744823860494715\nMeanAbsoluteError value on hold-out data: 0.6524167656898499\nEpoch: 25\nLoss on hold-out set: 0.45570837823968185\nMeanAbsoluteError value on hold-out data: 0.6511331796646118\nEpoch: 26\nLoss on hold-out set: 0.4553325913454357\nMeanAbsoluteError value on hold-out data: 0.6506592631340027\nEpoch: 27\nLoss on hold-out set: 0.45445852452202845\nMeanAbsoluteError value on hold-out data: 0.6499620676040649\nEpoch: 28\nLoss on hold-out set: 0.4542893304636604\nMeanAbsoluteError value on hold-out data: 0.6509696245193481\nEpoch: 29\nLoss on hold-out set: 0.45320791398224075\nMeanAbsoluteError value on hold-out data: 0.6491036415100098\nEpoch: 30\nLoss on hold-out set: 0.45692677090042516\nMeanAbsoluteError value on hold-out data: 0.6519822478294373\nEpoch: 31\nLoss on hold-out set: 0.4532112212557542\nMeanAbsoluteError value on hold-out data: 0.6492712497711182\nEpoch: 32\nLoss on hold-out set: 0.4557249985243145\nMeanAbsoluteError value on hold-out data: 0.6510018706321716\nEpoch: 33\n\n\nLoss on hold-out set: 0.4588989474271473\nMeanAbsoluteError value on hold-out data: 0.6533785462379456\nEpoch: 34\nLoss on hold-out set: 0.45636854516832454\nMeanAbsoluteError value on hold-out data: 0.6515430212020874\nEpoch: 35\nLoss on hold-out set: 0.4528054547937293\nMeanAbsoluteError value on hold-out data: 0.6489641070365906\nEpoch: 36\nLoss on hold-out set: 0.45358750851530777\nMeanAbsoluteError value on hold-out data: 0.6493239998817444\nEpoch: 37\nLoss on hold-out set: 0.4529598269023393\nMeanAbsoluteError value on hold-out data: 0.6488447785377502\nEpoch: 38\nLoss on hold-out set: 0.45496590121796254\nMeanAbsoluteError value on hold-out data: 0.6508914232254028\nEpoch: 39\nLoss on hold-out set: 0.4567106726922487\nMeanAbsoluteError value on hold-out data: 0.6524199843406677\nEpoch: 40\nLoss on hold-out set: 0.45581202914840296\nMeanAbsoluteError value on hold-out data: 0.6514948010444641\nEpoch: 41\nLoss on hold-out set: 0.4554611115079177\nMeanAbsoluteError value on hold-out data: 0.6506933569908142\nEpoch: 42\nLoss on hold-out set: 0.4532644387922789\nMeanAbsoluteError value on hold-out data: 0.6492961645126343\nEpoch: 43\nLoss on hold-out set: 0.45394236790506465\nMeanAbsoluteError value on hold-out data: 0.6494168639183044\nEpoch: 44\n\n\nLoss on hold-out set: 0.4535429516905232\nMeanAbsoluteError value on hold-out data: 0.6494808197021484\nEpoch: 45\nLoss on hold-out set: 0.4547828020233857\nMeanAbsoluteError value on hold-out data: 0.6497856974601746\nEpoch: 46\nLoss on hold-out set: 0.4545118989128816\nMeanAbsoluteError value on hold-out data: 0.6500173211097717\nEpoch: 47\nLoss on hold-out set: 0.4523406075803857\nMeanAbsoluteError value on hold-out data: 0.6484460234642029\nEpoch: 48\nLoss on hold-out set: 0.45267852434986516\nMeanAbsoluteError value on hold-out data: 0.6489351391792297\nEpoch: 49\nLoss on hold-out set: 0.4535845941618869\nMeanAbsoluteError value on hold-out data: 0.6492393016815186\nEpoch: 50\nLoss on hold-out set: 0.4537069475964496\nMeanAbsoluteError value on hold-out data: 0.6499642729759216\nEpoch: 51\nLoss on hold-out set: 0.45489380783156347\nMeanAbsoluteError value on hold-out data: 0.6506103277206421\nEpoch: 52\nLoss on hold-out set: 0.452504049790533\nMeanAbsoluteError value on hold-out data: 0.6487504243850708\nEpoch: 53\nLoss on hold-out set: 0.45203583020912974\nMeanAbsoluteError value on hold-out data: 0.648635745048523\nEpoch: 54\nLoss on hold-out set: 0.4535038831986879\nMeanAbsoluteError value on hold-out data: 0.6492515206336975\nEpoch: 55\n\n\nLoss on hold-out set: 0.45310733977117035\nMeanAbsoluteError value on hold-out data: 0.6495614647865295\nEpoch: 56\nLoss on hold-out set: 0.453528745394004\nMeanAbsoluteError value on hold-out data: 0.6494340300559998\nEpoch: 57\nLoss on hold-out set: 0.4530581337840934\nMeanAbsoluteError value on hold-out data: 0.6490804553031921\nEpoch: 58\nLoss on hold-out set: 0.4540705453408392\nMeanAbsoluteError value on hold-out data: 0.6495937705039978\nEpoch: 59\nLoss on hold-out set: 0.4543669427696027\nMeanAbsoluteError value on hold-out data: 0.6501813530921936\nEpoch: 60\nLoss on hold-out set: 0.45246423231927974\nMeanAbsoluteError value on hold-out data: 0.6484190821647644\nEpoch: 61\nLoss on hold-out set: 0.45014405799539464\nMeanAbsoluteError value on hold-out data: 0.6469748020172119\nEpoch: 62\nLoss on hold-out set: 0.4557330953447442\nMeanAbsoluteError value on hold-out data: 0.6506618857383728\nEpoch: 63\nLoss on hold-out set: 0.4508426573715712\nMeanAbsoluteError value on hold-out data: 0.6475402116775513\nEpoch: 64\nLoss on hold-out set: 0.45314121011056396\nMeanAbsoluteError value on hold-out data: 0.6491293907165527\nEpoch: 65\nLoss on hold-out set: 0.45261439916334656\nMeanAbsoluteError value on hold-out data: 0.6486645936965942\nEpoch: 66\n\n\nLoss on hold-out set: 0.4515979501761888\nMeanAbsoluteError value on hold-out data: 0.6481348872184753\nEpoch: 67\nLoss on hold-out set: 0.45172497316410665\nMeanAbsoluteError value on hold-out data: 0.648300290107727\nEpoch: 68\nLoss on hold-out set: 0.4508030885144284\nMeanAbsoluteError value on hold-out data: 0.6472572088241577\nEpoch: 69\nLoss on hold-out set: 0.4539273004782827\nMeanAbsoluteError value on hold-out data: 0.6490530967712402\nEpoch: 70\nLoss on hold-out set: 0.4526115687269914\nMeanAbsoluteError value on hold-out data: 0.6488827466964722\nEpoch: 71\nLoss on hold-out set: 0.4541605852152172\nMeanAbsoluteError value on hold-out data: 0.6494703888893127\nEpoch: 72\nLoss on hold-out set: 0.45270411042790665\nMeanAbsoluteError value on hold-out data: 0.6489551663398743\nEpoch: 73\nLoss on hold-out set: 0.4520396590232849\nMeanAbsoluteError value on hold-out data: 0.6479901075363159\nEpoch: 74\nLoss on hold-out set: 0.45378051306072037\nMeanAbsoluteError value on hold-out data: 0.6492975354194641\nEpoch: 75\nLoss on hold-out set: 0.450921799007215\nMeanAbsoluteError value on hold-out data: 0.6474267840385437\nEpoch: 76\nLoss on hold-out set: 0.4542545684074101\nMeanAbsoluteError value on hold-out data: 0.650068998336792\nEpoch: 77\n\n\nLoss on hold-out set: 0.4513097781884043\nMeanAbsoluteError value on hold-out data: 0.6477612853050232\nEpoch: 78\nLoss on hold-out set: 0.4510274945121062\nMeanAbsoluteError value on hold-out data: 0.6470417380332947\nEpoch: 79\nLoss on hold-out set: 0.4519781650681245\nMeanAbsoluteError value on hold-out data: 0.6483672857284546\nEpoch: 80\nLoss on hold-out set: 0.45214405106870753\nMeanAbsoluteError value on hold-out data: 0.6486579775810242\nEpoch: 81\nLoss on hold-out set: 0.45095630068528025\nMeanAbsoluteError value on hold-out data: 0.6472180485725403\nEpoch: 82\nLoss on hold-out set: 0.4504508564346715\nMeanAbsoluteError value on hold-out data: 0.6472318768501282\nEpoch: 83\nLoss on hold-out set: 0.45189395939048965\nMeanAbsoluteError value on hold-out data: 0.6481188535690308\nEpoch: 84\nLoss on hold-out set: 0.44999781878370987\nMeanAbsoluteError value on hold-out data: 0.646296501159668\nEpoch: 85\nLoss on hold-out set: 0.45152992872815384\nMeanAbsoluteError value on hold-out data: 0.6477870941162109\nEpoch: 86\nLoss on hold-out set: 0.4488496145135478\nMeanAbsoluteError value on hold-out data: 0.6458466053009033\nEpoch: 87\nLoss on hold-out set: 0.4495000760806234\nMeanAbsoluteError value on hold-out data: 0.6469359993934631\nEpoch: 88\n\n\nLoss on hold-out set: 0.4504060298204422\nMeanAbsoluteError value on hold-out data: 0.6467682123184204\nEpoch: 89\nLoss on hold-out set: 0.4479993079838\nMeanAbsoluteError value on hold-out data: 0.645456075668335\nEpoch: 90\nLoss on hold-out set: 0.4511445031354302\nMeanAbsoluteError value on hold-out data: 0.6470165252685547\nEpoch: 91\nLoss on hold-out set: 0.4507835648561779\nMeanAbsoluteError value on hold-out data: 0.6472745537757874\nEpoch: 92\nLoss on hold-out set: 0.45019401609897614\nMeanAbsoluteError value on hold-out data: 0.6470003128051758\nEpoch: 93\nLoss on hold-out set: 0.451634932505457\nMeanAbsoluteError value on hold-out data: 0.6483078002929688\nEpoch: 94\nLoss on hold-out set: 0.4503865140049081\nMeanAbsoluteError value on hold-out data: 0.6471909284591675\nEpoch: 95\nLoss on hold-out set: 0.4515090365158884\nMeanAbsoluteError value on hold-out data: 0.6474428176879883\nEpoch: 96\nLoss on hold-out set: 0.44951579680568293\nMeanAbsoluteError value on hold-out data: 0.6459831595420837\nEpoch: 97\nLoss on hold-out set: 0.45158388583283676\nMeanAbsoluteError value on hold-out data: 0.6478838920593262\nEpoch: 98\nLoss on hold-out set: 0.44928121017782313\nMeanAbsoluteError value on hold-out data: 0.6458011269569397\nEpoch: 99\n\n\nLoss on hold-out set: 0.4469640592211171\nMeanAbsoluteError value on hold-out data: 0.6448303461074829\nEpoch: 100\nLoss on hold-out set: 0.44917522684523936\nMeanAbsoluteError value on hold-out data: 0.6462762951850891\nEpoch: 101\nLoss on hold-out set: 0.4470257359115701\nMeanAbsoluteError value on hold-out data: 0.6440426111221313\nEpoch: 102\nLoss on hold-out set: 0.44675874474801514\nMeanAbsoluteError value on hold-out data: 0.6443750262260437\nEpoch: 103\nLoss on hold-out set: 0.4480649797539962\nMeanAbsoluteError value on hold-out data: 0.6452566385269165\nEpoch: 104\nLoss on hold-out set: 0.44959760731772375\nMeanAbsoluteError value on hold-out data: 0.6465162634849548\nEpoch: 105\nLoss on hold-out set: 0.44940275424405146\nMeanAbsoluteError value on hold-out data: 0.6460399627685547\nEpoch: 106\nLoss on hold-out set: 0.44725412444064494\nMeanAbsoluteError value on hold-out data: 0.6448283791542053\nEpoch: 107\nLoss on hold-out set: 0.4493673545749564\nMeanAbsoluteError value on hold-out data: 0.646686851978302\nEpoch: 108\nLoss on hold-out set: 0.4491570239004336\nMeanAbsoluteError value on hold-out data: 0.6460201740264893\nEpoch: 109\nLoss on hold-out set: 0.4494960457086563\nMeanAbsoluteError value on hold-out data: 0.6462743878364563\nEpoch: 110\n\n\nLoss on hold-out set: 0.44923827993242366\nMeanAbsoluteError value on hold-out data: 0.6455119252204895\nEpoch: 111\nLoss on hold-out set: 0.4480784237384796\nMeanAbsoluteError value on hold-out data: 0.6451811790466309\nEpoch: 112\nLoss on hold-out set: 0.4494582022491254\nMeanAbsoluteError value on hold-out data: 0.6459540724754333\nEpoch: 113\nLoss on hold-out set: 0.4489768970953791\nMeanAbsoluteError value on hold-out data: 0.6459988355636597\nEpoch: 114\nLoss on hold-out set: 0.44773849217515244\nMeanAbsoluteError value on hold-out data: 0.6452873349189758\nEpoch: 115\nLoss on hold-out set: 0.4495871067047119\nMeanAbsoluteError value on hold-out data: 0.6465311050415039\nEpoch: 116\nLoss on hold-out set: 0.4493013996826975\nMeanAbsoluteError value on hold-out data: 0.6457881927490234\nEpoch: 117\nLoss on hold-out set: 0.4466182142496109\nMeanAbsoluteError value on hold-out data: 0.6442474126815796\nEpoch: 118\nLoss on hold-out set: 0.44765500332179825\nMeanAbsoluteError value on hold-out data: 0.6448273062705994\nEpoch: 119\nLoss on hold-out set: 0.4508525854662845\nMeanAbsoluteError value on hold-out data: 0.647330105304718\nEpoch: 120\nLoss on hold-out set: 0.4494436853810361\nMeanAbsoluteError value on hold-out data: 0.646956741809845\nEpoch: 121\n\n\nLoss on hold-out set: 0.4461610309387508\nMeanAbsoluteError value on hold-out data: 0.6438244581222534\nEpoch: 122\nLoss on hold-out set: 0.44799703594885376\nMeanAbsoluteError value on hold-out data: 0.6448424458503723\nEpoch: 123\nLoss on hold-out set: 0.44731765122790085\nMeanAbsoluteError value on hold-out data: 0.6447571516036987\nEpoch: 124\nLoss on hold-out set: 0.444920246538363\nMeanAbsoluteError value on hold-out data: 0.6431748867034912\nEpoch: 125\nLoss on hold-out set: 0.45183343557935013\nMeanAbsoluteError value on hold-out data: 0.6477536559104919\nEpoch: 126\nLoss on hold-out set: 0.4456331259325931\nMeanAbsoluteError value on hold-out data: 0.6437221169471741\nEpoch: 127\nLoss on hold-out set: 0.4480566264767396\nMeanAbsoluteError value on hold-out data: 0.644836962223053\nEpoch: 128\nLoss on hold-out set: 0.44945975353843287\nMeanAbsoluteError value on hold-out data: 0.6465322971343994\nEpoch: 129\nLoss on hold-out set: 0.4483418966594495\nMeanAbsoluteError value on hold-out data: 0.6456575989723206\nEpoch: 130\nLoss on hold-out set: 0.44642814209586695\nMeanAbsoluteError value on hold-out data: 0.6436738967895508\nEpoch: 131\nLoss on hold-out set: 0.4477359221169823\nMeanAbsoluteError value on hold-out data: 0.6445709466934204\nEpoch: 132\n\n\nLoss on hold-out set: 0.4494143528373618\nMeanAbsoluteError value on hold-out data: 0.646141767501831\nEpoch: 133\nLoss on hold-out set: 0.4477832960455041\nMeanAbsoluteError value on hold-out data: 0.6449248194694519\nEpoch: 134\nLoss on hold-out set: 0.4475400283148414\nMeanAbsoluteError value on hold-out data: 0.644883394241333\nEpoch: 135\nLoss on hold-out set: 0.44694959646777105\nMeanAbsoluteError value on hold-out data: 0.6440098285675049\nEpoch: 136\nLoss on hold-out set: 0.44745009588567836\nMeanAbsoluteError value on hold-out data: 0.6444754600524902\nEpoch: 137\nLoss on hold-out set: 0.4491337506394637\nMeanAbsoluteError value on hold-out data: 0.6458517909049988\nEpoch: 138\nLoss on hold-out set: 0.4462098887092189\nMeanAbsoluteError value on hold-out data: 0.6438659429550171\nEpoch: 139\nLoss on hold-out set: 0.4469732822556245\nMeanAbsoluteError value on hold-out data: 0.6444832682609558\nEpoch: 140\nLoss on hold-out set: 0.4474699944257736\nMeanAbsoluteError value on hold-out data: 0.6446747183799744\nEpoch: 141\nLoss on hold-out set: 0.4471552270023446\nMeanAbsoluteError value on hold-out data: 0.6447279453277588\nEpoch: 142\nLoss on hold-out set: 0.4460928479307576\nMeanAbsoluteError value on hold-out data: 0.6436082720756531\nEpoch: 143\n\n\nLoss on hold-out set: 0.44769378947584254\nMeanAbsoluteError value on hold-out data: 0.6452122926712036\nEpoch: 144\nLoss on hold-out set: 0.4452583836881738\nMeanAbsoluteError value on hold-out data: 0.6430895328521729\nEpoch: 145\nLoss on hold-out set: 0.44615233650333\nMeanAbsoluteError value on hold-out data: 0.6435401439666748\nEpoch: 146\nLoss on hold-out set: 0.44720305659269033\nMeanAbsoluteError value on hold-out data: 0.6444634795188904\nEpoch: 147\nLoss on hold-out set: 0.4465066704310869\nMeanAbsoluteError value on hold-out data: 0.6435976624488831\nEpoch: 148\nLoss on hold-out set: 0.44701012890589864\nMeanAbsoluteError value on hold-out data: 0.6445486545562744\nEpoch: 149\nLoss on hold-out set: 0.4481064614496733\nMeanAbsoluteError value on hold-out data: 0.6452943682670593\nEpoch: 150\nLoss on hold-out set: 0.4473157603489725\nMeanAbsoluteError value on hold-out data: 0.6443766355514526\nEpoch: 151\nLoss on hold-out set: 0.44725596983181803\nMeanAbsoluteError value on hold-out data: 0.6446670293807983\nEpoch: 152\nLoss on hold-out set: 0.44760294101740183\nMeanAbsoluteError value on hold-out data: 0.6446340084075928\nEpoch: 153\nLoss on hold-out set: 0.4489342931069826\nMeanAbsoluteError value on hold-out data: 0.6455261707305908\nEpoch: 154\n\n\nLoss on hold-out set: 0.44462757832125616\nMeanAbsoluteError value on hold-out data: 0.6422571539878845\nEpoch: 155\nLoss on hold-out set: 0.4439422001964168\nMeanAbsoluteError value on hold-out data: 0.6425483226776123\nEpoch: 156\nLoss on hold-out set: 0.44435900841888626\nMeanAbsoluteError value on hold-out data: 0.642622709274292\nEpoch: 157\nLoss on hold-out set: 0.4466083010560588\nMeanAbsoluteError value on hold-out data: 0.6440661549568176\nEpoch: 158\nLoss on hold-out set: 0.4454694123644578\nMeanAbsoluteError value on hold-out data: 0.6435724496841431\nEpoch: 159\nLoss on hold-out set: 0.44492243779333013\nMeanAbsoluteError value on hold-out data: 0.6430906653404236\nEpoch: 160\nLoss on hold-out set: 0.4472875508822893\nMeanAbsoluteError value on hold-out data: 0.6441663503646851\nEpoch: 161\nLoss on hold-out set: 0.44644741165010554\nMeanAbsoluteError value on hold-out data: 0.6444502472877502\nEpoch: 162\nLoss on hold-out set: 0.4432135930186824\nMeanAbsoluteError value on hold-out data: 0.6417235732078552\nEpoch: 163\nLoss on hold-out set: 0.44659182194032165\nMeanAbsoluteError value on hold-out data: 0.6442509889602661\nEpoch: 164\nLoss on hold-out set: 0.4454674689393294\nMeanAbsoluteError value on hold-out data: 0.6434155702590942\nEpoch: 165\n\n\nLoss on hold-out set: 0.4450047337695172\nMeanAbsoluteError value on hold-out data: 0.6424617767333984\nEpoch: 166\nLoss on hold-out set: 0.44542016245816884\nMeanAbsoluteError value on hold-out data: 0.6432127356529236\nEpoch: 167\nLoss on hold-out set: 0.44552093587423625\nMeanAbsoluteError value on hold-out data: 0.6433373689651489\nEpoch: 168\nLoss on hold-out set: 0.4436937476459302\nMeanAbsoluteError value on hold-out data: 0.6412121057510376\nEpoch: 169\nLoss on hold-out set: 0.44578569970632853\nMeanAbsoluteError value on hold-out data: 0.643306314945221\nEpoch: 170\nLoss on hold-out set: 0.44649074971675873\nMeanAbsoluteError value on hold-out data: 0.6440760493278503\nEpoch: 171\nLoss on hold-out set: 0.44641782029678945\nMeanAbsoluteError value on hold-out data: 0.6443111300468445\nEpoch: 172\nLoss on hold-out set: 0.44727252110054616\nMeanAbsoluteError value on hold-out data: 0.6446658372879028\nEpoch: 173\nLoss on hold-out set: 0.4454742654373771\nMeanAbsoluteError value on hold-out data: 0.6435269117355347\nEpoch: 174\nLoss on hold-out set: 0.44522760651613535\nMeanAbsoluteError value on hold-out data: 0.6431772112846375\nEpoch: 175\nLoss on hold-out set: 0.4436156632084596\nMeanAbsoluteError value on hold-out data: 0.641654372215271\nEpoch: 176\n\n\nLoss on hold-out set: 0.4454385740192313\nMeanAbsoluteError value on hold-out data: 0.64328932762146\nEpoch: 177\nLoss on hold-out set: 0.4471203943616466\nMeanAbsoluteError value on hold-out data: 0.6444379687309265\nEpoch: 178\nLoss on hold-out set: 0.4487398831467879\nMeanAbsoluteError value on hold-out data: 0.6461318135261536\nEpoch: 179\nLoss on hold-out set: 0.44412824668382345\nMeanAbsoluteError value on hold-out data: 0.6427754163742065\nEpoch: 180\nLoss on hold-out set: 0.44386516825148936\nMeanAbsoluteError value on hold-out data: 0.6423103213310242\nEpoch: 181\nLoss on hold-out set: 0.4465391463355014\nMeanAbsoluteError value on hold-out data: 0.6438944935798645\nEpoch: 182\nLoss on hold-out set: 0.4466170488219512\nMeanAbsoluteError value on hold-out data: 0.6440552473068237\nEpoch: 183\nLoss on hold-out set: 0.4459905898884723\nMeanAbsoluteError value on hold-out data: 0.643480658531189\nEpoch: 184\nLoss on hold-out set: 0.4445395893172214\nMeanAbsoluteError value on hold-out data: 0.6425812840461731\nEpoch: 185\nLoss on hold-out set: 0.44426003569050837\nMeanAbsoluteError value on hold-out data: 0.6424267292022705\nEpoch: 186\nLoss on hold-out set: 0.44273590022011805\nMeanAbsoluteError value on hold-out data: 0.6411311626434326\nEpoch: 187\n\n\nLoss on hold-out set: 0.44620092134726674\nMeanAbsoluteError value on hold-out data: 0.6434767246246338\nEpoch: 188\nLoss on hold-out set: 0.4455458717910867\nMeanAbsoluteError value on hold-out data: 0.6436594128608704\nEpoch: 189\nLoss on hold-out set: 0.44562535458489466\nMeanAbsoluteError value on hold-out data: 0.6434465050697327\nEpoch: 190\nLoss on hold-out set: 0.44387538731098175\nMeanAbsoluteError value on hold-out data: 0.6418722867965698\nEpoch: 191\nLoss on hold-out set: 0.44489880376740504\nMeanAbsoluteError value on hold-out data: 0.6430019736289978\nEpoch: 192\nLoss on hold-out set: 0.4452018996602611\nMeanAbsoluteError value on hold-out data: 0.6431523561477661\nEpoch: 193\nLoss on hold-out set: 0.44444681390335683\nMeanAbsoluteError value on hold-out data: 0.642634391784668\nEpoch: 194\nLoss on hold-out set: 0.44494262416111796\nMeanAbsoluteError value on hold-out data: 0.643007218837738\nEpoch: 195\nLoss on hold-out set: 0.443953170588142\nMeanAbsoluteError value on hold-out data: 0.6419922113418579\nEpoch: 196\nLoss on hold-out set: 0.4445572620943973\nMeanAbsoluteError value on hold-out data: 0.6425214409828186\nEpoch: 197\nLoss on hold-out set: 0.44385663694457006\nMeanAbsoluteError value on hold-out data: 0.6418905258178711\nEpoch: 198\n\n\nLoss on hold-out set: 0.44591419555638967\nMeanAbsoluteError value on hold-out data: 0.6438300013542175\nEpoch: 199\nLoss on hold-out set: 0.4439554983063748\nMeanAbsoluteError value on hold-out data: 0.6418514847755432\nEpoch: 200\nLoss on hold-out set: 0.4451851131100404\nMeanAbsoluteError value on hold-out data: 0.6431715488433838\nEpoch: 201\nLoss on hold-out set: 0.44343702651952444\nMeanAbsoluteError value on hold-out data: 0.6414101123809814\nEpoch: 202\nLoss on hold-out set: 0.4440472369131289\nMeanAbsoluteError value on hold-out data: 0.6423078179359436\nEpoch: 203\nLoss on hold-out set: 0.4447176574092162\nMeanAbsoluteError value on hold-out data: 0.6428780555725098\nEpoch: 204\nLoss on hold-out set: 0.44440154652846486\nMeanAbsoluteError value on hold-out data: 0.6419203281402588\nEpoch: 205\nLoss on hold-out set: 0.4421763522060294\nMeanAbsoluteError value on hold-out data: 0.6404064297676086\nEpoch: 206\nLoss on hold-out set: 0.4457006313298878\nMeanAbsoluteError value on hold-out data: 0.6436251401901245\nEpoch: 207\nLoss on hold-out set: 0.44454751359788997\nMeanAbsoluteError value on hold-out data: 0.642621636390686\nEpoch: 208\nLoss on hold-out set: 0.44438493408654867\nMeanAbsoluteError value on hold-out data: 0.6424214839935303\nEpoch: 209\n\n\nLoss on hold-out set: 0.44334235081547185\nMeanAbsoluteError value on hold-out data: 0.6415068507194519\nEpoch: 210\nLoss on hold-out set: 0.44537024199962616\nMeanAbsoluteError value on hold-out data: 0.642821729183197\nEpoch: 211\nLoss on hold-out set: 0.44398138319191177\nMeanAbsoluteError value on hold-out data: 0.6423727869987488\nEpoch: 212\nLoss on hold-out set: 0.44434016942977905\nMeanAbsoluteError value on hold-out data: 0.6425963044166565\nEpoch: 213\nLoss on hold-out set: 0.4416431925798717\nMeanAbsoluteError value on hold-out data: 0.6402907967567444\nEpoch: 214\nLoss on hold-out set: 0.44373079193265813\nMeanAbsoluteError value on hold-out data: 0.6419054269790649\nEpoch: 215\nLoss on hold-out set: 0.44539355917980794\nMeanAbsoluteError value on hold-out data: 0.6431086659431458\nEpoch: 216\nLoss on hold-out set: 0.4422860004399952\nMeanAbsoluteError value on hold-out data: 0.6410336494445801\nEpoch: 217\nLoss on hold-out set: 0.443346967822627\nMeanAbsoluteError value on hold-out data: 0.6411227583885193\nEpoch: 218\nLoss on hold-out set: 0.4438603598820536\nMeanAbsoluteError value on hold-out data: 0.6418833136558533\nEpoch: 219\nLoss on hold-out set: 0.44261356874516133\nMeanAbsoluteError value on hold-out data: 0.6411417126655579\nEpoch: 220\n\n\nLoss on hold-out set: 0.44273753621076284\nMeanAbsoluteError value on hold-out data: 0.6411751508712769\nEpoch: 221\nLoss on hold-out set: 0.44178157338970586\nMeanAbsoluteError value on hold-out data: 0.6405621767044067\nEpoch: 222\nLoss on hold-out set: 0.44207231073003067\nMeanAbsoluteError value on hold-out data: 0.6404234766960144\nEpoch: 223\nLoss on hold-out set: 0.44361892656276103\nMeanAbsoluteError value on hold-out data: 0.6414068341255188\nEpoch: 224\nLoss on hold-out set: 0.4446931991137956\nMeanAbsoluteError value on hold-out data: 0.642447829246521\nEpoch: 225\nLoss on hold-out set: 0.44398548963822815\nMeanAbsoluteError value on hold-out data: 0.6420159935951233\nEpoch: 226\nLoss on hold-out set: 0.44065564635552856\nMeanAbsoluteError value on hold-out data: 0.6397602558135986\nEpoch: 227\nLoss on hold-out set: 0.4425684339121768\nMeanAbsoluteError value on hold-out data: 0.6409175395965576\nEpoch: 228\nLoss on hold-out set: 0.44313475489616394\nMeanAbsoluteError value on hold-out data: 0.6416362524032593\nEpoch: 229\nLoss on hold-out set: 0.44173709577635717\nMeanAbsoluteError value on hold-out data: 0.6405831575393677\nEpoch: 230\nLoss on hold-out set: 0.4451717091234107\nMeanAbsoluteError value on hold-out data: 0.6431043744087219\nEpoch: 231\n\n\nLoss on hold-out set: 0.44248127780462565\nMeanAbsoluteError value on hold-out data: 0.6409093141555786\nEpoch: 232\nLoss on hold-out set: 0.4414456737668891\nMeanAbsoluteError value on hold-out data: 0.6401420831680298\nEpoch: 233\nLoss on hold-out set: 0.4415855454771142\nMeanAbsoluteError value on hold-out data: 0.6400477886199951\nEpoch: 234\nLoss on hold-out set: 0.44236734274186584\nMeanAbsoluteError value on hold-out data: 0.6411596536636353\nEpoch: 235\nLoss on hold-out set: 0.4407345723164709\nMeanAbsoluteError value on hold-out data: 0.6393563151359558\nEpoch: 236\nLoss on hold-out set: 0.4439612195680016\nMeanAbsoluteError value on hold-out data: 0.6420528888702393\nEpoch: 237\nLoss on hold-out set: 0.4431019354807703\nMeanAbsoluteError value on hold-out data: 0.6414679884910583\nEpoch: 238\nLoss on hold-out set: 0.44145549206357254\nMeanAbsoluteError value on hold-out data: 0.6400941610336304\nEpoch: 239\nLoss on hold-out set: 0.4439332869492079\nMeanAbsoluteError value on hold-out data: 0.6423124074935913\nEpoch: 240\nLoss on hold-out set: 0.44171480128639623\nMeanAbsoluteError value on hold-out data: 0.6405342221260071\nEpoch: 241\nLoss on hold-out set: 0.44312768860867147\nMeanAbsoluteError value on hold-out data: 0.6416229009628296\nEpoch: 242\n\n\nLoss on hold-out set: 0.4426751583814621\nMeanAbsoluteError value on hold-out data: 0.6409239768981934\nEpoch: 243\nLoss on hold-out set: 0.4426503055974057\nMeanAbsoluteError value on hold-out data: 0.6409813165664673\nEpoch: 244\nLoss on hold-out set: 0.4426125217425196\nMeanAbsoluteError value on hold-out data: 0.6410447955131531\nEpoch: 245\nLoss on hold-out set: 0.44307820028380346\nMeanAbsoluteError value on hold-out data: 0.6418214440345764\nEpoch: 246\nLoss on hold-out set: 0.4421319443928568\nMeanAbsoluteError value on hold-out data: 0.6402639746665955\nEpoch: 247\nLoss on hold-out set: 0.4418956362887433\nMeanAbsoluteError value on hold-out data: 0.6409250497817993\nEpoch: 248\nLoss on hold-out set: 0.44191325024554606\nMeanAbsoluteError value on hold-out data: 0.6407129764556885\nEpoch: 249\nLoss on hold-out set: 0.4434626674965808\nMeanAbsoluteError value on hold-out data: 0.6419398784637451\nEpoch: 250\nLoss on hold-out set: 0.44221042253469167\nMeanAbsoluteError value on hold-out data: 0.640393853187561\nEpoch: 251\nLoss on hold-out set: 0.4429532893394169\nMeanAbsoluteError value on hold-out data: 0.6408767700195312\nEpoch: 252\nLoss on hold-out set: 0.4416337805358987\nMeanAbsoluteError value on hold-out data: 0.6402255892753601\nEpoch: 253\n\n\nLoss on hold-out set: 0.44213949849731043\nMeanAbsoluteError value on hold-out data: 0.6404075026512146\nEpoch: 254\nLoss on hold-out set: 0.4434988028124759\nMeanAbsoluteError value on hold-out data: 0.6415325403213501\nEpoch: 255\nLoss on hold-out set: 0.4415612009010817\nMeanAbsoluteError value on hold-out data: 0.6398729681968689\nEpoch: 256\nLoss on hold-out set: 0.4409936603746916\nMeanAbsoluteError value on hold-out data: 0.6400665044784546\nReturned to Spot: Validation loss: 0.4409936603746916\n----------------------------------------------\n\nconfig: {'_L_in': 10, '_L_out': 1, 'l1': 8, 'dropout_prob': 0.5015226665924828, 'lr_mult': 0.001, 'batch_size': 16, 'epochs': 16384, 'k_folds': 1, 'patience': 8, 'optimizer': 'NAdam', 'sgd_momentum': 0.9}\nEpoch: 1\nLoss on hold-out set: 0.0907599024082485\nMeanAbsoluteError value on hold-out data: 0.24761947989463806\nEpoch: 2\nLoss on hold-out set: 0.10860289790128407\nMeanAbsoluteError value on hold-out data: 0.26934292912483215\nEpoch: 3\nLoss on hold-out set: 0.10374700062369045\nMeanAbsoluteError value on hold-out data: 0.2640213668346405\nEpoch: 4\nLoss on hold-out set: 0.10466699400230457\nMeanAbsoluteError value on hold-out data: 0.26435166597366333\nEpoch: 5\nLoss on hold-out set: 0.09770887031366951\nMeanAbsoluteError value on hold-out data: 0.26091867685317993\nEpoch: 6\nLoss on hold-out set: 0.10279451124370098\nMeanAbsoluteError value on hold-out data: 0.2613462805747986\nEpoch: 7\nLoss on hold-out set: 0.10051078074856808\nMeanAbsoluteError value on hold-out data: 0.2552301585674286\nEpoch: 8\nLoss on hold-out set: 0.0946777564914603\nMeanAbsoluteError value on hold-out data: 0.2504766285419464\nEpoch: 9\nLoss on hold-out set: 0.10294534658130847\nMeanAbsoluteError value on hold-out data: 0.26373469829559326\nEarly stopping at epoch 8\nReturned to Spot: Validation loss: 0.10294534658130847\n----------------------------------------------\n\nconfig: {'_L_in': 10, '_L_out': 1, 'l1': 16, 'dropout_prob': 0.26673029336651144, 'lr_mult': 0.001, 'batch_size': 8, 'epochs': 16, 'k_folds': 1, 'patience': 16, 'optimizer': 'Adamax', 'sgd_momentum': 0.9}\nEpoch: 1\nLoss on hold-out set: 0.5555819633759951\nMeanAbsoluteError value on hold-out data: 0.7212883234024048\nEpoch: 2\n\n\nLoss on hold-out set: 0.5540642087396822\nMeanAbsoluteError value on hold-out data: 0.7214484810829163\nEpoch: 3\nLoss on hold-out set: 0.556898232353361\nMeanAbsoluteError value on hold-out data: 0.7224522829055786\nEpoch: 4\nLoss on hold-out set: 0.5594656977214312\nMeanAbsoluteError value on hold-out data: 0.72368985414505\nEpoch: 5\nLoss on hold-out set: 0.5529431826189944\nMeanAbsoluteError value on hold-out data: 0.7202922701835632\nEpoch: 6\nLoss on hold-out set: 0.5517641094170118\nMeanAbsoluteError value on hold-out data: 0.7199397683143616\nEpoch: 7\nLoss on hold-out set: 0.5546157179694426\nMeanAbsoluteError value on hold-out data: 0.7200890183448792\nEpoch: 8\nLoss on hold-out set: 0.5550972231124577\nMeanAbsoluteError value on hold-out data: 0.7193150520324707\nEpoch: 9\nLoss on hold-out set: 0.5524471347269259\nMeanAbsoluteError value on hold-out data: 0.7186596989631653\nEpoch: 10\nLoss on hold-out set: 0.5537106959443343\nMeanAbsoluteError value on hold-out data: 0.7196913957595825\nEpoch: 11\nLoss on hold-out set: 0.5398693155301245\nMeanAbsoluteError value on hold-out data: 0.7107371687889099\nEpoch: 12\n\n\nLoss on hold-out set: 0.5489669324536073\nMeanAbsoluteError value on hold-out data: 0.7162120938301086\nEpoch: 13\nLoss on hold-out set: 0.5486662270207154\nMeanAbsoluteError value on hold-out data: 0.717420220375061\nEpoch: 14\nLoss on hold-out set: 0.5455439576977178\nMeanAbsoluteError value on hold-out data: 0.7140594720840454\nEpoch: 15\nLoss on hold-out set: 0.5542420391973696\nMeanAbsoluteError value on hold-out data: 0.7209203839302063\nEpoch: 16\nLoss on hold-out set: 0.5465334559741774\nMeanAbsoluteError value on hold-out data: 0.7153280973434448\nReturned to Spot: Validation loss: 0.5465334559741774\n----------------------------------------------\n\nconfig: {'_L_in': 10, '_L_out': 1, 'l1': 128, 'dropout_prob': 0.8973189149831583, 'lr_mult': 0.001, 'batch_size': 2, 'epochs': 2048, 'k_folds': 1, 'patience': 32, 'optimizer': 'Adam', 'sgd_momentum': 0.9}\nEpoch: 1\nLoss on hold-out set: 0.35942203680829454\nMeanAbsoluteError value on hold-out data: 0.5473533868789673\nEpoch: 2\n\n\nLoss on hold-out set: 0.340117316551817\nMeanAbsoluteError value on hold-out data: 0.5312947630882263\nEpoch: 3\nLoss on hold-out set: 0.3288393857081731\nMeanAbsoluteError value on hold-out data: 0.5259130001068115\nEpoch: 4\nLoss on hold-out set: 0.3357589885592461\nMeanAbsoluteError value on hold-out data: 0.533232569694519\nEpoch: 5\n\n\nLoss on hold-out set: 0.3190875634054343\nMeanAbsoluteError value on hold-out data: 0.5129112005233765\nEpoch: 6\nLoss on hold-out set: 0.3325934727489948\nMeanAbsoluteError value on hold-out data: 0.5251381397247314\nEpoch: 7\nLoss on hold-out set: 0.3181713222960631\nMeanAbsoluteError value on hold-out data: 0.5162366032600403\nEpoch: 8\n\n\nLoss on hold-out set: 0.32848209273070095\nMeanAbsoluteError value on hold-out data: 0.515327513217926\nEpoch: 9\nLoss on hold-out set: 0.32387858025729654\nMeanAbsoluteError value on hold-out data: 0.5157452821731567\nEpoch: 10\nLoss on hold-out set: 0.32641185755841434\nMeanAbsoluteError value on hold-out data: 0.5214706659317017\nEpoch: 11\n\n\nLoss on hold-out set: 0.3068516902656605\nMeanAbsoluteError value on hold-out data: 0.49719303846359253\nEpoch: 12\nLoss on hold-out set: 0.28916342412897694\nMeanAbsoluteError value on hold-out data: 0.4829237461090088\nEpoch: 13\nLoss on hold-out set: 0.29739811081749695\nMeanAbsoluteError value on hold-out data: 0.49592065811157227\nEpoch: 14\n\n\nLoss on hold-out set: 0.3047691786661744\nMeanAbsoluteError value on hold-out data: 0.4996480345726013\nEpoch: 15\nLoss on hold-out set: 0.3049532512660759\nMeanAbsoluteError value on hold-out data: 0.49422740936279297\nEpoch: 16\nLoss on hold-out set: 0.29377639580518006\nMeanAbsoluteError value on hold-out data: 0.48742273449897766\nEpoch: 17\n\n\nLoss on hold-out set: 0.2914588878427943\nMeanAbsoluteError value on hold-out data: 0.4858555495738983\nEpoch: 18\nLoss on hold-out set: 0.29059613360712927\nMeanAbsoluteError value on hold-out data: 0.487634539604187\nEpoch: 19\nLoss on hold-out set: 0.2918362336481611\nMeanAbsoluteError value on hold-out data: 0.48726415634155273\nEpoch: 20\n\n\nLoss on hold-out set: 0.289655896712405\nMeanAbsoluteError value on hold-out data: 0.4864009618759155\nEpoch: 21\nLoss on hold-out set: 0.27464142425606647\nMeanAbsoluteError value on hold-out data: 0.4757027328014374\nEpoch: 22\nLoss on hold-out set: 0.2765393829656144\nMeanAbsoluteError value on hold-out data: 0.4726284146308899\nEpoch: 23\n\n\nLoss on hold-out set: 0.27149822041780375\nMeanAbsoluteError value on hold-out data: 0.46224120259284973\nEpoch: 24\nLoss on hold-out set: 0.2678913458126287\nMeanAbsoluteError value on hold-out data: 0.4624612033367157\nEpoch: 25\nLoss on hold-out set: 0.2523702985420823\nMeanAbsoluteError value on hold-out data: 0.45226627588272095\nEpoch: 26\n\n\nLoss on hold-out set: 0.2567014840990305\nMeanAbsoluteError value on hold-out data: 0.45393162965774536\nEpoch: 27\nLoss on hold-out set: 0.29154734456290804\nMeanAbsoluteError value on hold-out data: 0.49090439081192017\nEpoch: 28\nLoss on hold-out set: 0.28075619449838995\nMeanAbsoluteError value on hold-out data: 0.4758870303630829\nEpoch: 29\n\n\nLoss on hold-out set: 0.2599267060759788\nMeanAbsoluteError value on hold-out data: 0.4552158713340759\nEpoch: 30\nLoss on hold-out set: 0.23721521511363486\nMeanAbsoluteError value on hold-out data: 0.43247750401496887\nEpoch: 31\nLoss on hold-out set: 0.25486929510099193\nMeanAbsoluteError value on hold-out data: 0.44886133074760437\nEpoch: 32\n\n\nLoss on hold-out set: 0.24667249428108334\nMeanAbsoluteError value on hold-out data: 0.44277894496917725\nEpoch: 33\nLoss on hold-out set: 0.23841586945268015\nMeanAbsoluteError value on hold-out data: 0.43295714259147644\nEpoch: 34\nLoss on hold-out set: 0.23702610011639383\nMeanAbsoluteError value on hold-out data: 0.42894449830055237\nEpoch: 35\n\n\nLoss on hold-out set: 0.24268234237407646\nMeanAbsoluteError value on hold-out data: 0.4402633607387543\nEpoch: 36\nLoss on hold-out set: 0.24817818319735427\nMeanAbsoluteError value on hold-out data: 0.43655073642730713\nEpoch: 37\nLoss on hold-out set: 0.23161101255876324\nMeanAbsoluteError value on hold-out data: 0.4279007613658905\nEpoch: 38\n\n\nLoss on hold-out set: 0.22981314857645582\nMeanAbsoluteError value on hold-out data: 0.427016943693161\nEpoch: 39\nLoss on hold-out set: 0.21386192453171438\nMeanAbsoluteError value on hold-out data: 0.4096103012561798\nEpoch: 40\nLoss on hold-out set: 0.2272342791687697\nMeanAbsoluteError value on hold-out data: 0.4223040044307709\nEpoch: 41\n\n\nLoss on hold-out set: 0.2266827812915047\nMeanAbsoluteError value on hold-out data: 0.4165513813495636\nEpoch: 42\nLoss on hold-out set: 0.22464013841934502\nMeanAbsoluteError value on hold-out data: 0.42042240500450134\nEpoch: 43\nLoss on hold-out set: 0.21538425634770345\nMeanAbsoluteError value on hold-out data: 0.40679508447647095\nEpoch: 44\n\n\nLoss on hold-out set: 0.22766628672834485\nMeanAbsoluteError value on hold-out data: 0.41749778389930725\nEpoch: 45\nLoss on hold-out set: 0.22404516187186044\nMeanAbsoluteError value on hold-out data: 0.4167960584163666\nEpoch: 46\nLoss on hold-out set: 0.20977662979159503\nMeanAbsoluteError value on hold-out data: 0.398589551448822\nEpoch: 47\n\n\nLoss on hold-out set: 0.22256495270257196\nMeanAbsoluteError value on hold-out data: 0.41217002272605896\nEpoch: 48\nLoss on hold-out set: 0.20653583007243773\nMeanAbsoluteError value on hold-out data: 0.39590930938720703\nEpoch: 49\nLoss on hold-out set: 0.22486225354174774\nMeanAbsoluteError value on hold-out data: 0.41829031705856323\nEpoch: 50\n\n\nLoss on hold-out set: 0.21296398308865416\nMeanAbsoluteError value on hold-out data: 0.39846551418304443\nEpoch: 51\nLoss on hold-out set: 0.20458407807163895\nMeanAbsoluteError value on hold-out data: 0.3958100378513336\nEpoch: 52\nLoss on hold-out set: 0.19535328616853803\nMeanAbsoluteError value on hold-out data: 0.38979271054267883\nEpoch: 53\n\n\nLoss on hold-out set: 0.18599648925475776\nMeanAbsoluteError value on hold-out data: 0.38307785987854004\nEpoch: 54\nLoss on hold-out set: 0.19595590042027955\nMeanAbsoluteError value on hold-out data: 0.3857477605342865\nEpoch: 55\nLoss on hold-out set: 0.1949584838654846\nMeanAbsoluteError value on hold-out data: 0.3878266513347626\nEpoch: 56\n\n\nLoss on hold-out set: 0.20247651587240398\nMeanAbsoluteError value on hold-out data: 0.3897246718406677\nEpoch: 57\nLoss on hold-out set: 0.19522921663398543\nMeanAbsoluteError value on hold-out data: 0.3829149901866913\nEpoch: 58\nLoss on hold-out set: 0.18953906812394658\nMeanAbsoluteError value on hold-out data: 0.3836454749107361\nEpoch: 59\n\n\nLoss on hold-out set: 0.1983502767390261\nMeanAbsoluteError value on hold-out data: 0.38693109154701233\nEpoch: 60\nLoss on hold-out set: 0.20998683478683233\nMeanAbsoluteError value on hold-out data: 0.39239799976348877\nEpoch: 61\nLoss on hold-out set: 0.1881432940174515\nMeanAbsoluteError value on hold-out data: 0.37518787384033203\nEpoch: 62\n\n\nLoss on hold-out set: 0.1937331968266517\nMeanAbsoluteError value on hold-out data: 0.38558271527290344\nEpoch: 63\nLoss on hold-out set: 0.17847651544647913\nMeanAbsoluteError value on hold-out data: 0.3642744719982147\nEpoch: 64\nLoss on hold-out set: 0.17596024135292584\nMeanAbsoluteError value on hold-out data: 0.3617781698703766\nEpoch: 65\n\n\nLoss on hold-out set: 0.17375697774191698\nMeanAbsoluteError value on hold-out data: 0.36626288294792175\nEpoch: 66\nLoss on hold-out set: 0.1912630452293282\nMeanAbsoluteError value on hold-out data: 0.37759149074554443\nEpoch: 67\nLoss on hold-out set: 0.17724436698985907\nMeanAbsoluteError value on hold-out data: 0.3535984456539154\nEpoch: 68\n\n\nLoss on hold-out set: 0.1815174949976305\nMeanAbsoluteError value on hold-out data: 0.36903032660484314\nEpoch: 69\nLoss on hold-out set: 0.15509856992090743\nMeanAbsoluteError value on hold-out data: 0.33933332562446594\nEpoch: 70\nLoss on hold-out set: 0.1698333578063951\nMeanAbsoluteError value on hold-out data: 0.3500637710094452\nEpoch: 71\n\n\nLoss on hold-out set: 0.16520904455411559\nMeanAbsoluteError value on hold-out data: 0.35265275835990906\nEpoch: 72\nLoss on hold-out set: 0.17313115367045004\nMeanAbsoluteError value on hold-out data: 0.35542982816696167\nEpoch: 73\nLoss on hold-out set: 0.17152695803437382\nMeanAbsoluteError value on hold-out data: 0.3525194525718689\nEpoch: 74\n\n\nLoss on hold-out set: 0.1648854251243271\nMeanAbsoluteError value on hold-out data: 0.3435210585594177\nEpoch: 75\nLoss on hold-out set: 0.17384557359308625\nMeanAbsoluteError value on hold-out data: 0.34949058294296265\nEpoch: 76\nLoss on hold-out set: 0.1489562683357993\nMeanAbsoluteError value on hold-out data: 0.3293082118034363\nEpoch: 77\n\n\nLoss on hold-out set: 0.17002671528141947\nMeanAbsoluteError value on hold-out data: 0.3535289466381073\nEpoch: 78\nLoss on hold-out set: 0.16128799548450237\nMeanAbsoluteError value on hold-out data: 0.3403277099132538\nEpoch: 79\nLoss on hold-out set: 0.1608771170862019\nMeanAbsoluteError value on hold-out data: 0.34000638127326965\nEpoch: 80\n\n\nLoss on hold-out set: 0.17172873428401847\nMeanAbsoluteError value on hold-out data: 0.355564683675766\nEpoch: 81\nLoss on hold-out set: 0.16013986746220327\nMeanAbsoluteError value on hold-out data: 0.34206536412239075\nEpoch: 82\nLoss on hold-out set: 0.16699964294736372\nMeanAbsoluteError value on hold-out data: 0.3495270609855652\nEpoch: 83\n\n\nLoss on hold-out set: 0.15567113618017175\nMeanAbsoluteError value on hold-out data: 0.3439956605434418\nEpoch: 84\nLoss on hold-out set: 0.13422383261960932\nMeanAbsoluteError value on hold-out data: 0.3051757514476776\nEpoch: 85\nLoss on hold-out set: 0.16424098841923598\nMeanAbsoluteError value on hold-out data: 0.34788593649864197\nEpoch: 86\n\n\nLoss on hold-out set: 0.14712993120071285\nMeanAbsoluteError value on hold-out data: 0.3263108432292938\nEpoch: 87\nLoss on hold-out set: 0.15233454243794162\nMeanAbsoluteError value on hold-out data: 0.33332711458206177\nEpoch: 88\nLoss on hold-out set: 0.15584410762259115\nMeanAbsoluteError value on hold-out data: 0.33454030752182007\nEpoch: 89\n\n\nLoss on hold-out set: 0.14892084651238596\nMeanAbsoluteError value on hold-out data: 0.328662246465683\nEpoch: 90\nLoss on hold-out set: 0.14601623078963408\nMeanAbsoluteError value on hold-out data: 0.3201962411403656\nEpoch: 91\nLoss on hold-out set: 0.13716077289311215\nMeanAbsoluteError value on hold-out data: 0.3127284348011017\nEpoch: 92\n\n\nLoss on hold-out set: 0.14047898249700666\nMeanAbsoluteError value on hold-out data: 0.31289368867874146\nEpoch: 93\nLoss on hold-out set: 0.1444991973368451\nMeanAbsoluteError value on hold-out data: 0.32299304008483887\nEpoch: 94\nLoss on hold-out set: 0.15144212607216712\nMeanAbsoluteError value on hold-out data: 0.3261747360229492\nEpoch: 95\n\n\nLoss on hold-out set: 0.13740186965287043\nMeanAbsoluteError value on hold-out data: 0.3165481984615326\nEpoch: 96\nLoss on hold-out set: 0.1335838402295485\nMeanAbsoluteError value on hold-out data: 0.31013938784599304\nEpoch: 97\nLoss on hold-out set: 0.1502707689604722\nMeanAbsoluteError value on hold-out data: 0.3266625702381134\nEpoch: 98\n\n\nLoss on hold-out set: 0.14957713865675032\nMeanAbsoluteError value on hold-out data: 0.32706141471862793\nEpoch: 99\nLoss on hold-out set: 0.13765214182746907\nMeanAbsoluteError value on hold-out data: 0.31613442301750183\nEpoch: 100\nLoss on hold-out set: 0.12786531066250367\nMeanAbsoluteError value on hold-out data: 0.3060765564441681\nEpoch: 101\n\n\nLoss on hold-out set: 0.13616271160858257\nMeanAbsoluteError value on hold-out data: 0.31073009967803955\nEpoch: 102\nLoss on hold-out set: 0.12764892609668702\nMeanAbsoluteError value on hold-out data: 0.296493798494339\nEpoch: 103\nLoss on hold-out set: 0.13361851508370212\nMeanAbsoluteError value on hold-out data: 0.3034282326698303\nEpoch: 104\n\n\nLoss on hold-out set: 0.12137454038563494\nMeanAbsoluteError value on hold-out data: 0.28970322012901306\nEpoch: 105\nLoss on hold-out set: 0.1356013491936028\nMeanAbsoluteError value on hold-out data: 0.31113725900650024\nEpoch: 106\nLoss on hold-out set: 0.11262589131753581\nMeanAbsoluteError value on hold-out data: 0.28187623620033264\nEpoch: 107\n\n\nLoss on hold-out set: 0.14472605059777077\nMeanAbsoluteError value on hold-out data: 0.32358163595199585\nEpoch: 108\nLoss on hold-out set: 0.123876127943707\nMeanAbsoluteError value on hold-out data: 0.2893526554107666\nEpoch: 109\nLoss on hold-out set: 0.12229839983241012\nMeanAbsoluteError value on hold-out data: 0.29284319281578064\nEpoch: 110\n\n\nLoss on hold-out set: 0.13049372204579412\nMeanAbsoluteError value on hold-out data: 0.3062885105609894\nEpoch: 111\nLoss on hold-out set: 0.12387571594988306\nMeanAbsoluteError value on hold-out data: 0.2890383005142212\nEpoch: 112\nLoss on hold-out set: 0.11327295808121562\nMeanAbsoluteError value on hold-out data: 0.2815669775009155\nEpoch: 113\n\n\nLoss on hold-out set: 0.11762650122245152\nMeanAbsoluteError value on hold-out data: 0.288284569978714\nEpoch: 114\nLoss on hold-out set: 0.11521096272025412\nMeanAbsoluteError value on hold-out data: 0.2822805643081665\nEpoch: 115\nLoss on hold-out set: 0.12106607303178558\nMeanAbsoluteError value on hold-out data: 0.28616422414779663\nEpoch: 116\n\n\nLoss on hold-out set: 0.12355651274401074\nMeanAbsoluteError value on hold-out data: 0.29332292079925537\nEpoch: 117\nLoss on hold-out set: 0.11728608721556763\nMeanAbsoluteError value on hold-out data: 0.28626954555511475\nEpoch: 118\nLoss on hold-out set: 0.12032038739533163\nMeanAbsoluteError value on hold-out data: 0.29031500220298767\nEpoch: 119\n\n\nLoss on hold-out set: 0.12818754196943094\nMeanAbsoluteError value on hold-out data: 0.3011290729045868\nEpoch: 120\nLoss on hold-out set: 0.1333511966051689\nMeanAbsoluteError value on hold-out data: 0.3091905415058136\nEpoch: 121\nLoss on hold-out set: 0.1091590139331917\nMeanAbsoluteError value on hold-out data: 0.27781668305397034\nEpoch: 122\n\n\nLoss on hold-out set: 0.12181491513906319\nMeanAbsoluteError value on hold-out data: 0.2912302017211914\nEpoch: 123\nLoss on hold-out set: 0.11089463963871822\nMeanAbsoluteError value on hold-out data: 0.2732159495353699\nEpoch: 124\nLoss on hold-out set: 0.1021037278328246\nMeanAbsoluteError value on hold-out data: 0.26803335547447205\nEpoch: 125\n\n\nLoss on hold-out set: 0.11500476690208113\nMeanAbsoluteError value on hold-out data: 0.27739861607551575\nEpoch: 126\nLoss on hold-out set: 0.11748044946541389\nMeanAbsoluteError value on hold-out data: 0.28494641184806824\nEpoch: 127\nLoss on hold-out set: 0.11358133622134725\nMeanAbsoluteError value on hold-out data: 0.2807934284210205\nEpoch: 128\n\n\nLoss on hold-out set: 0.11022103113510336\nMeanAbsoluteError value on hold-out data: 0.2737456262111664\nEpoch: 129\nLoss on hold-out set: 0.11364755001171337\nMeanAbsoluteError value on hold-out data: 0.280472993850708\nEpoch: 130\nLoss on hold-out set: 0.11112292560438315\nMeanAbsoluteError value on hold-out data: 0.2729261815547943\nEpoch: 131\n\n\nLoss on hold-out set: 0.10050627921591512\nMeanAbsoluteError value on hold-out data: 0.26512157917022705\nEpoch: 132\nLoss on hold-out set: 0.10828669071391535\nMeanAbsoluteError value on hold-out data: 0.2710760533809662\nEpoch: 133\nLoss on hold-out set: 0.11690342619782314\nMeanAbsoluteError value on hold-out data: 0.2823551893234253\nEpoch: 134\n\n\nLoss on hold-out set: 0.10715428820549278\nMeanAbsoluteError value on hold-out data: 0.2714904844760895\nEpoch: 135\nLoss on hold-out set: 0.10407921475668748\nMeanAbsoluteError value on hold-out data: 0.26757198572158813\nEpoch: 136\nLoss on hold-out set: 0.12601793787674978\nMeanAbsoluteError value on hold-out data: 0.28674396872520447\nEpoch: 137\n\n\nLoss on hold-out set: 0.12784489011391997\nMeanAbsoluteError value on hold-out data: 0.2860984206199646\nEpoch: 138\nLoss on hold-out set: 0.10832093603729542\nMeanAbsoluteError value on hold-out data: 0.2646139860153198\nEpoch: 139\nLoss on hold-out set: 0.10902379850313688\nMeanAbsoluteError value on hold-out data: 0.27351465821266174\nEpoch: 140\n\n\nLoss on hold-out set: 0.10812491706960524\nMeanAbsoluteError value on hold-out data: 0.2723095715045929\nEpoch: 141\nLoss on hold-out set: 0.10438801815500483\nMeanAbsoluteError value on hold-out data: 0.2687864601612091\nEpoch: 142\nLoss on hold-out set: 0.10449539088644087\nMeanAbsoluteError value on hold-out data: 0.2637953460216522\nEpoch: 143\n\n\nLoss on hold-out set: 0.10966987963416613\nMeanAbsoluteError value on hold-out data: 0.27203136682510376\nEpoch: 144\nLoss on hold-out set: 0.0995169809924361\nMeanAbsoluteError value on hold-out data: 0.2614741921424866\nEpoch: 145\nLoss on hold-out set: 0.09745104723648788\nMeanAbsoluteError value on hold-out data: 0.25474119186401367\nEpoch: 146\n\n\nLoss on hold-out set: 0.09868114036275073\nMeanAbsoluteError value on hold-out data: 0.26060736179351807\nEpoch: 147\nLoss on hold-out set: 0.10214638291838735\nMeanAbsoluteError value on hold-out data: 0.25949224829673767\nEpoch: 148\nLoss on hold-out set: 0.09370269942019756\nMeanAbsoluteError value on hold-out data: 0.2538761794567108\nEpoch: 149\n\n\nLoss on hold-out set: 0.10047829707214988\nMeanAbsoluteError value on hold-out data: 0.2612086236476898\nEpoch: 150\nLoss on hold-out set: 0.10250811297698723\nMeanAbsoluteError value on hold-out data: 0.2650384306907654\nEpoch: 151\nLoss on hold-out set: 0.11306162872778562\nMeanAbsoluteError value on hold-out data: 0.2802852392196655\nEpoch: 152\n\n\nLoss on hold-out set: 0.09915911229212118\nMeanAbsoluteError value on hold-out data: 0.2598768472671509\nEpoch: 153\nLoss on hold-out set: 0.108122091886277\nMeanAbsoluteError value on hold-out data: 0.2716710865497589\nEpoch: 154\nLoss on hold-out set: 0.11257303280018581\nMeanAbsoluteError value on hold-out data: 0.264741986989975\nEpoch: 155\n\n\nLoss on hold-out set: 0.10850306998395051\nMeanAbsoluteError value on hold-out data: 0.26513752341270447\nEpoch: 156\nLoss on hold-out set: 0.10669659160717856\nMeanAbsoluteError value on hold-out data: 0.271679550409317\nEpoch: 157\nLoss on hold-out set: 0.10071512242662721\nMeanAbsoluteError value on hold-out data: 0.25757279992103577\nEpoch: 158\n\n\nLoss on hold-out set: 0.10535549942869693\nMeanAbsoluteError value on hold-out data: 0.26586610078811646\nEpoch: 159\nLoss on hold-out set: 0.10030520771164447\nMeanAbsoluteError value on hold-out data: 0.2569221556186676\nEpoch: 160\nLoss on hold-out set: 0.10361332301593697\nMeanAbsoluteError value on hold-out data: 0.26323434710502625\nEpoch: 161\n\n\nLoss on hold-out set: 0.1035293353368373\nMeanAbsoluteError value on hold-out data: 0.2631157636642456\nEpoch: 162\nLoss on hold-out set: 0.10177684444390858\nMeanAbsoluteError value on hold-out data: 0.2630542516708374\nEpoch: 163\nLoss on hold-out set: 0.09976425169191012\nMeanAbsoluteError value on hold-out data: 0.2658640444278717\nEpoch: 164\n\n\nLoss on hold-out set: 0.10808157974854112\nMeanAbsoluteError value on hold-out data: 0.269523024559021\nEpoch: 165\nLoss on hold-out set: 0.11317426273909707\nMeanAbsoluteError value on hold-out data: 0.2825244069099426\nEpoch: 166\nLoss on hold-out set: 0.0928951215154181\nMeanAbsoluteError value on hold-out data: 0.24613481760025024\nEpoch: 167\n\n\nLoss on hold-out set: 0.10246243470969299\nMeanAbsoluteError value on hold-out data: 0.26763007044792175\nEpoch: 168\nLoss on hold-out set: 0.1026789629967728\nMeanAbsoluteError value on hold-out data: 0.26824951171875\nEpoch: 169\nLoss on hold-out set: 0.09321827076423991\nMeanAbsoluteError value on hold-out data: 0.24754276871681213\nEpoch: 170\n\n\nLoss on hold-out set: 0.09705553084767113\nMeanAbsoluteError value on hold-out data: 0.2551393508911133\nEpoch: 171\nLoss on hold-out set: 0.09775005352683365\nMeanAbsoluteError value on hold-out data: 0.2540559768676758\nEpoch: 172\nLoss on hold-out set: 0.10172915168261776\nMeanAbsoluteError value on hold-out data: 0.2600668966770172\nEpoch: 173\n\n\nLoss on hold-out set: 0.09290545317111537\nMeanAbsoluteError value on hold-out data: 0.25384628772735596\nEpoch: 174\nLoss on hold-out set: 0.0944040242691214\nMeanAbsoluteError value on hold-out data: 0.2519071400165558\nEpoch: 175\nLoss on hold-out set: 0.08100815595438084\nMeanAbsoluteError value on hold-out data: 0.23731131851673126\nEpoch: 176\n\n\nLoss on hold-out set: 0.09681892585160919\nMeanAbsoluteError value on hold-out data: 0.2513824999332428\nEpoch: 177\nLoss on hold-out set: 0.09306872028391808\nMeanAbsoluteError value on hold-out data: 0.2511293888092041\nEpoch: 178\nLoss on hold-out set: 0.1157253296355096\nMeanAbsoluteError value on hold-out data: 0.27343544363975525\nEpoch: 179\n\n\nLoss on hold-out set: 0.0870953202546419\nMeanAbsoluteError value on hold-out data: 0.23618169128894806\nEpoch: 180\nLoss on hold-out set: 0.10462116401176899\nMeanAbsoluteError value on hold-out data: 0.2608072757720947\nEpoch: 181\nLoss on hold-out set: 0.10727453477370243\nMeanAbsoluteError value on hold-out data: 0.26881644129753113\nEpoch: 182\n\n\nLoss on hold-out set: 0.10238373705564299\nMeanAbsoluteError value on hold-out data: 0.2632840871810913\nEpoch: 183\nLoss on hold-out set: 0.10366135513099531\nMeanAbsoluteError value on hold-out data: 0.26454928517341614\nEpoch: 184\nLoss on hold-out set: 0.08551485699446251\nMeanAbsoluteError value on hold-out data: 0.23792852461338043\nEpoch: 185\n\n\nLoss on hold-out set: 0.10159660036287581\nMeanAbsoluteError value on hold-out data: 0.25938475131988525\nEpoch: 186\nLoss on hold-out set: 0.1068465962074697\nMeanAbsoluteError value on hold-out data: 0.27154839038848877\nEpoch: 187\nLoss on hold-out set: 0.08486659216978296\nMeanAbsoluteError value on hold-out data: 0.23020921647548676\nEpoch: 188\n\n\nLoss on hold-out set: 0.0984190525712135\nMeanAbsoluteError value on hold-out data: 0.2594861686229706\nEpoch: 189\nLoss on hold-out set: 0.09891394621867221\nMeanAbsoluteError value on hold-out data: 0.2513481676578522\nEpoch: 190\nLoss on hold-out set: 0.10134982038289309\nMeanAbsoluteError value on hold-out data: 0.25807029008865356\nEpoch: 191\n\n\nLoss on hold-out set: 0.09101210748155912\nMeanAbsoluteError value on hold-out data: 0.2523293197154999\nEpoch: 192\nLoss on hold-out set: 0.09606388407448928\nMeanAbsoluteError value on hold-out data: 0.2545988857746124\nEpoch: 193\nLoss on hold-out set: 0.10236769631699039\nMeanAbsoluteError value on hold-out data: 0.2602272927761078\nEpoch: 194\n\n\nLoss on hold-out set: 0.08585137002364111\nMeanAbsoluteError value on hold-out data: 0.23038868606090546\nEpoch: 195\nLoss on hold-out set: 0.09980433501147976\nMeanAbsoluteError value on hold-out data: 0.2552485764026642\nEpoch: 196\nLoss on hold-out set: 0.09635448274590695\nMeanAbsoluteError value on hold-out data: 0.2510274648666382\nEpoch: 197\n\n\nLoss on hold-out set: 0.10223913447659773\nMeanAbsoluteError value on hold-out data: 0.2605172097682953\nEpoch: 198\nLoss on hold-out set: 0.09489625854378876\nMeanAbsoluteError value on hold-out data: 0.254561185836792\nEpoch: 199\nLoss on hold-out set: 0.0868308769466239\nMeanAbsoluteError value on hold-out data: 0.2401658147573471\nEpoch: 200\n\n\nLoss on hold-out set: 0.08554651412181556\nMeanAbsoluteError value on hold-out data: 0.24150747060775757\nEpoch: 201\nLoss on hold-out set: 0.08309459253136689\nMeanAbsoluteError value on hold-out data: 0.22918586432933807\nEpoch: 202\nLoss on hold-out set: 0.10159056303285373\nMeanAbsoluteError value on hold-out data: 0.26179012656211853\nEpoch: 203\n\n\nLoss on hold-out set: 0.0802979029873677\nMeanAbsoluteError value on hold-out data: 0.22802868485450745\nEpoch: 204\nLoss on hold-out set: 0.10086305494691866\nMeanAbsoluteError value on hold-out data: 0.2549743056297302\nEpoch: 205\nLoss on hold-out set: 0.09130810380641681\nMeanAbsoluteError value on hold-out data: 0.24415336549282074\nEpoch: 206\n\n\nLoss on hold-out set: 0.09874599172306868\nMeanAbsoluteError value on hold-out data: 0.2598705589771271\nEpoch: 207\nLoss on hold-out set: 0.09546209547358254\nMeanAbsoluteError value on hold-out data: 0.24915343523025513\nEpoch: 208\nLoss on hold-out set: 0.08752690909275164\nMeanAbsoluteError value on hold-out data: 0.2387186735868454\nEpoch: 209\n\n\nLoss on hold-out set: 0.09195197360755022\nMeanAbsoluteError value on hold-out data: 0.24200940132141113\nEpoch: 210\nLoss on hold-out set: 0.09661983530871415\nMeanAbsoluteError value on hold-out data: 0.2523827850818634\nEpoch: 211\nLoss on hold-out set: 0.09746486369651393\nMeanAbsoluteError value on hold-out data: 0.24535971879959106\nEpoch: 212\n\n\nLoss on hold-out set: 0.09593248407618375\nMeanAbsoluteError value on hold-out data: 0.24527201056480408\nEpoch: 213\nLoss on hold-out set: 0.08762997447357823\nMeanAbsoluteError value on hold-out data: 0.24818865954875946\nEpoch: 214\nLoss on hold-out set: 0.09062037191334336\nMeanAbsoluteError value on hold-out data: 0.2487483024597168\nEpoch: 215\n\n\nLoss on hold-out set: 0.08981889275378005\nMeanAbsoluteError value on hold-out data: 0.24424625933170319\nEpoch: 216\nLoss on hold-out set: 0.08029537183271411\nMeanAbsoluteError value on hold-out data: 0.22789987921714783\nEpoch: 217\nLoss on hold-out set: 0.09135659327497705\nMeanAbsoluteError value on hold-out data: 0.24170203506946564\nEpoch: 218\n\n\nLoss on hold-out set: 0.09148098391635964\nMeanAbsoluteError value on hold-out data: 0.2430833876132965\nEpoch: 219\nLoss on hold-out set: 0.10050653902503351\nMeanAbsoluteError value on hold-out data: 0.2615955173969269\nEpoch: 220\nLoss on hold-out set: 0.09528928042234232\nMeanAbsoluteError value on hold-out data: 0.24324889481067657\nEpoch: 221\n\n\nLoss on hold-out set: 0.0922065845564551\nMeanAbsoluteError value on hold-out data: 0.2450760453939438\nEpoch: 222\nLoss on hold-out set: 0.09155014637392014\nMeanAbsoluteError value on hold-out data: 0.25402215123176575\nEpoch: 223\nLoss on hold-out set: 0.09702969212356645\nMeanAbsoluteError value on hold-out data: 0.256540447473526\nEpoch: 224\n\n\nLoss on hold-out set: 0.10398892153083579\nMeanAbsoluteError value on hold-out data: 0.2546880543231964\nEpoch: 225\nLoss on hold-out set: 0.0905076963895893\nMeanAbsoluteError value on hold-out data: 0.242879718542099\nEpoch: 226\nLoss on hold-out set: 0.09558403013089749\nMeanAbsoluteError value on hold-out data: 0.24483685195446014\nEpoch: 227\n\n\nLoss on hold-out set: 0.08162066148128361\nMeanAbsoluteError value on hold-out data: 0.2303251326084137\nEpoch: 228\nLoss on hold-out set: 0.10206926486736241\nMeanAbsoluteError value on hold-out data: 0.2560073733329773\nEpoch: 229\nLoss on hold-out set: 0.07413971603848041\nMeanAbsoluteError value on hold-out data: 0.219350203871727\nEpoch: 230\n\n\nLoss on hold-out set: 0.09404376904810002\nMeanAbsoluteError value on hold-out data: 0.2447337657213211\nEpoch: 231\nLoss on hold-out set: 0.07021813147468492\nMeanAbsoluteError value on hold-out data: 0.21451835334300995\nEpoch: 232\nLoss on hold-out set: 0.10799305157735944\nMeanAbsoluteError value on hold-out data: 0.27033549547195435\nEpoch: 233\n\n\nLoss on hold-out set: 0.09353746463195421\nMeanAbsoluteError value on hold-out data: 0.24237845838069916\nEpoch: 234\nLoss on hold-out set: 0.09533997783049321\nMeanAbsoluteError value on hold-out data: 0.2515796720981598\nEpoch: 235\nLoss on hold-out set: 0.087083221412225\nMeanAbsoluteError value on hold-out data: 0.2318393439054489\nEpoch: 236\n\n\nLoss on hold-out set: 0.09121541720582173\nMeanAbsoluteError value on hold-out data: 0.24456067383289337\nEpoch: 237\nLoss on hold-out set: 0.0929722089949064\nMeanAbsoluteError value on hold-out data: 0.23718376457691193\nEpoch: 238\nLoss on hold-out set: 0.08488025765870892\nMeanAbsoluteError value on hold-out data: 0.22975881397724152\nEpoch: 239\n\n\nLoss on hold-out set: 0.10443284192471765\nMeanAbsoluteError value on hold-out data: 0.26233816146850586\nEpoch: 240\nLoss on hold-out set: 0.09751650258889034\nMeanAbsoluteError value on hold-out data: 0.25210845470428467\nEpoch: 241\nLoss on hold-out set: 0.08799825655529275\nMeanAbsoluteError value on hold-out data: 0.23622667789459229\nEpoch: 242\n\n\nLoss on hold-out set: 0.09737830657317924\nMeanAbsoluteError value on hold-out data: 0.25393882393836975\nEpoch: 243\nLoss on hold-out set: 0.09241264024244931\nMeanAbsoluteError value on hold-out data: 0.2452748566865921\nEpoch: 244\nLoss on hold-out set: 0.09117106129454139\nMeanAbsoluteError value on hold-out data: 0.23803527653217316\nEpoch: 245\n\n\nLoss on hold-out set: 0.08925814898218959\nMeanAbsoluteError value on hold-out data: 0.24430857598781586\nEpoch: 246\nLoss on hold-out set: 0.10177093826040315\nMeanAbsoluteError value on hold-out data: 0.2575643062591553\nEpoch: 247\nLoss on hold-out set: 0.0777476977884847\nMeanAbsoluteError value on hold-out data: 0.2174939215183258\nEpoch: 248\n\n\nLoss on hold-out set: 0.08332410309485264\nMeanAbsoluteError value on hold-out data: 0.2338300347328186\nEpoch: 249\nLoss on hold-out set: 0.08193271123959373\nMeanAbsoluteError value on hold-out data: 0.22591537237167358\nEpoch: 250\nLoss on hold-out set: 0.08771158823510632\nMeanAbsoluteError value on hold-out data: 0.2387746423482895\nEpoch: 251\n\n\nLoss on hold-out set: 0.08126815342189123\nMeanAbsoluteError value on hold-out data: 0.22467567026615143\nEpoch: 252\nLoss on hold-out set: 0.09404783456469885\nMeanAbsoluteError value on hold-out data: 0.2411993145942688\nEpoch: 253\nLoss on hold-out set: 0.08702320758835412\nMeanAbsoluteError value on hold-out data: 0.2345535010099411\nEpoch: 254\n\n\nLoss on hold-out set: 0.0999036842243125\nMeanAbsoluteError value on hold-out data: 0.2553742825984955\nEpoch: 255\nLoss on hold-out set: 0.09006271986135592\nMeanAbsoluteError value on hold-out data: 0.23417551815509796\nEpoch: 256\nLoss on hold-out set: 0.08867481812136248\nMeanAbsoluteError value on hold-out data: 0.24698998034000397\nEpoch: 257\n\n\nLoss on hold-out set: 0.07442789652695259\nMeanAbsoluteError value on hold-out data: 0.22076138854026794\nEpoch: 258\nLoss on hold-out set: 0.07324298803966182\nMeanAbsoluteError value on hold-out data: 0.2221785932779312\nEpoch: 259\nLoss on hold-out set: 0.09793501357703159\nMeanAbsoluteError value on hold-out data: 0.2547050416469574\nEpoch: 260\n\n\nLoss on hold-out set: 0.09600132483212898\nMeanAbsoluteError value on hold-out data: 0.24808631837368011\nEpoch: 261\nLoss on hold-out set: 0.0877704827322547\nMeanAbsoluteError value on hold-out data: 0.24204887449741364\nEpoch: 262\nLoss on hold-out set: 0.08901351906902467\nMeanAbsoluteError value on hold-out data: 0.2341025471687317\nEpoch: 263\n\n\nLoss on hold-out set: 0.0800885943544563\nMeanAbsoluteError value on hold-out data: 0.22656016051769257\nEarly stopping at epoch 262\nReturned to Spot: Validation loss: 0.0800885943544563\n----------------------------------------------\n\n\n\nconfig: {'_L_in': 10, '_L_out': 1, 'l1': 128, 'dropout_prob': 0.8941737037376589, 'lr_mult': 0.001, 'batch_size': 2, 'epochs': 2048, 'k_folds': 1, 'patience': 32, 'optimizer': 'Adam', 'sgd_momentum': 0.9}\nEpoch: 1\nLoss on hold-out set: 0.6092797444264094\nMeanAbsoluteError value on hold-out data: 0.735221803188324\nEpoch: 2\nLoss on hold-out set: 0.6252139050265153\nMeanAbsoluteError value on hold-out data: 0.7479813694953918\nEpoch: 3\n\n\nLoss on hold-out set: 0.6169953216363986\nMeanAbsoluteError value on hold-out data: 0.7423505187034607\nEpoch: 4\nLoss on hold-out set: 0.6043034598231316\nMeanAbsoluteError value on hold-out data: 0.7324802279472351\nEpoch: 5\nLoss on hold-out set: 0.593123180915912\nMeanAbsoluteError value on hold-out data: 0.7228860259056091\nEpoch: 6\n\n\nLoss on hold-out set: 0.6306304063399633\nMeanAbsoluteError value on hold-out data: 0.7507378458976746\nEpoch: 7\nLoss on hold-out set: 0.6268791493028403\nMeanAbsoluteError value on hold-out data: 0.7491353750228882\nEpoch: 8\nLoss on hold-out set: 0.6119830322017272\nMeanAbsoluteError value on hold-out data: 0.7376520037651062\nEpoch: 9\n\n\nLoss on hold-out set: 0.5535879143079122\nMeanAbsoluteError value on hold-out data: 0.702744722366333\nEpoch: 10\nLoss on hold-out set: 0.5660805068040887\nMeanAbsoluteError value on hold-out data: 0.7106385231018066\nEpoch: 11\nLoss on hold-out set: 0.5772583024700483\nMeanAbsoluteError value on hold-out data: 0.7124667167663574\nEpoch: 12\n\n\nLoss on hold-out set: 0.5899955174823602\nMeanAbsoluteError value on hold-out data: 0.7205853462219238\nEpoch: 13\nLoss on hold-out set: 0.5785451020797093\nMeanAbsoluteError value on hold-out data: 0.7146211862564087\nEpoch: 14\nLoss on hold-out set: 0.5509399648259083\nMeanAbsoluteError value on hold-out data: 0.7001301050186157\nEpoch: 15\n\n\nLoss on hold-out set: 0.5669047906498115\nMeanAbsoluteError value on hold-out data: 0.7074636220932007\nEpoch: 16\nLoss on hold-out set: 0.5356857539961736\nMeanAbsoluteError value on hold-out data: 0.6848175525665283\nEpoch: 17\nLoss on hold-out set: 0.5295113852868477\nMeanAbsoluteError value on hold-out data: 0.6805733442306519\nEpoch: 18\n\n\nLoss on hold-out set: 0.5307178633411725\nMeanAbsoluteError value on hold-out data: 0.6794905662536621\nEpoch: 19\nLoss on hold-out set: 0.5253999585906665\nMeanAbsoluteError value on hold-out data: 0.6801208853721619\nEpoch: 20\nLoss on hold-out set: 0.5115564171969891\nMeanAbsoluteError value on hold-out data: 0.6736929416656494\nEpoch: 21\n\n\nLoss on hold-out set: 0.5512571655710539\nMeanAbsoluteError value on hold-out data: 0.6966819763183594\nEpoch: 22\nLoss on hold-out set: 0.5329030809303125\nMeanAbsoluteError value on hold-out data: 0.679682731628418\nEpoch: 23\nLoss on hold-out set: 0.5224943852921327\nMeanAbsoluteError value on hold-out data: 0.676544189453125\nEpoch: 24\n\n\nLoss on hold-out set: 0.48807271003723146\nMeanAbsoluteError value on hold-out data: 0.6553690433502197\nEpoch: 25\nLoss on hold-out set: 0.5167311435192823\nMeanAbsoluteError value on hold-out data: 0.6660130620002747\nEpoch: 26\nLoss on hold-out set: 0.5177141772387162\nMeanAbsoluteError value on hold-out data: 0.6755843162536621\nEpoch: 27\n\n\nLoss on hold-out set: 0.49164313269158205\nMeanAbsoluteError value on hold-out data: 0.6576112508773804\nEpoch: 28\nLoss on hold-out set: 0.48059559663447243\nMeanAbsoluteError value on hold-out data: 0.6471665501594543\nEpoch: 29\nLoss on hold-out set: 0.47651040559013685\nMeanAbsoluteError value on hold-out data: 0.6451191902160645\nEpoch: 30\n\n\nLoss on hold-out set: 0.48794069776932397\nMeanAbsoluteError value on hold-out data: 0.6519941091537476\nEpoch: 31\nLoss on hold-out set: 0.48096685404578843\nMeanAbsoluteError value on hold-out data: 0.6445003151893616\nEpoch: 32\nLoss on hold-out set: 0.48326448261737825\nMeanAbsoluteError value on hold-out data: 0.6446928381919861\nEpoch: 33\n\n\nLoss on hold-out set: 0.45480635846654577\nMeanAbsoluteError value on hold-out data: 0.6273816227912903\nEpoch: 34\nLoss on hold-out set: 0.4497255781789621\nMeanAbsoluteError value on hold-out data: 0.622063398361206\nEpoch: 35\nLoss on hold-out set: 0.4619014692058166\nMeanAbsoluteError value on hold-out data: 0.6351042985916138\nEpoch: 36\n\n\nLoss on hold-out set: 0.4573685630659262\nMeanAbsoluteError value on hold-out data: 0.6295377612113953\nEpoch: 37\nLoss on hold-out set: 0.4284983143707116\nMeanAbsoluteError value on hold-out data: 0.612689733505249\nEpoch: 38\nLoss on hold-out set: 0.4615280417104562\nMeanAbsoluteError value on hold-out data: 0.6241000294685364\nEpoch: 39\n\n\nLoss on hold-out set: 0.42544095593194164\nMeanAbsoluteError value on hold-out data: 0.6086981892585754\nEpoch: 40\nLoss on hold-out set: 0.4626134578883648\nMeanAbsoluteError value on hold-out data: 0.6320423483848572\nEpoch: 41\nLoss on hold-out set: 0.4431185081849496\nMeanAbsoluteError value on hold-out data: 0.616335928440094\nEpoch: 42\n\n\nLoss on hold-out set: 0.4345830073952675\nMeanAbsoluteError value on hold-out data: 0.6046192646026611\nEpoch: 43\nLoss on hold-out set: 0.4229515016078949\nMeanAbsoluteError value on hold-out data: 0.6034857630729675\nEpoch: 44\nLoss on hold-out set: 0.42025726914405825\nMeanAbsoluteError value on hold-out data: 0.5941047072410583\nEpoch: 45\n\n\nLoss on hold-out set: 0.41616627094646297\nMeanAbsoluteError value on hold-out data: 0.5928467512130737\nEpoch: 46\nLoss on hold-out set: 0.4303734613209963\nMeanAbsoluteError value on hold-out data: 0.6097280383110046\nEpoch: 47\nLoss on hold-out set: 0.4399117068698009\nMeanAbsoluteError value on hold-out data: 0.6127111911773682\nEpoch: 48\n\n\nLoss on hold-out set: 0.38362244366668163\nMeanAbsoluteError value on hold-out data: 0.570936918258667\nEpoch: 49\nLoss on hold-out set: 0.425918795162191\nMeanAbsoluteError value on hold-out data: 0.6023797392845154\nEpoch: 50\nLoss on hold-out set: 0.37944095775485037\nMeanAbsoluteError value on hold-out data: 0.5657235383987427\nEpoch: 51\n\n\nLoss on hold-out set: 0.41909450207526483\nMeanAbsoluteError value on hold-out data: 0.5988107919692993\nEpoch: 52\nLoss on hold-out set: 0.38058179163684447\nMeanAbsoluteError value on hold-out data: 0.5681595206260681\nEpoch: 53\nLoss on hold-out set: 0.38593288699785866\nMeanAbsoluteError value on hold-out data: 0.5740458965301514\nEpoch: 54\n\n\nLoss on hold-out set: 0.3818231924623251\nMeanAbsoluteError value on hold-out data: 0.5708422660827637\nEpoch: 55\nLoss on hold-out set: 0.37087017672757305\nMeanAbsoluteError value on hold-out data: 0.5588675737380981\nEpoch: 56\nLoss on hold-out set: 0.3573351814846198\nMeanAbsoluteError value on hold-out data: 0.5470030307769775\nEpoch: 57\n\n\nLoss on hold-out set: 0.3434672603507837\nMeanAbsoluteError value on hold-out data: 0.542571485042572\nEpoch: 58\nLoss on hold-out set: 0.35915327524145446\nMeanAbsoluteError value on hold-out data: 0.5502406358718872\nEpoch: 59\nLoss on hold-out set: 0.362757097814853\nMeanAbsoluteError value on hold-out data: 0.5469200611114502\nEpoch: 60\n\n\nLoss on hold-out set: 0.34862515702843666\nMeanAbsoluteError value on hold-out data: 0.5439870357513428\nEpoch: 61\nLoss on hold-out set: 0.35205483246594665\nMeanAbsoluteError value on hold-out data: 0.5397988557815552\nEpoch: 62\nLoss on hold-out set: 0.3416006386093795\nMeanAbsoluteError value on hold-out data: 0.5357463359832764\nEpoch: 63\n\n\nLoss on hold-out set: 0.360205436895291\nMeanAbsoluteError value on hold-out data: 0.5493037700653076\nEpoch: 64\nLoss on hold-out set: 0.37136754327764115\nMeanAbsoluteError value on hold-out data: 0.5640350580215454\nEpoch: 65\nLoss on hold-out set: 0.3257768782724937\nMeanAbsoluteError value on hold-out data: 0.5197075009346008\nEpoch: 66\n\n\nLoss on hold-out set: 0.3183700472985705\nMeanAbsoluteError value on hold-out data: 0.5180015563964844\nEpoch: 67\nLoss on hold-out set: 0.3064657030813396\nMeanAbsoluteError value on hold-out data: 0.501442015171051\nEpoch: 68\nLoss on hold-out set: 0.3315387768919269\nMeanAbsoluteError value on hold-out data: 0.5204872488975525\nEpoch: 69\n\n\nLoss on hold-out set: 0.3213877599189679\nMeanAbsoluteError value on hold-out data: 0.5176078081130981\nEpoch: 70\nLoss on hold-out set: 0.32324237955734136\nMeanAbsoluteError value on hold-out data: 0.5120276808738708\nEpoch: 71\nLoss on hold-out set: 0.3242294270793597\nMeanAbsoluteError value on hold-out data: 0.519134521484375\nEpoch: 72\n\n\nLoss on hold-out set: 0.3297145739042511\nMeanAbsoluteError value on hold-out data: 0.5156093239784241\nEpoch: 73\nLoss on hold-out set: 0.3148142039217055\nMeanAbsoluteError value on hold-out data: 0.5133469700813293\nEpoch: 74\nLoss on hold-out set: 0.3068324515471856\nMeanAbsoluteError value on hold-out data: 0.5004062652587891\nEpoch: 75\n\n\nLoss on hold-out set: 0.2933913297081987\nMeanAbsoluteError value on hold-out data: 0.49451735615730286\nEpoch: 76\nLoss on hold-out set: 0.3148229472587506\nMeanAbsoluteError value on hold-out data: 0.5052622556686401\nEpoch: 77\nLoss on hold-out set: 0.3124183105987807\nMeanAbsoluteError value on hold-out data: 0.5068725347518921\nEpoch: 78\n\n\nLoss on hold-out set: 0.2927109773736447\nMeanAbsoluteError value on hold-out data: 0.4815131723880768\nEpoch: 79\nLoss on hold-out set: 0.2910944478089611\nMeanAbsoluteError value on hold-out data: 0.4837327003479004\nEpoch: 80\nLoss on hold-out set: 0.28482427101582286\nMeanAbsoluteError value on hold-out data: 0.48100516200065613\nEpoch: 81\n\n\nLoss on hold-out set: 0.255353768489634\nMeanAbsoluteError value on hold-out data: 0.4441581666469574\nEpoch: 82\nLoss on hold-out set: 0.28620949341449886\nMeanAbsoluteError value on hold-out data: 0.4771195352077484\nEpoch: 83\nLoss on hold-out set: 0.27753106674800315\nMeanAbsoluteError value on hold-out data: 0.47622033953666687\nEpoch: 84\n\n\nLoss on hold-out set: 0.2872464527872701\nMeanAbsoluteError value on hold-out data: 0.4758186340332031\nEpoch: 85\nLoss on hold-out set: 0.27936273060700234\nMeanAbsoluteError value on hold-out data: 0.47478607296943665\nEpoch: 86\nLoss on hold-out set: 0.28135068562813104\nMeanAbsoluteError value on hold-out data: 0.4790174961090088\nEpoch: 87\n\n\nLoss on hold-out set: 0.268540409989655\nMeanAbsoluteError value on hold-out data: 0.4588207006454468\nEpoch: 88\nLoss on hold-out set: 0.29486672264523806\nMeanAbsoluteError value on hold-out data: 0.4817069470882416\nEpoch: 89\nLoss on hold-out set: 0.26274818256652605\nMeanAbsoluteError value on hold-out data: 0.4546467065811157\nEpoch: 90\n\n\nLoss on hold-out set: 0.27618946696942054\nMeanAbsoluteError value on hold-out data: 0.47169172763824463\nEpoch: 91\nLoss on hold-out set: 0.2568877574180563\nMeanAbsoluteError value on hold-out data: 0.4547283351421356\nEpoch: 92\nLoss on hold-out set: 0.2625684273809505\nMeanAbsoluteError value on hold-out data: 0.4504115879535675\nEpoch: 93\n\n\nLoss on hold-out set: 0.24136565074014166\nMeanAbsoluteError value on hold-out data: 0.4346344470977783\nEpoch: 94\nLoss on hold-out set: 0.2431881833340352\nMeanAbsoluteError value on hold-out data: 0.43469518423080444\nEpoch: 95\nLoss on hold-out set: 0.26168598445132374\nMeanAbsoluteError value on hold-out data: 0.44678643345832825\nEpoch: 96\n\n\nLoss on hold-out set: 0.2357846260551984\nMeanAbsoluteError value on hold-out data: 0.4227188527584076\nEpoch: 97\nLoss on hold-out set: 0.24118846137697497\nMeanAbsoluteError value on hold-out data: 0.4355393350124359\nEpoch: 98\nLoss on hold-out set: 0.23401787146305045\nMeanAbsoluteError value on hold-out data: 0.4264860153198242\nEpoch: 99\n\n\nLoss on hold-out set: 0.2628121180801342\nMeanAbsoluteError value on hold-out data: 0.45335590839385986\nEpoch: 100\nLoss on hold-out set: 0.23090530426707118\nMeanAbsoluteError value on hold-out data: 0.4227588176727295\nEpoch: 101\nLoss on hold-out set: 0.2481928726270174\nMeanAbsoluteError value on hold-out data: 0.43762511014938354\nEpoch: 102\n\n\nLoss on hold-out set: 0.2371425759367412\nMeanAbsoluteError value on hold-out data: 0.4289780557155609\nEpoch: 103\nLoss on hold-out set: 0.23892016130809982\nMeanAbsoluteError value on hold-out data: 0.43181344866752625\nEpoch: 104\nLoss on hold-out set: 0.22248011558006206\nMeanAbsoluteError value on hold-out data: 0.41746649146080017\nEpoch: 105\n\n\nLoss on hold-out set: 0.23059281295999728\nMeanAbsoluteError value on hold-out data: 0.4215588867664337\nEpoch: 106\nLoss on hold-out set: 0.21838034548796714\nMeanAbsoluteError value on hold-out data: 0.4029487371444702\nEpoch: 107\nLoss on hold-out set: 0.21990225184553613\nMeanAbsoluteError value on hold-out data: 0.40839922428131104\nEpoch: 108\n\n\nLoss on hold-out set: 0.2023099168362872\nMeanAbsoluteError value on hold-out data: 0.3893437087535858\nEpoch: 109\nLoss on hold-out set: 0.21456891510635615\nMeanAbsoluteError value on hold-out data: 0.40147995948791504\nEpoch: 110\nLoss on hold-out set: 0.20247146303455035\nMeanAbsoluteError value on hold-out data: 0.39099937677383423\nEpoch: 111\n\n\nLoss on hold-out set: 0.20842790705365283\nMeanAbsoluteError value on hold-out data: 0.393929123878479\nEpoch: 112\nLoss on hold-out set: 0.21008238877169788\nMeanAbsoluteError value on hold-out data: 0.4006597101688385\nEpoch: 113\nLoss on hold-out set: 0.21634326549867788\nMeanAbsoluteError value on hold-out data: 0.407402366399765\nEpoch: 114\n\n\nLoss on hold-out set: 0.21707706163947782\nMeanAbsoluteError value on hold-out data: 0.40155139565467834\nEpoch: 115\nLoss on hold-out set: 0.20621493414665262\nMeanAbsoluteError value on hold-out data: 0.39383184909820557\nEpoch: 116\nLoss on hold-out set: 0.19600173471185067\nMeanAbsoluteError value on hold-out data: 0.3818179965019226\nEpoch: 117\n\n\nLoss on hold-out set: 0.20354320403964568\nMeanAbsoluteError value on hold-out data: 0.3922022879123688\nEpoch: 118\nLoss on hold-out set: 0.18981659584057828\nMeanAbsoluteError value on hold-out data: 0.3794736862182617\nEpoch: 119\nLoss on hold-out set: 0.20937593007770677\nMeanAbsoluteError value on hold-out data: 0.39442914724349976\nEpoch: 120\n\n\nLoss on hold-out set: 0.1923049230252703\nMeanAbsoluteError value on hold-out data: 0.3877710700035095\nEpoch: 121\nLoss on hold-out set: 0.18493319551926107\nMeanAbsoluteError value on hold-out data: 0.3668733835220337\nEpoch: 122\nLoss on hold-out set: 0.20633006950219474\nMeanAbsoluteError value on hold-out data: 0.39187178015708923\nEpoch: 123\n\n\nLoss on hold-out set: 0.18566461597879727\nMeanAbsoluteError value on hold-out data: 0.36166077852249146\nEpoch: 124\nLoss on hold-out set: 0.1832149511653309\nMeanAbsoluteError value on hold-out data: 0.36804524064064026\nEpoch: 125\nLoss on hold-out set: 0.19267334413404266\nMeanAbsoluteError value on hold-out data: 0.37318480014801025\nEpoch: 126\n\n\nLoss on hold-out set: 0.1806177544996414\nMeanAbsoluteError value on hold-out data: 0.36181947588920593\nEpoch: 127\nLoss on hold-out set: 0.1822307922846327\nMeanAbsoluteError value on hold-out data: 0.36949291825294495\nEpoch: 128\nLoss on hold-out set: 0.18956777266905797\nMeanAbsoluteError value on hold-out data: 0.3679845333099365\nEpoch: 129\n\n\nLoss on hold-out set: 0.19075591767517228\nMeanAbsoluteError value on hold-out data: 0.36986127495765686\nEpoch: 130\nLoss on hold-out set: 0.17182010455677907\nMeanAbsoluteError value on hold-out data: 0.35150131583213806\nEpoch: 131\nLoss on hold-out set: 0.18131672617979347\nMeanAbsoluteError value on hold-out data: 0.3679136335849762\nEpoch: 132\n\n\nLoss on hold-out set: 0.16570507530122996\nMeanAbsoluteError value on hold-out data: 0.3519062399864197\nEpoch: 133\nLoss on hold-out set: 0.17122932986084682\nMeanAbsoluteError value on hold-out data: 0.35133272409439087\nEpoch: 134\nLoss on hold-out set: 0.17267855714696148\nMeanAbsoluteError value on hold-out data: 0.3538814187049866\nEpoch: 135\n\n\nLoss on hold-out set: 0.14941454908034454\nMeanAbsoluteError value on hold-out data: 0.3311252295970917\nEpoch: 136\nLoss on hold-out set: 0.16239871056071328\nMeanAbsoluteError value on hold-out data: 0.3358157277107239\nEpoch: 137\nLoss on hold-out set: 0.1719312709585453\nMeanAbsoluteError value on hold-out data: 0.355365514755249\nEpoch: 138\n\n\nLoss on hold-out set: 0.16336392629581192\nMeanAbsoluteError value on hold-out data: 0.33444103598594666\nEpoch: 139\nLoss on hold-out set: 0.1831935465351368\nMeanAbsoluteError value on hold-out data: 0.3619583249092102\nEpoch: 140\nLoss on hold-out set: 0.16711582879070191\nMeanAbsoluteError value on hold-out data: 0.34871265292167664\nEpoch: 141\n\n\nLoss on hold-out set: 0.16435480381439752\nMeanAbsoluteError value on hold-out data: 0.33741888403892517\nEpoch: 142\nLoss on hold-out set: 0.1707935170425723\nMeanAbsoluteError value on hold-out data: 0.35266032814979553\nEpoch: 143\nLoss on hold-out set: 0.16456656720334042\nMeanAbsoluteError value on hold-out data: 0.3332984447479248\nEpoch: 144\n\n\nLoss on hold-out set: 0.14553915120040378\nMeanAbsoluteError value on hold-out data: 0.3260967433452606\nEpoch: 145\nLoss on hold-out set: 0.1617712262214627\nMeanAbsoluteError value on hold-out data: 0.3380987346172333\nEpoch: 146\nLoss on hold-out set: 0.16666443177809317\nMeanAbsoluteError value on hold-out data: 0.3498612940311432\nEpoch: 147\n\n\nLoss on hold-out set: 0.14959406814615553\nMeanAbsoluteError value on hold-out data: 0.3298910856246948\nEpoch: 148\nLoss on hold-out set: 0.14579603141212524\nMeanAbsoluteError value on hold-out data: 0.320661336183548\nEpoch: 149\nLoss on hold-out set: 0.14921755488282845\nMeanAbsoluteError value on hold-out data: 0.3263871371746063\nEpoch: 150\n\n\nLoss on hold-out set: 0.13905596874727053\nMeanAbsoluteError value on hold-out data: 0.308691143989563\nEpoch: 151\nLoss on hold-out set: 0.15830944856240725\nMeanAbsoluteError value on hold-out data: 0.33644118905067444\nEpoch: 152\nLoss on hold-out set: 0.1524787088483572\nMeanAbsoluteError value on hold-out data: 0.33552899956703186\nEpoch: 153\n\n\nLoss on hold-out set: 0.15514301101056238\nMeanAbsoluteError value on hold-out data: 0.32895728945732117\nEpoch: 154\nLoss on hold-out set: 0.14678748417568083\nMeanAbsoluteError value on hold-out data: 0.32654762268066406\nEpoch: 155\nLoss on hold-out set: 0.1446841979661258\nMeanAbsoluteError value on hold-out data: 0.3194190561771393\nEpoch: 156\n\n\nLoss on hold-out set: 0.13453042154743647\nMeanAbsoluteError value on hold-out data: 0.29950129985809326\nEpoch: 157\nLoss on hold-out set: 0.1368563998878623\nMeanAbsoluteError value on hold-out data: 0.30520495772361755\nEpoch: 158\nLoss on hold-out set: 0.14822875382611528\nMeanAbsoluteError value on hold-out data: 0.324532151222229\nEpoch: 159\n\n\nLoss on hold-out set: 0.15180579933570698\nMeanAbsoluteError value on hold-out data: 0.3296441435813904\nEpoch: 160\nLoss on hold-out set: 0.14939323871629312\nMeanAbsoluteError value on hold-out data: 0.3195478320121765\nEpoch: 161\nLoss on hold-out set: 0.14210320755839348\nMeanAbsoluteError value on hold-out data: 0.31314677000045776\nEpoch: 162\n\n\nLoss on hold-out set: 0.1324589574189546\nMeanAbsoluteError value on hold-out data: 0.3006356358528137\nEpoch: 163\nLoss on hold-out set: 0.14296881408818687\nMeanAbsoluteError value on hold-out data: 0.31706905364990234\nEpoch: 164\nLoss on hold-out set: 0.1390774669071349\nMeanAbsoluteError value on hold-out data: 0.3077169358730316\nEpoch: 165\n\n\nLoss on hold-out set: 0.12986988760894747\nMeanAbsoluteError value on hold-out data: 0.3068736791610718\nEpoch: 166\nLoss on hold-out set: 0.1442980692004009\nMeanAbsoluteError value on hold-out data: 0.3159750699996948\nEpoch: 167\nLoss on hold-out set: 0.13395696219056843\nMeanAbsoluteError value on hold-out data: 0.31104007363319397\nEpoch: 168\n\n\nLoss on hold-out set: 0.1293982978044854\nMeanAbsoluteError value on hold-out data: 0.29706016182899475\nEpoch: 169\nLoss on hold-out set: 0.13091147698588126\nMeanAbsoluteError value on hold-out data: 0.29830092191696167\nEpoch: 170\nLoss on hold-out set: 0.14163064129262543\nMeanAbsoluteError value on hold-out data: 0.31534403562545776\nEpoch: 171\n\n\nLoss on hold-out set: 0.13452841292407053\nMeanAbsoluteError value on hold-out data: 0.30332934856414795\nEpoch: 172\nLoss on hold-out set: 0.12893682377102475\nMeanAbsoluteError value on hold-out data: 0.2972424626350403\nEpoch: 173\nLoss on hold-out set: 0.12414802142729361\nMeanAbsoluteError value on hold-out data: 0.28858938813209534\nEpoch: 174\n\n\nLoss on hold-out set: 0.13073896465430151\nMeanAbsoluteError value on hold-out data: 0.2957199513912201\nEpoch: 175\nLoss on hold-out set: 0.1388825770234689\nMeanAbsoluteError value on hold-out data: 0.30314692854881287\nEpoch: 176\nLoss on hold-out set: 0.13438146860416358\nMeanAbsoluteError value on hold-out data: 0.3034878671169281\nEpoch: 177\n\n\nLoss on hold-out set: 0.14018097519622338\nMeanAbsoluteError value on hold-out data: 0.31378376483917236\nEpoch: 178\nLoss on hold-out set: 0.14569199509414224\nMeanAbsoluteError value on hold-out data: 0.3140948712825775\nEpoch: 179\nLoss on hold-out set: 0.12223341701086611\nMeanAbsoluteError value on hold-out data: 0.2875300943851471\nEpoch: 180\n\n\nLoss on hold-out set: 0.12802706429055738\nMeanAbsoluteError value on hold-out data: 0.29078951478004456\nEpoch: 181\nLoss on hold-out set: 0.11765267673996277\nMeanAbsoluteError value on hold-out data: 0.28107398748397827\nEpoch: 182\nLoss on hold-out set: 0.12138738076668233\nMeanAbsoluteError value on hold-out data: 0.2924133241176605\nEpoch: 183\n\n\nLoss on hold-out set: 0.13456517158076167\nMeanAbsoluteError value on hold-out data: 0.30516549944877625\nEpoch: 184\nLoss on hold-out set: 0.12323771110153757\nMeanAbsoluteError value on hold-out data: 0.2901429831981659\nEpoch: 185\nLoss on hold-out set: 0.12997359291650354\nMeanAbsoluteError value on hold-out data: 0.29987841844558716\nEpoch: 186\n\n\nLoss on hold-out set: 0.11112675958565281\nMeanAbsoluteError value on hold-out data: 0.2714468240737915\nEpoch: 187\nLoss on hold-out set: 0.1233990285693047\nMeanAbsoluteError value on hold-out data: 0.29297155141830444\nEpoch: 188\nLoss on hold-out set: 0.12467859138657028\nMeanAbsoluteError value on hold-out data: 0.29067572951316833\nEpoch: 189\n\n\nLoss on hold-out set: 0.11561460139385114\nMeanAbsoluteError value on hold-out data: 0.2814320921897888\nEpoch: 190\nLoss on hold-out set: 0.10702503674683006\nMeanAbsoluteError value on hold-out data: 0.2682780921459198\nEpoch: 191\nLoss on hold-out set: 0.11870015875125925\nMeanAbsoluteError value on hold-out data: 0.28101983666419983\nEpoch: 192\n\n\nLoss on hold-out set: 0.12994380115531384\nMeanAbsoluteError value on hold-out data: 0.29277655482292175\nEpoch: 193\nLoss on hold-out set: 0.12441150189843028\nMeanAbsoluteError value on hold-out data: 0.2874244749546051\nEpoch: 194\nLoss on hold-out set: 0.1170346553515022\nMeanAbsoluteError value on hold-out data: 0.2815093696117401\nEpoch: 195\n\n\nLoss on hold-out set: 0.12402973317308351\nMeanAbsoluteError value on hold-out data: 0.29110464453697205\nEpoch: 196\nLoss on hold-out set: 0.11100082461877415\nMeanAbsoluteError value on hold-out data: 0.2726960778236389\nEpoch: 197\nLoss on hold-out set: 0.12442110761223982\nMeanAbsoluteError value on hold-out data: 0.29151543974876404\nEpoch: 198\n\n\nLoss on hold-out set: 0.11905467564084878\nMeanAbsoluteError value on hold-out data: 0.2772753834724426\nEpoch: 199\nLoss on hold-out set: 0.11170080007985234\nMeanAbsoluteError value on hold-out data: 0.27187830209732056\nEpoch: 200\nLoss on hold-out set: 0.11827823230647481\nMeanAbsoluteError value on hold-out data: 0.27912166714668274\nEpoch: 201\n\n\nLoss on hold-out set: 0.1273876304489871\nMeanAbsoluteError value on hold-out data: 0.2912565767765045\nEpoch: 202\nLoss on hold-out set: 0.11441332788012612\nMeanAbsoluteError value on hold-out data: 0.27606791257858276\nEpoch: 203\nLoss on hold-out set: 0.11732313039537985\nMeanAbsoluteError value on hold-out data: 0.2804623544216156\nEpoch: 204\n\n\nLoss on hold-out set: 0.1052548195363488\nMeanAbsoluteError value on hold-out data: 0.26462191343307495\nEpoch: 205\nLoss on hold-out set: 0.1037378652083377\nMeanAbsoluteError value on hold-out data: 0.2644864022731781\nEpoch: 206\nLoss on hold-out set: 0.11351324831911673\nMeanAbsoluteError value on hold-out data: 0.27195534110069275\nEpoch: 207\n\n\nLoss on hold-out set: 0.117408575299584\nMeanAbsoluteError value on hold-out data: 0.28666576743125916\nEpoch: 208\nLoss on hold-out set: 0.11630733806795131\nMeanAbsoluteError value on hold-out data: 0.27779433131217957\nEpoch: 209\nLoss on hold-out set: 0.11941406763081129\nMeanAbsoluteError value on hold-out data: 0.28898417949676514\nEpoch: 210\n\n\nLoss on hold-out set: 0.10203547740238719\nMeanAbsoluteError value on hold-out data: 0.25968343019485474\nEpoch: 211\nLoss on hold-out set: 0.11376385914695372\nMeanAbsoluteError value on hold-out data: 0.27381497621536255\nEpoch: 212\nLoss on hold-out set: 0.10762641798860083\nMeanAbsoluteError value on hold-out data: 0.2720147371292114\nEpoch: 213\n\n\nLoss on hold-out set: 0.11157778111456233\nMeanAbsoluteError value on hold-out data: 0.2710396945476532\nEpoch: 214\nLoss on hold-out set: 0.12616038509693075\nMeanAbsoluteError value on hold-out data: 0.2953992784023285\nEpoch: 215\nLoss on hold-out set: 0.12358418749082678\nMeanAbsoluteError value on hold-out data: 0.2884238362312317\nEpoch: 216\n\n\nLoss on hold-out set: 0.11261017877686148\nMeanAbsoluteError value on hold-out data: 0.2735517621040344\nEpoch: 217\nLoss on hold-out set: 0.10661012568026006\nMeanAbsoluteError value on hold-out data: 0.26306188106536865\nEpoch: 218\nLoss on hold-out set: 0.11410644911772883\nMeanAbsoluteError value on hold-out data: 0.28086844086647034\nEpoch: 219\n\n\nLoss on hold-out set: 0.09814537869448638\nMeanAbsoluteError value on hold-out data: 0.25657013058662415\nEpoch: 220\nLoss on hold-out set: 0.110827275220848\nMeanAbsoluteError value on hold-out data: 0.2700057029724121\nEpoch: 221\nLoss on hold-out set: 0.1115623736285003\nMeanAbsoluteError value on hold-out data: 0.269846111536026\nEpoch: 222\n\n\nLoss on hold-out set: 0.11293645952828228\nMeanAbsoluteError value on hold-out data: 0.27556946873664856\nEpoch: 223\nLoss on hold-out set: 0.12128427668843263\nMeanAbsoluteError value on hold-out data: 0.2844138443470001\nEpoch: 224\nLoss on hold-out set: 0.11593177580400758\nMeanAbsoluteError value on hold-out data: 0.28207769989967346\nEpoch: 225\n\n\nLoss on hold-out set: 0.1098499128218585\nMeanAbsoluteError value on hold-out data: 0.2693658173084259\nEpoch: 226\nLoss on hold-out set: 0.12257650067874541\nMeanAbsoluteError value on hold-out data: 0.2881489098072052\nEpoch: 227\nLoss on hold-out set: 0.10459783508908004\nMeanAbsoluteError value on hold-out data: 0.25916165113449097\nEpoch: 228\n\n\nLoss on hold-out set: 0.10454357961692343\nMeanAbsoluteError value on hold-out data: 0.2603591978549957\nEpoch: 229\nLoss on hold-out set: 0.10579852929183592\nMeanAbsoluteError value on hold-out data: 0.26861849427223206\nEpoch: 230\nLoss on hold-out set: 0.11216929766655084\nMeanAbsoluteError value on hold-out data: 0.2642347812652588\nEpoch: 231\n\n\nLoss on hold-out set: 0.09793799663486424\nMeanAbsoluteError value on hold-out data: 0.254209965467453\nEpoch: 232\nLoss on hold-out set: 0.0994921269978416\nMeanAbsoluteError value on hold-out data: 0.2580265998840332\nEpoch: 233\nLoss on hold-out set: 0.10993614310010646\nMeanAbsoluteError value on hold-out data: 0.2726841866970062\nEpoch: 234\n\n\nLoss on hold-out set: 0.11940068406440939\nMeanAbsoluteError value on hold-out data: 0.2860063314437866\nEpoch: 235\nLoss on hold-out set: 0.09977136691566557\nMeanAbsoluteError value on hold-out data: 0.2539578378200531\nEpoch: 236\nLoss on hold-out set: 0.10793695023749024\nMeanAbsoluteError value on hold-out data: 0.266926646232605\nEpoch: 237\n\n\nLoss on hold-out set: 0.10396265209186822\nMeanAbsoluteError value on hold-out data: 0.2653251588344574\nEpoch: 238\nLoss on hold-out set: 0.09698769961988243\nMeanAbsoluteError value on hold-out data: 0.25559747219085693\nEpoch: 239\nLoss on hold-out set: 0.10933795867681814\nMeanAbsoluteError value on hold-out data: 0.270397812128067\nEpoch: 240\n\n\nLoss on hold-out set: 0.12070848843470837\nMeanAbsoluteError value on hold-out data: 0.28686249256134033\nEpoch: 241\nLoss on hold-out set: 0.11311898909974843\nMeanAbsoluteError value on hold-out data: 0.27308160066604614\nEpoch: 242\nLoss on hold-out set: 0.09608247455587843\nMeanAbsoluteError value on hold-out data: 0.25195223093032837\nEpoch: 243\n\n\nLoss on hold-out set: 0.10653069351625163\nMeanAbsoluteError value on hold-out data: 0.26486891508102417\nEpoch: 244\nLoss on hold-out set: 0.11213087675472101\nMeanAbsoluteError value on hold-out data: 0.2723686397075653\nEpoch: 245\nLoss on hold-out set: 0.10119126121785181\nMeanAbsoluteError value on hold-out data: 0.2580011487007141\nEpoch: 246\n\n\nLoss on hold-out set: 0.10710555158594313\nMeanAbsoluteError value on hold-out data: 0.2634083926677704\nEpoch: 247\nLoss on hold-out set: 0.1097838488019382\nMeanAbsoluteError value on hold-out data: 0.27352288365364075\nEpoch: 248\nLoss on hold-out set: 0.0928323593950093\nMeanAbsoluteError value on hold-out data: 0.24971280992031097\nEpoch: 249\n\n\nLoss on hold-out set: 0.10237539400967459\nMeanAbsoluteError value on hold-out data: 0.2591789960861206\nEpoch: 250\nLoss on hold-out set: 0.10270137551939115\nMeanAbsoluteError value on hold-out data: 0.26178404688835144\nEpoch: 251\nLoss on hold-out set: 0.11320523696873958\nMeanAbsoluteError value on hold-out data: 0.27131593227386475\nEpoch: 252\n\n\nLoss on hold-out set: 0.09344288539025002\nMeanAbsoluteError value on hold-out data: 0.24887937307357788\nEpoch: 253\nLoss on hold-out set: 0.10080159158523505\nMeanAbsoluteError value on hold-out data: 0.25651681423187256\nEpoch: 254\nLoss on hold-out set: 0.09952241350411593\nMeanAbsoluteError value on hold-out data: 0.25471633672714233\nEpoch: 255\n\n\nLoss on hold-out set: 0.11188829597985205\nMeanAbsoluteError value on hold-out data: 0.26121315360069275\nEpoch: 256\nLoss on hold-out set: 0.11157296582202737\nMeanAbsoluteError value on hold-out data: 0.2741689383983612\nEpoch: 257\nLoss on hold-out set: 0.10693139626295306\nMeanAbsoluteError value on hold-out data: 0.2586847245693207\nEpoch: 258\n\n\nLoss on hold-out set: 0.10253511922589192\nMeanAbsoluteError value on hold-out data: 0.2632488012313843\nEpoch: 259\nLoss on hold-out set: 0.09878493816572397\nMeanAbsoluteError value on hold-out data: 0.2501940131187439\nEpoch: 260\nLoss on hold-out set: 0.10756558999690848\nMeanAbsoluteError value on hold-out data: 0.26451513171195984\nEpoch: 261\n\n\nLoss on hold-out set: 0.0957344484476683\nMeanAbsoluteError value on hold-out data: 0.24153712391853333\nEpoch: 262\nLoss on hold-out set: 0.0998890501773955\nMeanAbsoluteError value on hold-out data: 0.25346696376800537\nEpoch: 263\nLoss on hold-out set: 0.1025741405839411\nMeanAbsoluteError value on hold-out data: 0.2505628168582916\nEpoch: 264\n\n\nLoss on hold-out set: 0.11263571697714117\nMeanAbsoluteError value on hold-out data: 0.2624308168888092\nEpoch: 265\nLoss on hold-out set: 0.09514570575517912\nMeanAbsoluteError value on hold-out data: 0.24312980473041534\nEpoch: 266\nLoss on hold-out set: 0.09444879973734108\nMeanAbsoluteError value on hold-out data: 0.2557958662509918\nEpoch: 267\n\n\nLoss on hold-out set: 0.10773611680022441\nMeanAbsoluteError value on hold-out data: 0.25973981618881226\nEpoch: 268\nLoss on hold-out set: 0.10204802326547603\nMeanAbsoluteError value on hold-out data: 0.2606217861175537\nEpoch: 269\nLoss on hold-out set: 0.10537981502711773\nMeanAbsoluteError value on hold-out data: 0.2634865939617157\nEpoch: 270\n\n\nLoss on hold-out set: 0.12040448564725617\nMeanAbsoluteError value on hold-out data: 0.28431135416030884\nEpoch: 271\nLoss on hold-out set: 0.10517760288824017\nMeanAbsoluteError value on hold-out data: 0.26414674520492554\nEpoch: 272\nLoss on hold-out set: 0.1012012026963445\nMeanAbsoluteError value on hold-out data: 0.2622660994529724\nEpoch: 273\n\n\nLoss on hold-out set: 0.10065333780056486\nMeanAbsoluteError value on hold-out data: 0.2499065399169922\nEpoch: 274\nLoss on hold-out set: 0.11135984077079532\nMeanAbsoluteError value on hold-out data: 0.2738182842731476\nEpoch: 275\nLoss on hold-out set: 0.0949684236291796\nMeanAbsoluteError value on hold-out data: 0.25055187940597534\nEpoch: 276\n\n\nLoss on hold-out set: 0.10502542970275196\nMeanAbsoluteError value on hold-out data: 0.26307055354118347\nEpoch: 277\nLoss on hold-out set: 0.1084093532897532\nMeanAbsoluteError value on hold-out data: 0.26594460010528564\nEpoch: 278\nLoss on hold-out set: 0.10748029934475198\nMeanAbsoluteError value on hold-out data: 0.26291629672050476\nEpoch: 279\n\n\nLoss on hold-out set: 0.08760224367006837\nMeanAbsoluteError value on hold-out data: 0.23794907331466675\nEpoch: 280\nLoss on hold-out set: 0.09017044020971904\nMeanAbsoluteError value on hold-out data: 0.23657330870628357\nEpoch: 281\nLoss on hold-out set: 0.09996001053814932\nMeanAbsoluteError value on hold-out data: 0.2538253962993622\nEpoch: 282\n\n\nLoss on hold-out set: 0.10718361851371204\nMeanAbsoluteError value on hold-out data: 0.259360671043396\nEpoch: 283\nLoss on hold-out set: 0.0950390564436869\nMeanAbsoluteError value on hold-out data: 0.24873362481594086\nEpoch: 284\nLoss on hold-out set: 0.11007666932302528\nMeanAbsoluteError value on hold-out data: 0.26567062735557556\nEpoch: 285\n\n\nLoss on hold-out set: 0.09455608140910045\nMeanAbsoluteError value on hold-out data: 0.2481108158826828\nEpoch: 286\nLoss on hold-out set: 0.10700388830698405\nMeanAbsoluteError value on hold-out data: 0.26076266169548035\nEpoch: 287\nLoss on hold-out set: 0.10029199966132486\nMeanAbsoluteError value on hold-out data: 0.2490522712469101\nEpoch: 288\n\n\nLoss on hold-out set: 0.09684204175854878\nMeanAbsoluteError value on hold-out data: 0.24821129441261292\nEpoch: 289\nLoss on hold-out set: 0.10775551912762846\nMeanAbsoluteError value on hold-out data: 0.2651016116142273\nEpoch: 290\nLoss on hold-out set: 0.08830466168622175\nMeanAbsoluteError value on hold-out data: 0.23658724129199982\nEpoch: 291\n\n\nLoss on hold-out set: 0.10247778885435158\nMeanAbsoluteError value on hold-out data: 0.2553093135356903\nEpoch: 292\nLoss on hold-out set: 0.11475749734090641\nMeanAbsoluteError value on hold-out data: 0.27823343873023987\nEpoch: 293\nLoss on hold-out set: 0.09877235082016947\nMeanAbsoluteError value on hold-out data: 0.2523566782474518\nEpoch: 294\n\n\nLoss on hold-out set: 0.09167593136119345\nMeanAbsoluteError value on hold-out data: 0.25344789028167725\nEpoch: 295\nLoss on hold-out set: 0.08824003827525302\nMeanAbsoluteError value on hold-out data: 0.24452310800552368\nEpoch: 296\nLoss on hold-out set: 0.10261189106696596\nMeanAbsoluteError value on hold-out data: 0.26267775893211365\nEpoch: 297\n\n\nLoss on hold-out set: 0.10781884406334333\nMeanAbsoluteError value on hold-out data: 0.2683103382587433\nEpoch: 298\nLoss on hold-out set: 0.10426949493276576\nMeanAbsoluteError value on hold-out data: 0.2586097717285156\nEpoch: 299\nLoss on hold-out set: 0.10537566358533998\nMeanAbsoluteError value on hold-out data: 0.2557260990142822\nEpoch: 300\n\n\nLoss on hold-out set: 0.08738622416703341\nMeanAbsoluteError value on hold-out data: 0.24414344131946564\nEpoch: 301\nLoss on hold-out set: 0.09665848407357772\nMeanAbsoluteError value on hold-out data: 0.245344340801239\nEpoch: 302\nLoss on hold-out set: 0.08282973314907091\nMeanAbsoluteError value on hold-out data: 0.22727198898792267\nEpoch: 303\n\n\nLoss on hold-out set: 0.09989605954460179\nMeanAbsoluteError value on hold-out data: 0.2557981312274933\nEpoch: 304\nLoss on hold-out set: 0.0925513205890699\nMeanAbsoluteError value on hold-out data: 0.24605034291744232\nEpoch: 305\nLoss on hold-out set: 0.10034550740616396\nMeanAbsoluteError value on hold-out data: 0.25274527072906494\nEpoch: 306\n\n\nLoss on hold-out set: 0.11117899555092056\nMeanAbsoluteError value on hold-out data: 0.26835957169532776\nEpoch: 307\nLoss on hold-out set: 0.11202395385790927\nMeanAbsoluteError value on hold-out data: 0.27055710554122925\nEpoch: 308\nLoss on hold-out set: 0.10808761098557929\nMeanAbsoluteError value on hold-out data: 0.26208776235580444\nEpoch: 309\n\n\nLoss on hold-out set: 0.09936847148589247\nMeanAbsoluteError value on hold-out data: 0.2573624849319458\nEpoch: 310\nLoss on hold-out set: 0.0977121713272451\nMeanAbsoluteError value on hold-out data: 0.24702222645282745\nEpoch: 311\nLoss on hold-out set: 0.1058589113674437\nMeanAbsoluteError value on hold-out data: 0.26486942172050476\nEpoch: 312\n\n\nLoss on hold-out set: 0.10776058464388673\nMeanAbsoluteError value on hold-out data: 0.2638428211212158\nEpoch: 313\nLoss on hold-out set: 0.10241565763407076\nMeanAbsoluteError value on hold-out data: 0.25814372301101685\nEpoch: 314\nLoss on hold-out set: 0.10158040363069934\nMeanAbsoluteError value on hold-out data: 0.2581714987754822\nEpoch: 315\n\n\nLoss on hold-out set: 0.09905272210430363\nMeanAbsoluteError value on hold-out data: 0.24983125925064087\nEpoch: 316\nLoss on hold-out set: 0.09869196314190049\nMeanAbsoluteError value on hold-out data: 0.25106459856033325\nEpoch: 317\nLoss on hold-out set: 0.08492101464148921\nMeanAbsoluteError value on hold-out data: 0.23470449447631836\nEpoch: 318\n\n\nLoss on hold-out set: 0.08082625684110704\nMeanAbsoluteError value on hold-out data: 0.23300544917583466\nEpoch: 319\nLoss on hold-out set: 0.09998670940170996\nMeanAbsoluteError value on hold-out data: 0.2526736855506897\nEpoch: 320\nLoss on hold-out set: 0.10330127284435245\nMeanAbsoluteError value on hold-out data: 0.2530248165130615\nEpoch: 321\n\n\nLoss on hold-out set: 0.08889454584297103\nMeanAbsoluteError value on hold-out data: 0.23512178659439087\nEpoch: 322\nLoss on hold-out set: 0.09904408855965206\nMeanAbsoluteError value on hold-out data: 0.24953068792819977\nEpoch: 323\nLoss on hold-out set: 0.09806190613967677\nMeanAbsoluteError value on hold-out data: 0.2511763870716095\nEpoch: 324\n\n\nLoss on hold-out set: 0.11064364952306883\nMeanAbsoluteError value on hold-out data: 0.26591789722442627\nEpoch: 325\nLoss on hold-out set: 0.10611489981097597\nMeanAbsoluteError value on hold-out data: 0.25993797183036804\nEpoch: 326\nLoss on hold-out set: 0.1017166347114835\nMeanAbsoluteError value on hold-out data: 0.2555135488510132\nEpoch: 327\n\n\nLoss on hold-out set: 0.08625796181246793\nMeanAbsoluteError value on hold-out data: 0.23895512521266937\nEpoch: 328\nLoss on hold-out set: 0.0859048586069063\nMeanAbsoluteError value on hold-out data: 0.23900479078292847\nEpoch: 329\nLoss on hold-out set: 0.09173768926567087\nMeanAbsoluteError value on hold-out data: 0.2451430708169937\nEpoch: 330\n\n\nLoss on hold-out set: 0.10071083870483562\nMeanAbsoluteError value on hold-out data: 0.25503429770469666\nEpoch: 331\nLoss on hold-out set: 0.10285029636928812\nMeanAbsoluteError value on hold-out data: 0.25369587540626526\nEpoch: 332\nLoss on hold-out set: 0.10915245198654398\nMeanAbsoluteError value on hold-out data: 0.2658632695674896\nEpoch: 333\n\n\nLoss on hold-out set: 0.09434498528406644\nMeanAbsoluteError value on hold-out data: 0.2512151598930359\nEpoch: 334\nLoss on hold-out set: 0.09711567693312342\nMeanAbsoluteError value on hold-out data: 0.24561317265033722\nEpoch: 335\nLoss on hold-out set: 0.09787947815394242\nMeanAbsoluteError value on hold-out data: 0.2490416020154953\nEpoch: 336\n\n\nLoss on hold-out set: 0.101184158573548\nMeanAbsoluteError value on hold-out data: 0.26090437173843384\nEpoch: 337\nLoss on hold-out set: 0.09833413654846178\nMeanAbsoluteError value on hold-out data: 0.24916350841522217\nEpoch: 338\nLoss on hold-out set: 0.08373180114664137\nMeanAbsoluteError value on hold-out data: 0.2346848100423813\nEpoch: 339\n\n\nLoss on hold-out set: 0.09779657736418206\nMeanAbsoluteError value on hold-out data: 0.25268253684043884\nEpoch: 340\nLoss on hold-out set: 0.1041769944767778\nMeanAbsoluteError value on hold-out data: 0.2615896761417389\nEpoch: 341\nLoss on hold-out set: 0.09335110782441916\nMeanAbsoluteError value on hold-out data: 0.24314476549625397\nEpoch: 342\n\n\nLoss on hold-out set: 0.09935948323924094\nMeanAbsoluteError value on hold-out data: 0.25608178973197937\nEpoch: 343\nLoss on hold-out set: 0.09963900986612619\nMeanAbsoluteError value on hold-out data: 0.2600635886192322\nEpoch: 344\nLoss on hold-out set: 0.09135411145563314\nMeanAbsoluteError value on hold-out data: 0.24105992913246155\nEpoch: 345\n\n\nLoss on hold-out set: 0.09921329752464468\nMeanAbsoluteError value on hold-out data: 0.25551357865333557\nEpoch: 346\nLoss on hold-out set: 0.07318983603734523\nMeanAbsoluteError value on hold-out data: 0.21736004948616028\nEpoch: 347\nLoss on hold-out set: 0.11195757158939766\nMeanAbsoluteError value on hold-out data: 0.26756972074508667\nEpoch: 348\n\n\nLoss on hold-out set: 0.09966473340561303\nMeanAbsoluteError value on hold-out data: 0.25599175691604614\nEpoch: 349\nLoss on hold-out set: 0.10932659663764449\nMeanAbsoluteError value on hold-out data: 0.26033493876457214\nEpoch: 350\nLoss on hold-out set: 0.09074653106178933\nMeanAbsoluteError value on hold-out data: 0.2423654943704605\nEpoch: 351\n\n\nLoss on hold-out set: 0.10148459664313123\nMeanAbsoluteError value on hold-out data: 0.24934455752372742\nEpoch: 352\nLoss on hold-out set: 0.09969751699788806\nMeanAbsoluteError value on hold-out data: 0.2503238022327423\nEpoch: 353\nLoss on hold-out set: 0.09501732416101731\nMeanAbsoluteError value on hold-out data: 0.24920687079429626\nEpoch: 354\n\n\nLoss on hold-out set: 0.08880804930406157\nMeanAbsoluteError value on hold-out data: 0.2403876781463623\nEpoch: 355\nLoss on hold-out set: 0.09059457238220299\nMeanAbsoluteError value on hold-out data: 0.2421310693025589\nEpoch: 356\nLoss on hold-out set: 0.0927249404283551\nMeanAbsoluteError value on hold-out data: 0.2420823872089386\nEpoch: 357\n\n\nLoss on hold-out set: 0.07854535228728006\nMeanAbsoluteError value on hold-out data: 0.22445891797542572\nEpoch: 358\nLoss on hold-out set: 0.09739767363450179\nMeanAbsoluteError value on hold-out data: 0.25648584961891174\nEpoch: 359\nLoss on hold-out set: 0.09340052747633308\nMeanAbsoluteError value on hold-out data: 0.24761049449443817\nEpoch: 360\n\n\nLoss on hold-out set: 0.09756276916828938\nMeanAbsoluteError value on hold-out data: 0.24980947375297546\nEpoch: 361\nLoss on hold-out set: 0.08028327326532841\nMeanAbsoluteError value on hold-out data: 0.22423797845840454\nEpoch: 362\nLoss on hold-out set: 0.10220092518255114\nMeanAbsoluteError value on hold-out data: 0.2481101006269455\nEpoch: 363\n\n\nLoss on hold-out set: 0.09796740549926956\nMeanAbsoluteError value on hold-out data: 0.2546393871307373\nEpoch: 364\nLoss on hold-out set: 0.09693305348744616\nMeanAbsoluteError value on hold-out data: 0.2445785254240036\nEpoch: 365\nLoss on hold-out set: 0.0945350938901538\nMeanAbsoluteError value on hold-out data: 0.24791938066482544\nEpoch: 366\n\n\nLoss on hold-out set: 0.10337185089786848\nMeanAbsoluteError value on hold-out data: 0.25611430406570435\nEpoch: 367\nLoss on hold-out set: 0.0924411107879132\nMeanAbsoluteError value on hold-out data: 0.24887405335903168\nEpoch: 368\nLoss on hold-out set: 0.10371094587705253\nMeanAbsoluteError value on hold-out data: 0.2529853880405426\nEpoch: 369\n\n\nLoss on hold-out set: 0.11040098678381885\nMeanAbsoluteError value on hold-out data: 0.26649895310401917\nEpoch: 370\nLoss on hold-out set: 0.09963117587224891\nMeanAbsoluteError value on hold-out data: 0.24891260266304016\nEpoch: 371\nLoss on hold-out set: 0.09739644156036471\nMeanAbsoluteError value on hold-out data: 0.24881510436534882\nEpoch: 372\n\n\nLoss on hold-out set: 0.09486391849136756\nMeanAbsoluteError value on hold-out data: 0.24813519418239594\nEpoch: 373\nLoss on hold-out set: 0.08762856728862971\nMeanAbsoluteError value on hold-out data: 0.2406335175037384\nEpoch: 374\nLoss on hold-out set: 0.07840883122116793\nMeanAbsoluteError value on hold-out data: 0.22102010250091553\nEpoch: 375\n\n\nLoss on hold-out set: 0.08073819870022514\nMeanAbsoluteError value on hold-out data: 0.2251976579427719\nEpoch: 376\nLoss on hold-out set: 0.09052288512835124\nMeanAbsoluteError value on hold-out data: 0.2344832420349121\nEpoch: 377\nLoss on hold-out set: 0.0997913699860995\nMeanAbsoluteError value on hold-out data: 0.24682092666625977\nEpoch: 378\n\n\nLoss on hold-out set: 0.09770269146111484\nMeanAbsoluteError value on hold-out data: 0.24954809248447418\nEarly stopping at epoch 377\nReturned to Spot: Validation loss: 0.09770269146111484\n----------------------------------------------\nspotPython tuning: 0.0800885943544563 [######----] 56.62% \n\n\n\nconfig: {'_L_in': 10, '_L_out': 1, 'l1': 128, 'dropout_prob': 0.7135267315833492, 'lr_mult': 0.001, 'batch_size': 4, 'epochs': 128, 'k_folds': 1, 'patience': 128, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1\nLoss on hold-out set: 0.3869756199916204\nMeanAbsoluteError value on hold-out data: 0.5870682597160339\nEpoch: 2\nLoss on hold-out set: 0.38313414047161737\nMeanAbsoluteError value on hold-out data: 0.5820286870002747\nEpoch: 3\nLoss on hold-out set: 0.3906909700234731\nMeanAbsoluteError value on hold-out data: 0.5906230807304382\nEpoch: 4\n\n\nLoss on hold-out set: 0.3827437058091164\nMeanAbsoluteError value on hold-out data: 0.5804731845855713\nEpoch: 5\nLoss on hold-out set: 0.3830435069402059\nMeanAbsoluteError value on hold-out data: 0.5821036100387573\nEpoch: 6\nLoss on hold-out set: 0.3705615818500519\nMeanAbsoluteError value on hold-out data: 0.5722843408584595\nEpoch: 7\nLoss on hold-out set: 0.3831476257244746\nMeanAbsoluteError value on hold-out data: 0.5831624865531921\nEpoch: 8\nLoss on hold-out set: 0.3615207358201345\nMeanAbsoluteError value on hold-out data: 0.5643625855445862\nEpoch: 9\n\n\nLoss on hold-out set: 0.37241503775119783\nMeanAbsoluteError value on hold-out data: 0.5778858661651611\nEpoch: 10\nLoss on hold-out set: 0.36311961660782494\nMeanAbsoluteError value on hold-out data: 0.5636604428291321\nEpoch: 11\nLoss on hold-out set: 0.3416154684623082\nMeanAbsoluteError value on hold-out data: 0.546600878238678\nEpoch: 12\nLoss on hold-out set: 0.3564212131500244\nMeanAbsoluteError value on hold-out data: 0.5608441233634949\nEpoch: 13\nLoss on hold-out set: 0.3534911479552587\nMeanAbsoluteError value on hold-out data: 0.554561197757721\nEpoch: 14\n\n\nLoss on hold-out set: 0.34345155527194343\nMeanAbsoluteError value on hold-out data: 0.5482335686683655\nEpoch: 15\nLoss on hold-out set: 0.3479899846514066\nMeanAbsoluteError value on hold-out data: 0.5528331995010376\nEpoch: 16\nLoss on hold-out set: 0.3463412819306056\nMeanAbsoluteError value on hold-out data: 0.5526225566864014\nEpoch: 17\nLoss on hold-out set: 0.3250648838281631\nMeanAbsoluteError value on hold-out data: 0.5319401025772095\nEpoch: 18\nLoss on hold-out set: 0.3255272462964058\nMeanAbsoluteError value on hold-out data: 0.5324758887290955\nEpoch: 19\n\n\nLoss on hold-out set: 0.3282787432273229\nMeanAbsoluteError value on hold-out data: 0.5365384221076965\nEpoch: 20\nLoss on hold-out set: 0.3291706364353498\nMeanAbsoluteError value on hold-out data: 0.5347241759300232\nEpoch: 21\nLoss on hold-out set: 0.3334917724132538\nMeanAbsoluteError value on hold-out data: 0.5377479791641235\nEpoch: 22\nLoss on hold-out set: 0.3209902127583822\nMeanAbsoluteError value on hold-out data: 0.5262932777404785\nEpoch: 23\nLoss on hold-out set: 0.30595049654444056\nMeanAbsoluteError value on hold-out data: 0.5156698822975159\nEpoch: 24\n\n\nLoss on hold-out set: 0.3114659249782562\nMeanAbsoluteError value on hold-out data: 0.5175855159759521\nEpoch: 25\nLoss on hold-out set: 0.297397866944472\nMeanAbsoluteError value on hold-out data: 0.5091090798377991\nEpoch: 26\nLoss on hold-out set: 0.29587476551532743\nMeanAbsoluteError value on hold-out data: 0.5052630305290222\nEpoch: 27\nLoss on hold-out set: 0.30521112461884814\nMeanAbsoluteError value on hold-out data: 0.5161533951759338\nEpoch: 28\nLoss on hold-out set: 0.304279192785422\nMeanAbsoluteError value on hold-out data: 0.5089150667190552\nEpoch: 29\n\n\nLoss on hold-out set: 0.2994864018758138\nMeanAbsoluteError value on hold-out data: 0.5069103240966797\nEpoch: 30\nLoss on hold-out set: 0.2976625599463781\nMeanAbsoluteError value on hold-out data: 0.5057229399681091\nEpoch: 31\nLoss on hold-out set: 0.28092212080955503\nMeanAbsoluteError value on hold-out data: 0.4907175600528717\nEpoch: 32\nLoss on hold-out set: 0.298759198486805\nMeanAbsoluteError value on hold-out data: 0.5107173919677734\nEpoch: 33\nLoss on hold-out set: 0.29305677781502404\nMeanAbsoluteError value on hold-out data: 0.5034879446029663\nEpoch: 34\n\n\nLoss on hold-out set: 0.29342260549465815\nMeanAbsoluteError value on hold-out data: 0.5016157031059265\nEpoch: 35\nLoss on hold-out set: 0.27411746472120285\nMeanAbsoluteError value on hold-out data: 0.4836919605731964\nEpoch: 36\nLoss on hold-out set: 0.2853075847029686\nMeanAbsoluteError value on hold-out data: 0.49342748522758484\nEpoch: 37\nLoss on hold-out set: 0.2718330389261246\nMeanAbsoluteError value on hold-out data: 0.47869592905044556\nEpoch: 38\nLoss on hold-out set: 0.2654052045941353\nMeanAbsoluteError value on hold-out data: 0.4733573794364929\nEpoch: 39\n\n\nLoss on hold-out set: 0.26779606511195503\nMeanAbsoluteError value on hold-out data: 0.4768977761268616\nEpoch: 40\nLoss on hold-out set: 0.2669440055886904\nMeanAbsoluteError value on hold-out data: 0.47624388337135315\nEpoch: 41\nLoss on hold-out set: 0.2694266374905904\nMeanAbsoluteError value on hold-out data: 0.4792735278606415\nEpoch: 42\nLoss on hold-out set: 0.2569913506507874\nMeanAbsoluteError value on hold-out data: 0.4686296582221985\nEpoch: 43\nLoss on hold-out set: 0.2596273785829544\nMeanAbsoluteError value on hold-out data: 0.4691150486469269\nEpoch: 44\n\n\nLoss on hold-out set: 0.24682560354471206\nMeanAbsoluteError value on hold-out data: 0.4571458399295807\nEpoch: 45\nLoss on hold-out set: 0.25502285530169805\nMeanAbsoluteError value on hold-out data: 0.46080470085144043\nEpoch: 46\nLoss on hold-out set: 0.24449285392959913\nMeanAbsoluteError value on hold-out data: 0.45041128993034363\nEpoch: 47\nLoss on hold-out set: 0.24736673146486282\nMeanAbsoluteError value on hold-out data: 0.45714065432548523\nEpoch: 48\nLoss on hold-out set: 0.25246167689561844\nMeanAbsoluteError value on hold-out data: 0.46010899543762207\nEpoch: 49\n\n\nLoss on hold-out set: 0.23893017957607904\nMeanAbsoluteError value on hold-out data: 0.44388553500175476\nEpoch: 50\nLoss on hold-out set: 0.22690321306387584\nMeanAbsoluteError value on hold-out data: 0.4364560544490814\nEpoch: 51\nLoss on hold-out set: 0.23262501100699107\nMeanAbsoluteError value on hold-out data: 0.44028300046920776\nEpoch: 52\nLoss on hold-out set: 0.2418971021970113\nMeanAbsoluteError value on hold-out data: 0.4471893906593323\nEpoch: 53\nLoss on hold-out set: 0.2319105086227258\nMeanAbsoluteError value on hold-out data: 0.43450552225112915\nEpoch: 54\n\n\nLoss on hold-out set: 0.2151485891143481\nMeanAbsoluteError value on hold-out data: 0.4192073345184326\nEpoch: 55\nLoss on hold-out set: 0.21055910115440687\nMeanAbsoluteError value on hold-out data: 0.4218425452709198\nEpoch: 56\nLoss on hold-out set: 0.21049771050612132\nMeanAbsoluteError value on hold-out data: 0.417337566614151\nEpoch: 57\nLoss on hold-out set: 0.23432016770044964\nMeanAbsoluteError value on hold-out data: 0.4409906566143036\nEpoch: 58\nLoss on hold-out set: 0.2164562034110228\nMeanAbsoluteError value on hold-out data: 0.4216163158416748\nEpoch: 59\n\n\nLoss on hold-out set: 0.21254760513703028\nMeanAbsoluteError value on hold-out data: 0.4171876907348633\nEpoch: 60\nLoss on hold-out set: 0.20591877897580466\nMeanAbsoluteError value on hold-out data: 0.4149273931980133\nEpoch: 61\nLoss on hold-out set: 0.2137659126520157\nMeanAbsoluteError value on hold-out data: 0.41922417283058167\nEpoch: 62\nLoss on hold-out set: 0.20737884908914567\nMeanAbsoluteError value on hold-out data: 0.4130358099937439\nEpoch: 63\nLoss on hold-out set: 0.20009706631302834\nMeanAbsoluteError value on hold-out data: 0.40343111753463745\nEpoch: 64\n\n\nLoss on hold-out set: 0.1958049263060093\nMeanAbsoluteError value on hold-out data: 0.39097821712493896\nEpoch: 65\nLoss on hold-out set: 0.19227868886043628\nMeanAbsoluteError value on hold-out data: 0.38735613226890564\nEpoch: 66\nLoss on hold-out set: 0.19808255324761073\nMeanAbsoluteError value on hold-out data: 0.4015730321407318\nEpoch: 67\nLoss on hold-out set: 0.19545658101638158\nMeanAbsoluteError value on hold-out data: 0.39829179644584656\nEpoch: 68\nLoss on hold-out set: 0.19100918566187222\nMeanAbsoluteError value on hold-out data: 0.39029014110565186\nEpoch: 69\n\n\nLoss on hold-out set: 0.19314903035759926\nMeanAbsoluteError value on hold-out data: 0.39322444796562195\nEpoch: 70\nLoss on hold-out set: 0.19346959655483564\nMeanAbsoluteError value on hold-out data: 0.3892301321029663\nEpoch: 71\nLoss on hold-out set: 0.1900162475804488\nMeanAbsoluteError value on hold-out data: 0.3880562484264374\nEpoch: 72\nLoss on hold-out set: 0.19600291873017947\nMeanAbsoluteError value on hold-out data: 0.3986428678035736\nEpoch: 73\nLoss on hold-out set: 0.1750566628575325\nMeanAbsoluteError value on hold-out data: 0.37301361560821533\nEpoch: 74\n\n\nLoss on hold-out set: 0.17688922877113025\nMeanAbsoluteError value on hold-out data: 0.37185800075531006\nEpoch: 75\nLoss on hold-out set: 0.1690332696090142\nMeanAbsoluteError value on hold-out data: 0.3657897710800171\nEpoch: 76\nLoss on hold-out set: 0.1749995634953181\nMeanAbsoluteError value on hold-out data: 0.37585771083831787\nEpoch: 77\nLoss on hold-out set: 0.16371362486233315\nMeanAbsoluteError value on hold-out data: 0.35611769556999207\nEpoch: 78\nLoss on hold-out set: 0.16637839968005816\nMeanAbsoluteError value on hold-out data: 0.35835030674934387\nEpoch: 79\n\n\nLoss on hold-out set: 0.17788092826803525\nMeanAbsoluteError value on hold-out data: 0.37445178627967834\nEpoch: 80\nLoss on hold-out set: 0.16605780221521854\nMeanAbsoluteError value on hold-out data: 0.36173465847969055\nEpoch: 81\nLoss on hold-out set: 0.1621774427096049\nMeanAbsoluteError value on hold-out data: 0.3594120442867279\nEpoch: 82\nLoss on hold-out set: 0.1653184154133002\nMeanAbsoluteError value on hold-out data: 0.35824349522590637\nEpoch: 83\nLoss on hold-out set: 0.17046693911155064\nMeanAbsoluteError value on hold-out data: 0.3633912205696106\nEpoch: 84\n\n\nLoss on hold-out set: 0.15943498025337854\nMeanAbsoluteError value on hold-out data: 0.3490849733352661\nEpoch: 85\nLoss on hold-out set: 0.14815448619425298\nMeanAbsoluteError value on hold-out data: 0.33296552300453186\nEpoch: 86\nLoss on hold-out set: 0.15260865289717912\nMeanAbsoluteError value on hold-out data: 0.3377334177494049\nEpoch: 87\nLoss on hold-out set: 0.1601749376455943\nMeanAbsoluteError value on hold-out data: 0.35260093212127686\nEpoch: 88\nLoss on hold-out set: 0.15377231419086457\nMeanAbsoluteError value on hold-out data: 0.3440048098564148\nEpoch: 89\n\n\nLoss on hold-out set: 0.15071369368582965\nMeanAbsoluteError value on hold-out data: 0.33814525604248047\nEpoch: 90\nLoss on hold-out set: 0.15570017072061698\nMeanAbsoluteError value on hold-out data: 0.34425511956214905\nEpoch: 91\nLoss on hold-out set: 0.15076902526120345\nMeanAbsoluteError value on hold-out data: 0.33209431171417236\nEpoch: 92\nLoss on hold-out set: 0.1467506339897712\nMeanAbsoluteError value on hold-out data: 0.33648020029067993\nEpoch: 93\nLoss on hold-out set: 0.16019500623146693\nMeanAbsoluteError value on hold-out data: 0.34666094183921814\nEpoch: 94\n\n\nLoss on hold-out set: 0.14654857084155082\nMeanAbsoluteError value on hold-out data: 0.32720711827278137\nEpoch: 95\nLoss on hold-out set: 0.13435004904866218\nMeanAbsoluteError value on hold-out data: 0.31809550523757935\nEpoch: 96\nLoss on hold-out set: 0.13349472482999167\nMeanAbsoluteError value on hold-out data: 0.3145252764225006\nEpoch: 97\nLoss on hold-out set: 0.13434532813727856\nMeanAbsoluteError value on hold-out data: 0.3195493519306183\nEpoch: 98\nLoss on hold-out set: 0.13138174841801326\nMeanAbsoluteError value on hold-out data: 0.3172186315059662\nEpoch: 99\n\n\nLoss on hold-out set: 0.12474809244275092\nMeanAbsoluteError value on hold-out data: 0.3036729693412781\nEpoch: 100\nLoss on hold-out set: 0.1286641858021418\nMeanAbsoluteError value on hold-out data: 0.308639794588089\nEpoch: 101\nLoss on hold-out set: 0.1189276294534405\nMeanAbsoluteError value on hold-out data: 0.29511377215385437\nEpoch: 102\nLoss on hold-out set: 0.12927589024106662\nMeanAbsoluteError value on hold-out data: 0.30656683444976807\nEpoch: 103\nLoss on hold-out set: 0.1158743541687727\nMeanAbsoluteError value on hold-out data: 0.2820979356765747\nEpoch: 104\n\n\nLoss on hold-out set: 0.11820991722246012\nMeanAbsoluteError value on hold-out data: 0.2980431914329529\nEpoch: 105\nLoss on hold-out set: 0.12251925345510245\nMeanAbsoluteError value on hold-out data: 0.29504626989364624\nEpoch: 106\nLoss on hold-out set: 0.11218651612599691\nMeanAbsoluteError value on hold-out data: 0.28777819871902466\nEpoch: 107\nLoss on hold-out set: 0.11998797796666621\nMeanAbsoluteError value on hold-out data: 0.2978927195072174\nEpoch: 108\nLoss on hold-out set: 0.1134148528923591\nMeanAbsoluteError value on hold-out data: 0.29213693737983704\nEpoch: 109\n\n\nLoss on hold-out set: 0.11728699127833049\nMeanAbsoluteError value on hold-out data: 0.2941322326660156\nEpoch: 110\nLoss on hold-out set: 0.12247113092492024\nMeanAbsoluteError value on hold-out data: 0.293978214263916\nEpoch: 111\nLoss on hold-out set: 0.10924962304532528\nMeanAbsoluteError value on hold-out data: 0.2820943593978882\nEpoch: 112\nLoss on hold-out set: 0.10735259465873241\nMeanAbsoluteError value on hold-out data: 0.2749733626842499\nEpoch: 113\nLoss on hold-out set: 0.10723513007164001\nMeanAbsoluteError value on hold-out data: 0.2795497477054596\nEpoch: 114\n\n\nLoss on hold-out set: 0.11348840991655985\nMeanAbsoluteError value on hold-out data: 0.28201863169670105\nEpoch: 115\nLoss on hold-out set: 0.10368381564815839\nMeanAbsoluteError value on hold-out data: 0.2694663405418396\nEpoch: 116\nLoss on hold-out set: 0.10201366027196249\nMeanAbsoluteError value on hold-out data: 0.26623353362083435\nEpoch: 117\nLoss on hold-out set: 0.09643271669745446\nMeanAbsoluteError value on hold-out data: 0.25793516635894775\nEpoch: 118\nLoss on hold-out set: 0.10216283114006122\nMeanAbsoluteError value on hold-out data: 0.2681961953639984\nEpoch: 119\n\n\nLoss on hold-out set: 0.10593739688396454\nMeanAbsoluteError value on hold-out data: 0.27138879895210266\nEpoch: 120\nLoss on hold-out set: 0.09387460425496101\nMeanAbsoluteError value on hold-out data: 0.2504810690879822\nEpoch: 121\nLoss on hold-out set: 0.09489070390661558\nMeanAbsoluteError value on hold-out data: 0.2611473500728607\nEpoch: 122\nLoss on hold-out set: 0.0950024422009786\nMeanAbsoluteError value on hold-out data: 0.2627328336238861\nEpoch: 123\nLoss on hold-out set: 0.09121562522525589\nMeanAbsoluteError value on hold-out data: 0.25149184465408325\nEpoch: 124\n\n\nLoss on hold-out set: 0.09430642290661732\nMeanAbsoluteError value on hold-out data: 0.24901829659938812\nEpoch: 125\nLoss on hold-out set: 0.10134427398443221\nMeanAbsoluteError value on hold-out data: 0.2713977098464966\nEpoch: 126\nLoss on hold-out set: 0.10126182333255808\nMeanAbsoluteError value on hold-out data: 0.2669573426246643\nEpoch: 127\nLoss on hold-out set: 0.09552455986539522\nMeanAbsoluteError value on hold-out data: 0.2555724084377289\nEpoch: 128\nLoss on hold-out set: 0.09144544609511893\nMeanAbsoluteError value on hold-out data: 0.24809971451759338\nReturned to Spot: Validation loss: 0.09144544609511893\n----------------------------------------------\n\n\nspotPython tuning: 0.0800885943544563 [#######---] 67.71% \n\n\n\nconfig: {'_L_in': 10, '_L_out': 1, 'l1': 128, 'dropout_prob': 0.6872970752802665, 'lr_mult': 0.001, 'batch_size': 4, 'epochs': 128, 'k_folds': 1, 'patience': 128, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1\nLoss on hold-out set: 0.3093730019529661\nMeanAbsoluteError value on hold-out data: 0.5163847208023071\nEpoch: 2\n\n\nLoss on hold-out set: 0.3043309567372004\nMeanAbsoluteError value on hold-out data: 0.5128142833709717\nEpoch: 3\nLoss on hold-out set: 0.2892606331904729\nMeanAbsoluteError value on hold-out data: 0.49284306168556213\nEpoch: 4\n\n\nLoss on hold-out set: 0.2956153804063797\nMeanAbsoluteError value on hold-out data: 0.506260097026825\nEpoch: 5\nLoss on hold-out set: 0.2982572265466054\nMeanAbsoluteError value on hold-out data: 0.5000772476196289\nEpoch: 6\n\n\nLoss on hold-out set: 0.2903728391726812\nMeanAbsoluteError value on hold-out data: 0.5022059082984924\nEpoch: 7\nLoss on hold-out set: 0.2867248164614042\nMeanAbsoluteError value on hold-out data: 0.49675309658050537\nEpoch: 8\n\n\nLoss on hold-out set: 0.2833206707239151\nMeanAbsoluteError value on hold-out data: 0.48824548721313477\nEpoch: 9\nLoss on hold-out set: 0.28698371509710946\nMeanAbsoluteError value on hold-out data: 0.49150294065475464\nEpoch: 10\nLoss on hold-out set: 0.27008480340242386\nMeanAbsoluteError value on hold-out data: 0.4800601601600647\n\n\nEpoch: 11\nLoss on hold-out set: 0.2763152082761129\nMeanAbsoluteError value on hold-out data: 0.48124343156814575\nEpoch: 12\nLoss on hold-out set: 0.27962409416834516\nMeanAbsoluteError value on hold-out data: 0.4877188503742218\nEpoch: 13\n\n\nLoss on hold-out set: 0.2752793069680532\nMeanAbsoluteError value on hold-out data: 0.4836302101612091\nEpoch: 14\nLoss on hold-out set: 0.2650074648857117\nMeanAbsoluteError value on hold-out data: 0.4742633104324341\nEpoch: 15\n\n\nLoss on hold-out set: 0.27022735511263213\nMeanAbsoluteError value on hold-out data: 0.47723668813705444\nEpoch: 16\nLoss on hold-out set: 0.26510672355691595\nMeanAbsoluteError value on hold-out data: 0.46879512071609497\nEpoch: 17\nLoss on hold-out set: 0.26533392737309136\nMeanAbsoluteError value on hold-out data: 0.4708438217639923\nEpoch: 18\n\n\nLoss on hold-out set: 0.24797597100337346\nMeanAbsoluteError value on hold-out data: 0.45472976565361023\nEpoch: 19\nLoss on hold-out set: 0.2636282495657603\nMeanAbsoluteError value on hold-out data: 0.4684503674507141\nEpoch: 20\n\n\nLoss on hold-out set: 0.24650216301282246\nMeanAbsoluteError value on hold-out data: 0.4509059190750122\nEpoch: 21\nLoss on hold-out set: 0.2462476028005282\nMeanAbsoluteError value on hold-out data: 0.45154622197151184\nEpoch: 22\n\n\nLoss on hold-out set: 0.26354690353075666\nMeanAbsoluteError value on hold-out data: 0.466514527797699\nEpoch: 23\nLoss on hold-out set: 0.2398198905090491\nMeanAbsoluteError value on hold-out data: 0.4494021236896515\nEpoch: 24\n\n\nLoss on hold-out set: 0.23737950752178827\nMeanAbsoluteError value on hold-out data: 0.44630351662635803\nEpoch: 25\nLoss on hold-out set: 0.22785047550996146\nMeanAbsoluteError value on hold-out data: 0.4335591495037079\nEpoch: 26\n\n\nLoss on hold-out set: 0.2198425723860661\nMeanAbsoluteError value on hold-out data: 0.42470577359199524\nEpoch: 27\nLoss on hold-out set: 0.23363647247354188\nMeanAbsoluteError value on hold-out data: 0.439311683177948\nEpoch: 28\n\n\nLoss on hold-out set: 0.22323018004496892\nMeanAbsoluteError value on hold-out data: 0.43381693959236145\nEpoch: 29\nLoss on hold-out set: 0.22316028734048207\nMeanAbsoluteError value on hold-out data: 0.4279538094997406\nEpoch: 30\nLoss on hold-out set: 0.2244773550828298\nMeanAbsoluteError value on hold-out data: 0.429585725069046\nEpoch: 31\n\n\nLoss on hold-out set: 0.22087402363618214\nMeanAbsoluteError value on hold-out data: 0.41916054487228394\nEpoch: 32\nLoss on hold-out set: 0.2150897400577863\nMeanAbsoluteError value on hold-out data: 0.41463977098464966\nEpoch: 33\n\n\nLoss on hold-out set: 0.21376403542856376\nMeanAbsoluteError value on hold-out data: 0.4174366891384125\nEpoch: 34\nLoss on hold-out set: 0.20941990574200947\nMeanAbsoluteError value on hold-out data: 0.40838131308555603\nEpoch: 35\n\n\nLoss on hold-out set: 0.213296466867129\nMeanAbsoluteError value on hold-out data: 0.41091400384902954\nEpoch: 36\nLoss on hold-out set: 0.2040355108429988\nMeanAbsoluteError value on hold-out data: 0.4051058888435364\nEpoch: 37\nLoss on hold-out set: 0.19671465237935384\nMeanAbsoluteError value on hold-out data: 0.39892664551734924\nEpoch: 38\n\n\nLoss on hold-out set: 0.20732417086760202\nMeanAbsoluteError value on hold-out data: 0.4086630046367645\nEpoch: 39\nLoss on hold-out set: 0.20723472811281682\nMeanAbsoluteError value on hold-out data: 0.4072141647338867\nEpoch: 40\n\n\nLoss on hold-out set: 0.19073714718222617\nMeanAbsoluteError value on hold-out data: 0.3875740170478821\nEpoch: 41\nLoss on hold-out set: 0.19302094886700313\nMeanAbsoluteError value on hold-out data: 0.3902650773525238\nEpoch: 42\nLoss on hold-out set: 0.1810104578733444\nMeanAbsoluteError value on hold-out data: 0.38195082545280457\nEpoch: 43\n\n\nLoss on hold-out set: 0.17722262879212697\nMeanAbsoluteError value on hold-out data: 0.37704339623451233\nEpoch: 44\nLoss on hold-out set: 0.17555132006605467\nMeanAbsoluteError value on hold-out data: 0.37133336067199707\nEpoch: 45\n\n\nLoss on hold-out set: 0.18518391162157058\nMeanAbsoluteError value on hold-out data: 0.38185837864875793\nEpoch: 46\nLoss on hold-out set: 0.1775117226690054\nMeanAbsoluteError value on hold-out data: 0.37295350432395935\nEpoch: 47\nLoss on hold-out set: 0.1755660196642081\nMeanAbsoluteError value on hold-out data: 0.37099820375442505\nEpoch: 48\n\n\nLoss on hold-out set: 0.16435564746459325\nMeanAbsoluteError value on hold-out data: 0.355783075094223\nEpoch: 49\nLoss on hold-out set: 0.17605029804011185\nMeanAbsoluteError value on hold-out data: 0.37331533432006836\nEpoch: 50\n\n\nLoss on hold-out set: 0.17001703863342604\nMeanAbsoluteError value on hold-out data: 0.363822340965271\nEpoch: 51\nLoss on hold-out set: 0.16834478030602137\nMeanAbsoluteError value on hold-out data: 0.3602946400642395\nEpoch: 52\n\n\nLoss on hold-out set: 0.1688321003317833\nMeanAbsoluteError value on hold-out data: 0.358140230178833\nEpoch: 53\nLoss on hold-out set: 0.1690439114222924\nMeanAbsoluteError value on hold-out data: 0.36147579550743103\nEpoch: 54\nLoss on hold-out set: 0.17233786692221958\nMeanAbsoluteError value on hold-out data: 0.36319273710250854\nEpoch: 55\n\n\nLoss on hold-out set: 0.15612428764502206\nMeanAbsoluteError value on hold-out data: 0.34534478187561035\nEpoch: 56\nLoss on hold-out set: 0.15970078493158021\nMeanAbsoluteError value on hold-out data: 0.3480951189994812\nEpoch: 57\n\n\nLoss on hold-out set: 0.14833041434486707\nMeanAbsoluteError value on hold-out data: 0.33384695649147034\nEpoch: 58\nLoss on hold-out set: 0.1547037283082803\nMeanAbsoluteError value on hold-out data: 0.33957478404045105\nEpoch: 59\nLoss on hold-out set: 0.15590120861927667\nMeanAbsoluteError value on hold-out data: 0.34220293164253235\nEpoch: 60\n\n\nLoss on hold-out set: 0.14528140726188818\nMeanAbsoluteError value on hold-out data: 0.329572856426239\nEpoch: 61\nLoss on hold-out set: 0.1407043079038461\nMeanAbsoluteError value on hold-out data: 0.3287371098995209\nEpoch: 62\n\n\nLoss on hold-out set: 0.14064204399784405\nMeanAbsoluteError value on hold-out data: 0.3256448805332184\nEpoch: 63\nLoss on hold-out set: 0.14086911151806514\nMeanAbsoluteError value on hold-out data: 0.3317888379096985\nEpoch: 64\nLoss on hold-out set: 0.14231873807807763\nMeanAbsoluteError value on hold-out data: 0.3299867808818817\nEpoch: 65\n\n\nLoss on hold-out set: 0.1405111609896024\nMeanAbsoluteError value on hold-out data: 0.32386481761932373\nEpoch: 66\nLoss on hold-out set: 0.14093283583720526\nMeanAbsoluteError value on hold-out data: 0.3251991868019104\nEpoch: 67\n\n\nLoss on hold-out set: 0.14125210255384446\nMeanAbsoluteError value on hold-out data: 0.3283649682998657\nEpoch: 68\nLoss on hold-out set: 0.1310523422062397\nMeanAbsoluteError value on hold-out data: 0.3146977424621582\nEpoch: 69\nLoss on hold-out set: 0.13187499749163786\nMeanAbsoluteError value on hold-out data: 0.3083782196044922\n\n\nEpoch: 70\nLoss on hold-out set: 0.12808902685840926\nMeanAbsoluteError value on hold-out data: 0.30536088347435\nEpoch: 71\n\n\nLoss on hold-out set: 0.13056844539940357\nMeanAbsoluteError value on hold-out data: 0.3074202835559845\nEpoch: 72\nLoss on hold-out set: 0.1273248118410508\nMeanAbsoluteError value on hold-out data: 0.30493399500846863\nEpoch: 73\nLoss on hold-out set: 0.12665398235122363\nMeanAbsoluteError value on hold-out data: 0.30516472458839417\nEpoch: 74\n\n\nLoss on hold-out set: 0.12638736044367155\nMeanAbsoluteError value on hold-out data: 0.30006399750709534\nEpoch: 75\nLoss on hold-out set: 0.12005186726649603\nMeanAbsoluteError value on hold-out data: 0.29853153228759766\nEpoch: 76\n\n\nLoss on hold-out set: 0.12208623925844829\nMeanAbsoluteError value on hold-out data: 0.2982252538204193\nEpoch: 77\nLoss on hold-out set: 0.12079677678644657\nMeanAbsoluteError value on hold-out data: 0.2959551215171814\nEpoch: 78\nLoss on hold-out set: 0.10747716079155605\nMeanAbsoluteError value on hold-out data: 0.2764030992984772\nEpoch: 79\n\n\nLoss on hold-out set: 0.10953840747475624\nMeanAbsoluteError value on hold-out data: 0.2865781784057617\nEpoch: 80\nLoss on hold-out set: 0.10935370010634263\nMeanAbsoluteError value on hold-out data: 0.28362318873405457\nEpoch: 81\n\n\nLoss on hold-out set: 0.11928601277371248\nMeanAbsoluteError value on hold-out data: 0.2880234718322754\nEpoch: 82\nLoss on hold-out set: 0.11854493162284295\nMeanAbsoluteError value on hold-out data: 0.2969725430011749\nEpoch: 83\nLoss on hold-out set: 0.10517810409267743\nMeanAbsoluteError value on hold-out data: 0.27639082074165344\nEpoch: 84\n\n\nLoss on hold-out set: 0.11008137544617057\nMeanAbsoluteError value on hold-out data: 0.28012001514434814\nEpoch: 85\nLoss on hold-out set: 0.1039415238921841\nMeanAbsoluteError value on hold-out data: 0.26928946375846863\nEpoch: 86\n\n\nLoss on hold-out set: 0.10163634361078341\nMeanAbsoluteError value on hold-out data: 0.2660697400569916\nEpoch: 87\nLoss on hold-out set: 0.1091098544249932\nMeanAbsoluteError value on hold-out data: 0.270637184381485\nEpoch: 88\nLoss on hold-out set: 0.10200368742148082\nMeanAbsoluteError value on hold-out data: 0.26451191306114197\nEpoch: 89\n\n\nLoss on hold-out set: 0.1000593410183986\nMeanAbsoluteError value on hold-out data: 0.2684409022331238\nEpoch: 90\nLoss on hold-out set: 0.10720110350598891\nMeanAbsoluteError value on hold-out data: 0.27091628313064575\nEpoch: 91\n\n\nLoss on hold-out set: 0.10280907599255443\nMeanAbsoluteError value on hold-out data: 0.26310276985168457\nEpoch: 92\nLoss on hold-out set: 0.10491369916747013\nMeanAbsoluteError value on hold-out data: 0.27053147554397583\nEpoch: 93\nLoss on hold-out set: 0.09874883926163117\nMeanAbsoluteError value on hold-out data: 0.2670591473579407\nEpoch: 94\n\n\nLoss on hold-out set: 0.10284560178716977\nMeanAbsoluteError value on hold-out data: 0.2678760588169098\nEpoch: 95\nLoss on hold-out set: 0.08599148411303759\nMeanAbsoluteError value on hold-out data: 0.24770614504814148\nEpoch: 96\n\n\nLoss on hold-out set: 0.09390623973061642\nMeanAbsoluteError value on hold-out data: 0.2582496702671051\nEpoch: 97\nLoss on hold-out set: 0.09833253871028622\nMeanAbsoluteError value on hold-out data: 0.26200324296951294\nEpoch: 98\nLoss on hold-out set: 0.08606096401810646\nMeanAbsoluteError value on hold-out data: 0.2406795769929886\nEpoch: 99\n\n\nLoss on hold-out set: 0.09668089436988035\nMeanAbsoluteError value on hold-out data: 0.2590382695198059\nEpoch: 100\nLoss on hold-out set: 0.0866709676819543\nMeanAbsoluteError value on hold-out data: 0.23808886110782623\nEpoch: 101\n\n\nLoss on hold-out set: 0.08305572015543779\nMeanAbsoluteError value on hold-out data: 0.24122609198093414\nEpoch: 102\nLoss on hold-out set: 0.08929613741735618\nMeanAbsoluteError value on hold-out data: 0.24686568975448608\nEpoch: 103\nLoss on hold-out set: 0.08168599487592777\nMeanAbsoluteError value on hold-out data: 0.23282310366630554\nEpoch: 104\n\n\nLoss on hold-out set: 0.08819124396890402\nMeanAbsoluteError value on hold-out data: 0.23965975642204285\nEpoch: 105\nLoss on hold-out set: 0.08362914698198437\nMeanAbsoluteError value on hold-out data: 0.24069923162460327\nEpoch: 106\n\n\nLoss on hold-out set: 0.07802170542844881\nMeanAbsoluteError value on hold-out data: 0.22414584457874298\nEpoch: 107\nLoss on hold-out set: 0.08144638801614444\nMeanAbsoluteError value on hold-out data: 0.23551124334335327\nEpoch: 108\nLoss on hold-out set: 0.07860119260847569\nMeanAbsoluteError value on hold-out data: 0.2280121147632599\nEpoch: 109\n\n\nLoss on hold-out set: 0.08298396760597825\nMeanAbsoluteError value on hold-out data: 0.2384718507528305\nEpoch: 110\nLoss on hold-out set: 0.0778092085570097\nMeanAbsoluteError value on hold-out data: 0.2322790026664734\nEpoch: 111\n\n\nLoss on hold-out set: 0.07890863329172135\nMeanAbsoluteError value on hold-out data: 0.22819264233112335\nEpoch: 112\nLoss on hold-out set: 0.08328013386577368\nMeanAbsoluteError value on hold-out data: 0.237274169921875\nEpoch: 113\nLoss on hold-out set: 0.07420680133004984\nMeanAbsoluteError value on hold-out data: 0.22451630234718323\nEpoch: 114\n\n\nLoss on hold-out set: 0.07956076804548502\nMeanAbsoluteError value on hold-out data: 0.2344481647014618\nEpoch: 115\nLoss on hold-out set: 0.07017390753918638\nMeanAbsoluteError value on hold-out data: 0.2166406810283661\nEpoch: 116\n\n\nLoss on hold-out set: 0.07663844416538874\nMeanAbsoluteError value on hold-out data: 0.22669216990470886\nEpoch: 117\nLoss on hold-out set: 0.0744463819762071\nMeanAbsoluteError value on hold-out data: 0.21890632808208466\nEpoch: 118\nLoss on hold-out set: 0.0728543790554007\nMeanAbsoluteError value on hold-out data: 0.22035939991474152\nEpoch: 119\n\n\nLoss on hold-out set: 0.07349796436727046\nMeanAbsoluteError value on hold-out data: 0.22258326411247253\nEpoch: 120\nLoss on hold-out set: 0.07524941165621082\nMeanAbsoluteError value on hold-out data: 0.22681327164173126\nEpoch: 121\n\n\nLoss on hold-out set: 0.0727734740326802\nMeanAbsoluteError value on hold-out data: 0.2178013175725937\nEpoch: 122\nLoss on hold-out set: 0.06819305568002164\nMeanAbsoluteError value on hold-out data: 0.20833991467952728\nEpoch: 123\nLoss on hold-out set: 0.06812061826388041\nMeanAbsoluteError value on hold-out data: 0.21062560379505157\nEpoch: 124\n\n\nLoss on hold-out set: 0.07322782378643751\nMeanAbsoluteError value on hold-out data: 0.22108067572116852\nEpoch: 125\nLoss on hold-out set: 0.07005781129002571\nMeanAbsoluteError value on hold-out data: 0.21741162240505219\nEpoch: 126\n\n\nLoss on hold-out set: 0.06706245828419924\nMeanAbsoluteError value on hold-out data: 0.20643749833106995\nEpoch: 127\nLoss on hold-out set: 0.07251376112302145\nMeanAbsoluteError value on hold-out data: 0.22158604860305786\nEpoch: 128\nLoss on hold-out set: 0.06696127450714509\nMeanAbsoluteError value on hold-out data: 0.21114708483219147\nReturned to Spot: Validation loss: 0.06696127450714509\n----------------------------------------------\n\n\nspotPython tuning: 0.06696127450714509 [########--] 78.80% \n\n\n\nconfig: {'_L_in': 10, '_L_out': 1, 'l1': 128, 'dropout_prob': 0.5252411128304804, 'lr_mult': 0.001, 'batch_size': 4, 'epochs': 128, 'k_folds': 1, 'patience': 128, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 0.2635013208786647\nMeanAbsoluteError value on hold-out data: 0.479971319437027\nEpoch: 2\nLoss on hold-out set: 0.2593793775637945\nMeanAbsoluteError value on hold-out data: 0.4751169979572296\nEpoch: 3\nLoss on hold-out set: 0.25128434111674625\nMeanAbsoluteError value on hold-out data: 0.46925705671310425\nEpoch: 4\n\n\nLoss on hold-out set: 0.2548475821812948\nMeanAbsoluteError value on hold-out data: 0.47130101919174194\nEpoch: 5\nLoss on hold-out set: 0.24688415020704269\nMeanAbsoluteError value on hold-out data: 0.46639537811279297\nEpoch: 6\n\n\nLoss on hold-out set: 0.24667746697862944\nMeanAbsoluteError value on hold-out data: 0.4630577564239502\nEpoch: 7\nLoss on hold-out set: 0.23475457241137823\nMeanAbsoluteError value on hold-out data: 0.44877028465270996\nEpoch: 8\nLoss on hold-out set: 0.2320116427540779\nMeanAbsoluteError value on hold-out data: 0.4470086097717285\nEpoch: 9\n\n\nLoss on hold-out set: 0.23451914191246032\nMeanAbsoluteError value on hold-out data: 0.45043569803237915\nEpoch: 10\nLoss on hold-out set: 0.22582463115453721\nMeanAbsoluteError value on hold-out data: 0.440849244594574\nEpoch: 11\n\n\nLoss on hold-out set: 0.2333037029703458\nMeanAbsoluteError value on hold-out data: 0.44878870248794556\nEpoch: 12\nLoss on hold-out set: 0.21374910538395245\nMeanAbsoluteError value on hold-out data: 0.4290929138660431\nEpoch: 13\nLoss on hold-out set: 0.2188911708196004\nMeanAbsoluteError value on hold-out data: 0.4318825900554657\nEpoch: 14\n\n\nLoss on hold-out set: 0.21271408041318257\nMeanAbsoluteError value on hold-out data: 0.4275589883327484\nEpoch: 15\nLoss on hold-out set: 0.21449944814046223\nMeanAbsoluteError value on hold-out data: 0.4265899658203125\nEpoch: 16\n\n\nLoss on hold-out set: 0.2092850827674071\nMeanAbsoluteError value on hold-out data: 0.42211002111434937\nEpoch: 17\nLoss on hold-out set: 0.20493940432866414\nMeanAbsoluteError value on hold-out data: 0.41466718912124634\nEpoch: 18\nLoss on hold-out set: 0.1976477434237798\nMeanAbsoluteError value on hold-out data: 0.40514999628067017\nEpoch: 19\n\n\nLoss on hold-out set: 0.20016110613942145\nMeanAbsoluteError value on hold-out data: 0.4088449478149414\nEpoch: 20\nLoss on hold-out set: 0.19388459424177806\nMeanAbsoluteError value on hold-out data: 0.4049430787563324\nEpoch: 21\n\n\nLoss on hold-out set: 0.18500346193710962\nMeanAbsoluteError value on hold-out data: 0.39550530910491943\nEpoch: 22\nLoss on hold-out set: 0.18796198318401972\nMeanAbsoluteError value on hold-out data: 0.3953830599784851\nEpoch: 23\nLoss on hold-out set: 0.17877769316236178\nMeanAbsoluteError value on hold-out data: 0.3866729438304901\nEpoch: 24\n\n\nLoss on hold-out set: 0.18619969854752222\nMeanAbsoluteError value on hold-out data: 0.3932362496852875\nEpoch: 25\nLoss on hold-out set: 0.17280966639518738\nMeanAbsoluteError value on hold-out data: 0.377464234828949\nEpoch: 26\n\n\nLoss on hold-out set: 0.17806998620430628\nMeanAbsoluteError value on hold-out data: 0.3848539888858795\nEpoch: 27\nLoss on hold-out set: 0.17569886629780135\nMeanAbsoluteError value on hold-out data: 0.38205036520957947\nEpoch: 28\nLoss on hold-out set: 0.1713029460608959\nMeanAbsoluteError value on hold-out data: 0.3756510615348816\nEpoch: 29\n\n\nLoss on hold-out set: 0.16547263875603677\nMeanAbsoluteError value on hold-out data: 0.36767908930778503\nEpoch: 30\nLoss on hold-out set: 0.1692646616200606\nMeanAbsoluteError value on hold-out data: 0.37181854248046875\nEpoch: 31\n\n\nLoss on hold-out set: 0.15985325286785762\nMeanAbsoluteError value on hold-out data: 0.36465293169021606\nEpoch: 32\nLoss on hold-out set: 0.16219363994896413\nMeanAbsoluteError value on hold-out data: 0.3656635582447052\nEpoch: 33\nLoss on hold-out set: 0.16270208487908044\nMeanAbsoluteError value on hold-out data: 0.36274173855781555\nEpoch: 34\n\n\nLoss on hold-out set: 0.155665252233545\nMeanAbsoluteError value on hold-out data: 0.3537687361240387\nEpoch: 35\nLoss on hold-out set: 0.155173355837663\nMeanAbsoluteError value on hold-out data: 0.35567763447761536\nEpoch: 36\n\n\nLoss on hold-out set: 0.15566179253160953\nMeanAbsoluteError value on hold-out data: 0.3538636267185211\nEpoch: 37\nLoss on hold-out set: 0.14743970066308976\nMeanAbsoluteError value on hold-out data: 0.34539541602134705\nEpoch: 38\nLoss on hold-out set: 0.1451820057630539\nMeanAbsoluteError value on hold-out data: 0.34210970997810364\nEpoch: 39\n\n\nLoss on hold-out set: 0.13924171425402165\nMeanAbsoluteError value on hold-out data: 0.33370426297187805\nEpoch: 40\nLoss on hold-out set: 0.14451856171091398\nMeanAbsoluteError value on hold-out data: 0.3416542112827301\nEpoch: 41\n\n\nLoss on hold-out set: 0.1302067215492328\nMeanAbsoluteError value on hold-out data: 0.32197555899620056\nEpoch: 42\nLoss on hold-out set: 0.13349131102363268\nMeanAbsoluteError value on hold-out data: 0.32359859347343445\nEpoch: 43\nLoss on hold-out set: 0.1266732486585776\nMeanAbsoluteError value on hold-out data: 0.31763583421707153\nEpoch: 44\n\n\nLoss on hold-out set: 0.13253302534421285\nMeanAbsoluteError value on hold-out data: 0.3232727348804474\nEpoch: 45\nLoss on hold-out set: 0.12709495916962624\nMeanAbsoluteError value on hold-out data: 0.31583172082901\nEpoch: 46\n\n\nLoss on hold-out set: 0.1275240768243869\nMeanAbsoluteError value on hold-out data: 0.31358009576797485\nEpoch: 47\nLoss on hold-out set: 0.12337811963011822\nMeanAbsoluteError value on hold-out data: 0.3090101480484009\nEpoch: 48\nLoss on hold-out set: 0.11811547147730986\nMeanAbsoluteError value on hold-out data: 0.30135583877563477\nEpoch: 49\n\n\nLoss on hold-out set: 0.11331404949227969\nMeanAbsoluteError value on hold-out data: 0.29726627469062805\nEpoch: 50\nLoss on hold-out set: 0.1195528511951367\nMeanAbsoluteError value on hold-out data: 0.30134546756744385\nEpoch: 51\n\n\nLoss on hold-out set: 0.11175416048616171\nMeanAbsoluteError value on hold-out data: 0.2950301170349121\nEpoch: 52\nLoss on hold-out set: 0.11181936360895633\nMeanAbsoluteError value on hold-out data: 0.2932000160217285\nEpoch: 53\n\n\nLoss on hold-out set: 0.10890007187922796\nMeanAbsoluteError value on hold-out data: 0.28715211153030396\nEpoch: 54\nLoss on hold-out set: 0.11120939628531536\nMeanAbsoluteError value on hold-out data: 0.2886425852775574\nEpoch: 55\n\n\nLoss on hold-out set: 0.10887354719142119\nMeanAbsoluteError value on hold-out data: 0.2805563807487488\nEpoch: 56\nLoss on hold-out set: 0.10344864533593258\nMeanAbsoluteError value on hold-out data: 0.2795654535293579\nEpoch: 57\n\n\nLoss on hold-out set: 0.0965714746961991\nMeanAbsoluteError value on hold-out data: 0.26713594794273376\nEpoch: 58\nLoss on hold-out set: 0.1018772548933824\nMeanAbsoluteError value on hold-out data: 0.2759571671485901\nEpoch: 59\nLoss on hold-out set: 0.09961865367988745\nMeanAbsoluteError value on hold-out data: 0.2724776566028595\nEpoch: 60\n\n\nLoss on hold-out set: 0.09895426987359922\nMeanAbsoluteError value on hold-out data: 0.2701159417629242\nEpoch: 61\nLoss on hold-out set: 0.09215714697726071\nMeanAbsoluteError value on hold-out data: 0.25785335898399353\nEpoch: 62\n\n\nLoss on hold-out set: 0.09574323879554868\nMeanAbsoluteError value on hold-out data: 0.2681463360786438\nEpoch: 63\nLoss on hold-out set: 0.08903963334858417\nMeanAbsoluteError value on hold-out data: 0.25491827726364136\nEpoch: 64\nLoss on hold-out set: 0.08646201601872841\nMeanAbsoluteError value on hold-out data: 0.24891649186611176\nEpoch: 65\n\n\nLoss on hold-out set: 0.08604182699074348\nMeanAbsoluteError value on hold-out data: 0.24990658462047577\nEpoch: 66\nLoss on hold-out set: 0.08979712460190058\nMeanAbsoluteError value on hold-out data: 0.2558192312717438\nEpoch: 67\n\n\nLoss on hold-out set: 0.08801769281427066\nMeanAbsoluteError value on hold-out data: 0.25591784715652466\nEpoch: 68\nLoss on hold-out set: 0.09033511425058047\nMeanAbsoluteError value on hold-out data: 0.25314420461654663\nEpoch: 69\nLoss on hold-out set: 0.08009708101550737\nMeanAbsoluteError value on hold-out data: 0.23584891855716705\nEpoch: 70\n\n\nLoss on hold-out set: 0.08215375461305181\nMeanAbsoluteError value on hold-out data: 0.24046602845191956\nEpoch: 71\n\n\nLoss on hold-out set: 0.07885155086716016\nMeanAbsoluteError value on hold-out data: 0.23486541211605072\nEpoch: 72\nLoss on hold-out set: 0.07684332869326074\nMeanAbsoluteError value on hold-out data: 0.2300887554883957\nEpoch: 73\nLoss on hold-out set: 0.076019918260475\nMeanAbsoluteError value on hold-out data: 0.22896479070186615\nEpoch: 74\n\n\nLoss on hold-out set: 0.07494671192020178\nMeanAbsoluteError value on hold-out data: 0.22935114800930023\nEpoch: 75\n\n\nLoss on hold-out set: 0.07236433725804091\nMeanAbsoluteError value on hold-out data: 0.22079508006572723\nEpoch: 76\nLoss on hold-out set: 0.0737537012497584\nMeanAbsoluteError value on hold-out data: 0.22682294249534607\nEpoch: 77\nLoss on hold-out set: 0.06532424308359623\nMeanAbsoluteError value on hold-out data: 0.21409937739372253\nEpoch: 78\nLoss on hold-out set: 0.06875808468709389\nMeanAbsoluteError value on hold-out data: 0.21651944518089294\nEpoch: 79\n\n\nLoss on hold-out set: 0.07181884995351236\nMeanAbsoluteError value on hold-out data: 0.22433766722679138\nEpoch: 80\n\n\nLoss on hold-out set: 0.06852930568158627\nMeanAbsoluteError value on hold-out data: 0.21596264839172363\nEpoch: 81\nLoss on hold-out set: 0.06857993476092815\nMeanAbsoluteError value on hold-out data: 0.21373839676380157\nEpoch: 82\nLoss on hold-out set: 0.06677640572190285\nMeanAbsoluteError value on hold-out data: 0.21250949800014496\nEpoch: 83\nLoss on hold-out set: 0.06549795098913212\nMeanAbsoluteError value on hold-out data: 0.21346469223499298\nEpoch: 84\n\n\nLoss on hold-out set: 0.06327593960178395\n\n\nMeanAbsoluteError value on hold-out data: 0.2101280391216278\nEpoch: 85\nLoss on hold-out set: 0.06412599558631579\nMeanAbsoluteError value on hold-out data: 0.20715530216693878\nEpoch: 86\nLoss on hold-out set: 0.06766407878448566\nMeanAbsoluteError value on hold-out data: 0.21332459151744843\nEpoch: 87\nLoss on hold-out set: 0.06368203685929377\nMeanAbsoluteError value on hold-out data: 0.20729418098926544\nEpoch: 88\nLoss on hold-out set: 0.05666155653074384\nMeanAbsoluteError value on hold-out data: 0.19562605023384094\nEpoch: 89\n\n\nLoss on hold-out set: 0.053633391093462705\nMeanAbsoluteError value on hold-out data: 0.18920518457889557\nEpoch: 90\nLoss on hold-out set: 0.057612722590565685\nMeanAbsoluteError value on hold-out data: 0.19791217148303986\nEpoch: 91\nLoss on hold-out set: 0.05162541115035613\nMeanAbsoluteError value on hold-out data: 0.18763355910778046\nEpoch: 92\nLoss on hold-out set: 0.059441778833667434\nMeanAbsoluteError value on hold-out data: 0.20336101949214935\nEpoch: 93\nLoss on hold-out set: 0.05635029090568423\nMeanAbsoluteError value on hold-out data: 0.1915336549282074\nEpoch: 94\n\n\nLoss on hold-out set: 0.04775271443029245\nMeanAbsoluteError value on hold-out data: 0.180833637714386\nEpoch: 95\nLoss on hold-out set: 0.054517797405521075\nMeanAbsoluteError value on hold-out data: 0.18655820190906525\nEpoch: 96\nLoss on hold-out set: 0.05171272729833921\nMeanAbsoluteError value on hold-out data: 0.1877531111240387\nEpoch: 97\nLoss on hold-out set: 0.053856865186244246\nMeanAbsoluteError value on hold-out data: 0.1875869780778885\nEpoch: 98\nLoss on hold-out set: 0.05104046472037832\nMeanAbsoluteError value on hold-out data: 0.18053534626960754\nEpoch: 99\n\n\nLoss on hold-out set: 0.05182227627684673\nMeanAbsoluteError value on hold-out data: 0.19037264585494995\nEpoch: 100\nLoss on hold-out set: 0.04903062644104163\nMeanAbsoluteError value on hold-out data: 0.18178553879261017\nEpoch: 101\nLoss on hold-out set: 0.048388442808451754\nMeanAbsoluteError value on hold-out data: 0.17761030793190002\nEpoch: 102\nLoss on hold-out set: 0.04856813476420939\nMeanAbsoluteError value on hold-out data: 0.17713838815689087\nEpoch: 103\nLoss on hold-out set: 0.051205978865424794\nMeanAbsoluteError value on hold-out data: 0.18671873211860657\nEpoch: 104\n\n\nLoss on hold-out set: 0.04682874931643406\nMeanAbsoluteError value on hold-out data: 0.1755015254020691\nEpoch: 105\nLoss on hold-out set: 0.04900848327204585\nMeanAbsoluteError value on hold-out data: 0.1796758770942688\nEpoch: 106\nLoss on hold-out set: 0.04870067108732959\nMeanAbsoluteError value on hold-out data: 0.17869362235069275\nEpoch: 107\nLoss on hold-out set: 0.04440015239020189\nMeanAbsoluteError value on hold-out data: 0.16839070618152618\nEpoch: 108\nLoss on hold-out set: 0.04626780560084929\nMeanAbsoluteError value on hold-out data: 0.17204980552196503\nEpoch: 109\n\n\nLoss on hold-out set: 0.046247685191531974\nMeanAbsoluteError value on hold-out data: 0.1730698198080063\nEpoch: 110\nLoss on hold-out set: 0.046187324052055674\nMeanAbsoluteError value on hold-out data: 0.17561113834381104\nEpoch: 111\nLoss on hold-out set: 0.04825203123812874\nMeanAbsoluteError value on hold-out data: 0.1737978607416153\nEpoch: 112\nLoss on hold-out set: 0.04543189679582914\nMeanAbsoluteError value on hold-out data: 0.1694442182779312\nEpoch: 113\nLoss on hold-out set: 0.04560430628558\nMeanAbsoluteError value on hold-out data: 0.16889603435993195\nEpoch: 114\n\n\nLoss on hold-out set: 0.04472786628330747\nMeanAbsoluteError value on hold-out data: 0.17384807765483856\nEpoch: 115\nLoss on hold-out set: 0.04430019474277894\nMeanAbsoluteError value on hold-out data: 0.16936467587947845\nEpoch: 116\nLoss on hold-out set: 0.04092795062189301\nMeanAbsoluteError value on hold-out data: 0.16380727291107178\nEpoch: 117\nLoss on hold-out set: 0.04118863672328492\nMeanAbsoluteError value on hold-out data: 0.15853825211524963\nEpoch: 118\nLoss on hold-out set: 0.040608120902131\nMeanAbsoluteError value on hold-out data: 0.16039541363716125\nEpoch: 119\n\n\nLoss on hold-out set: 0.041709505217149855\nMeanAbsoluteError value on hold-out data: 0.16655294597148895\nEpoch: 120\nLoss on hold-out set: 0.04429606245830655\nMeanAbsoluteError value on hold-out data: 0.1700417399406433\nEpoch: 121\nLoss on hold-out set: 0.04259021884140869\nMeanAbsoluteError value on hold-out data: 0.1653982251882553\nEpoch: 122\nLoss on hold-out set: 0.04301686386888226\nMeanAbsoluteError value on hold-out data: 0.1613122820854187\nEpoch: 123\nLoss on hold-out set: 0.04237945056054741\nMeanAbsoluteError value on hold-out data: 0.16540229320526123\nEpoch: 124\n\n\nLoss on hold-out set: 0.04100692452241977\nMeanAbsoluteError value on hold-out data: 0.1613406389951706\nEpoch: 125\nLoss on hold-out set: 0.03733738190184037\nMeanAbsoluteError value on hold-out data: 0.15597224235534668\nEpoch: 126\nLoss on hold-out set: 0.03741471623303369\nMeanAbsoluteError value on hold-out data: 0.1568743884563446\nEpoch: 127\nLoss on hold-out set: 0.040717475190758703\nMeanAbsoluteError value on hold-out data: 0.16316409409046173\nEpoch: 128\nLoss on hold-out set: 0.040394650309657054\nMeanAbsoluteError value on hold-out data: 0.1641305536031723\nReturned to Spot: Validation loss: 0.040394650309657054\n----------------------------------------------\n\n\nspotPython tuning: 0.040394650309657054 [#########-] 89.98% \n\n\n\nconfig: {'_L_in': 10, '_L_out': 1, 'l1': 128, 'dropout_prob': 0.16343155599701642, 'lr_mult': 0.001, 'batch_size': 4, 'epochs': 128, 'k_folds': 1, 'patience': 128, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1\nLoss on hold-out set: 0.18669108813007673\nMeanAbsoluteError value on hold-out data: 0.39615553617477417\nEpoch: 2\nLoss on hold-out set: 0.18589762563506762\nMeanAbsoluteError value on hold-out data: 0.3948878049850464\nEpoch: 3\nLoss on hold-out set: 0.18437372033794722\nMeanAbsoluteError value on hold-out data: 0.3925729990005493\nEpoch: 4\nLoss on hold-out set: 0.17808965727686882\nMeanAbsoluteError value on hold-out data: 0.3859124779701233\nEpoch: 5\n\n\nLoss on hold-out set: 0.17559666881958644\nMeanAbsoluteError value on hold-out data: 0.3819428086280823\nEpoch: 6\nLoss on hold-out set: 0.17389261906345685\nMeanAbsoluteError value on hold-out data: 0.37977930903434753\nEpoch: 7\nLoss on hold-out set: 0.17078580766916274\nMeanAbsoluteError value on hold-out data: 0.37617242336273193\nEpoch: 8\nLoss on hold-out set: 0.16927964275081953\nMeanAbsoluteError value on hold-out data: 0.3741391897201538\nEpoch: 9\nLoss on hold-out set: 0.1659952910244465\nMeanAbsoluteError value on hold-out data: 0.37045586109161377\nEpoch: 10\n\n\nLoss on hold-out set: 0.1603252813220024\nMeanAbsoluteError value on hold-out data: 0.3639180660247803\nEpoch: 11\nLoss on hold-out set: 0.16000037245452403\nMeanAbsoluteError value on hold-out data: 0.3618090748786926\nEpoch: 12\nLoss on hold-out set: 0.1588505470752716\nMeanAbsoluteError value on hold-out data: 0.36204537749290466\nEpoch: 13\nLoss on hold-out set: 0.15498818223675093\nMeanAbsoluteError value on hold-out data: 0.3559843599796295\nEpoch: 14\nLoss on hold-out set: 0.15333570808172226\nMeanAbsoluteError value on hold-out data: 0.3535970151424408\nEpoch: 15\n\n\nLoss on hold-out set: 0.15189454729358356\nMeanAbsoluteError value on hold-out data: 0.3511638939380646\nEpoch: 16\nLoss on hold-out set: 0.14913595922291278\nMeanAbsoluteError value on hold-out data: 0.3483405113220215\nEpoch: 17\nLoss on hold-out set: 0.14464758279422918\nMeanAbsoluteError value on hold-out data: 0.3423997461795807\nEpoch: 18\nLoss on hold-out set: 0.1430986241499583\nMeanAbsoluteError value on hold-out data: 0.3402748107910156\nEpoch: 19\nLoss on hold-out set: 0.13958272953828177\nMeanAbsoluteError value on hold-out data: 0.3345904052257538\nEpoch: 20\n\n\nLoss on hold-out set: 0.13744721656044323\nMeanAbsoluteError value on hold-out data: 0.33258557319641113\nEpoch: 21\nLoss on hold-out set: 0.13465398631989955\nMeanAbsoluteError value on hold-out data: 0.32839956879615784\nEpoch: 22\nLoss on hold-out set: 0.1323085835079352\nMeanAbsoluteError value on hold-out data: 0.3252319395542145\nEpoch: 23\nLoss on hold-out set: 0.12963979914784432\nMeanAbsoluteError value on hold-out data: 0.321574330329895\nEpoch: 24\nLoss on hold-out set: 0.12732306788365047\nMeanAbsoluteError value on hold-out data: 0.31717967987060547\nEpoch: 25\n\n\nLoss on hold-out set: 0.1255515613158544\nMeanAbsoluteError value on hold-out data: 0.3149213194847107\nEpoch: 26\nLoss on hold-out set: 0.1224898711591959\nMeanAbsoluteError value on hold-out data: 0.31111547350883484\nEpoch: 27\nLoss on hold-out set: 0.11960337422788143\nMeanAbsoluteError value on hold-out data: 0.3057972192764282\nEpoch: 28\nLoss on hold-out set: 0.11782273481289546\nMeanAbsoluteError value on hold-out data: 0.3041980564594269\nEpoch: 29\nLoss on hold-out set: 0.11467898751298587\nMeanAbsoluteError value on hold-out data: 0.30063217878341675\nEpoch: 30\n\n\nLoss on hold-out set: 0.1140014531215032\nMeanAbsoluteError value on hold-out data: 0.2983565926551819\nEpoch: 31\nLoss on hold-out set: 0.11038443607588609\nMeanAbsoluteError value on hold-out data: 0.2933163642883301\nEpoch: 32\nLoss on hold-out set: 0.10893003102391959\nMeanAbsoluteError value on hold-out data: 0.29096558690071106\nEpoch: 33\nLoss on hold-out set: 0.10769404145578543\nMeanAbsoluteError value on hold-out data: 0.28817740082740784\nEpoch: 34\nLoss on hold-out set: 0.10563814048965772\nMeanAbsoluteError value on hold-out data: 0.28539445996284485\nEpoch: 35\n\n\nLoss on hold-out set: 0.10142973692466815\nMeanAbsoluteError value on hold-out data: 0.27889198064804077\nEpoch: 36\nLoss on hold-out set: 0.10070148691534996\nMeanAbsoluteError value on hold-out data: 0.2775111794471741\nEpoch: 37\nLoss on hold-out set: 0.09955558499942223\nMeanAbsoluteError value on hold-out data: 0.2747519314289093\nEpoch: 38\nLoss on hold-out set: 0.09539372141162554\nMeanAbsoluteError value on hold-out data: 0.26722097396850586\nEpoch: 39\nLoss on hold-out set: 0.09245328726867835\nMeanAbsoluteError value on hold-out data: 0.26373299956321716\nEpoch: 40\n\n\nLoss on hold-out set: 0.09267232803006967\nMeanAbsoluteError value on hold-out data: 0.26429328322410583\nEpoch: 41\nLoss on hold-out set: 0.08880806729818384\nMeanAbsoluteError value on hold-out data: 0.25795042514801025\nEpoch: 42\nLoss on hold-out set: 0.0894575858488679\nMeanAbsoluteError value on hold-out data: 0.25775858759880066\nEpoch: 43\nLoss on hold-out set: 0.08437781562407812\nMeanAbsoluteError value on hold-out data: 0.25135156512260437\nEpoch: 44\nLoss on hold-out set: 0.08550942907730738\nMeanAbsoluteError value on hold-out data: 0.25164762139320374\nEpoch: 45\n\n\nLoss on hold-out set: 0.08331248474617799\nMeanAbsoluteError value on hold-out data: 0.2479211986064911\nEpoch: 46\nLoss on hold-out set: 0.08171022387842337\nMeanAbsoluteError value on hold-out data: 0.24526359140872955\nEpoch: 47\nLoss on hold-out set: 0.07813216861337423\nMeanAbsoluteError value on hold-out data: 0.23789110779762268\nEpoch: 48\nLoss on hold-out set: 0.07682195692012707\nMeanAbsoluteError value on hold-out data: 0.23570683598518372\nEpoch: 49\nLoss on hold-out set: 0.07472024315968157\nMeanAbsoluteError value on hold-out data: 0.23331013321876526\nEpoch: 50\n\n\nLoss on hold-out set: 0.07216364827627937\nMeanAbsoluteError value on hold-out data: 0.22839218378067017\nEpoch: 51\nLoss on hold-out set: 0.0710804018502434\nMeanAbsoluteError value on hold-out data: 0.2263496071100235\nEpoch: 52\nLoss on hold-out set: 0.07031039477636417\nMeanAbsoluteError value on hold-out data: 0.22316040098667145\nEpoch: 53\nLoss on hold-out set: 0.06895541642792523\nMeanAbsoluteError value on hold-out data: 0.22190739214420319\nEpoch: 54\nLoss on hold-out set: 0.06638235338653127\nMeanAbsoluteError value on hold-out data: 0.2161777764558792\nEpoch: 55\n\n\nLoss on hold-out set: 0.06430478832994899\nMeanAbsoluteError value on hold-out data: 0.21353866159915924\nEpoch: 56\nLoss on hold-out set: 0.06313725400095184\nMeanAbsoluteError value on hold-out data: 0.211651012301445\nEpoch: 57\nLoss on hold-out set: 0.06267830402279893\nMeanAbsoluteError value on hold-out data: 0.21037624776363373\nEpoch: 58\nLoss on hold-out set: 0.061010961290448903\nMeanAbsoluteError value on hold-out data: 0.20554755628108978\nEpoch: 59\nLoss on hold-out set: 0.05887546905626853\nMeanAbsoluteError value on hold-out data: 0.20431308448314667\nEpoch: 60\n\n\nLoss on hold-out set: 0.056461512794097266\nMeanAbsoluteError value on hold-out data: 0.1994888186454773\nEpoch: 61\nLoss on hold-out set: 0.05565481768921018\nMeanAbsoluteError value on hold-out data: 0.1974475383758545\nEpoch: 62\nLoss on hold-out set: 0.05507119580482443\nMeanAbsoluteError value on hold-out data: 0.19607779383659363\nEpoch: 63\nLoss on hold-out set: 0.05476851986721158\nMeanAbsoluteError value on hold-out data: 0.196028470993042\nEpoch: 64\nLoss on hold-out set: 0.052519595362246034\nMeanAbsoluteError value on hold-out data: 0.1901305466890335\nEpoch: 65\n\n\nLoss on hold-out set: 0.053234470722575984\nMeanAbsoluteError value on hold-out data: 0.18963147699832916\nEpoch: 66\nLoss on hold-out set: 0.049935822977374\nMeanAbsoluteError value on hold-out data: 0.1844327598810196\nEpoch: 67\nLoss on hold-out set: 0.047801838566859566\nMeanAbsoluteError value on hold-out data: 0.17805862426757812\nEpoch: 68\nLoss on hold-out set: 0.04637363961587349\nMeanAbsoluteError value on hold-out data: 0.17807161808013916\nEpoch: 69\nLoss on hold-out set: 0.04744552372644345\nMeanAbsoluteError value on hold-out data: 0.17996296286582947\nEpoch: 70\n\n\nLoss on hold-out set: 0.04480662712206443\nMeanAbsoluteError value on hold-out data: 0.17463774979114532\nEpoch: 71\nLoss on hold-out set: 0.04374726469938954\nMeanAbsoluteError value on hold-out data: 0.17090027034282684\nEpoch: 72\nLoss on hold-out set: 0.04193584790453315\nMeanAbsoluteError value on hold-out data: 0.1674395054578781\nEpoch: 73\nLoss on hold-out set: 0.043119663391262296\nMeanAbsoluteError value on hold-out data: 0.16949845850467682\nEpoch: 74\nLoss on hold-out set: 0.040818812350432075\nMeanAbsoluteError value on hold-out data: 0.16504129767417908\nEpoch: 75\n\n\nLoss on hold-out set: 0.03964812502885858\nMeanAbsoluteError value on hold-out data: 0.16349762678146362\nEpoch: 76\nLoss on hold-out set: 0.04019248845676581\nMeanAbsoluteError value on hold-out data: 0.16517476737499237\nEpoch: 77\nLoss on hold-out set: 0.03967009207233787\nMeanAbsoluteError value on hold-out data: 0.1618732511997223\nEpoch: 78\nLoss on hold-out set: 0.03809533555681507\nMeanAbsoluteError value on hold-out data: 0.15879255533218384\nEpoch: 79\nLoss on hold-out set: 0.038045286219567064\nMeanAbsoluteError value on hold-out data: 0.15656998753547668\nEpoch: 80\n\n\nLoss on hold-out set: 0.036074635423719886\nMeanAbsoluteError value on hold-out data: 0.15672698616981506\nEpoch: 81\nLoss on hold-out set: 0.034253137689083814\nMeanAbsoluteError value on hold-out data: 0.1502525359392166\nEpoch: 82\nLoss on hold-out set: 0.03607516969554126\nMeanAbsoluteError value on hold-out data: 0.15392452478408813\nEpoch: 83\nLoss on hold-out set: 0.036486981430401404\nMeanAbsoluteError value on hold-out data: 0.153493732213974\nEpoch: 84\nLoss on hold-out set: 0.033216136277963715\nMeanAbsoluteError value on hold-out data: 0.1470402181148529\nEpoch: 85\n\n\nLoss on hold-out set: 0.03392506419060131\nMeanAbsoluteError value on hold-out data: 0.1476212441921234\nEpoch: 86\nLoss on hold-out set: 0.032279409334684414\nMeanAbsoluteError value on hold-out data: 0.14573466777801514\nEpoch: 87\nLoss on hold-out set: 0.03340025421697646\nMeanAbsoluteError value on hold-out data: 0.14467650651931763\nEpoch: 88\nLoss on hold-out set: 0.03133754008915275\nMeanAbsoluteError value on hold-out data: 0.14475755393505096\nEpoch: 89\nLoss on hold-out set: 0.033290586477766435\nMeanAbsoluteError value on hold-out data: 0.14758041501045227\nEpoch: 90\n\n\nLoss on hold-out set: 0.03045099730913838\nMeanAbsoluteError value on hold-out data: 0.14075855910778046\nEpoch: 91\nLoss on hold-out set: 0.030169096862276396\nMeanAbsoluteError value on hold-out data: 0.1370185911655426\nEpoch: 92\nLoss on hold-out set: 0.031505483736594515\nMeanAbsoluteError value on hold-out data: 0.14226728677749634\nEpoch: 93\nLoss on hold-out set: 0.029662128320584694\nMeanAbsoluteError value on hold-out data: 0.136855810880661\nEpoch: 94\nLoss on hold-out set: 0.03031885971936087\nMeanAbsoluteError value on hold-out data: 0.1390964239835739\nEpoch: 95\n\n\nLoss on hold-out set: 0.02928745190612972\nMeanAbsoluteError value on hold-out data: 0.13796421885490417\nEpoch: 96\nLoss on hold-out set: 0.028277527627845606\nMeanAbsoluteError value on hold-out data: 0.13474783301353455\nEpoch: 97\nLoss on hold-out set: 0.02893527052132413\nMeanAbsoluteError value on hold-out data: 0.13518694043159485\nEpoch: 98\nLoss on hold-out set: 0.028185868735114732\nMeanAbsoluteError value on hold-out data: 0.13539659976959229\nEpoch: 99\nLoss on hold-out set: 0.028244599224999545\nMeanAbsoluteError value on hold-out data: 0.13427846133708954\nEpoch: 100\n\n\nLoss on hold-out set: 0.02859475358389318\nMeanAbsoluteError value on hold-out data: 0.13411881029605865\nEpoch: 101\nLoss on hold-out set: 0.02897264141589403\nMeanAbsoluteError value on hold-out data: 0.13553369045257568\nEpoch: 102\nLoss on hold-out set: 0.027507960287233194\nMeanAbsoluteError value on hold-out data: 0.1324528306722641\nEpoch: 103\nLoss on hold-out set: 0.028679890263204773\nMeanAbsoluteError value on hold-out data: 0.13437701761722565\nEpoch: 104\n\n\nLoss on hold-out set: 0.027638483146826428\nMeanAbsoluteError value on hold-out data: 0.13206452131271362\nEpoch: 105\nLoss on hold-out set: 0.026344778987889488\nMeanAbsoluteError value on hold-out data: 0.1281900852918625\nEpoch: 106\nLoss on hold-out set: 0.028922165991583218\nMeanAbsoluteError value on hold-out data: 0.133317232131958\nEpoch: 107\nLoss on hold-out set: 0.028511003679595887\nMeanAbsoluteError value on hold-out data: 0.13387852907180786\nEpoch: 108\nLoss on hold-out set: 0.026580023627417782\nMeanAbsoluteError value on hold-out data: 0.1307424157857895\nEpoch: 109\n\n\nLoss on hold-out set: 0.026124688630613187\nMeanAbsoluteError value on hold-out data: 0.1276836097240448\nEpoch: 110\nLoss on hold-out set: 0.028029047618620097\nMeanAbsoluteError value on hold-out data: 0.1341014802455902\nEpoch: 111\nLoss on hold-out set: 0.026698427178586524\nMeanAbsoluteError value on hold-out data: 0.12857307493686676\nEpoch: 112\nLoss on hold-out set: 0.02786889144529899\nMeanAbsoluteError value on hold-out data: 0.13390354812145233\nEpoch: 113\nLoss on hold-out set: 0.027766782914598782\nMeanAbsoluteError value on hold-out data: 0.133920356631279\nEpoch: 114\n\n\nLoss on hold-out set: 0.028331349422223866\nMeanAbsoluteError value on hold-out data: 0.13078436255455017\nEpoch: 115\nLoss on hold-out set: 0.026398231154307724\nMeanAbsoluteError value on hold-out data: 0.1285991221666336\nEpoch: 116\nLoss on hold-out set: 0.02646889109785358\nMeanAbsoluteError value on hold-out data: 0.1303335726261139\nEpoch: 117\nLoss on hold-out set: 0.02692136257266005\nMeanAbsoluteError value on hold-out data: 0.1295207291841507\nEpoch: 118\nLoss on hold-out set: 0.02618577053770423\nMeanAbsoluteError value on hold-out data: 0.12808531522750854\n\n\nEpoch: 119\nLoss on hold-out set: 0.026384370640541117\nMeanAbsoluteError value on hold-out data: 0.12766137719154358\nEpoch: 120\nLoss on hold-out set: 0.027246563209531206\nMeanAbsoluteError value on hold-out data: 0.12836961448192596\nEpoch: 121\nLoss on hold-out set: 0.026148140837127964\nMeanAbsoluteError value on hold-out data: 0.1266038566827774\nEpoch: 122\nLoss on hold-out set: 0.02668789173476398\nMeanAbsoluteError value on hold-out data: 0.12806914746761322\nEpoch: 123\n\n\nLoss on hold-out set: 0.0254686074781542\nMeanAbsoluteError value on hold-out data: 0.12439107149839401\nEpoch: 124\nLoss on hold-out set: 0.026681452486664058\nMeanAbsoluteError value on hold-out data: 0.12987904250621796\nEpoch: 125\nLoss on hold-out set: 0.02754835154550771\nMeanAbsoluteError value on hold-out data: 0.13120846450328827\nEpoch: 126\nLoss on hold-out set: 0.025480538588017226\nMeanAbsoluteError value on hold-out data: 0.12695585191249847\nEpoch: 127\nLoss on hold-out set: 0.027587213404476642\nMeanAbsoluteError value on hold-out data: 0.13168422877788544\nEpoch: 128\n\n\nLoss on hold-out set: 0.024931732943902413\nMeanAbsoluteError value on hold-out data: 0.12593317031860352\nReturned to Spot: Validation loss: 0.024931732943902413\n----------------------------------------------\n\n\nspotPython tuning: 0.024931732943902413 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x2bb29fd00&gt;\n\n\nDuring the run, the following output is shown:\nconfig: {'_L_in': 10, '_L_out': 1, 'l1': 64, 'dropout_prob': 0.4475780541539,\n    'lr_mult': 0.001, 'batch_size': 16, 'epochs': 512, 'k_folds': 1,\n    'patience': 32,'optimizer': 'Adagrad', 'sgd_momentum': 0.9}\nEpoch: 1\n...\nEpoch: 7002\nLoss on hold-out set: 1.6959798782529844e-05\nMeanAbsoluteError value on hold-out data: 0.0018855303060263395\nEpoch: 7003\nLoss on hold-out set: 1.6984027051769603e-05\nMeanAbsoluteError value on hold-out data: 0.001883985591121018\nEarly stopping at epoch 7002\nReturned to Spot: Validation loss: 1.6984027051769603e-05"
  },
  {
    "objectID": "24_spot_torch_regression.html#sec-tensorboard-24",
    "href": "24_spot_torch_regression.html#sec-tensorboard-24",
    "title": "14  Hyperparameter Tuning for PyTorch With spotPython: Regression",
    "section": "14.10 Tensorboard",
    "text": "14.10 Tensorboard\nThe textual output shown in the console (or code cell) can be visualized with Tensorboard.\n\n14.10.1 Tensorboard: Start Tensorboard\nStart TensorBoard through the command line to visualize data you logged. Specify the root log directory as used in fun_control = fun_control_init(task=\"regression\", tensorboard_path=\"runs/24_spot_torch_regression\") as the tensorboard_path. The argument logdir points to directory where TensorBoard will look to find event files that it can display. TensorBoard will recursively walk the directory structure rooted at logdir, looking for .tfevents. files.\ntensorboard –logdir=runs\nGo to the URL it provides OR to http://localhost:6006/.\nThe following figures show some screenshots of Tensorboard.\n\n\n\nFigure 14.1: Tensorboard\n\n\n\n\n\nFigure 14.2: Tensorboard\n\n\n\n\n\nFigure 14.3: Tensorboard"
  },
  {
    "objectID": "24_spot_torch_regression.html#sec-results-tuning-24",
    "href": "24_spot_torch_regression.html#sec-results-tuning-24",
    "title": "14  Hyperparameter Tuning for PyTorch With spotPython: Regression",
    "section": "14.11 Results",
    "text": "14.11 Results\nAfter the hyperparameter tuning run is finished, the progress of the hyperparameter tuning can be visualized. The following code generates the progress plot from Figure 14.4.\n\nspot_tuner.plot_progress(log_y=False, filename=\"./figures/\" + experiment_name+\"_progress.png\")\n\n\n\n\n\n\n\nFigure 14.4: Progress plot. Black dots denote results from the initial design. Red dots illustrate the improvement found by the surrogate model based optimization (surrogate model based optimization).\n\n\nFigure 14.4 shows a typical behaviour that can be observed in many hyperparameter studies (Bartz et al. 2022): the largest improvement is obtained during the evaluation of the initial design. The surrogate model based optimization-optimization with the surrogate refines the results. Figure 14.4 also illustrates one major difference between ray[tune] as used in PyTorch (2023) and spotPython: the ray[tune] uses a random search and will generate results similar to the black dots, whereas spotPython uses a surrogate model based optimization and presents results represented by red dots in Figure 14.4. The surrogate model based optimization is considered to be more efficient than a random search, because the surrogate model guides the search towards promising regions in the hyperparameter space.\nIn addition to the improved (“optimized”) hyperparameter values, spotPython allows a statistical analysis, e.g., a sensitivity analysis, of the results. We can print the results of the hyperparameter tuning, see Table 14.4.\n\nprint(gen_design_table(fun_control=fun_control, spot=spot_tuner))\n\n| name         | type   | default   |   lower |   upper |               tuned | transform             |   importance | stars   |\n|--------------|--------|-----------|---------|---------|---------------------|-----------------------|--------------|---------|\n| _L_in        | int    | 10        |    10.0 |    10.0 |                10.0 | None                  |         0.00 |         |\n| _L_out       | int    | 1         |     1.0 |     1.0 |                 1.0 | None                  |         0.00 |         |\n| l1           | int    | 3         |     3.0 |     8.0 |                 7.0 | transform_power_2_int |         0.02 |         |\n| dropout_prob | float  | 0.01      |     0.0 |     0.9 | 0.16343155599701642 | None                  |         0.12 | .       |\n| lr_mult      | float  | 1.0       |   0.001 |   0.001 |               0.001 | None                  |         0.00 |         |\n| batch_size   | int    | 4         |     1.0 |     4.0 |                 2.0 | transform_power_2_int |       100.00 | ***     |\n| epochs       | int    | 4         |     2.0 |    16.0 |                 7.0 | transform_power_2_int |         0.00 |         |\n| k_folds      | int    | 1         |     1.0 |     1.0 |                 1.0 | None                  |         0.00 |         |\n| patience     | int    | 2         |     3.0 |     7.0 |                 7.0 | transform_power_2_int |         0.01 |         |\n| optimizer    | factor | SGD       |     0.0 |     6.0 |                 3.0 | None                  |         0.00 |         |\n| sgd_momentum | float  | 0.0       |     0.9 |     0.9 |                 0.9 | None                  |         0.00 |         |\n\n\n\n\nTable 14.4: Results of the hyperparameter tuning. The table shows the hyperparameters, their types, default values, lower and upper bounds, and the transformation function. The column “tuned” shows the tuned values. The column “importance” shows the importance of the hyperparameters. The column “stars” shows the importance of the hyperparameters in stars. The importance is computed by the SPOT software.\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\ntype\ndefault\nlower\nupper\ntuned\ntransform\nimportance\nstars\n\n\n\n\n_L_in\nint\n10\n10.0\n10.0\n10.0\nNone\n0.00\n\n\n\n_L_out\nint\n1\n1.0\n1.0\n1.0\nNone\n0.00\n\n\n\nl1\nint\n3\n3.0\n8.0\n6.0\npower_2_int\n1.42\n*\n\n\ndrop_p\nfloat\n0.01\n0.0\n0.9\n0.0\nNone\n0.00\n\n\n\nlr_mult\nfloat\n1.0\n0.001\n0.001\n0.001\nNone\n0.00\n\n\n\nbatch_s\nint\n4\n1.0\n4.0\n1.0\npower_2_int\n0.01\n\n\n\nepochs\nint\n4\n2.0\n16.0\n13.0\npower_2_int\n100.00\n***\n\n\nk_folds\nint\n1\n1.0\n1.0\n1.0\nNone\n0.00\n\n\n\npatience\nint\n2\n3.0\n7.0\n4.0\npower_2_int\n0.00\n\n\n\noptim\nfactor\nSGD\n0.0\n6.0\n4.0\nNone\n0.00\n\n\n\nsgd_mom\nfloat\n0.0\n0.9\n0.9\n0.9\nNone\n0.00\n\n\n\n\n\nTo visualize the most important hyperparameters, spotPython provides the function plot_importance. The following code generates the importance plot from Figure 14.5.\n\nspot_tuner.plot_importance(threshold=0.025, filename=\"./figures/\" + experiment_name+\"_importance.png\")\n\n\n\n\n\n\n\nFigure 14.5: Variable importance"
  },
  {
    "objectID": "24_spot_torch_regression.html#sec-get-spot-results-24",
    "href": "24_spot_torch_regression.html#sec-get-spot-results-24",
    "title": "14  Hyperparameter Tuning for PyTorch With spotPython: Regression",
    "section": "14.12 Get the Tuned Architecture",
    "text": "14.12 Get the Tuned Architecture\nThe architecture of the spotPython model can be obtained by the following code:\n\nfrom spotPython.hyperparameters.values import get_one_core_model_from_X\nX = spot_tuner.to_all_dim(spot_tuner.min_X.reshape(1,-1))\nmodel_spot = get_one_core_model_from_X(X, fun_control)\nmodel_spot\n\nNet_lin_reg(\n  (fc1): Linear(in_features=10, out_features=128, bias=True)\n  (fc2): Linear(in_features=128, out_features=64, bias=True)\n  (fc3): Linear(in_features=64, out_features=1, bias=True)\n  (relu): ReLU()\n  (softmax): Softmax(dim=1)\n  (dropout1): Dropout(p=0.16343155599701642, inplace=False)\n  (dropout2): Dropout(p=0.08171577799850821, inplace=False)\n)\n\n\nFirst, the numerical representation of the hyperparameters are obtained, i.e., the numpy array X is generated. This array is then used to generate the model model_spot by the function get_one_core_model_from_X. The model model_spot has the following architecture:\nNet_lin_reg(\n  (fc1): Linear(in_features=10, out_features=64, bias=True)\n  (fc2): Linear(in_features=64, out_features=32, bias=True)\n  (fc3): Linear(in_features=32, out_features=1, bias=True)\n  (relu): ReLU()\n  (softmax): Softmax(dim=1)\n  (dropout1): Dropout(p=0.0, inplace=False)\n  (dropout2): Dropout(p=0.0, inplace=False)\n)"
  },
  {
    "objectID": "24_spot_torch_regression.html#evaluation-of-the-tuned-architecture",
    "href": "24_spot_torch_regression.html#evaluation-of-the-tuned-architecture",
    "title": "14  Hyperparameter Tuning for PyTorch With spotPython: Regression",
    "section": "14.13 Evaluation of the Tuned Architecture",
    "text": "14.13 Evaluation of the Tuned Architecture\nThe method train_tuned takes a model architecture without trained weights and trains this model with the train data. The train data is split into train and validation data. The validation data is used for early stopping. The trained model weights are saved as a dictionary.\nThe following code trains the model model_spot. If path is set to a filename, e.g., path = \"model_spot_trained.pt\", the weights of the trained model will be saved to this file.\n\nfrom spotPython.torch.traintest import (\n    train_tuned,\n    test_tuned,\n    )\ntrain_tuned(net=model_spot, train_dataset=train,\n        loss_function=fun_control[\"loss_function\"],\n        metric=fun_control[\"metric_torch\"],\n        shuffle=True,\n        device = DEVICE,\n        path=None,\n        task=fun_control[\"task\"],)\n\nEpoch: 1\n\n\nError in Net_Core. Call to evaluate_hold_out() failed. err=RuntimeError('Encountered different devices in metric calculation (see stacktrace for details). This could be due to the metric class not being on the same device as input. Instead of `metric=MeanAbsoluteError(...)` try to do `metric=MeanAbsoluteError(...).to(device)` where device corresponds to the device of the input.'), type(err)=&lt;class 'RuntimeError'&gt;\nReturned to Spot: Validation loss: nan\n----------------------------------------------\n\n\nEpoch: 1\nLoss on hold-out set: 0.17853929138431945\nMeanAbsoluteError value on hold-out data: 0.3907899856567383\nEpoch: 2\nLoss on hold-out set: 0.17439044278115035\nMeanAbsoluteError value on hold-out data: 0.38570401072502136\nIf path is set to a filename, e.g., path = \"model_spot_trained.pt\", the weights of the trained model will be loaded from this file.\n\ntest_tuned(net=model_spot, test_dataset=test,\n            shuffle=False,\n            loss_function=fun_control[\"loss_function\"],\n            metric=fun_control[\"metric_torch\"],\n            device = DEVICE,\n            task=fun_control[\"task\"],)\n\nError in Net_Core. Call to test_tuned() failed. err=RuntimeError('Encountered different devices in metric calculation (see stacktrace for details). This could be due to the metric class not being on the same device as input. Instead of `metric=MeanAbsoluteError(...)` try to do `metric=MeanAbsoluteError(...).to(device)` where device corresponds to the device of the input.'), type(err)=&lt;class 'RuntimeError'&gt;\nFinal evaluation: Validation loss: nan\nFinal evaluation: Validation metric: nan\n----------------------------------------------\n\n\n(nan, nan, nan)\n\n\nLoss on hold-out set: 1.85966069472272e-05\nMeanAbsoluteError value on hold-out data: 0.0021022311411798\nFinal evaluation: Validation loss: 1.85966069472272e-05\nFinal evaluation: Validation metric: 0.0021022311411798\n----------------------------------------------\n(1.85966069472272e-05, nan, tensor(0.0021))"
  },
  {
    "objectID": "24_spot_torch_regression.html#cross-validated-evaluations",
    "href": "24_spot_torch_regression.html#cross-validated-evaluations",
    "title": "14  Hyperparameter Tuning for PyTorch With spotPython: Regression",
    "section": "14.14 Cross-validated Evaluations",
    "text": "14.14 Cross-validated Evaluations\n\nfrom spotPython.torch.traintest import evaluate_cv\n# modify k-kolds:\nsetattr(model_spot, \"k_folds\",  10)\nevaluate_cv(net=model_spot,\n            dataset=fun_control[\"data\"],\n            loss_function=fun_control[\"loss_function\"],\n            metric=fun_control[\"metric_torch\"],\n            task=fun_control[\"task\"],\n            writer=fun_control[\"writer\"],\n            writerId=\"model_spot_cv\", device=DEVICE)\n\nFold: 1\nEpoch: 1\n\n\nError in Net_Core. Call to evaluate_cv() failed. err=RuntimeError('Encountered different devices in metric calculation (see stacktrace for details). This could be due to the metric class not being on the same device as input. Instead of `metric=MeanAbsoluteError(...)` try to do `metric=MeanAbsoluteError(...).to(device)` where device corresponds to the device of the input.'), type(err)=&lt;class 'RuntimeError'&gt;\n\n\n(nan, nan, nan)\n\n\nFold: 1\nEpoch: 1\nLoss on hold-out set: 0.36993918985128404\nMeanAbsoluteError value on hold-out data: 0.5827060341835022\nEpoch: 2\nLoss on hold-out set: 0.3583159705996513\n\n(0.0027241395250238156, nan, tensor(0.0147))\nTable 14.5 shows the loss and meric value (MAE) of the model with the tuned hyperparameters from SPOT.\n\n\nTable 14.5: Comparison of the loss and metric values.\n\n\nModel\nLoss\nMetric (MAE)\n\n\n\n\nValidation\n1.8597e-05\n0.0021\n\n\n10-fold CV\n0.00272\n0.0147"
  },
  {
    "objectID": "24_spot_torch_regression.html#detailed-hyperparameter-plots",
    "href": "24_spot_torch_regression.html#detailed-hyperparameter-plots",
    "title": "14  Hyperparameter Tuning for PyTorch With spotPython: Regression",
    "section": "14.15 Detailed Hyperparameter Plots",
    "text": "14.15 Detailed Hyperparameter Plots\nThe contour plot in this section visualize the interactions of the two most important hyperparameters, l1, and epochs of the surrogate model used to optimize the hyperparameters. Since some of these hyperparameters take fatorial or integer values, sometimes step-like fitness landcapes (or response surfaces) are generated. SPOT draws the interactions of the main hyperparameters by default. It is also possible to visualize all interactions. For this, again refer to the notebook (Bartz-Beielstein 2023).\n\nfilename = \"./figures/\" + experiment_name\nspot_tuner.plot_important_hyperparameter_contour(filename=filename)\n\ndropout_prob:  0.12318354432897388\nbatch_size:  100.0\n\n\n\n\n\n\n\n\nFigure 14.6: Contour plot of the loss as a function of epochs and l1, i.e., the number of neurons in the layers.\n\n\nFigure 14.6 shows a contour plot of the loss as a function of the hyperparameters. These plots are very helpful for benchmark studies and for understanding neural networks. spotPython provides additional tools for a visual inspection of the results and give valuable insights into the hyperparameter tuning process. This is especially useful for model explainability, transparency, and trustworthiness. In addition to the contour plots, Figure 14.7 shows the parallel plot of the hyperparameters.\n\nspot_tuner.parallel_plot()\n\n\n                                                \n\n\n\n\n\nFigure 14.7: Parallel plot"
  },
  {
    "objectID": "24_spot_torch_regression.html#sec-summary-24",
    "href": "24_spot_torch_regression.html#sec-summary-24",
    "title": "14  Hyperparameter Tuning for PyTorch With spotPython: Regression",
    "section": "14.16 Summary and Outlook",
    "text": "14.16 Summary and Outlook\nThis tutorial presents the hyperparameter tuning open source software spotPython for PyTorch. Some of the advantages of spotPython are:\n\nNumerical and categorical hyperparameters.\nPowerful surrogate models.\nFlexible approach and easy to use.\nSimple JSON files for the specification of the hyperparameters.\nExtension of default and user specified network classes.\nNoise handling techniques.\nOnline visualization of the hyperparameter tuning process with tensorboard.\n\nCurrently, only rudimentary parallel and distributed neural network training is possible, but these capabilities will be extended in the future. The next version of spotPython will also include a more detailed documentation and more examples.\n\n\n\n\n\n\nImportant\n\n\n\nImportant: This tutorial does not present a complete benchmarking study (Bartz-Beielstein et al. 2020). The results are only preliminary and highly dependent on the local configuration (hard- and software). Our goal is to provide a first impression of the performance of the hyperparameter tuning package spotPython. The results should be interpreted with care.\n\n\n\n\n\n\nBartz, Eva, Thomas Bartz-Beielstein, Martin Zaefferer, and Olaf Mersmann, eds. 2022. Hyperparameter Tuning for Machine and Deep Learning with R - A Practical Guide. Springer.\n\n\nBartz-Beielstein, Thomas. 2023. “PyTorch Hyperparameter Tuning with SPOT: Comparison with Ray Tuner and Default Hyperparameters on CIFAR10.” https://github.com/sequential-parameter-optimization/spotPython/blob/main/notebooks/14_spot_ray_hpt_torch_cifar10.ipynb.\n\n\nBartz-Beielstein, Thomas, Carola Doerr, Jakob Bossek, Sowmya Chandrasekaran, Tome Eftimov, Andreas Fischbach, Pascal Kerschke, et al. 2020. “Benchmarking in Optimization: Best Practice and Open Issues.” arXiv. https://arxiv.org/abs/2007.03488.\n\n\nMontiel, Jacob, Max Halford, Saulo Martiello Mastelini, Geoffrey Bolmier, Raphael Sourty, Robin Vaysse, Adil Zouitine, et al. 2021. “River: Machine Learning for Streaming Data in Python.”\n\n\nPyTorch. 2023. “Hyperparameter Tuning with Ray Tune.” https://pytorch.org/tutorials/beginner/hyperparameter_tuning_tutorial.html."
  },
  {
    "objectID": "24_spot_torch_regression.html#footnotes",
    "href": "24_spot_torch_regression.html#footnotes",
    "title": "14  Hyperparameter Tuning for PyTorch With spotPython: Regression",
    "section": "",
    "text": "https://torchmetrics.readthedocs.io/en/latest/.↩︎"
  },
  {
    "objectID": "25_spot_torch_vbdp.html",
    "href": "25_spot_torch_vbdp.html",
    "title": "15  Hyperparameter Tuning: VBDP",
    "section": "",
    "text": "16 PyTorch Data Loading\nfrom spotPython.data.torch_hyper_dict import TorchHyperDict\nfrom spotPython.hyperparameters.values import add_core_model_to_fun_control\nfrom spotPython.torch.netvbdp import Net_vbdp\nfun_control = add_core_model_to_fun_control(core_model=Net_vbdp,\n                              fun_control=fun_control,\n                              hyper_dict=TorchHyperDict)"
  },
  {
    "objectID": "25_spot_torch_vbdp.html#sec-setup-25",
    "href": "25_spot_torch_vbdp.html#sec-setup-25",
    "title": "15  Hyperparameter Tuning: VBDP",
    "section": "15.1 Setup",
    "text": "15.1 Setup\nBefore we consider the detailed experimental setup, we select the parameters that affect run time, initial design size and the device that is used.\n\nMAX_TIME = 1\nINIT_SIZE = 5\nDEVICE = None # \"cpu\" # \"cuda:0\"\n\n\nfrom spotPython.utils.device import getDevice\nDEVICE = getDevice(DEVICE)\nprint(DEVICE)\n\nmps\n\n\n\nimport os\nimport copy\nimport socket\nfrom datetime import datetime\nfrom dateutil.tz import tzlocal\nstart_time = datetime.now(tzlocal())\nHOSTNAME = socket.gethostname().split(\".\")[0]\nexperiment_name = '25-torch' + \"_\" + HOSTNAME + \"_\" + str(MAX_TIME) + \"min_\" + str(INIT_SIZE) + \"init_\" + str(start_time).split(\".\", 1)[0].replace(' ', '_')\nexperiment_name = experiment_name.replace(':', '-')\nprint(experiment_name)\nif not os.path.exists('./figures'):\n    os.makedirs('./figures')\n\n25-torch_bartz09_1min_5init_2023-06-15_06-03-08"
  },
  {
    "objectID": "25_spot_torch_vbdp.html#initialization-of-the-fun_control-dictionary",
    "href": "25_spot_torch_vbdp.html#initialization-of-the-fun_control-dictionary",
    "title": "15  Hyperparameter Tuning: VBDP",
    "section": "15.2 Initialization of the fun_control Dictionary",
    "text": "15.2 Initialization of the fun_control Dictionary\nspotPython uses a Python dictionary for storing the information required for the hyperparameter tuning process. This dictionary is called fun_control and is initialized with the function fun_control_init. The function fun_control_init returns a skeleton dictionary. The dictionary is filled with the required information for the hyperparameter tuning process. It stores the hyperparameter tuning settings, e.g., the deep learning network architecture that should be tuned, the classification (or regression) problem, and the data that is used for the tuning. The dictionary is used as an input for the SPOT function.\n\nfrom spotPython.utils.init import fun_control_init\nfun_control = fun_control_init(task=\"classification\",\n    tensorboard_path=\"runs/25_spot_torch_vbdp\",\n    device=DEVICE)\n\n\nimport torch\nprint(torch.__version__)\n# Check that MPS is available\nif not torch.backends.mps.is_available():\n    if not torch.backends.mps.is_built():\n        print(\"MPS not available because the current PyTorch install was not \"\n              \"built with MPS enabled.\")\n    else:\n        print(\"MPS not available because the current MacOS version is not 12.3+ \"\n              \"and/or you do not have an MPS-enabled device on this machine.\")\n\nelse:\n    mps_device = torch.device(\"mps\")\n    print(\"MPS device: \", mps_device)\n\n2.0.1\nMPS device:  mps"
  },
  {
    "objectID": "25_spot_torch_vbdp.html#load-vbdp-data",
    "href": "25_spot_torch_vbdp.html#load-vbdp-data",
    "title": "15  Hyperparameter Tuning: VBDP",
    "section": "16.1 1. Load VBDP Data",
    "text": "16.1 1. Load VBDP Data\n\nimport pandas as pd\nfrom sklearn.preprocessing import OrdinalEncoder\ntrain_df = pd.read_csv('./data/VBDP/train.csv')\n# remove the id column\ntrain_df = train_df.drop(columns=['id'])\nn_samples = train_df.shape[0]\nn_features = train_df.shape[1] - 1\ntarget_column = \"prognosis\"\n# # Encoder our prognosis labels as integers for easier decoding later\nenc = OrdinalEncoder()\ntrain_df[target_column] = enc.fit_transform(train_df[[target_column]])\ntrain_df.head()\n\n# convert all entries to int for faster processing\ntrain_df = train_df.astype(int)\n\n\nfrom spotPython.data.vbdp import combine_features\ndf_new = train_df.copy()\n# save the target column using \"target_column\" as the column name\ntarget = train_df[target_column]\n# remove the target column\ndf_new = df_new.drop(columns=[target_column])\ntrain_df = combine_features(df_new)\n# add the target column back\ntrain_df[target_column] = target\ntrain_df.head()\n\n\n\n\n\n\n\n\nsudden_fever\nheadache\nmouth_bleed\nnose_bleed\nmuscle_pain\njoint_pain\nvomiting\nrash\ndiarrhea\nhypotension\n...\n6039\n6040\n6041\n6042\n6043\n6044\n6045\n6046\n6047\nprognosis\n\n\n\n\n0\n1\n1\n0\n1\n1\n1\n1\n0\n1\n1\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3\n\n\n1\n0\n0\n0\n0\n0\n0\n1\n0\n1\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n7\n\n\n2\n0\n1\n1\n1\n0\n1\n1\n1\n1\n1\n...\n1\n1\n0\n1\n1\n0\n1\n1\n0\n3\n\n\n3\n0\n0\n1\n1\n1\n1\n0\n1\n0\n1\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n10\n\n\n4\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n...\n0\n1\n1\n0\n1\n1\n0\n0\n0\n6\n\n\n\n\n5 rows × 6113 columns\n\n\n\n\nfeature engineering: 6112 features\n\n\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\n\nn_samples = train_df.shape[0]\nn_features = train_df.shape[1] - 1\ntrain_df.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\nX_train, X_test, y_train, y_test = train_test_split(train_df.drop(target_column, axis=1), train_df[target_column],\n                                                    random_state=42,\n                                                    test_size=0.25,\n                                                    stratify=train_df[target_column])\ntrainset = pd.DataFrame(np.hstack((X_train, np.array(y_train).reshape(-1, 1))))\ntestset = pd.DataFrame(np.hstack((X_test, np.array(y_test).reshape(-1, 1))))\ntrainset.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\ntestset.columns = [f\"x{i}\" for i in range(1, n_features+1)] + [target_column]\nprint(train_df.shape)\nprint(trainset.shape)\nprint(testset.shape)\n\n(707, 6113)\n(530, 6113)\n(177, 6113)\n\n\n\nfrom sklearn.model_selection import train_test_split\nfrom spotPython.torch.dataframedataset import DataFrameDataset\ndtype_x = torch.float32\ndtype_y = torch.long\ntrain_df = DataFrameDataset(train_df, target_column=target_column, dtype_x=dtype_x, dtype_y=dtype_y)\ntrain = DataFrameDataset(trainset, target_column=target_column, dtype_x=dtype_x, dtype_y=dtype_y)\ntest = DataFrameDataset(testset, target_column=target_column, dtype_x=dtype_x, dtype_y=dtype_y)\nn_samples = len(train)\n\n\n# add the dataset to the fun_control\nfun_control.update({\"data\": train_df, # full dataset,\n               \"train\": train,\n               \"test\": test,\n               \"n_samples\": n_samples,\n               \"target_column\": target_column})"
  },
  {
    "objectID": "25_spot_torch_vbdp.html#sec-specification-of-preprocessing-model-25",
    "href": "25_spot_torch_vbdp.html#sec-specification-of-preprocessing-model-25",
    "title": "15  Hyperparameter Tuning: VBDP",
    "section": "16.2 Specification of the Preprocessing Model",
    "text": "16.2 Specification of the Preprocessing Model\nAfter the training and test data are specified and added to the fun_control dictionary, spotPython allows the specification of a data preprocessing pipeline, e.g., for the scaling of the data or for the one-hot encoding of categorical variables. The preprocessing model is called prep_model (“preparation” or pre-processing) and includes steps that are not subject to the hyperparameter tuning process. The preprocessing model is specified in the fun_control dictionary. The preprocessing model can be implemented as a sklearn pipeline. The following code shows a typical preprocessing pipeline:\n\n# categorical_columns = []\n# one_hot_encoder = OneHotEncoder(handle_unknown=\"ignore\", sparse_output=False)\n# prep_model = ColumnTransformer(\n#         transformers=[\n#             (\"categorical\", one_hot_encoder, categorical_columns),\n#         ],\n#         remainder=StandardScaler(),\n#     )\nprep_model = None\nfun_control.update({\"prep_model\": prep_model})"
  },
  {
    "objectID": "25_spot_torch_vbdp.html#sec-selection-of-the-algorithm-12",
    "href": "25_spot_torch_vbdp.html#sec-selection-of-the-algorithm-12",
    "title": "15  Hyperparameter Tuning: VBDP",
    "section": "16.3 Select algorithm and core_model_hyper_dict",
    "text": "16.3 Select algorithm and core_model_hyper_dict\n\n16.3.1 Implementing a Configurable Neural Network With spotPython\nspotPython includes the Net_vbdp class which is implemented in the file netvbdp.py. The class is imported here. Net_vbdp inherits from the class Net_Core which is implemented in the file netcore.py, see ?sec-the-net-core-class-24."
  },
  {
    "objectID": "25_spot_torch_vbdp.html#sec-modification-of-hyperparameters-25",
    "href": "25_spot_torch_vbdp.html#sec-modification-of-hyperparameters-25",
    "title": "15  Hyperparameter Tuning: VBDP",
    "section": "17.1 Modifying the Hyperparameters",
    "text": "17.1 Modifying the Hyperparameters\n\n\n\n\n\n\nSmall number of epochs for demonstration purposes\n\n\n\n\nepochs is set to 2 and 3 for demonstration purposes. These values are too small for a real application.\n\n\n\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_bounds\n\nfun_control = modify_hyper_parameter_bounds(fun_control, \"_L0\", bounds=[n_features, n_features])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"l1\", bounds=[6, 13])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"epochs\", bounds=[2, 2])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"patience\", bounds=[2, 6])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"lr_mult\", bounds=[1e-3, 1e-3])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"sgd_momentum\", bounds=[0.9, 0.9])\n\n\nfrom spotPython.hyperparameters.values import modify_hyper_parameter_levels\nfun_control = modify_hyper_parameter_levels(fun_control, \"optimizer\",[\"Adam\", \"AdamW\", \"Adamax\", \"NAdam\"])\n# fun_control = modify_hyper_parameter_levels(fun_control, \"optimizer\", [\"Adam\"])\n# fun_control = modify_hyper_parameter_levels(fun_control, \"leaf_model\", [\"LinearRegression\"])\n# fun_control[\"core_model_hyper_dict\"]\n\n\nfun_control = modify_hyper_parameter_bounds(fun_control,\n    \"lr_mult\", bounds=[1e-3, 1e-3])\nfun_control = modify_hyper_parameter_bounds(fun_control,\n    \"sgd_momentum\", bounds=[0.9, 0.9])"
  },
  {
    "objectID": "25_spot_torch_vbdp.html#sec-selection-of-target-function-25",
    "href": "25_spot_torch_vbdp.html#sec-selection-of-target-function-25",
    "title": "15  Hyperparameter Tuning: VBDP",
    "section": "17.2 Evaluation",
    "text": "17.2 Evaluation\nThe evaluation procedure requires the specification of two elements:\n\nthe way how the data is split into a train and a test set and\nthe loss function (and a metric).\n\nThese are described in Section 14.8.\nThe loss function is specified by the key \"loss_function\". We will use CrossEntropy loss for the multiclass-classification task.\n\nfrom torch.nn import CrossEntropyLoss\nloss_function = CrossEntropyLoss()\nfun_control.update({\"loss_function\": loss_function})\n\n\n17.2.1 Metric\n\nfrom spotPython.torch.mapk import MAPK\nimport torch\nmapk = MAPK(k=2)\ntarget = torch.tensor([0, 1, 2, 2])\npreds = torch.tensor(\n    [\n        [0.5, 0.2, 0.2],  # 0 is in top 2\n        [0.3, 0.4, 0.2],  # 1 is in top 2\n        [0.2, 0.4, 0.3],  # 2 is in top 2\n        [0.7, 0.2, 0.1],  # 2 isn't in top 2\n    ]\n)  \nmapk.update(preds, target)\nprint(mapk.compute()) # tensor(0.6250)\n\ntensor(0.6250)\n\n\n\nfrom spotPython.torch.mapk import MAPK\nimport torchmetrics\nmetric_torch = MAPK(k=3)\nfun_control.update({\"metric_torch\": metric_torch})"
  },
  {
    "objectID": "25_spot_torch_vbdp.html#sec-call-the-hyperparameter-tuner-25",
    "href": "25_spot_torch_vbdp.html#sec-call-the-hyperparameter-tuner-25",
    "title": "15  Hyperparameter Tuning: VBDP",
    "section": "17.3 Calling the SPOT Function",
    "text": "17.3 Calling the SPOT Function\n\n# extract the variable types, names, and bounds\nfrom spotPython.hyperparameters.values import (get_bound_values,\n    get_var_name,\n    get_var_type,)\nvar_type = get_var_type(fun_control)\nvar_name = get_var_name(fun_control)\nfun_control.update({\"var_type\": var_type,\n                    \"var_name\": var_name})\nlower = get_bound_values(fun_control, \"lower\")\nupper = get_bound_values(fun_control, \"upper\")\n\nNow, the dictionary fun_control contains all information needed for the hyperparameter tuning. Before the hyperparameter tuning is started, it is recommended to take a look at the experimental design. The method gen_design_table generates a design table as follows:\n\nfrom spotPython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control))\n\n| name         | type   | default   |    lower |    upper | transform             |\n|--------------|--------|-----------|----------|----------|-----------------------|\n| _L0          | int    | 64        | 6112     | 6112     | None                  |\n| l1           | int    | 8         |    6     |   13     | transform_power_2_int |\n| dropout_prob | float  | 0.01      |    0     |    0.9   | None                  |\n| lr_mult      | float  | 1.0       |    0.001 |    0.001 | None                  |\n| batch_size   | int    | 4         |    1     |    4     | transform_power_2_int |\n| epochs       | int    | 4         |    2     |    2     | transform_power_2_int |\n| k_folds      | int    | 1         |    1     |    1     | None                  |\n| patience     | int    | 2         |    2     |    6     | transform_power_2_int |\n| optimizer    | factor | SGD       |    0     |    3     | None                  |\n| sgd_momentum | float  | 0.0       |    0.9   |    0.9   | None                  |\n\n\nThis allows to check if all information is available and if the information is correct.\nThe objective function fun_torch is selected next. It implements an interface from PyTorch’s training, validation, and testing methods to spotPython.\n\nfrom spotPython.fun.hypertorch import HyperTorch\nfun = HyperTorch().fun_torch\n\n\nfrom spotPython.hyperparameters.values import get_default_hyperparameters_as_array\nhyper_dict=TorchHyperDict().load()\nX_start = get_default_hyperparameters_as_array(fun_control, hyper_dict)\n\n\nimport numpy as np\nfrom spotPython.spot import spot\nfrom math import inf\nspot_tuner = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = inf,\n                   fun_repeats = 1,\n                   max_time = MAX_TIME,\n                   noise = False,\n                   tolerance_x = np.sqrt(np.spacing(1)),\n                   var_type = var_type,\n                   var_name = var_name,\n                   infill_criterion = \"y\",\n                   n_points = 1,\n                   seed=123,\n                   log_level = 50,\n                   show_models= False,\n                   show_progress= True,\n                   fun_control = fun_control,\n                   design_control={\"init_size\": INIT_SIZE,\n                                   \"repeats\": 1},\n                   surrogate_control={\"noise\": True,\n                                      \"cod_type\": \"norm\",\n                                      \"min_theta\": -4,\n                                      \"max_theta\": 3,\n                                      \"n_theta\": len(var_name),\n                                      \"model_fun_evals\": 10_000,\n                                      \"log_level\": 50\n                                      })\nspot_tuner.run(X_start=X_start)\n\n\nconfig: {'_L0': 6112, 'l1': 2048, 'dropout_prob': 0.17031221661559992, 'lr_mult': 0.001, 'batch_size': 16, 'epochs': 4, 'k_folds': 1, 'patience': 32, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.3982605252947127\nAccuracy on hold-out set: 0.07547169811320754\nMAPK value on hold-out data: 0.1510416716337204\nEpoch: 2\n\n\nLoss on hold-out set: 2.3982023852212087\nAccuracy on hold-out set: 0.07547169811320754\nMAPK value on hold-out data: 0.1532738208770752\nEpoch: 3\n\n\nLoss on hold-out set: 2.398196714265006\nAccuracy on hold-out set: 0.08490566037735849\nMAPK value on hold-out data: 0.15625\nEpoch: 4\n\n\nLoss on hold-out set: 2.3981498309544156\nAccuracy on hold-out set: 0.09433962264150944\nMAPK value on hold-out data: 0.1584821492433548\nReturned to Spot: Validation loss: 2.3981498309544156\n----------------------------------------------\n\nconfig: {'_L0': 6112, 'l1': 256, 'dropout_prob': 0.19379790035512987, 'lr_mult': 0.001, 'batch_size': 8, 'epochs': 4, 'k_folds': 1, 'patience': 4, 'optimizer': 'Adamax', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.3988305727640786\nAccuracy on hold-out set: 0.05188679245283019\nMAPK value on hold-out data: 0.1288580298423767\nEpoch: 2\n\n\nLoss on hold-out set: 2.3988938949726246\nAccuracy on hold-out set: 0.05188679245283019\nMAPK value on hold-out data: 0.1180555522441864\nEpoch: 3\n\n\nLoss on hold-out set: 2.398850114257247\nAccuracy on hold-out set: 0.05188679245283019\nMAPK value on hold-out data: 0.1180555447936058\nEpoch: 4\n\n\nLoss on hold-out set: 2.398773264001917\nAccuracy on hold-out set: 0.05188679245283019\nMAPK value on hold-out data: 0.12268520146608353\nReturned to Spot: Validation loss: 2.398773264001917\n----------------------------------------------\n\nconfig: {'_L0': 6112, 'l1': 4096, 'dropout_prob': 0.6759063718076167, 'lr_mult': 0.001, 'batch_size': 2, 'epochs': 4, 'k_folds': 1, 'patience': 16, 'optimizer': 'NAdam', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.3978672904788323\nAccuracy on hold-out set: 0.09905660377358491\nMAPK value on hold-out data: 0.16823899745941162\nEpoch: 2\n\n\nLoss on hold-out set: 2.3976037727212005\nAccuracy on hold-out set: 0.11320754716981132\nMAPK value on hold-out data: 0.20911946892738342\nEpoch: 3\n\n\nLoss on hold-out set: 2.3974687625777045\nAccuracy on hold-out set: 0.13679245283018868\nMAPK value on hold-out data: 0.22012579441070557\nEpoch: 4\n\n\nLoss on hold-out set: 2.397091991496536\nAccuracy on hold-out set: 0.1320754716981132\nMAPK value on hold-out data: 0.25864776968955994\nReturned to Spot: Validation loss: 2.397091991496536\n----------------------------------------------\n\nconfig: {'_L0': 6112, 'l1': 128, 'dropout_prob': 0.37306669346546995, 'lr_mult': 0.001, 'batch_size': 4, 'epochs': 4, 'k_folds': 1, 'patience': 8, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.3959821485123545\nAccuracy on hold-out set: 0.08962264150943396\nMAPK value on hold-out data: 0.18238994479179382\nEpoch: 2\n\n\nLoss on hold-out set: 2.3959691344567067\nAccuracy on hold-out set: 0.08962264150943396\nMAPK value on hold-out data: 0.18396227061748505\nEpoch: 3\n\n\nLoss on hold-out set: 2.396030417028463\nAccuracy on hold-out set: 0.08962264150943396\nMAPK value on hold-out data: 0.18553456664085388\nEpoch: 4\n\n\nLoss on hold-out set: 2.396017794339162\nAccuracy on hold-out set: 0.08962264150943396\nMAPK value on hold-out data: 0.18553456664085388\nReturned to Spot: Validation loss: 2.396017794339162\n----------------------------------------------\n\nconfig: {'_L0': 6112, 'l1': 1024, 'dropout_prob': 0.870137281216666, 'lr_mult': 0.001, 'batch_size': 8, 'epochs': 4, 'k_folds': 1, 'patience': 64, 'optimizer': 'Adam', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.398486923288416\nAccuracy on hold-out set: 0.05188679245283019\nMAPK value on hold-out data: 0.10185185819864273\nEpoch: 2\n\n\nLoss on hold-out set: 2.3985289997524686\nAccuracy on hold-out set: 0.05660377358490566\nMAPK value on hold-out data: 0.11188272386789322\nEpoch: 3\n\n\nLoss on hold-out set: 2.398688069096318\nAccuracy on hold-out set: 0.06132075471698113\nMAPK value on hold-out data: 0.1041666641831398\nEpoch: 4\n\n\nLoss on hold-out set: 2.398649542419999\nAccuracy on hold-out set: 0.05660377358490566\nMAPK value on hold-out data: 0.11265431344509125\nReturned to Spot: Validation loss: 2.398649542419999\n----------------------------------------------\n\nconfig: {'_L0': 6112, 'l1': 128, 'dropout_prob': 0.42768202697793684, 'lr_mult': 0.001, 'batch_size': 4, 'epochs': 4, 'k_folds': 1, 'patience': 8, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.3969987698321074\nAccuracy on hold-out set: 0.08962264150943396\nMAPK value on hold-out data: 0.17610064148902893\nEpoch: 2\n\n\nLoss on hold-out set: 2.3969291336131544\nAccuracy on hold-out set: 0.08018867924528301\nMAPK value on hold-out data: 0.16981132328510284\nEpoch: 3\n\n\nLoss on hold-out set: 2.3968813509311317\nAccuracy on hold-out set: 0.08962264150943396\nMAPK value on hold-out data: 0.17924527823925018\nEpoch: 4\n\n\nLoss on hold-out set: 2.396941063539037\nAccuracy on hold-out set: 0.09433962264150944\nMAPK value on hold-out data: 0.1863207370042801\nReturned to Spot: Validation loss: 2.396941063539037\n----------------------------------------------\nspotPython tuning: 2.396017794339162 [#---------] 5.30% \n\n\n\nconfig: {'_L0': 6112, 'l1': 128, 'dropout_prob': 0.411254914229393, 'lr_mult': 0.001, 'batch_size': 4, 'epochs': 4, 'k_folds': 1, 'patience': 8, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.3979726107615345\nAccuracy on hold-out set: 0.09433962264150944\nMAPK value on hold-out data: 0.16194969415664673\nEpoch: 2\n\n\nLoss on hold-out set: 2.397952282203818\nAccuracy on hold-out set: 0.08490566037735849\nMAPK value on hold-out data: 0.15801888704299927\nEpoch: 3\n\n\nLoss on hold-out set: 2.3979016834834836\nAccuracy on hold-out set: 0.09433962264150944\nMAPK value on hold-out data: 0.16116352379322052\nEpoch: 4\n\n\nLoss on hold-out set: 2.398064433403735\nAccuracy on hold-out set: 0.08962264150943396\nMAPK value on hold-out data: 0.15487420558929443\nReturned to Spot: Validation loss: 2.398064433403735\n----------------------------------------------\nspotPython tuning: 2.396017794339162 [#---------] 10.67% \n\n\n\nconfig: {'_L0': 6112, 'l1': 512, 'dropout_prob': 0.3723764516175929, 'lr_mult': 0.001, 'batch_size': 4, 'epochs': 4, 'k_folds': 1, 'patience': 8, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.397741569662994\nAccuracy on hold-out set: 0.09433962264150944\nMAPK value on hold-out data: 0.16902516782283783\nEpoch: 2\n\n\nLoss on hold-out set: 2.3976649473298273\nAccuracy on hold-out set: 0.09433962264150944\nMAPK value on hold-out data: 0.16823899745941162\nEpoch: 3\n\n\nLoss on hold-out set: 2.3976902062038206\nAccuracy on hold-out set: 0.09433962264150944\nMAPK value on hold-out data: 0.17059749364852905\nEpoch: 4\n\n\nLoss on hold-out set: 2.3975467187053754\nAccuracy on hold-out set: 0.09433962264150944\nMAPK value on hold-out data: 0.17059749364852905\nReturned to Spot: Validation loss: 2.3975467187053754\n----------------------------------------------\nspotPython tuning: 2.396017794339162 [##--------] 16.23% \n\n\n\nconfig: {'_L0': 6112, 'l1': 128, 'dropout_prob': 0.5313472595076634, 'lr_mult': 0.001, 'batch_size': 4, 'epochs': 4, 'k_folds': 1, 'patience': 4, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.3981525448133363\nAccuracy on hold-out set: 0.08962264150943396\nMAPK value on hold-out data: 0.16116350889205933\nEpoch: 2\n\n\nLoss on hold-out set: 2.398065099176371\nAccuracy on hold-out set: 0.09433962264150944\nMAPK value on hold-out data: 0.16352200508117676\nEpoch: 3\n\n\nLoss on hold-out set: 2.3982607913467118\nAccuracy on hold-out set: 0.06132075471698113\nMAPK value on hold-out data: 0.1470125913619995\nEpoch: 4\n\n\nLoss on hold-out set: 2.398248649993033\nAccuracy on hold-out set: 0.08018867924528301\nMAPK value on hold-out data: 0.15644654631614685\nReturned to Spot: Validation loss: 2.398248649993033\n----------------------------------------------\nspotPython tuning: 2.396017794339162 [##--------] 21.53% \n\n\n\nconfig: {'_L0': 6112, 'l1': 128, 'dropout_prob': 0.37249247528984986, 'lr_mult': 0.001, 'batch_size': 8, 'epochs': 4, 'k_folds': 1, 'patience': 32, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.3992068944153964\nAccuracy on hold-out set: 0.08018867924528301\nMAPK value on hold-out data: 0.13117283582687378\nEpoch: 2\n\n\nLoss on hold-out set: 2.399101416269938\nAccuracy on hold-out set: 0.08018867924528301\nMAPK value on hold-out data: 0.1527777761220932\nEpoch: 3\n\n\nLoss on hold-out set: 2.399053829687613\nAccuracy on hold-out set: 0.08018867924528301\nMAPK value on hold-out data: 0.1358024775981903\nEpoch: 4\n\n\nLoss on hold-out set: 2.3991323665336326\nAccuracy on hold-out set: 0.08018867924528301\nMAPK value on hold-out data: 0.14814814925193787\nReturned to Spot: Validation loss: 2.3991323665336326\n----------------------------------------------\nspotPython tuning: 2.396017794339162 [##--------] 24.58% \n\n\n\nconfig: {'_L0': 6112, 'l1': 64, 'dropout_prob': 0.26400341922805204, 'lr_mult': 0.001, 'batch_size': 16, 'epochs': 4, 'k_folds': 1, 'patience': 8, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.3985907520566667\nAccuracy on hold-out set: 0.08018867924528301\nMAPK value on hold-out data: 0.1450892835855484\nEpoch: 2\n\n\nLoss on hold-out set: 2.398513572556632\nAccuracy on hold-out set: 0.08018867924528301\nMAPK value on hold-out data: 0.1450892835855484\nEpoch: 3\n\n\nLoss on hold-out set: 2.398536273411342\nAccuracy on hold-out set: 0.08018867924528301\nMAPK value on hold-out data: 0.1450892835855484\nEpoch: 4\n\n\nLoss on hold-out set: 2.3984911612101962\nAccuracy on hold-out set: 0.08018867924528301\nMAPK value on hold-out data: 0.1450892835855484\nReturned to Spot: Validation loss: 2.3984911612101962\n----------------------------------------------\nspotPython tuning: 2.396017794339162 [###-------] 26.67% \n\n\n\nconfig: {'_L0': 6112, 'l1': 128, 'dropout_prob': 0.4564951150603969, 'lr_mult': 0.001, 'batch_size': 4, 'epochs': 4, 'k_folds': 1, 'patience': 8, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.3973582645632185\nAccuracy on hold-out set: 0.10849056603773585\nMAPK value on hold-out data: 0.19025158882141113\nEpoch: 2\n\n\nLoss on hold-out set: 2.397311988866554\nAccuracy on hold-out set: 0.09905660377358491\nMAPK value on hold-out data: 0.18474845588207245\nEpoch: 3\n\n\nLoss on hold-out set: 2.397295762907784\nAccuracy on hold-out set: 0.12264150943396226\nMAPK value on hold-out data: 0.195754736661911\nEpoch: 4\n\n\nLoss on hold-out set: 2.397287238318965\nAccuracy on hold-out set: 0.11320754716981132\nMAPK value on hold-out data: 0.1941823959350586\nReturned to Spot: Validation loss: 2.397287238318965\n----------------------------------------------\nspotPython tuning: 2.396017794339162 [###-------] 31.97% \n\n\n\nconfig: {'_L0': 6112, 'l1': 512, 'dropout_prob': 0.6473259005248775, 'lr_mult': 0.001, 'batch_size': 2, 'epochs': 4, 'k_folds': 1, 'patience': 4, 'optimizer': 'Adamax', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.397297850194967\nAccuracy on hold-out set: 0.09905660377358491\nMAPK value on hold-out data: 0.18160377442836761\nEpoch: 2\n\n\nLoss on hold-out set: 2.397240701711403\nAccuracy on hold-out set: 0.10377358490566038\nMAPK value on hold-out data: 0.19182386994361877\nEpoch: 3\n\n\nLoss on hold-out set: 2.3973804487372345\nAccuracy on hold-out set: 0.09905660377358491\nMAPK value on hold-out data: 0.18317610025405884\nEpoch: 4\n\n\nLoss on hold-out set: 2.397444684550447\nAccuracy on hold-out set: 0.09905660377358491\nMAPK value on hold-out data: 0.1745283007621765\nReturned to Spot: Validation loss: 2.397444684550447\n----------------------------------------------\nspotPython tuning: 2.396017794339162 [####------] 42.57% \n\n\n\nconfig: {'_L0': 6112, 'l1': 64, 'dropout_prob': 0.4703502125756985, 'lr_mult': 0.001, 'batch_size': 4, 'epochs': 4, 'k_folds': 1, 'patience': 8, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.399463176727295\nAccuracy on hold-out set: 0.08962264150943396\nMAPK value on hold-out data: 0.14386793971061707\nEpoch: 2\n\n\nLoss on hold-out set: 2.399520032810715\nAccuracy on hold-out set: 0.08962264150943396\nMAPK value on hold-out data: 0.14386793971061707\nEpoch: 3\n\n\nLoss on hold-out set: 2.3994635545982503\nAccuracy on hold-out set: 0.08962264150943396\nMAPK value on hold-out data: 0.14386793971061707\nEpoch: 4\n\n\nLoss on hold-out set: 2.3994962044481962\nAccuracy on hold-out set: 0.08962264150943396\nMAPK value on hold-out data: 0.14386793971061707\nReturned to Spot: Validation loss: 2.3994962044481962\n----------------------------------------------\nspotPython tuning: 2.396017794339162 [#####-----] 48.20% \n\n\n\nconfig: {'_L0': 6112, 'l1': 4096, 'dropout_prob': 0.02568979527847831, 'lr_mult': 0.001, 'batch_size': 8, 'epochs': 4, 'k_folds': 1, 'patience': 16, 'optimizer': 'NAdam', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.3975644994665077\nAccuracy on hold-out set: 0.15566037735849056\nMAPK value on hold-out data: 0.2391975373029709\nEpoch: 2\n\n\nLoss on hold-out set: 2.397259473800659\nAccuracy on hold-out set: 0.15566037735849056\nMAPK value on hold-out data: 0.25462958216667175\nEpoch: 3\n\n\nLoss on hold-out set: 2.396910897007695\nAccuracy on hold-out set: 0.13679245283018868\nMAPK value on hold-out data: 0.25231480598449707\nEpoch: 4\n\n\nLoss on hold-out set: 2.396468409785518\nAccuracy on hold-out set: 0.1509433962264151\nMAPK value on hold-out data: 0.2530863881111145\nReturned to Spot: Validation loss: 2.396468409785518\n----------------------------------------------\nspotPython tuning: 2.396017794339162 [#####-----] 53.10% \n\n\n\nconfig: {'_L0': 6112, 'l1': 512, 'dropout_prob': 0.19312145054644644, 'lr_mult': 0.001, 'batch_size': 4, 'epochs': 4, 'k_folds': 1, 'patience': 4, 'optimizer': 'Adam', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.3975241364173168\nAccuracy on hold-out set: 0.08490566037735849\nMAPK value on hold-out data: 0.18396224081516266\nEpoch: 2\n\n\nLoss on hold-out set: 2.397538963353859\nAccuracy on hold-out set: 0.07547169811320754\nMAPK value on hold-out data: 0.17059747874736786\nEpoch: 3\n\n\nLoss on hold-out set: 2.397455818248245\nAccuracy on hold-out set: 0.09433962264150944\nMAPK value on hold-out data: 0.19103777408599854\nEpoch: 4\n\n\nLoss on hold-out set: 2.3974537129672067\nAccuracy on hold-out set: 0.08018867924528301\nMAPK value on hold-out data: 0.1800314337015152\nReturned to Spot: Validation loss: 2.3974537129672067\n----------------------------------------------\nspotPython tuning: 2.396017794339162 [######----] 58.72% \n\n\n\nconfig: {'_L0': 6112, 'l1': 1024, 'dropout_prob': 0.37973581627268116, 'lr_mult': 0.001, 'batch_size': 16, 'epochs': 4, 'k_folds': 1, 'patience': 64, 'optimizer': 'Adam', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.3980078867503574\nAccuracy on hold-out set: 0.1179245283018868\nMAPK value on hold-out data: 0.1867559403181076\nEpoch: 2\n\n\nLoss on hold-out set: 2.3980295147214616\nAccuracy on hold-out set: 0.11320754716981132\nMAPK value on hold-out data: 0.181547611951828\nEpoch: 3\n\n\nLoss on hold-out set: 2.3980756998062134\nAccuracy on hold-out set: 0.10849056603773585\nMAPK value on hold-out data: 0.1808035522699356\nEpoch: 4\n\n\nLoss on hold-out set: 2.3980377231325423\nAccuracy on hold-out set: 0.1179245283018868\nMAPK value on hold-out data: 0.1837797462940216\nReturned to Spot: Validation loss: 2.3980377231325423\n----------------------------------------------\nspotPython tuning: 2.396017794339162 [######----] 60.51% \n\n\n\nconfig: {'_L0': 6112, 'l1': 256, 'dropout_prob': 0.3407833750982233, 'lr_mult': 0.001, 'batch_size': 4, 'epochs': 4, 'k_folds': 1, 'patience': 32, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.397826059809271\nAccuracy on hold-out set: 0.10849056603773585\nMAPK value on hold-out data: 0.17531447112560272\nEpoch: 2\n\n\nLoss on hold-out set: 2.3977463290376484\nAccuracy on hold-out set: 0.12735849056603774\nMAPK value on hold-out data: 0.18003146350383759\nEpoch: 3\n\n\nLoss on hold-out set: 2.3977747143439525\nAccuracy on hold-out set: 0.12735849056603774\nMAPK value on hold-out data: 0.1816037893295288\nEpoch: 4\n\n\nLoss on hold-out set: 2.3977843500533194\nAccuracy on hold-out set: 0.13679245283018868\nMAPK value on hold-out data: 0.19103775918483734\nReturned to Spot: Validation loss: 2.3977843500533194\n----------------------------------------------\nspotPython tuning: 2.396017794339162 [#######---] 66.16% \n\n\n\nconfig: {'_L0': 6112, 'l1': 256, 'dropout_prob': 0.002373071484783551, 'lr_mult': 0.001, 'batch_size': 16, 'epochs': 4, 'k_folds': 1, 'patience': 32, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.397781644548689\nAccuracy on hold-out set: 0.09433962264150944\nMAPK value on hold-out data: 0.206101194024086\nEpoch: 2\n\n\nLoss on hold-out set: 2.397757990019662\nAccuracy on hold-out set: 0.09433962264150944\nMAPK value on hold-out data: 0.205357164144516\nEpoch: 3\n\n\nLoss on hold-out set: 2.397734590939113\nAccuracy on hold-out set: 0.09433962264150944\nMAPK value on hold-out data: 0.2053571492433548\nEpoch: 4\n\n\nLoss on hold-out set: 2.397715296064104\nAccuracy on hold-out set: 0.08962264150943396\nMAPK value on hold-out data: 0.2046130895614624\nReturned to Spot: Validation loss: 2.397715296064104\n----------------------------------------------\nspotPython tuning: 2.396017794339162 [#######---] 68.17% \n\n\n\nconfig: {'_L0': 6112, 'l1': 8192, 'dropout_prob': 0.8032579717749374, 'lr_mult': 0.001, 'batch_size': 4, 'epochs': 4, 'k_folds': 1, 'patience': 4, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\n\n\nEpoch: 1\n\n\nLoss on hold-out set: 2.3980362280359806\nAccuracy on hold-out set: 0.10377358490566038\nMAPK value on hold-out data: 0.17295600473880768\nEpoch: 2\n\n\nLoss on hold-out set: 2.398020195511152\nAccuracy on hold-out set: 0.08962264150943396\nMAPK value on hold-out data: 0.17531447112560272\nEpoch: 3\n\n\nLoss on hold-out set: 2.3979074325201646\nAccuracy on hold-out set: 0.0660377358490566\nMAPK value on hold-out data: 0.1525157392024994\nEpoch: 4\n\n\nLoss on hold-out set: 2.3980828546128183\nAccuracy on hold-out set: 0.09905660377358491\nMAPK value on hold-out data: 0.16902515292167664\nReturned to Spot: Validation loss: 2.3980828546128183\n----------------------------------------------\nspotPython tuning: 2.396017794339162 [#########-] 88.03% \n\n\n\nconfig: {'_L0': 6112, 'l1': 1024, 'dropout_prob': 0.02088710954248223, 'lr_mult': 0.001, 'batch_size': 4, 'epochs': 4, 'k_folds': 1, 'patience': 8, 'optimizer': 'AdamW', 'sgd_momentum': 0.9}\n\n\n\nEpoch: 1\n\n\nLoss on hold-out set: 2.3983850659064525\nAccuracy on hold-out set: 0.07547169811320754\nMAPK value on hold-out data: 0.1312893182039261\nEpoch: 2\n\n\nLoss on hold-out set: 2.398302091742462\nAccuracy on hold-out set: 0.08018867924528301\nMAPK value on hold-out data: 0.13443396985530853\nEpoch: 3\n\n\nLoss on hold-out set: 2.3982221450445786\nAccuracy on hold-out set: 0.08962264150943396\nMAPK value on hold-out data: 0.15015724301338196\nEpoch: 4\n\n\nLoss on hold-out set: 2.3981635885418586\nAccuracy on hold-out set: 0.08018867924528301\nMAPK value on hold-out data: 0.1462264209985733\nReturned to Spot: Validation loss: 2.3981635885418586\n----------------------------------------------\nspotPython tuning: 2.396017794339162 [#########-] 94.25% \n\n\n\nconfig: {'_L0': 6112, 'l1': 128, 'dropout_prob': 0.8462813701054609, 'lr_mult': 0.001, 'batch_size': 8, 'epochs': 4, 'k_folds': 1, 'patience': 64, 'optimizer': 'Adamax', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.3994075192345514\nAccuracy on hold-out set: 0.06132075471698113\nMAPK value on hold-out data: 0.11882717162370682\nEpoch: 2\n\n\nLoss on hold-out set: 2.3995151784684925\nAccuracy on hold-out set: 0.04716981132075472\nMAPK value on hold-out data: 0.11265431344509125\nEpoch: 3\n\n\nLoss on hold-out set: 2.3992576422514738\nAccuracy on hold-out set: 0.04716981132075472\nMAPK value on hold-out data: 0.1219136044383049\nEpoch: 4\n\n\nLoss on hold-out set: 2.399261439288104\nAccuracy on hold-out set: 0.06132075471698113\nMAPK value on hold-out data: 0.12577159702777863\nReturned to Spot: Validation loss: 2.399261439288104\n----------------------------------------------\n\n\nspotPython tuning: 2.396017794339162 [##########] 97.76% \n\n\n\nconfig: {'_L0': 6112, 'l1': 512, 'dropout_prob': 0.6582591659263604, 'lr_mult': 0.001, 'batch_size': 2, 'epochs': 4, 'k_folds': 1, 'patience': 32, 'optimizer': 'Adam', 'sgd_momentum': 0.9}\nEpoch: 1\n\n\nLoss on hold-out set: 2.397945615480531\nAccuracy on hold-out set: 0.09905660377358491\nMAPK value on hold-out data: 0.16352203488349915\nEpoch: 2\n\n\nLoss on hold-out set: 2.397930721067033\nAccuracy on hold-out set: 0.09905660377358491\nMAPK value on hold-out data: 0.17216980457305908\nEpoch: 3\n\n\nLoss on hold-out set: 2.3980288752969705\nAccuracy on hold-out set: 0.09905660377358491\nMAPK value on hold-out data: 0.17688679695129395\nEpoch: 4\n\n\nLoss on hold-out set: 2.3979652962594664\nAccuracy on hold-out set: 0.09905660377358491\nMAPK value on hold-out data: 0.16902516782283783\nReturned to Spot: Validation loss: 2.3979652962594664\n----------------------------------------------\n\n\nspotPython tuning: 2.396017794339162 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x2e021beb0&gt;\n\n\n\nspot_tuner.plot_progress(log_y=False, filename=\"./figures/\" + experiment_name+\"_progress.png\")\n\n\n\n\n\nfrom spotPython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control=fun_control, spot=spot_tuner))\n\n| name         | type   | default   |   lower |   upper |               tuned | transform             |   importance | stars   |\n|--------------|--------|-----------|---------|---------|---------------------|-----------------------|--------------|---------|\n| _L0          | int    | 64        |  6112.0 |  6112.0 |              6112.0 | None                  |         0.00 |         |\n| l1           | int    | 8         |     6.0 |    13.0 |                 7.0 | transform_power_2_int |       100.00 | ***     |\n| dropout_prob | float  | 0.01      |     0.0 |     0.9 | 0.37306669346546995 | None                  |         0.00 |         |\n| lr_mult      | float  | 1.0       |   0.001 |   0.001 |               0.001 | None                  |         0.00 |         |\n| batch_size   | int    | 4         |     1.0 |     4.0 |                 2.0 | transform_power_2_int |         0.00 |         |\n| epochs       | int    | 4         |     2.0 |     2.0 |                 2.0 | transform_power_2_int |         0.00 |         |\n| k_folds      | int    | 1         |     1.0 |     1.0 |                 1.0 | None                  |         0.00 |         |\n| patience     | int    | 2         |     2.0 |     6.0 |                 3.0 | transform_power_2_int |         2.20 | *       |\n| optimizer    | factor | SGD       |     0.0 |     3.0 |                 1.0 | None                  |         0.01 |         |\n| sgd_momentum | float  | 0.0       |     0.9 |     0.9 |                 0.9 | None                  |         0.00 |         |\n\n\n\nspot_tuner.plot_importance()"
  },
  {
    "objectID": "25_spot_torch_vbdp.html#sec-get-spot-results-12",
    "href": "25_spot_torch_vbdp.html#sec-get-spot-results-12",
    "title": "15  Hyperparameter Tuning: VBDP",
    "section": "17.4 Get the Tuned Architecture",
    "text": "17.4 Get the Tuned Architecture\n\nfrom spotPython.hyperparameters.values import get_one_core_model_from_X\nX = spot_tuner.to_all_dim(spot_tuner.min_X.reshape(1,-1))\nmodel_spot = get_one_core_model_from_X(X, fun_control)\nmodel_spot\n\nNet_vbdp(\n  (fc1): Linear(in_features=6112, out_features=128, bias=True)\n  (fc2): Linear(in_features=128, out_features=64, bias=True)\n  (fc3): Linear(in_features=64, out_features=32, bias=True)\n  (fc4): Linear(in_features=32, out_features=16, bias=True)\n  (fc5): Linear(in_features=16, out_features=11, bias=True)\n  (relu): ReLU()\n  (softmax): Softmax(dim=1)\n  (dropout1): Dropout(p=0.37306669346546995, inplace=False)\n  (dropout2): Dropout(p=0.18653334673273497, inplace=False)\n)\n\n\n\nfrom spotPython.torch.traintest import (\n    train_tuned,\n    test_tuned,\n    )\ntrain_tuned(net=model_spot, train_dataset=train,\n        loss_function=fun_control[\"loss_function\"],\n        metric=fun_control[\"metric_torch\"],\n        shuffle=True,\n        device = fun_control[\"device\"],\n        path=None,\n        task=fun_control[\"task\"],)\n\nEpoch: 1\n\n\nLoss on hold-out set: 2.398781902385208\nAccuracy on hold-out set: 0.08962264150943396\nMAPK value on hold-out data: 0.1595911830663681\nEpoch: 2\n\n\nLoss on hold-out set: 2.398741141805109\nAccuracy on hold-out set: 0.08018867924528301\nMAPK value on hold-out data: 0.15880504250526428\nEpoch: 3\n\n\nLoss on hold-out set: 2.3986721353710823\nAccuracy on hold-out set: 0.08018867924528301\nMAPK value on hold-out data: 0.1611635386943817\nEpoch: 4\n\n\nLoss on hold-out set: 2.398678478204979\nAccuracy on hold-out set: 0.08962264150943396\nMAPK value on hold-out data: 0.16194967925548553\nReturned to Spot: Validation loss: 2.398678478204979\n----------------------------------------------\n\n\n\ntest_tuned(net=model_spot, test_dataset=test,\n            shuffle=False,\n            loss_function=fun_control[\"loss_function\"],\n            metric=fun_control[\"metric_torch\"],\n            device = fun_control[\"device\"],\n            task=fun_control[\"task\"],)\n\nLoss on hold-out set: 2.3976655271318226\nAccuracy on hold-out set: 0.07344632768361582\nMAPK value on hold-out data: 0.15000002086162567\nFinal evaluation: Validation loss: 2.3976655271318226\nFinal evaluation: Validation metric: 0.15000002086162567\n----------------------------------------------\n\n\n(2.3976655271318226, nan, tensor(0.1500))"
  },
  {
    "objectID": "25_spot_torch_vbdp.html#cross-validated-evaluations",
    "href": "25_spot_torch_vbdp.html#cross-validated-evaluations",
    "title": "15  Hyperparameter Tuning: VBDP",
    "section": "17.5 Cross-validated Evaluations",
    "text": "17.5 Cross-validated Evaluations\n\nThis is the evaluation that will be used in the comparison (evaluatecv has to be updated before, to get metric vlaues!):\n\n\nfrom spotPython.torch.traintest import evaluate_cv\n# modify k-kolds:\nsetattr(model_spot, \"k_folds\",  10)\ndf_eval, df_preds, df_metrics = evaluate_cv(net=model_spot, dataset=fun_control[\"data\"], loss_function=fun_control[\"loss_function\"], metric=fun_control[\"metric_torch\"], task=fun_control[\"task\"], writer=fun_control[\"writer\"], writerId=\"model_spot_cv\", device = fun_control[\"device\"])\n\nFold: 1\nEpoch: 1\n\n\nLoss on hold-out set: 2.3995368083318076\nAccuracy on hold-out set: 0.07042253521126761\nMAPK value on hold-out data: 0.14506173133850098\nEpoch: 2\n\n\nLoss on hold-out set: 2.399240639474657\nAccuracy on hold-out set: 0.056338028169014086\nMAPK value on hold-out data: 0.1458333283662796\nEpoch: 3\n\n\nLoss on hold-out set: 2.3992543617884317\nAccuracy on hold-out set: 0.056338028169014086\nMAPK value on hold-out data: 0.13657407462596893\nEpoch: 4\n\n\nLoss on hold-out set: 2.399293409453498\nAccuracy on hold-out set: 0.07042253521126761\nMAPK value on hold-out data: 0.1458333283662796\nFold: 2\nEpoch: 1\n\n\nLoss on hold-out set: 2.3984335793389215\nAccuracy on hold-out set: 0.08450704225352113\nMAPK value on hold-out data: 0.14737656712532043\nEpoch: 2\n\n\nLoss on hold-out set: 2.3980277246899075\nAccuracy on hold-out set: 0.08450704225352113\nMAPK value on hold-out data: 0.15740740299224854\nEpoch: 3\n\n\nLoss on hold-out set: 2.3982765277226767\nAccuracy on hold-out set: 0.08450704225352113\nMAPK value on hold-out data: 0.14814814925193787\nEpoch: 4\n\n\nLoss on hold-out set: 2.398267136679755\nAccuracy on hold-out set: 0.08450704225352113\nMAPK value on hold-out data: 0.14737655222415924\nFold: 3\nEpoch: 1\n\n\nLoss on hold-out set: 2.398993558353848\nAccuracy on hold-out set: 0.07042253521126761\nMAPK value on hold-out data: 0.125\nEpoch: 2\n\n\nLoss on hold-out set: 2.3991434574127197\nAccuracy on hold-out set: 0.07042253521126761\nMAPK value on hold-out data: 0.125\nEpoch: 3\n\n\nLoss on hold-out set: 2.3986861175960965\nAccuracy on hold-out set: 0.07042253521126761\nMAPK value on hold-out data: 0.12962964177131653\nEpoch: 4\n\n\nLoss on hold-out set: 2.3986857997046576\nAccuracy on hold-out set: 0.07042253521126761\nMAPK value on hold-out data: 0.12191358208656311\nFold: 4\nEpoch: 1\n\n\nLoss on hold-out set: 2.3971163829167685\nAccuracy on hold-out set: 0.15492957746478872\nMAPK value on hold-out data: 0.24768516421318054\nEpoch: 2\n\n\nLoss on hold-out set: 2.3972075117958918\nAccuracy on hold-out set: 0.15492957746478872\nMAPK value on hold-out data: 0.2500000298023224\nEpoch: 3\n\n\nLoss on hold-out set: 2.3971351385116577\nAccuracy on hold-out set: 0.15492957746478872\nMAPK value on hold-out data: 0.24074071645736694\nEpoch: 4\n\n\nLoss on hold-out set: 2.3970094521840415\nAccuracy on hold-out set: 0.15492957746478872\nMAPK value on hold-out data: 0.24228395521640778\nFold: 5\nEpoch: 1\n\n\nLoss on hold-out set: 2.397310045030382\nAccuracy on hold-out set: 0.056338028169014086\nMAPK value on hold-out data: 0.14506173133850098\nEpoch: 2\n\n\nLoss on hold-out set: 2.397243367301093\nAccuracy on hold-out set: 0.056338028169014086\nMAPK value on hold-out data: 0.14351850748062134\nEpoch: 3\n\n\nLoss on hold-out set: 2.3974165783988104\nAccuracy on hold-out set: 0.056338028169014086\nMAPK value on hold-out data: 0.1458333283662796\nEpoch: 4\n\n\nLoss on hold-out set: 2.3972652753194175\nAccuracy on hold-out set: 0.056338028169014086\nMAPK value on hold-out data: 0.14814814925193787\nFold: 6\nEpoch: 1\n\n\nLoss on hold-out set: 2.3985262314478555\nAccuracy on hold-out set: 0.056338028169014086\nMAPK value on hold-out data: 0.12268519401550293\nEpoch: 2\n\n\nLoss on hold-out set: 2.398355894618564\nAccuracy on hold-out set: 0.07042253521126761\nMAPK value on hold-out data: 0.14351850748062134\nEpoch: 3\n\n\nLoss on hold-out set: 2.3983687824673123\nAccuracy on hold-out set: 0.07042253521126761\nMAPK value on hold-out data: 0.13811728358268738\nEpoch: 4\n\n\nLoss on hold-out set: 2.398357801967197\nAccuracy on hold-out set: 0.056338028169014086\nMAPK value on hold-out data: 0.1319444477558136\nFold: 7\nEpoch: 1\n\n\nLoss on hold-out set: 2.3988254335191517\nAccuracy on hold-out set: 0.07042253521126761\nMAPK value on hold-out data: 0.1319444477558136\nEpoch: 2\n\n\nLoss on hold-out set: 2.3985374901029797\nAccuracy on hold-out set: 0.04225352112676056\nMAPK value on hold-out data: 0.12731482088565826\nEpoch: 3\n\n\nLoss on hold-out set: 2.3986646864149304\nAccuracy on hold-out set: 0.028169014084507043\nMAPK value on hold-out data: 0.12422839552164078\nEpoch: 4\n\n\nLoss on hold-out set: 2.3985735972722373\nAccuracy on hold-out set: 0.04225352112676056\nMAPK value on hold-out data: 0.1319444477558136\nFold: 8\nEpoch: 1\n\n\nLoss on hold-out set: 2.394800755712721\nAccuracy on hold-out set: 0.12857142857142856\nMAPK value on hold-out data: 0.22685183584690094\nEpoch: 2\n\n\nLoss on hold-out set: 2.396014240052965\nAccuracy on hold-out set: 0.11428571428571428\nMAPK value on hold-out data: 0.19212962687015533\nEpoch: 3\n\n\nLoss on hold-out set: 2.395838287141588\nAccuracy on hold-out set: 0.11428571428571428\nMAPK value on hold-out data: 0.19212961196899414\nEpoch: 4\n\n\nLoss on hold-out set: 2.3956307437684803\nAccuracy on hold-out set: 0.14285714285714285\nMAPK value on hold-out data: 0.21296295523643494\nFold: 9\nEpoch: 1\n\n\nLoss on hold-out set: 2.401379148165385\nAccuracy on hold-out set: 0.02857142857142857\nMAPK value on hold-out data: 0.07870370894670486\nEpoch: 2\n\n\nLoss on hold-out set: 2.400593254301283\nAccuracy on hold-out set: 0.02857142857142857\nMAPK value on hold-out data: 0.0902777761220932\nEpoch: 3\n\n\nLoss on hold-out set: 2.4008618858125477\nAccuracy on hold-out set: 0.02857142857142857\nMAPK value on hold-out data: 0.07870370149612427\nEpoch: 4\n\n\nLoss on hold-out set: 2.4014312426249185\nAccuracy on hold-out set: 0.02857142857142857\nMAPK value on hold-out data: 0.07870370149612427\nFold: 10\nEpoch: 1\n\n\nLoss on hold-out set: 2.3984521362516613\nAccuracy on hold-out set: 0.08571428571428572\nMAPK value on hold-out data: 0.1249999850988388\nEpoch: 2\n\n\nLoss on hold-out set: 2.398333536254035\nAccuracy on hold-out set: 0.08571428571428572\nMAPK value on hold-out data: 0.125\nEpoch: 3\n\n\nLoss on hold-out set: 2.3981997436947293\nAccuracy on hold-out set: 0.08571428571428572\nMAPK value on hold-out data: 0.12962961196899414\nEpoch: 4\n\n\nLoss on hold-out set: 2.3983060121536255\nAccuracy on hold-out set: 0.08571428571428572\nMAPK value on hold-out data: 0.125\n\n\n\nmetric_name = type(fun_control[\"metric_torch\"]).__name__\nprint(f\"loss: {df_eval}, metric_name: {df_metrics}\")\n\nloss: 2.3982820471127826, metric_name: 0.14861111342906952\n\n\n\nfilename = \"./figures/\" + experiment_name\nspot_tuner.plot_important_hyperparameter_contour(filename=filename)\n\nl1:  100.0\npatience:  2.2044760207541243"
  },
  {
    "objectID": "25_spot_torch_vbdp.html#parallel-coordinates-plot",
    "href": "25_spot_torch_vbdp.html#parallel-coordinates-plot",
    "title": "15  Hyperparameter Tuning: VBDP",
    "section": "17.6 Parallel Coordinates Plot",
    "text": "17.6 Parallel Coordinates Plot\n\nspot_tuner.parallel_plot()\n\n\n                                                \n\n\n\n# close tensorbaoard writer\nif fun_control[\"writer\"] is not None:\n    fun_control[\"writer\"].close()"
  },
  {
    "objectID": "25_spot_torch_vbdp.html#plot-all-combinations-of-hyperparameters",
    "href": "25_spot_torch_vbdp.html#plot-all-combinations-of-hyperparameters",
    "title": "15  Hyperparameter Tuning: VBDP",
    "section": "17.7 Plot all Combinations of Hyperparameters",
    "text": "17.7 Plot all Combinations of Hyperparameters\n\nWarning: this may take a while.\n\n\nPLOT_ALL = False\nif PLOT_ALL:\n    n = spot_tuner.k\n    for i in range(n-1):\n        for j in range(i+1, n):\n            spot_tuner.plot_contour(i=i, j=j, min_z=min_z, max_z = max_z)"
  },
  {
    "objectID": "99_spot_doc.html#example-spot",
    "href": "99_spot_doc.html#example-spot",
    "title": "16  Documentation of the Sequential Parameter Optimization",
    "section": "16.1 Example: spot",
    "text": "16.1 Example: spot\n\nimport numpy as np\nfrom math import inf\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom scipy.optimize import shgo\nfrom scipy.optimize import direct\nfrom scipy.optimize import differential_evolution\nimport matplotlib.pyplot as plt\n\n\n16.1.1 The Objective Function\nThe spotPython package provides several classes of objective functions. We will use an analytical objective function, i.e., a function that can be described by a (closed) formula: \\[f(x) = x^2\\]\n\nfun = analytical().fun_sphere\n\n\nx = np.linspace(-1,1,100).reshape(-1,1)\ny = fun(x)\nplt.figure()\nplt.plot(x,y, \"k\")\nplt.show()\n\n\n\n\n\nspot_1 = spot.Spot(fun=fun,\n                   lower = np.array([-10]),\n                   upper = np.array([100]),\n                   fun_evals = 7,\n                   fun_repeats = 1,\n                   max_time = inf,\n                   noise = False,\n                   tolerance_x = np.sqrt(np.spacing(1)),\n                   var_type=[\"num\"],\n                   infill_criterion = \"y\",\n                   n_points = 1,\n                   seed=123,\n                   log_level = 50,\n                   show_models=True,\n                   fun_control = {},\n                   design_control={\"init_size\": 5,\n                                   \"repeats\": 1},\n                   surrogate_control={\"noise\": False,\n                                      \"cod_type\": \"norm\",\n                                      \"min_theta\": -4,\n                                      \"max_theta\": 3,\n                                      \"n_theta\": 1,\n                                      \"model_optimizer\": differential_evolution,\n                                      \"model_fun_evals\": 1000,\n                                      })\n\nspot’s __init__ method sets the control parameters. There are two parameter groups:\n\nexternal parameters can be specified by the user\ninternal parameters, which are handled by spot.\n\n\n\n16.1.2 External Parameters\n\n\n\n\n\n\n\n\n\n\nexternal parameter\ntype\ndescription\ndefault\nmandatory\n\n\n\n\nfun\nobject\nobjective function\n\nyes\n\n\nlower\narray\nlower bound\n\nyes\n\n\nupper\narray\nupper bound\n\nyes\n\n\nfun_evals\nint\nnumber of function evaluations\n15\nno\n\n\nfun_evals\nint\nnumber of function evaluations\n15\nno\n\n\nfun_control\ndict\nnoise etc.\n{}\nn\n\n\nmax_time\nint\nmax run time budget\ninf\nno\n\n\nnoise\nbool\nif repeated evaluations of fun results in different values, then noise should be set to True.\nFalse\nno\n\n\ntolerance_x\nfloat\ntolerance for new x solutions. Minimum distance of new solutions, generated by suggest_new_X, to already existing solutions. If zero (which is the default), every new solution is accepted.\n0\nno\n\n\nvar_type\nlist\nlist of type information, can be either \"num\" or \"factor\"\n[\"num\"]\nno\n\n\ninfill_criterion\nstring\nCan be \"y\", \"s\", \"ei\" (negative expected improvement), or \"all\"\n\"y\"\nno\n\n\nn_points\nint\nnumber of infill points\n1\nno\n\n\nseed\nint\ninitial seed. If Spot.run() is called twice, different results will be generated. To reproduce results, the seed can be used.\n123\nno\n\n\nlog_level\nint\nlog level with the following settings: NOTSET (0), DEBUG (10: Detailed information, typically of interest only when diagnosing problems.), INFO (20: Confirmation that things are working as expected.), WARNING (30: An indication that something unexpected happened, or indicative of some problem in the near future (e.g. ‘disk space low’). The software is still working as expected.), ERROR (40: Due to a more serious problem, the software has not been able to perform some function.), and CRITICAL (50: A serious error, indicating that the program itself may be unable to continue running.)\n50\nno\n\n\nshow_models\nbool\nPlot model. Currently only 1-dim functions are supported\nFalse\nno\n\n\ndesign\nobject\nexperimental design\nNone\nno\n\n\ndesign_control\ndict\ncontrol parameters\nsee below\nno\n\n\nsurrogate\n\nsurrogate model\nkriging\nno\n\n\nsurrogate_control\ndict\ncontrol parameters\nsee below\nno\n\n\noptimizer\nobject\noptimizer\nsee below\nno\n\n\noptimizer_control\ndict\ncontrol parameters\nsee below\nno\n\n\n\n\nBesides these single parameters, the following parameter dictionaries can be specified by the user:\n\nfun_control\ndesign_control\nsurrogate_control\noptimizer_control"
  },
  {
    "objectID": "99_spot_doc.html#the-fun_control-dictionary",
    "href": "99_spot_doc.html#the-fun_control-dictionary",
    "title": "16  Documentation of the Sequential Parameter Optimization",
    "section": "16.2 The fun_control Dictionary",
    "text": "16.2 The fun_control Dictionary\n\n\n\nexternal parameter\ntype\ndescription\ndefault\nmandatory\n\n\n\n\nsigma\nfloat\nnoise: standard deviation\n0\nyes\n\n\nseed\nint\nseed for rng\n124\nyes"
  },
  {
    "objectID": "99_spot_doc.html#the-design_control-dictionary",
    "href": "99_spot_doc.html#the-design_control-dictionary",
    "title": "16  Documentation of the Sequential Parameter Optimization",
    "section": "16.3 The design_control Dictionary",
    "text": "16.3 The design_control Dictionary\n\n\n\n\n\n\n\n\n\n\nexternal parameter\ntype\ndescription\ndefault\nmandatory\n\n\n\n\ninit_size\nint\ninitial sample size\n10\nyes\n\n\nrepeats\nint\nnumber of repeats of the initial sammples\n1\nyes"
  },
  {
    "objectID": "99_spot_doc.html#the-surrogate_control-dictionary",
    "href": "99_spot_doc.html#the-surrogate_control-dictionary",
    "title": "16  Documentation of the Sequential Parameter Optimization",
    "section": "16.4 The surrogate_control Dictionary",
    "text": "16.4 The surrogate_control Dictionary\n\n\n\n\n\n\n\n\n\n\nexternal parameter\ntype\ndescription\ndefault\nmandatory\n\n\n\n\nnoise\n\n\n\n\n\n\nmodel_optimizer\nobject\noptimizer\ndifferential_evolution\nno\n\n\nmodel_fun_evals\n\n\n\n\n\n\nmin_theta\n\n\n-3.\n\n\n\nmax_theta\n\n\n3.\n\n\n\nn_theta\n\n\n1\n\n\n\nn_p\n\n\n1\n\n\n\noptim_p\n\n\nFalse\n\n\n\ncod_type\n\n\n\"norm\"\n\n\n\nvar_type\n\n\n\n\n\n\nuse_cod_y\nbool\n\nFalse"
  },
  {
    "objectID": "99_spot_doc.html#the-optimizer_control-dictionary",
    "href": "99_spot_doc.html#the-optimizer_control-dictionary",
    "title": "16  Documentation of the Sequential Parameter Optimization",
    "section": "16.5 The optimizer_control Dictionary",
    "text": "16.5 The optimizer_control Dictionary\n\n\n\n\n\n\n\n\n\n\nexternal parameter\ntype\ndescription\ndefault\nmandatory\n\n\n\n\nmax_iter\nint\nmax number of iterations. Note: these are the cheap evaluations on the surrogate.\n1000\nno"
  },
  {
    "objectID": "99_spot_doc.html#run",
    "href": "99_spot_doc.html#run",
    "title": "16  Documentation of the Sequential Parameter Optimization",
    "section": "16.6 Run",
    "text": "16.6 Run\n\nspot_1.run()\n\n\n\n\n\n\n\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x16ddf4c10&gt;"
  },
  {
    "objectID": "99_spot_doc.html#print-the-results",
    "href": "99_spot_doc.html#print-the-results",
    "title": "16  Documentation of the Sequential Parameter Optimization",
    "section": "16.7 Print the Results",
    "text": "16.7 Print the Results\n\nspot_1.print_results()\n\nmin y: 0.30656551286610595\nx0: -0.5536835855126157\n\n\n[['x0', -0.5536835855126157]]"
  },
  {
    "objectID": "99_spot_doc.html#show-the-progress",
    "href": "99_spot_doc.html#show-the-progress",
    "title": "16  Documentation of the Sequential Parameter Optimization",
    "section": "16.8 Show the Progress",
    "text": "16.8 Show the Progress\n\nspot_1.plot_progress()"
  },
  {
    "objectID": "99_spot_doc.html#visualize-the-surrogate",
    "href": "99_spot_doc.html#visualize-the-surrogate",
    "title": "16  Documentation of the Sequential Parameter Optimization",
    "section": "16.9 Visualize the Surrogate",
    "text": "16.9 Visualize the Surrogate\n\nThe plot method of the kriging surrogate is used.\nNote: the plot uses the interval defined by the ranges of the natural variables.\n\n\nspot_1.surrogate.plot()\n\n&lt;Figure size 864x576 with 0 Axes&gt;"
  },
  {
    "objectID": "99_spot_doc.html#init-build-initial-design",
    "href": "99_spot_doc.html#init-build-initial-design",
    "title": "16  Documentation of the Sequential Parameter Optimization",
    "section": "16.10 Init: Build Initial Design",
    "text": "16.10 Init: Build Initial Design\n\nfrom spotPython.design.spacefilling import spacefilling\nfrom spotPython.build.kriging import Kriging\nfrom spotPython.fun.objectivefunctions import analytical\ngen = spacefilling(2)\nrng = np.random.RandomState(1)\nlower = np.array([-5,-0])\nupper = np.array([10,15])\nfun = analytical().fun_branin\nfun_control = {\"sigma\": 0,\n               \"seed\": 123}\n\nX = gen.scipy_lhd(10, lower=lower, upper = upper)\nprint(X)\ny = fun(X, fun_control=fun_control)\nprint(y)\n\n[[ 8.97647221 13.41926847]\n [ 0.66946019  1.22344228]\n [ 5.23614115 13.78185824]\n [ 5.6149825  11.5851384 ]\n [-1.72963184  1.66516096]\n [-4.26945568  7.1325531 ]\n [ 1.26363761 10.17935555]\n [ 2.88779942  8.05508969]\n [-3.39111089  4.15213772]\n [ 7.30131231  5.22275244]]\n[128.95676449  31.73474356 172.89678121 126.71295908  64.34349975\n  70.16178611  48.71407916  31.77322887  76.91788181  30.69410529]"
  },
  {
    "objectID": "99_spot_doc.html#replicability",
    "href": "99_spot_doc.html#replicability",
    "title": "16  Documentation of the Sequential Parameter Optimization",
    "section": "16.11 Replicability",
    "text": "16.11 Replicability\nSeed\n\ngen = spacefilling(2, seed=123)\nX0 = gen.scipy_lhd(3)\ngen = spacefilling(2, seed=345)\nX1 = gen.scipy_lhd(3)\nX2 = gen.scipy_lhd(3)\ngen = spacefilling(2, seed=123)\nX3 = gen.scipy_lhd(3)\nX0, X1, X2, X3\n\n(array([[0.77254938, 0.31539299],\n        [0.59321338, 0.93854273],\n        [0.27469803, 0.3959685 ]]),\n array([[0.78373509, 0.86811887],\n        [0.06692621, 0.6058029 ],\n        [0.41374778, 0.00525456]]),\n array([[0.121357  , 0.69043832],\n        [0.41906219, 0.32838498],\n        [0.86742658, 0.52910374]]),\n array([[0.77254938, 0.31539299],\n        [0.59321338, 0.93854273],\n        [0.27469803, 0.3959685 ]]))"
  },
  {
    "objectID": "99_spot_doc.html#surrogates",
    "href": "99_spot_doc.html#surrogates",
    "title": "16  Documentation of the Sequential Parameter Optimization",
    "section": "16.12 Surrogates",
    "text": "16.12 Surrogates\n\n16.12.1 A Simple Predictor\nThe code below shows how to use a simple model for prediction. Assume that only two (very costly) measurements are available:\n\nf(0) = 0.5\nf(2) = 2.5\n\nWe are interested in the value at \\(x_0 = 1\\), i.e., \\(f(x_0 = 1)\\), but cannot run an additional, third experiment.\n\nfrom sklearn import linear_model\nX = np.array([[0], [2]])\ny = np.array([0.5, 2.5])\nS_lm = linear_model.LinearRegression()\nS_lm = S_lm.fit(X, y)\nX0 = np.array([[1]])\ny0 = S_lm.predict(X0)\nprint(y0)\n\n[1.5]\n\n\nCentral Idea: Evaluation of the surrogate model S_lm is much cheaper (or / and much faster) than running the real-world experiment \\(f\\)."
  },
  {
    "objectID": "99_spot_doc.html#demotest-objective-function-fails",
    "href": "99_spot_doc.html#demotest-objective-function-fails",
    "title": "16  Documentation of the Sequential Parameter Optimization",
    "section": "16.13 Demo/Test: Objective Function Fails",
    "text": "16.13 Demo/Test: Objective Function Fails\nSPOT expects np.nan values from failed objective function values. These are handled. Note: SPOT’s counter considers only successful executions of the objective function.\n\nimport numpy as np\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nimport numpy as np\nfrom math import inf\n# number of initial points:\nni = 20\n# number of points\nn = 30\n\nfun = analytical().fun_random_error\nlower = np.array([-1])\nupper = np.array([1])\ndesign_control={\"init_size\": ni}\n\nspot_1 = spot.Spot(fun=fun,\n            lower = lower,\n            upper= upper,\n            fun_evals = n,\n            show_progress=False,\n            design_control=design_control,)\nspot_1.run()\n# To check whether the run was successfully completed,\n# we compare the number of evaluated points to the specified\n# number of points.\nassert spot_1.y.shape[0] == n\n\n[ 0.53176481 -0.9053821  -0.02203599 -0.21843718  0.78240941 -0.58120945\n -0.3923345   0.67234256  0.31802454 -0.68898927 -0.75129705  0.97550354\n  0.41757584  0.0786237   0.82585329  0.23700598 -0.49274073 -0.82319082\n -0.17991251  0.1481835 ]\n[-1.]\n\n\n[-0.58552368]\n[-0.20126111]\n\n\n[-0.60100809]\n[-0.97897336]\n\n\n[-0.2748985]\n[0.8359486]\n\n\n[0.99035591]\n[0.01641232]\n\n\n[0.5629346]"
  },
  {
    "objectID": "99_spot_doc.html#sec-detailed-data-splitting",
    "href": "99_spot_doc.html#sec-detailed-data-splitting",
    "title": "16  Documentation of the Sequential Parameter Optimization",
    "section": "16.14 PyTorch: Detailed Description of the Data Splitting",
    "text": "16.14 PyTorch: Detailed Description of the Data Splitting\n\n16.14.1 Description of the \"train_hold_out\" Setting\nThe \"train_hold_out\" setting is used by default. It uses the loss function specfied in fun_control and the metric specified in fun_control.\n\nFirst, the method HyperTorch().fun_torch is called.\nfun_torc(), which is implemented in the file hypertorch.py, calls evaluate_hold_out() as follows:\n\ndf_eval, _ = evaluate_hold_out(\n    model,\n    train_dataset=fun_control[\"train\"],\n    shuffle=self.fun_control[\"shuffle\"],\n    loss_function=self.fun_control[\"loss_function\"],\n    metric=self.fun_control[\"metric_torch\"],\n    device=self.fun_control[\"device\"],\n    show_batch_interval=self.fun_control[\"show_batch_interval\"],\n    path=self.fun_control[\"path\"],\n    task=self.fun_control[\"task\"],\n    writer=self.fun_control[\"writer\"],\n    writerId=config_id,\n)\nNote: Only the data set fun_control[\"train\"] is used for training and validation. It is used in evaluate_hold_out as follows:\ntrainloader, valloader = create_train_val_data_loaders(\n                dataset=train_dataset, batch_size=batch_size_instance, shuffle=shuffle\n            )\ncreate_train_val_data_loaders() splits the train_dataset into trainloader and valloader using torch.utils.data.random_split() as follows:\ndef create_train_val_data_loaders(dataset, batch_size, shuffle, num_workers=0):\n    test_abs = int(len(dataset) * 0.6)\n    train_subset, val_subset = random_split(dataset, [test_abs, len(dataset) - test_abs])\n    trainloader = torch.utils.data.DataLoader(\n        train_subset, batch_size=int(batch_size), shuffle=shuffle, num_workers=num_workers\n    )\n    valloader = torch.utils.data.DataLoader(\n        val_subset, batch_size=int(batch_size), shuffle=shuffle, num_workers=num_workers\n    )\n    return trainloader, valloader\nThe optimizer is set up as follows:\noptimizer_instance = net.optimizer\nlr_mult_instance = net.lr_mult\nsgd_momentum_instance = net.sgd_momentum\noptimizer = optimizer_handler(\n    optimizer_name=optimizer_instance,\n    params=net.parameters(),\n    lr_mult=lr_mult_instance,\n    sgd_momentum=sgd_momentum_instance,\n)\n\nevaluate_hold_out() sets the net attributes such as epochs, batch_size, optimizer, and patience. For each epoch, the methods train_one_epoch() and validate_one_epoch() are called, the former for training and the latter for validation and early stopping. The validation loss from the last epoch (not the best validation loss) is returned from evaluate_hold_out.\nThe method train_one_epoch() is implemented as follows:\n\ndef train_one_epoch(\n    net,\n    trainloader,\n    batch_size,\n    loss_function,\n    optimizer,\n    device,\n    show_batch_interval=10_000,\n    task=None,\n):\n    running_loss = 0.0\n    epoch_steps = 0\n    for batch_nr, data in enumerate(trainloader, 0):\n        input, target = data\n        input, target = input.to(device), target.to(device)\n        optimizer.zero_grad()\n        output = net(input)\n        if task == \"regression\":\n            target = target.unsqueeze(1)\n            if target.shape == output.shape:\n                loss = loss_function(output, target)\n            else:\n                raise ValueError(f\"Shapes of target and output do not match:\n                 {target.shape} vs {output.shape}\")\n        elif task == \"classification\":\n            loss = loss_function(output, target)\n        else:\n            raise ValueError(f\"Unknown task: {task}\")\n        loss.backward()\n        torch.nn.utils.clip_grad_norm_(net.parameters(), max_norm=1.0)\n        optimizer.step()\n        running_loss += loss.item()\n        epoch_steps += 1\n        if batch_nr % show_batch_interval == (show_batch_interval - 1):  \n            print(\n                \"Batch: %5d. Batch Size: %d. Training Loss (running): %.3f\"\n                % (batch_nr + 1, int(batch_size), running_loss / epoch_steps)\n            )\n            running_loss = 0.0\n    return loss.item()\n\nThe method validate_one_epoch() is implemented as follows:\n\ndef validate_one_epoch(net, valloader, loss_function, metric, device, task):\n    val_loss = 0.0\n    val_steps = 0\n    total = 0\n    correct = 0\n    metric.reset()\n    for i, data in enumerate(valloader, 0):\n        # get batches\n        with torch.no_grad():\n            input, target = data\n            input, target = input.to(device), target.to(device)\n            output = net(input)\n            # print(f\"target: {target}\")\n            # print(f\"output: {output}\")\n            if task == \"regression\":\n                target = target.unsqueeze(1)\n                if target.shape == output.shape:\n                    loss = loss_function(output, target)\n                else:\n                    raise ValueError(f\"Shapes of target and output \n                        do not match: {target.shape} vs {output.shape}\")\n                metric_value = metric.update(output, target)\n            elif task == \"classification\":\n                loss = loss_function(output, target)\n                metric_value = metric.update(output, target)\n                _, predicted = torch.max(output.data, 1)\n                total += target.size(0)\n                correct += (predicted == target).sum().item()\n            else:\n                raise ValueError(f\"Unknown task: {task}\")\n            val_loss += loss.cpu().numpy()\n            val_steps += 1\n    loss = val_loss / val_steps\n    print(f\"Loss on hold-out set: {loss}\")\n    if task == \"classification\":\n        accuracy = correct / total\n        print(f\"Accuracy on hold-out set: {accuracy}\")\n    # metric on all batches using custom accumulation\n    metric_value = metric.compute()\n    metric_name = type(metric).__name__\n    print(f\"{metric_name} value on hold-out data: {metric_value}\")\n    return metric_value, loss\n\n16.14.1.1 Description of the \"test_hold_out\" Setting\nIt uses the loss function specfied in fun_control and the metric specified in fun_control.\n\nFirst, the method HyperTorch().fun_torch is called.\nfun_torc() calls spotPython.torch.traintest.evaluate_hold_out() similar to the \"train_hold_out\" setting with one exception: It passes an additional test data set to evaluate_hold_out() as follows:\n\ntest_dataset=fun_control[\"test\"]\nevaluate_hold_out() calls create_train_test_data_loaders instead of create_train_val_data_loaders: The two data sets are used in create_train_test_data_loaders as follows:\ndef create_train_test_data_loaders(dataset, batch_size, shuffle, test_dataset, \n        num_workers=0):\n    trainloader = torch.utils.data.DataLoader(\n        dataset, batch_size=int(batch_size), shuffle=shuffle, \n        num_workers=num_workers\n    )\n    testloader = torch.utils.data.DataLoader(\n        test_dataset, batch_size=int(batch_size), shuffle=shuffle, \n        num_workers=num_workers\n    )\n    return trainloader, testloader\n\nThe following steps are identical to the \"train_hold_out\" setting. Only a different data loader is used for testing.\n\n\n\n16.14.1.2 Detailed Description of the \"train_cv\" Setting\nIt uses the loss function specfied in fun_control and the metric specified in fun_control.\n\nFirst, the method HyperTorch().fun_torch is called.\nfun_torc() calls spotPython.torch.traintest.evaluate_cv() as follows (Note: Only the data set fun_control[\"train\"] is used for CV.):\n\ndf_eval, _ = evaluate_cv(\n    model,\n    dataset=fun_control[\"train\"],\n    shuffle=self.fun_control[\"shuffle\"],\n    device=self.fun_control[\"device\"],\n    show_batch_interval=self.fun_control[\"show_batch_interval\"],\n    task=self.fun_control[\"task\"],\n    writer=self.fun_control[\"writer\"],\n    writerId=config_id,\n)\n\nIn `evaluate_cv(), the following steps are performed: The optimizer is set up as follows:\n\noptimizer_instance = net.optimizer\nlr_instance = net.lr\nsgd_momentum_instance = net.sgd_momentum\noptimizer = optimizer_handler(optimizer_name=optimizer_instance,\n     params=net.parameters(), lr_mult=lr_mult_instance)\nevaluate_cv() sets the net attributes such as epochs, batch_size, optimizer, and patience. CV is implemented as follows:\ndef evaluate_cv(\n    net,\n    dataset,\n    shuffle=False,\n    loss_function=None,\n    num_workers=0,\n    device=None,\n    show_batch_interval=10_000,\n    metric=None,\n    path=None,\n    task=None,\n    writer=None,\n    writerId=None,\n):\n    lr_mult_instance = net.lr_mult\n    epochs_instance = net.epochs\n    batch_size_instance = net.batch_size\n    k_folds_instance = net.k_folds\n    optimizer_instance = net.optimizer\n    patience_instance = net.patience\n    sgd_momentum_instance = net.sgd_momentum\n    removed_attributes, net = get_removed_attributes_and_base_net(net)\n    metric_values = {}\n    loss_values = {}\n    try:\n        device = getDevice(device=device)\n        if torch.cuda.is_available():\n            device = \"cuda:0\"\n            if torch.cuda.device_count() &gt; 1:\n                print(\"We will use\", torch.cuda.device_count(), \"GPUs!\")\n                net = nn.DataParallel(net)\n        net.to(device)\n        optimizer = optimizer_handler(\n            optimizer_name=optimizer_instance,\n            params=net.parameters(),\n            lr_mult=lr_mult_instance,\n            sgd_momentum=sgd_momentum_instance,\n        )\n        kfold = KFold(n_splits=k_folds_instance, shuffle=shuffle)\n        for fold, (train_ids, val_ids) in enumerate(kfold.split(dataset)):\n            print(f\"Fold: {fold + 1}\")\n            train_subsampler = torch.utils.data.SubsetRandomSampler(train_ids)\n            val_subsampler = torch.utils.data.SubsetRandomSampler(val_ids)\n            trainloader = torch.utils.data.DataLoader(\n                dataset, batch_size=batch_size_instance, \n                sampler=train_subsampler, num_workers=num_workers\n            )\n            valloader = torch.utils.data.DataLoader(\n                dataset, batch_size=batch_size_instance, \n                sampler=val_subsampler, num_workers=num_workers\n            )\n            # each fold starts with new weights:\n            reset_weights(net)\n            # Early stopping parameters\n            best_val_loss = float(\"inf\")\n            counter = 0\n            for epoch in range(epochs_instance):\n                print(f\"Epoch: {epoch + 1}\")\n                # training loss from one epoch:\n                training_loss = train_one_epoch(\n                    net=net,\n                    trainloader=trainloader,\n                    batch_size=batch_size_instance,\n                    loss_function=loss_function,\n                    optimizer=optimizer,\n                    device=device,\n                    show_batch_interval=show_batch_interval,\n                    task=task,\n                )\n                # Early stopping check. Calculate validation loss from one epoch:\n                metric_values[fold], loss_values[fold] = validate_one_epoch(\n                    net, valloader=valloader, loss_function=loss_function, \n                    metric=metric, device=device, task=task\n                )\n                # Log the running loss averaged per batch\n                metric_name = \"Metric\"\n                if metric is None:\n                    metric_name = type(metric).__name__\n                    print(f\"{metric_name} value on hold-out data: \n                        {metric_values[fold]}\")\n                if writer is not None:\n                    writer.add_scalars(\n                        \"evaluate_cv fold:\" + str(fold + 1) + \n                        \". Train & Val Loss and Val Metric\" + writerId,\n                        {\"Train loss\": training_loss, \"Val loss\": \n                        loss_values[fold], metric_name: metric_values[fold]},\n                        epoch + 1,\n                    )\n                    writer.flush()\n                if loss_values[fold] &lt; best_val_loss:\n                    best_val_loss = loss_values[fold]\n                    counter = 0\n                    # save model:\n                    if path is not None:\n                        torch.save(net.state_dict(), path)\n                else:\n                    counter += 1\n                    if counter &gt;= patience_instance:\n                        print(f\"Early stopping at epoch {epoch}\")\n                        break\n        df_eval = sum(loss_values.values()) / len(loss_values.values())\n        df_metrics = sum(metric_values.values()) / len(metric_values.values())\n        df_preds = np.nan\n    except Exception as err:\n        print(f\"Error in Net_Core. Call to evaluate_cv() failed. {err=}, \n            {type(err)=}\")\n        df_eval = np.nan\n        df_preds = np.nan\n    add_attributes(net, removed_attributes)\n    if writer is not None:\n        metric_name = \"Metric\"\n        if metric is None:\n            metric_name = type(metric).__name__\n        writer.add_scalars(\n            \"CV: Val Loss and Val Metric\" + writerId,\n            {\"CV-loss\": df_eval, metric_name: df_metrics},\n            epoch + 1,\n        )\n        writer.flush()\n    return df_eval, df_preds, df_metrics\n\nThe method train_fold() is implemented as shown above.\nThe method validate_one_epoch() is implemented as shown above. In contrast to the hold-out setting, it is called for each of the \\(k\\) folds. The results are stored in a dictionaries metric_values and loss_values. The results are averaged over the \\(k\\) folds and returned as df_eval.\n\n\n\n16.14.1.3 Detailed Description of the \"test_cv\" Setting\nIt uses the loss function specfied in fun_control and the metric specified in fun_control.\n\nFirst, the method HyperTorch().fun_torch is called.\nfun_torc() calls spotPython.torch.traintest.evaluate_cv() as follows:\n\ndf_eval, _ = evaluate_cv(\n    model,\n    dataset=fun_control[\"test\"],\n    shuffle=self.fun_control[\"shuffle\"],\n    device=self.fun_control[\"device\"],\n    show_batch_interval=self.fun_control[\"show_batch_interval\"],\n    task=self.fun_control[\"task\"],\n    writer=self.fun_control[\"writer\"],\n    writerId=config_id,\n)\nNote: The data set fun_control[\"test\"] is used for CV. The rest is the same as for the \"train_cv\" setting.\n\n\n16.14.1.4 Detailed Description of the Final Model Training and Evaluation\nThere are two methods that can be used for the final evaluation of a Pytorch model:\n\n\"train_tuned and\n\"test_tuned\".\n\ntrain_tuned() is just a wrapper to evaluate_hold_out using the train data set. It is implemented as follows:\ndef train_tuned(\n    net,\n    train_dataset,\n    shuffle,\n    loss_function,\n    metric,\n    device=None,\n    show_batch_interval=10_000,\n    path=None,\n    task=None,\n    writer=None,\n):\n    evaluate_hold_out(\n        net=net,\n        train_dataset=train_dataset,\n        shuffle=shuffle,\n        test_dataset=None,\n        loss_function=loss_function,\n        metric=metric,\n        device=device,\n        show_batch_interval=show_batch_interval,\n        path=path,\n        task=task,\n        writer=writer,\n    )\nThe test_tuned() procedure is implemented as follows:\ndef test_tuned(net, shuffle, test_dataset=None, loss_function=None,\n    metric=None, device=None, path=None, task=None):\n    batch_size_instance = net.batch_size\n    removed_attributes, net = get_removed_attributes_and_base_net(net)\n    if path is not None:\n        net.load_state_dict(torch.load(path))\n        net.eval()\n    try:\n        device = getDevice(device=device)\n        if torch.cuda.is_available():\n            device = \"cuda:0\"\n            if torch.cuda.device_count() &gt; 1:\n                print(\"We will use\", torch.cuda.device_count(), \"GPUs!\")\n                net = nn.DataParallel(net)\n        net.to(device)\n        valloader = torch.utils.data.DataLoader(\n            test_dataset, batch_size=int(batch_size_instance),\n            shuffle=shuffle, \n            num_workers=0\n        )\n        metric_value, loss = validate_one_epoch(\n            net, valloader=valloader, loss_function=loss_function,\n            metric=metric, device=device, task=task\n        )\n        df_eval = loss\n        df_metric = metric_value\n        df_preds = np.nan\n    except Exception as err:\n        print(f\"Error in Net_Core. Call to test_tuned() failed. {err=}, \n            {type(err)=}\")\n        df_eval = np.nan\n        df_metric = np.nan\n        df_preds = np.nan\n    add_attributes(net, removed_attributes)\n    print(f\"Final evaluation: Validation loss: {df_eval}\")\n    print(f\"Final evaluation: Validation metric: {df_metric}\")\n    print(\"----------------------------------------------\")\n    return df_eval, df_preds, df_metric"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Bartz, Eva, Thomas Bartz-Beielstein, Martin Zaefferer, and Olaf\nMersmann, eds. 2022. Hyperparameter Tuning for\nMachine and Deep Learning with R - A Practical Guide.\nSpringer.\n\n\nBartz-Beielstein, Thomas. 2023. “PyTorch\nHyperparameter Tuning with SPOT: Comparison with Ray\nTuner and Default Hyperparameters on\nCIFAR10.” https://github.com/sequential-parameter-optimization/spotPython/blob/main/notebooks/14_spot_ray_hpt_torch_cifar10.ipynb.\n\n\nBartz-Beielstein, Thomas, Jürgen Branke, Jörn Mehnen, and Olaf Mersmann.\n2014. “Evolutionary Algorithms.” Wiley\nInterdisciplinary Reviews: Data Mining and Knowledge Discovery 4\n(3): 178–95.\n\n\nBartz-Beielstein, Thomas, Carola Doerr, Jakob Bossek, Sowmya\nChandrasekaran, Tome Eftimov, Andreas Fischbach, Pascal Kerschke, et al.\n2020. “Benchmarking in Optimization: Best Practice and Open\nIssues.” arXiv. https://arxiv.org/abs/2007.03488.\n\n\nBartz-Beielstein, Thomas, Christian Lasarczyk, and Mike Preuss. 2005.\n“Sequential Parameter Optimization.” In\nProceedings 2005 Congress on Evolutionary\nComputation (CEC’05), Edinburgh, Scotland, edited by B McKay\net al., 773–80. Piscataway NJ: IEEE Press.\n\n\nLewis, R M, V Torczon, and M W Trosset. 2000. “Direct search methods: Then and now.”\nJournal of Computational and Applied Mathematics 124 (1–2):\n191–207.\n\n\nLi, Lisha, Kevin Jamieson, Giulia DeSalvo, Afshin Rostamizadeh, and\nAmeet Talwalkar. 2016. “Hyperband: A Novel\nBandit-Based Approach to Hyperparameter Optimization.”\narXiv e-Prints, March, arXiv:1603.06560.\n\n\nMeignan, David, Sigrid Knust, Jean-Marc Frayet, Gilles Pesant, and\nNicolas Gaud. 2015. “A Review and Taxonomy of\nInteractive Optimization Methods in Operations Research.”\nACM Transactions on Interactive Intelligent Systems, September.\n\n\nMontiel, Jacob, Max Halford, Saulo Martiello Mastelini, Geoffrey\nBolmier, Raphael Sourty, Robin Vaysse, Adil Zouitine, et al. 2021.\n“River: Machine Learning for Streaming Data in Python.”\n\n\nPyTorch. 2023a. “Hyperparameter Tuning with Ray Tune.” https://pytorch.org/tutorials/beginner/hyperparameter_tuning_tutorial.html.\n\n\n———. 2023b. “Training a Classifier.” https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html."
  }
]