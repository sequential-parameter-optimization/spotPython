[
  {
    "objectID": "bart23e.html",
    "href": "bart23e.html",
    "title": "PyTorch Hyperparameter Tuning — A Tutorial for spotPython",
    "section": "",
    "text": "Hyperparameter tuning is an important, but often difficult and computationally intensive task. Changing the architecture of a neural network or the learning rate of an optimizer can have a significant impact on the performance .\nThe goal of hyperparameter tuning is to optimize the hyperparameters in a way that improves the performance of the machine learning or deep learning model. The simplest, but also most computationally expensive, approach uses manual search (or trial-and-error (Meignan et al. 2015)). Commonly encountered is simple random search, i.e., random and repeated selection of hyperparameters for evaluation, and lattice search (“grid search”). In addition, methods that perform directed search and other model-free algorithms, i.e., algorithms that do not explicitly rely on a model, e.g., evolution strategies (Bartz-Beielstein et al. 2014) or pattern search (Lewis, Torczon, and Trosset 2000) play an important role. Also, “hyperband”, i.e., a multi-armed bandit strategy that dynamically allocates resources to a set of random configurations and uses successive bisections to stop configurations with poor performance (Li et al. 2016), is very common in hyperparameter tuning. The most sophisticated and efficient approaches are the Bayesian optimization and surrogate model based optimization methods, which are based on the optimization of cost functions determined by simulations or experiments.\nWe consider below a surrogate model based optimization-based hyperparameter tuning approach based on the Python version of the SPOT (“Sequential Parameter Optimization Toolbox”) (Bartz-Beielstein, Lasarczyk, and Preuss 2005), which is suitable for situations where only limited resources are available. This may be due to limited availability and cost of hardware, or due to the fact that confidential data may only be processed locally, e.g., due to legal requirements. Furthermore, in our approach, the understanding of algorithms is seen as a key tool for enabling transparency and explainability. This can be enabled, for example, by quantifying the contribution of machine learning and deep learning components (nodes, layers, split decisions, activation functions, etc.). Understanding the importance of hyperparameters and the interactions between multiple hyperparameters plays a major role in the interpretability and explainability of machine learning models. SPOT provides statistical tools for understanding hyperparameters and their interactions. Last but not least, it should be noted that the SPOT software code is available in the open source spotPython package on github1, allowing replicability of the results. This tutorial descries the Python variant of SPOT, which is called spotPython. The R implementation is described in Bartz et al. (2022). SPOT is an established open source software that has been maintained for more than 15 years (Bartz-Beielstein, Lasarczyk, and Preuss 2005) (Bartz et al. 2022).\nThis tutorial is structured as follows. The concept of the hyperparameter tuning software spotPython is described in Section 2. Section 3 describes the integration of spotPython into the PyTorch training workflow and presents the results. Finally, Section 5 presents a summary and an outlook.\n\n\n\n\n\n\nNote\n\n\n\nThe corresponding .ipynb notebook (Bartz-Beielstein 2023) is updated regularly and reflects updates and changes in the spotPython package. It can be downloaded from https://github.com/sequential-parameter-optimization/spotPython/blob/main/notebooks/14_spot_ray_hpt_torch_cifar10.ipynb."
  },
  {
    "objectID": "bart23e.html#initialization-of-the-fun_control-dictionary",
    "href": "bart23e.html#initialization-of-the-fun_control-dictionary",
    "title": "PyTorch Hyperparameter Tuning — A Tutorial for spotPython",
    "section": "Initialization of the fun_control Dictionary",
    "text": "Initialization of the fun_control Dictionary\nspotPython uses a dictionary for storing the information required for the hyperparameter tuning process. This dictionary is called fun_control and is initialized with the function fun_control_init. The function fun_control_init returns a skeleton dictionary. The dictionary is filled with the required information for the hyperparameter tuning process. It stores the hyperparameter tuning settings, e.g., the deep learning network architecture that should be tuned, the classification (or regression) problem, and the data that is used for the tuning. The dictionary is used as an input for the SPOT function.\n\nfun_control = fun_control_init()"
  },
  {
    "objectID": "bart23e.html#sec-data-loading",
    "href": "bart23e.html#sec-data-loading",
    "title": "PyTorch Hyperparameter Tuning — A Tutorial for spotPython",
    "section": "Data Loading",
    "text": "Data Loading\nThe data loading process is implemented in the same manner as described in the Section “Data loaders” in PyTorch (2023a). The data loaders are wrapped into the function load_data. A global data directory is used, which allows sharing the data directory between different trials.\n\ndef load_data(data_dir=\"./data\"):\n    transform = transforms.Compose([\n        transforms.ToTensor(),\n        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n    ])\n\n    trainset = torchvision.datasets.CIFAR10(\n        root=data_dir, train=True, download=True, transform=transform)\n\n    testset = torchvision.datasets.CIFAR10(\n        root=data_dir, train=False, download=True, transform=transform)\n\n    return trainset, testset\n\nThe test and train data are added to the dictionary fun_control.\n\ntrain, test = load_data()\nn_samples = len(train)\n# add the dataset to the fun_control\nfun_control.update({\n    \"train\": train,\n    \"test\": test,\n    \"n_samples\": n_samples})"
  },
  {
    "objectID": "bart23e.html#sec-specification-of-preprocessing-model",
    "href": "bart23e.html#sec-specification-of-preprocessing-model",
    "title": "PyTorch Hyperparameter Tuning — A Tutorial for spotPython",
    "section": "Specification of the Preprocessing Model",
    "text": "Specification of the Preprocessing Model\nAfter the training and test data are specified and added to the fun_control dictionary, spotPython allows the specification of a data preprocessing pipeline, e.g., for the scaling of the data or for the one-hot encoding of categorical variables. The preprocessing model is called prep_model (“preparation” or pre-processing) and includes steps that are not subject to the hyperparameter tuning process. The preprocessing model is specified in the fun_control dictionary. The preprocessing model can be implemented as a sklearn pipeline. The following code shows a typical preprocessing pipeline:\n\ncategorical_columns = [\"cities\", \"colors\"]\none_hot_encoder = OneHotEncoder(handle_unknown=\"ignore\", sparse_output=False)\nprep_model = ColumnTransformer(\n        transformers=[\n             (\"categorical\", one_hot_encoder, categorical_columns),\n         ],\n         remainder=StandardScaler(),\n     )\n\nBecause the Ray Tune (ray[tune]) hyperparameter tuning as described in PyTorch (2023a) does not use a preprocessing model, the preprocessing model is set to None here.\n\nprep_model = None\nfun_control.update({\"prep_model\": prep_model})"
  },
  {
    "objectID": "bart23e.html#sec-selection-of-the-algorithm",
    "href": "bart23e.html#sec-selection-of-the-algorithm",
    "title": "PyTorch Hyperparameter Tuning — A Tutorial for spotPython",
    "section": "Select algorithm and core_model_hyper_dict",
    "text": "Select algorithm and core_model_hyper_dict\nThe same neural network model as implemented in the section “Configurable neural network” of the PyTorch tutorial (PyTorch 2023a) is used here. We will show the implementation from PyTorch (2023a) in Section 4.4.1 first, before the extended implementation with spotPython is shown in Section 4.4.2.\n\nImplementing a Configurable Neural Network With Ray Tune\nWe used the same hyperparameters that are implemented as configurable in the PyTorch tutorial. We specify the layer sizes, namely l1 and l2, of the fully connected layers:\n\nclass Net(nn.Module):\n    def __init__(self, l1=120, l2=84):\n        super(Net, self).__init__()\n        self.conv1 = nn.Conv2d(3, 6, 5)\n        self.pool = nn.MaxPool2d(2, 2)\n        self.conv2 = nn.Conv2d(6, 16, 5)\n        self.fc1 = nn.Linear(16 * 5 * 5, l1)\n        self.fc2 = nn.Linear(l1, l2)\n        self.fc3 = nn.Linear(l2, 10)\n\n    def forward(self, x):\n        x = self.pool(F.relu(self.conv1(x)))\n        x = self.pool(F.relu(self.conv2(x)))\n        x = x.view(-1, 16 * 5 * 5)\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\n\nThe learning rate, i.e., lr, of the optimizer is made configurable, too:\n\noptimizer = optim.SGD(net.parameters(), lr=config[\"lr\"], momentum=0.9)\n\n\n\nImplementing a Configurable Neural Network With spotPython\nspotPython implements a class which is similar to the class described in the PyTorch tutorial. The class is called Net_CIFAR10 and is implemented in the file netcifar10.py.\n\nimport spotPython.torch.netcore as netcore\nclass Net_CIFAR10(netcore.Net_Core):\n    def __init__(self, l1, l2, lr, batch_size, epochs, k_folds, patience):\n        super(Net_CIFAR10, self).__init__(\n            lr=lr, batch_size=batch_size, epochs=epochs, k_folds=k_folds,\n            patience=patience\n        )\n        self.conv1 = nn.Conv2d(3, 6, 5)\n        self.pool = nn.MaxPool2d(2, 2)\n        self.conv2 = nn.Conv2d(6, 16, 5)\n        self.fc1 = nn.Linear(16 * 5 * 5, l1)\n        self.fc2 = nn.Linear(l1, l2)\n        self.fc3 = nn.Linear(l2, 10)\n\n    def forward(self, x):\n        x = self.pool(F.relu(self.conv1(x)))\n        x = self.pool(F.relu(self.conv2(x)))\n        x = x.view(-1, 16 * 5 * 5)\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\n\nNet_CIFAR10 inherits from the class Net_Core which is implemented in the file netcore.py. It implements the additional attributes that are common to all neural network models. The attributes are the learning rate lr, the batch size batch_size, the number of epochs epochs, the number of folds k_folds for the cross validation, and the patience patience for the early stopping. The class Net_Core is shown below.\n\nfrom torch import nn\n\n\nclass Net_Core(nn.Module):\n    def __init__(self, lr, batch_size, epochs, k_folds, patience):\n        super(Net_Core, self).__init__()\n        self.lr = lr\n        self.batch_size = batch_size\n        self.epochs = epochs\n        self.k_folds = k_folds\n        self.patience = patience\n\n\n\nComparison of the Approach Described in the PyTorch Tutorial With spotPython\nComparing the class Net from the PyTorch tutorial and the class Net_CIFAR10 from spotPython, we see that the class Net_CIFAR10 has additional attributes and does not inherit from nn directly. It adds an additional class, Net_core, that takes care of additional attributes that are common to all neural network models, e.g., the learning rate lr or the batch size batch_size.\nspotPython’s core_model implements an instance of the Net_CIFAR10 class. In addition to the basic neural network model, the core_model can use these additional attributes. spotPython provides methods for handling these additional attributes to guarantee 100% compatibility with the PyTorch classes. The method add_core_model_to_fun_control adds the hyperparameters and additional attributes to the fun_control dictionary. The method is shown below.\n\ncore_model = Net_CIFAR10\nfun_control = add_core_model_to_fun_control(core_model=core_model,\n                              fun_control=fun_control,\n                              hyper_dict=TorchHyperDict,\n                              filename=None)\n\n\n\n\n\n\n\nNote\n\n\n\nIn addition to the class Net from the PyTorch tutorial, the class Net_CIFAR10 has additional attributes, e.g.:\n\nlearning rate (lr),\nbatch size (batch_size),\nepochs (epochs),\nk_folds (k_folds), and\nearly stopping criterion “patience” (patience)\n\nFurther attributes can be easily added to the class, e.g., optimizer or loss_function."
  },
  {
    "objectID": "bart23e.html#sec-search-space",
    "href": "bart23e.html#sec-search-space",
    "title": "PyTorch Hyperparameter Tuning — A Tutorial for spotPython",
    "section": "The Search Space",
    "text": "The Search Space\nIn Section 4.5.1, we first describe how to configure the search space with ray[tune] (as shown in PyTorch (2023a)) and then how to configure the search space with spotPython in Section 4.5.2.\n\nConfiguring the Search Space With Ray Tune\nRay Tune’s search space can be configured as follows (PyTorch 2023a):\n\nconfig = {\n    \"l1\": tune.sample_from(lambda _: 2**np.random.randint(2, 9)),\n    \"l2\": tune.sample_from(lambda _: 2**np.random.randint(2, 9)),\n    \"lr\": tune.loguniform(1e-4, 1e-1),\n    \"batch_size\": tune.choice([2, 4, 8, 16])\n}\n\nThe tune.sample_from() function enables the user to define sample methods to obtain hyperparameters. In this example, the l1 and l2 parameters should be powers of 2 between 4 and 256, so either 4, 8, 16, 32, 64, 128, or 256. The lr (learning rate) should be uniformly sampled between 0.0001 and 0.1. Lastly, the batch size is a choice between 2, 4, 8, and 16.\nAt each trial, ray[tune] will randomly sample a combination of parameters from these search spaces. It will then train a number of models in parallel and find the best performing one among these. ray[tune] uses the ASHAScheduler which will terminate bad performing trials early.\n\n\nConfiguring the Search Space With spotPython\n\nThe hyper_dict Hyperparameters for the Selected Algorithm\nspotPython uses simple JSON files for the specification of the hyperparameters. Users can specify their individual JSON files, or they can use the JSON files provided by spotPython. The JSON file for the core_model is called torch_hyper_dict.json.\nEach entry in the JSON file represents one hyperparameter with the following structure: type, default, transform, lower, and upper. The corresponding entries for the Net_CIFAR10 class are shown below.\n{\"Net_CIFAR10\":\n    {\n        \"l1\": {\n            \"type\": \"int\",\n            \"default\": 5,\n            \"transform\": \"transform_power_2_int\",\n            \"lower\": 2,\n            \"upper\": 9},\n        \"l2\": {\n            \"type\": \"int\",\n            \"default\": 5,\n            \"transform\": \"transform_power_2_int\",\n            \"lower\": 2,\n            \"upper\": 9},\n        \"lr\": {\n            \"type\": \"float\",\n            \"default\": 1e-03,\n            \"transform\": \"None\",\n            \"lower\": 1e-05,\n            \"upper\": 1e-02},\n        \"batch_size\": {\n            \"type\": \"int\",\n            \"default\": 4,\n            \"transform\": \"transform_power_2_int\",\n            \"lower\": 1,\n            \"upper\": 4},\n        \"epochs\": {\n            \"type\": \"int\",\n            \"default\": 3,\n            \"transform\": \"transform_power_2_int\",\n            \"lower\": 1,\n            \"upper\": 4},\n        \"k_folds\": {\n            \"type\": \"int\",\n            \"default\": 2,\n            \"transform\": \"None\",\n            \"lower\": 2,\n            \"upper\": 3},\n        \"patience\": {\n            \"type\": \"int\",\n            \"default\": 5,\n            \"transform\": \"None\",\n            \"lower\": 2,\n            \"upper\": 10}\n    }\n}\n\n\nCategorical Hyperparameters\nIn contrast to ray[tune], spotPython can handle numerical, boolean, and categorical hyperparameters. Since ray[tune] does not tune categorical hyperparameters, they are not used here. However, they can be specified in the JSON file in a similar way as the numerical hyperparameters as shown below:\n\"factor_hyperparameter\": {\n    \"levels\": [\"A\", \"B\", \"C\"],\n    \"type\": \"factor\",\n    \"default\": \"B\",\n    \"transform\": \"None\",\n    \"core_model_parameter_type\": \"str\",\n    \"lower\": 0,\n    \"upper\": 2},"
  },
  {
    "objectID": "bart23e.html#sec-modification-of-hyperparameters",
    "href": "bart23e.html#sec-modification-of-hyperparameters",
    "title": "PyTorch Hyperparameter Tuning — A Tutorial for spotPython",
    "section": "Modifying the Hyperparameters",
    "text": "Modifying the Hyperparameters\nRay tune (PyTorch 2023a) does not provide a way to change the specified hyperparameters without re-compilation. However, spotPython provides functions for modifying the hyperparameters, their bounds and factors as well as for activating and de-activating hyperparameters without re-compilation of the Python source code. These functions are described in the following.\n\nModify hyper_dict Hyperparameters for the Selected Algorithm aka core_model\nAfter specifying the model, the corresponding hyperparameters, their types and bounds are loaded from the JSON file torch_hyper_dict.json. After loading, the user can modify the hyperparameters, e.g., the bounds. spotPython provides a simple rule for de-activating hyperparameters: If the lower and the upper bound are set to identical values, the hyperparameter is de-activated. This is useful for the hyperparameter tuning, because it allows to specify a hyperparameter in the JSON file, but to de-activate it in the fun_control dictionary. This is done in the next step.\n\n\nModify Hyperparameters of Type numeric and integer (boolean)\nSince the hyperparameter k_folds is not used in the PyTorch tutorial, it is de-activated here by setting the lower and upper bound to the same value. Note, k_folds is of type “integer”.\n\nfun_control = modify_hyper_parameter_bounds(fun_control, \"batch_size\", bounds=[1, 5])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"k_folds\", bounds=[0, 0])\nfun_control = modify_hyper_parameter_bounds(fun_control, \"patience\", bounds=[5, 5])\nfun_control[\"core_model_hyper_dict\"]\n\n\n\nModify Hyperparameter of Type factor\nIn a similar manner as for the numerical hyperparameters, the categorical hyperparameters can be modified. For example, the hyperparameter optimizer is de-activated here by choosing only one value, here: \"SGD\".\n\nfun_control = modify_hyper_parameter_levels(fun_control, \"optimizer\", [\"SGD\"])\n\nNew configurations can be chosen by adding or deleting levels. For example, the hyperparameter optimizer can be re-configured as follows:\n\nfun_control = modify_hyper_parameter_levels(fun_control, \"optimizer\", [\"SGD\", \"Adam\"])\n\nIn this case, two optimizers (\"SGD\" and \"Adam\") are compared during the spotPython hyperparameter tuning. Now, the hyperparameter optimizer is active again."
  },
  {
    "objectID": "bart23e.html#sec-selection-of-target-function",
    "href": "bart23e.html#sec-selection-of-target-function",
    "title": "PyTorch Hyperparameter Tuning — A Tutorial for spotPython",
    "section": "Evaluation",
    "text": "Evaluation\nThe evaluation procedure requires the specification of two elements:\n\nthe way how the data is split into a train and a test set and\nthe loss function (and a metric).\n\n\nHold-out Data Split and Cross-Validation\nAs a default, spotPython provides a standard hold-out data split and cross validation.\n\nHold-out Data Split\nIf a hold-out data split is used, the data will be partitioned into a training, a validation, and a test data set. The split depends on the setting of the eval parameter. If eval is set to train_hold_out, one data set, usually the original training data set, is split into a new training and a validation data set. The training data set is used for training the model. The validation data set is used for the evaluation of the hyperparameter configuration and early stopping to prevent overfitting. In this case, the original test data set is not used. The following splits are performed in the hold-out setting: \\(\\{\\text{train}_0, \\text{test}\\} \\rightarrow \\{\\text{train}_1, \\text{validation}_1, \\text{test}\\}\\), where \\(\\text{train}_1 \\cup \\text{validation}_1 = \\text{train}_0\\).\n\n\n\n\n\n\nNote\n\n\n\nspotPython returns the hyperparameters of the machine learning and deep learning models, e.g., number of layers, learning rate, or optimizer, but not the model weights. Therefore, after the SPOT run is finished, the corresponding model has to be trained again with the best hyperparameter configuration. The training is performed on the training data set. The test data set is used for the final evaluation of the model.\nSummarizing, the following splits are performed in the hold-out setting:\n\nRun spotPython with eval set to train_hold_out to determine the best hyperparameter configuration.\nTrain the model with the best hyperparameter configuration on the training data set:\n\ntrain_save(model_spot, train, \"model_spot.pt\").\n\nTest the model on the test data:\n\ntest_saved(model_spot, test, \"model_spot.pt\")\n\n\nThese steps will be exemplified in the following sections.\n\n\nIn addition to this hold-out setting, spotPython provides another hold-out setting, where an explicit test data is specified by the user that will be used as the validation set. To choose this option, the eval parameter is set to test_hold_out. In this case, the training data set is used for the model training. Then, the explicitly defined test data set is used for the evaluation of the hyperparameter configuration (the validation).\n\n\nCross-Validation\nThe cross validation setting is used by setting the eval parameter to train_cv or test_cv. In both cases, the data set is split into \\(k\\) folds. The model is trained on \\(k-1\\) folds and evaluated on the remaining fold. This is repeated \\(k\\) times, so that each fold is used exactly once for evaluation. The final evaluation is performed on the test data set. The cross validation setting is useful for small data sets, because it allows to use all data for training and evaluation. However, it is computationally expensive, because the model has to be trained \\(k\\) times.\n\n\n\n\n\n\nNote\n\n\n\nCombinations of the above settings are possible, e.g., cross validation can be used for training and hold-out for evaluation or . Also, cross validation can be used for training and testing. Because cross validation is not used in the PyTorch tutorial (PyTorch 2023a), it is not considered further here.\n\n\n\n\n\nLoss Functions and Metrics\nThe key \"criterion\" specifies the loss function which is used during the optimization. There are several different loss functions under PyTorch’s nn package. For example, a simple loss is MSELoss, which computes the mean-squared error between the output and the target. In this tutorial we will use CrossEntropyLoss, because it is also used in the PyTorch tutorial.\nIn addition to the loss function, spotPython provides access to a large number of metrics. The key \"metric_sklearn\" is used for metrics that follow the scikit-learn conventions4. Because the PyTorch tutorial uses the accuracy as metric, we use the same metric here. Currently, accuracy is computed in the tutorial’s example code. Therefore, we will use the same implementation here and set the key \"metric_sklearn\" to None.\n\nweights = 1.0\ncriterion = CrossEntropyLoss\nshuffle = True\neval = \"train_hold_out\"\ndevice = DEVICE\nshow_batch_interval = 100_000\nsave_model = True\npath=\"torch_model.pt\"\n\nfun_control.update({\n               \"data_dir\": None,\n               \"checkpoint_dir\": None,\n               \"horizon\": None,\n               \"oml_grace_period\": None,\n               \"weights\": weights,\n               \"step\": None,\n               \"log_level\": 50,\n               \"weight_coeff\": None,\n               \"metric\": None,\n               \"metric_sklearn\": None,\n               \"criterion\": criterion,\n               \"shuffle\": shuffle,\n               \"eval\": eval,\n               \"device\": device,\n               \"show_batch_interval\": show_batch_interval,\n               \"save_model\": save_model,\n               \"path\": path,\n               })"
  },
  {
    "objectID": "bart23e.html#sec-call-the-hyperparameter-tuner",
    "href": "bart23e.html#sec-call-the-hyperparameter-tuner",
    "title": "PyTorch Hyperparameter Tuning — A Tutorial for spotPython",
    "section": "Calling the SPOT Function",
    "text": "Calling the SPOT Function\nNow, the dictionary fun_control contains all information needed for the hyperparameter tuning. Before the hyperparameter tuning is started, it is recommended to take a look at the experimental design. The method gen_design_table generates a design table as follows:\n\nprint(gen_design_table(fun_control))\n\nThis allows to check if all information is available and if the information is correct. Table 1 shows the experimental design for the hyperparameter tuning. Hyperparameter transformations are shown in the column “transform”, e.g., the l1 default is 5, which results in the value \\(2^5 = 32\\) for the network, because the transformation transform_power_2_int was selected in the JSON file. The default value of the batch_size is set to 4, which results in a batch size of \\(2^4 = 16\\).\n\n\nTable 1: Experimental design for the hyperparameter tuning. The table shows the hyperparameters, their types, default values, lower and upper bounds, and the transformation function. The transformation function is used to transform the hyperparameter values from the unit hypercube to the original domain. The transformation function is applied to the hyperparameter values before the evaluation of the objective function.\n\n\n\n\n\n\n\n\n\n\nname\ntype\ndefault\nlower\nupper\ntransform\n\n\n\n\nl1\nint\n5\n2\n9\ntransform_power_2_int\n\n\nl2\nint\n5\n2\n9\ntransform_power_2_int\n\n\nlr\nfloat\n0.001\n1e-05\n0.01\nNone\n\n\nbatch_size\nint\n4\n1\n4\ntransform_power_2_int\n\n\nepochs\nint\n3\n3\n4\ntransform_power_2_int\n\n\nk_folds\nint\n2\n0\n0\nNone\n\n\n\n\nThe objective function fun_torch is selected next. It implements an interface from PyTorch’s training, validation, and testing methods to spotPython.\n\nfun = HyperTorch().fun_torch\n\nThe spotPython hyperparameter tuning is started by calling the Spot function. Here, we will run the tuner for approx. 30 minutes (max_time). Note: the initial design is always evaluated in the spotPython run. As a consequence, the run may take longer than specified by max_time, because the evaluation time of initial design (here: init_size, 10 points) is performed independently of max_time.\n\nspot_tuner = spot.Spot(fun=fun,\n                   lower = lower,\n                   upper = upper,\n                   fun_evals = inf,\n                   fun_repeats = 1,\n                   max_time = MAX_TIME,\n                   noise = False,\n                   tolerance_x = np.sqrt(np.spacing(1)),\n                   var_type = var_type,\n                   var_name = var_name,\n                   infill_criterion = \"y\",\n                   n_points = 1,\n                   seed=123,\n                   log_level = 50,\n                   show_models= False,\n                   show_progress= True,\n                   fun_control = fun_control,\n                   design_control={\"init_size\": INIT_SIZE,\n                                   \"repeats\": 1},\n                   surrogate_control={\"noise\": True,\n                                      \"cod_type\": \"norm\",\n                                      \"min_theta\": -4,\n                                      \"max_theta\": 3,\n                                      \"n_theta\": len(var_name),\n                                      \"model_optimizer\": differential_evolution,\n                                      \"model_fun_evals\": 10_000,\n                                      \"log_level\": 50\n                                      })\nspot_tuner.run(X_start=X_start)\n\nDuring the run, the following output is shown:\nEpoch: 9\nBatch:  1000. Batch Size: 4. Training Loss (running): 2.308\nBatch:  2000. Batch Size: 4. Training Loss (running): 1.153\nBatch:  3000. Batch Size: 4. Training Loss (running): 0.769\nBatch:  4000. Batch Size: 4. Training Loss (running): 0.576\nBatch:  5000. Batch Size: 4. Training Loss (running): 0.461\nBatch:  6000. Batch Size: 4. Training Loss (running): 0.384\nBatch:  7000. Batch Size: 4. Training Loss (running): 0.330\nLoss on hold-out set: 2.306006399059296\nAccuracy on hold-out set: 0.1007\nEarly stopping at epoch 8\nReturned to Spot: Validation loss: 2.306006399059296"
  },
  {
    "objectID": "bart23e.html#sec-results-tuning",
    "href": "bart23e.html#sec-results-tuning",
    "title": "PyTorch Hyperparameter Tuning — A Tutorial for spotPython",
    "section": "Results",
    "text": "Results\n\nSAVE = False\nLOAD = False\n\nif SAVE:\n    result_file_name = \"res_\" + experiment_name + \".pkl\"\n    with open(result_file_name, 'wb') as f:\n        pickle.dump(spot_tuner, f)\n\nif LOAD:\n    result_file_name = \"res_ch10-friedman-hpt-0_maans03_60min_20init_1K_2023-04-14_10-11-19.pkl\"\n    with open(result_file_name, 'rb') as f:\n        spot_tuner =  pickle.load(f)\n\nAfter the hyperparameter tuning run is finished, the progress of the hyperparameter tuning can be visualized. The following code generates the progress plot from Figure 2.\n\n\nspot_tuner.plot_progress(log_y=False, filename=\"./figures\" + experiment_name+\"_progress.pdf\")\nFigure 1: ?(caption)\n\n\n\n\n\nFigure 2: Progress plot. Black dots denote results from the initial design. Red dots illustrate the improvement found by the surrogate model based optimization (surrogate model based optimization).\n\n\nFigure 2 shows a typical behaviour that can be observed in many hyperparameter studies (Bartz et al. 2022): the largest improvement is obtained during the evaluation of the initial design. The surrogate model based optimization-optimization with the surrogate refines the results. Figure 2 also illustrates one major difference between ray[tune] as used in PyTorch (2023a) and spotPython: the ray[tune] uses a random search and will generate results similar to the black dots, whereas spotPython uses a surrogate model based optimization and presents results represented by red dots in Figure 2. The surrogate model based optimization is considered to be more efficient than a random search, because the surrogate model guides the search towards promising regions in the hyperparameter space.\nIn addition to the improved (“optimized”) hyperparameter values, spotPython allows a statistical analysis, e.g., a sensitivity analysis, of the results. We can print the results of the hyperparameter tuning, see Table 2.\n\nprint(gen_design_table(fun_control=fun_control, spot=spot_tuner))\n\n\n\nTable 2: Results of the hyperparameter tuning. The table shows the hyperparameters, their types, default values, lower and upper bounds, and the transformation function. The column “tuned” shows the tuned values. The column “importance” shows the importance of the hyperparameters. The column “stars” shows the importance of the hyperparameters in stars. The importance is computed by the SPOT software.\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\ntype\ndefault\nlower\nupper\ntuned\ntransform\nimportance\nstars\n\n\n\n\nl1\nint\n5.0\n2.0\n9.0\n6.0\npower_2_int\n74.93\n**\n\n\nl2\nint\n5.0\n2.0\n9.0\n5.0\npower_2_int\n0.00\n\n\n\nlr\nfloat\n0.001\n1e-05\n0.01\n0.0038\nNone\n100.00\n***\n\n\nbatch_size\nint\n4.0\n1.0\n5.0\n4.0\npower_2_int\n75.39\n**\n\n\nepochs\nint\n3.0\n3.0\n4.0\n4.0\npower_2_int\n0.00\n\n\n\nk_folds\nint\n2.0\n0.0\n0.0\n0.0\nNone\n0.00\n\n\n\npatience\nint\n5.0\n5.0\n5.0\n5.0\nNone\n0.00\n\n\n\n\n\nTo visualize the most important hyperparameters, spotPython provides the function plot_importance. The following code generates the importance plot from Figure 3.\n\nspot_tuner.plot_importance(threshold=0.025, filename=\"./figures\" + experiment_name+\"_importance.pdf\")\n\n\n\n\nFigure 3: Variable importance"
  },
  {
    "objectID": "bart23e.html#sec-get-spot-results",
    "href": "bart23e.html#sec-get-spot-results",
    "title": "PyTorch Hyperparameter Tuning — A Tutorial for spotPython",
    "section": "Get SPOT Results",
    "text": "Get SPOT Results\nThe architecture of the spotPython model can be obtained by the following code:\n\nX = spot_tuner.to_all_dim(spot_tuner.min_X.reshape(1,-1))\nmodel_spot = get_one_core_model_from_X(X, fun_control)\nmodel_spot\n\nFirst, the numerical representation of the hyperparameters are obtained, i.e., the numpy array X is generated. This array is then used to generate the model model_spot by the function get_one_core_model_from_X. The model model_spot has the following architecture:\nNet_CIFAR10(\n  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))\n  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n  (fc1): Linear(in_features=400, out_features=64, bias=True)\n  (fc2): Linear(in_features=64, out_features=32, bias=True)\n  (fc3): Linear(in_features=32, out_features=10, bias=True)\n)"
  },
  {
    "objectID": "bart23e.html#get-default-hyperparameters",
    "href": "bart23e.html#get-default-hyperparameters",
    "title": "PyTorch Hyperparameter Tuning — A Tutorial for spotPython",
    "section": "Get Default Hyperparameters",
    "text": "Get Default Hyperparameters\nIn a similar manner as in Section 4.10, the default hyperparameters can be obtained.\n\nvalues_default = get_default_values(fun_control)\nvalues_default = transform_hyper_parameter_values(fun_control=fun_control, hyper_parameter_values=values_default)\nprint(values_default)\nmodel_default = fun_control[\"core_model\"](**values_default)\nprint(model_default)\n\nThe corresponding default model has the following architecture:\nNet_CIFAR10(\n  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))\n  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n  (fc1): Linear(in_features=400, out_features=32, bias=True)\n  (fc2): Linear(in_features=32, out_features=32, bias=True)\n  (fc3): Linear(in_features=32, out_features=10, bias=True)\n)"
  },
  {
    "objectID": "bart23e.html#evaluation-of-the-tuned-architecture",
    "href": "bart23e.html#evaluation-of-the-tuned-architecture",
    "title": "PyTorch Hyperparameter Tuning — A Tutorial for spotPython",
    "section": "Evaluation of the Tuned Architecture",
    "text": "Evaluation of the Tuned Architecture\nThe method train_save takes a model architecture without trained weights and trains this model with the train data. The train data is split into train and validation data. The validation data is used for early stopping. The trained model weights are saved as a dictionary.\nThis evaluation is similar to the final evaluation in PyTorch (2023a).\n::: {.cell execution_count=32} {.python .cell-code}  train_save(net=model_default,train_dataset=train, shuffle=True, device = \"cpu\", show_batch_interval=1_000, path=\"model_default_trained.pt\", save_model=True)  test_saved(net=model_default,test_dataset=test, shuffle=False, device = \"cpu\", path=\"model_default_trained.pt\") :::\nThe following code trains the model model_spot and saves the weights of the trained model to the file model_spot_trained.pt.\n\ntrain_save(net=model_spot, train_dataset=train,\n                shuffle=True, path=\"model_spot_trained.pt\", save_model=True)\n\nLoss on hold-out set: 1.1649643966913223\nAccuracy on hold-out set: 0.5948\n\ntest_saved(net=model_spot, test_dataset=test,\n            shuffle=False, path=\"model_spot_trained.pt\")\n\nLoss on hold-out set: 1.1034918918132781\nAccuracy on hold-out set: 0.6184"
  },
  {
    "objectID": "bart23e.html#comparison-with-default-hyperparameters-and-ray-tune",
    "href": "bart23e.html#comparison-with-default-hyperparameters-and-ray-tune",
    "title": "PyTorch Hyperparameter Tuning — A Tutorial for spotPython",
    "section": "Comparison with Default Hyperparameters and Ray Tune",
    "text": "Comparison with Default Hyperparameters and Ray Tune\nTable 3 shows the loss and accuracy of the default model, the model with the hyperparameters from SPOT, and the model with the hyperparameters from ray[tune].\n\n\nTable 3: Comparison of the loss and accuracy of the default model, the model with the hyperparameters from SPOT, and the model with the hyperparameters from ray[tune]. ray[tune] only shows the validation loss, because training loss is not reported by ray[tune].\n\n\n\n\n\n\n\n\n\nModel\nValidation Loss\nValidation Accuracy\nLoss\nAccuracy\n\n\n\n\nDefault\n1.3152\n0.5316\n1.1561\n0.5934\n\n\nspotPython\n1.0686\n0.6291\n1.1035\n0.6184\n\n\nray[tune]\n1.1815\n0.5836\n-\n0.5806"
  },
  {
    "objectID": "bart23e.html#detailed-hyperparameter-plots",
    "href": "bart23e.html#detailed-hyperparameter-plots",
    "title": "PyTorch Hyperparameter Tuning — A Tutorial for spotPython",
    "section": "Detailed Hyperparameter Plots",
    "text": "Detailed Hyperparameter Plots\nThe contour plots in this section visualize the interactions of the three most important hyperparameters, lr, batch_size, and l1 of the surrogate model used to optimize the hyperparameters. Since these hyperparameters take integer values, a step-like fitness landcape (or response surface) is generated. SPOT draws the interactions of the main hyperparameters by default. It is also possible to visualize all interactions. For this, again refer to the notebook (Bartz-Beielstein 2023).\n\n\nthreshold = 0.025\nimpo = spot_tuner.print_importance(threshold=threshold, print_screen=True)\nvar_plots = [i for i, x in enumerate(impo) if x[1] &gt; threshold]\nmin_z = min(spot_tuner.y)\nmax_z = max(spot_tuner.y)\nn = spot_tuner.k\nfor i in var_plots:\n    for j in var_plots:\n        if j &gt; i:\n            filename = \"./figures\" + experiment_name+\"_contour_\"+str(i)+\"_\"+str(j)+\".pdf\"\n            spot_tuner.plot_contour(i=i, j=j, min_z=min_z, max_z = max_z, filename=filename)\nFigure 4: ?(caption)\n\n\n\n\n\nFigure 5: Contour plot. Learning rate versus number of neurons in layer l1.\n\n\n\n\n\nFigure 6: Contour plot. Batch size versus number of neurons in layer l1.\n\n\n\n\n\nFigure 7: Contour plot. Batch size versus learning rate.\n\n\nFigure 5 shows the contour plot of the loss as a function of the learning rate and the number of neurons in layer l1. The contour plot shows that the learning rate has a strong influence on the performance of the model. Too large values of the learning rate decrease the performance of the neural network. Figure 6 and Figure 7 indicate that the batch size should be increased. The batch size has a strong influence on the performance of the model. Too small values of the batch size decrease the performance of the neural network.\nspotPython provides additional tools for a visual inspection of the results and give valuable insights into the hyperparameter tuning process. This is especially useful for model explainability, transparency, and trustworthiness. In addition to the contour plots, Figure 9 shows the parallel plot of the hyperparameters.\n\n\nspot_tuner.parallel_plot()\nFigure 8: ?(caption)\n\n\n\n\n\nFigure 9: Parallel plot"
  },
  {
    "objectID": "bart23e.html#sample-output-from-ray-tunes-run",
    "href": "bart23e.html#sample-output-from-ray-tunes-run",
    "title": "PyTorch Hyperparameter Tuning — A Tutorial for spotPython",
    "section": "Sample Output From Ray Tune’s Run",
    "text": "Sample Output From Ray Tune’s Run\nThe output from ray[tune] could look like this (PyTorch 2023b):\nNumber of trials: 10 (10 TERMINATED)\n------+------+-------------+--------------+---------+------------+--------------------+\n|   l1 |   l2 |          lr |   batch_size |    loss |   accuracy | training_iteration |\n+------+------+-------------+--------------+---------+------------+--------------------|\n|   64 |    4 | 0.00011629  |            2 | 1.87273 |     0.244  |                  2 |\n|   32 |   64 | 0.000339763 |            8 | 1.23603 |     0.567  |                  8 |\n|    8 |   16 | 0.00276249  |           16 | 1.1815  |     0.5836 |                 10 |\n|    4 |   64 | 0.000648721 |            4 | 1.31131 |     0.5224 |                  8 |\n|   32 |   16 | 0.000340753 |            8 | 1.26454 |     0.5444 |                  8 |\n|    8 |    4 | 0.000699775 |            8 | 1.99594 |     0.1983 |                  2 |\n|  256 |    8 | 0.0839654   |           16 | 2.3119  |     0.0993 |                  1 |\n|   16 |  128 | 0.0758154   |           16 | 2.33575 |     0.1327 |                  1 |\n|   16 |    8 | 0.0763312   |           16 | 2.31129 |     0.1042 |                  4 |\n|  128 |   16 | 0.000124903 |            4 | 2.26917 |     0.1945 |                  1 |\n+-----+------+------+-------------+--------------+---------+------------+--------------------+\nBest trial config: {'l1': 8, 'l2': 16, 'lr': 0.00276249, 'batch_size': 16, 'data_dir': '...'}\nBest trial final validation loss: 1.181501\nBest trial final validation accuracy: 0.5836\nBest trial test set accuracy: 0.5806"
  },
  {
    "objectID": "bart23e.html#footnotes",
    "href": "bart23e.html#footnotes",
    "title": "PyTorch Hyperparameter Tuning — A Tutorial for spotPython",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://github.com/sequential-parameter-optimization↩︎\nAlternatively, the source code can be downloaded from gitHub: https://github.com/sequential-parameter-optimization/spotPython.↩︎\nWe were not able to install Ray Tune on our system. Therefore, we used the results from the PyTorch tutorial.↩︎\nThe key \"metric\" is used for the river based evaluation (Montiel et al. 2021) via eval_oml_iter_progressive.↩︎"
  }
]